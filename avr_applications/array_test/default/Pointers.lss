
Pointers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006a  00800100  00000c78  00000d0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c78  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d8  0080016a  0080016a  00000d76  2**0
                  ALLOC
  3 .debug_aranges 00000160  00000000  00000000  00000d76  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000066c  00000000  00000000  00000ed6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000169f  00000000  00000000  00001542  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000917  00000000  00000000  00002be1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000d59  00000000  00000000  000034f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001d0  00000000  00000000  00004254  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006c2  00000000  00000000  00004424  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000449  00000000  00000000  00004ae6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 3b 01 	jmp	0x276	; 0x276 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__vector_20>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e7       	ldi	r30, 0x78	; 120
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	aa 36       	cpi	r26, 0x6A	; 106
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	12 e0       	ldi	r17, 0x02	; 2
  8c:	aa e6       	ldi	r26, 0x6A	; 106
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 34       	cpi	r26, 0x42	; 66
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 8f 00 	call	0x11e	; 0x11e <main>
  9e:	0c 94 3a 06 	jmp	0xc74	; 0xc74 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <printMyBlock>:
*/

}

void printMyBlock(char *p,int mB)
{
  a6:	cf 92       	push	r12
  a8:	df 92       	push	r13
  aa:	ef 92       	push	r14
  ac:	ff 92       	push	r15
  ae:	0f 93       	push	r16
  b0:	1f 93       	push	r17
  b2:	cf 93       	push	r28
  b4:	df 93       	push	r29
  b6:	7c 01       	movw	r14, r24
  b8:	8b 01       	movw	r16, r22
  ba:	c0 e0       	ldi	r28, 0x00	; 0
  bc:	d0 e0       	ldi	r29, 0x00	; 0
	for(int i = 0 ; i < mB ; i++)
	{
		printf("myBlock #%d = %c\n",i,*(p+i));
  be:	80 e0       	ldi	r24, 0x00	; 0
  c0:	c8 2e       	mov	r12, r24
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	d8 2e       	mov	r13, r24
  c6:	1f c0       	rjmp	.+62     	; 0x106 <printMyBlock+0x60>
  c8:	00 d0       	rcall	.+0      	; 0xca <printMyBlock+0x24>
  ca:	00 d0       	rcall	.+0      	; 0xcc <printMyBlock+0x26>
  cc:	00 d0       	rcall	.+0      	; 0xce <printMyBlock+0x28>
  ce:	ed b7       	in	r30, 0x3d	; 61
  d0:	fe b7       	in	r31, 0x3e	; 62
  d2:	31 96       	adiw	r30, 0x01	; 1
  d4:	ad b7       	in	r26, 0x3d	; 61
  d6:	be b7       	in	r27, 0x3e	; 62
  d8:	12 96       	adiw	r26, 0x02	; 2
  da:	dc 92       	st	X, r13
  dc:	ce 92       	st	-X, r12
  de:	11 97       	sbiw	r26, 0x01	; 1
  e0:	d3 83       	std	Z+3, r29	; 0x03
  e2:	c2 83       	std	Z+2, r28	; 0x02
  e4:	d7 01       	movw	r26, r14
  e6:	ac 0f       	add	r26, r28
  e8:	bd 1f       	adc	r27, r29
  ea:	8c 91       	ld	r24, X
  ec:	84 83       	std	Z+4, r24	; 0x04
  ee:	15 82       	std	Z+5, r1	; 0x05
  f0:	0e 94 3c 03 	call	0x678	; 0x678 <printf>

}

void printMyBlock(char *p,int mB)
{
	for(int i = 0 ; i < mB ; i++)
  f4:	21 96       	adiw	r28, 0x01	; 1
  f6:	8d b7       	in	r24, 0x3d	; 61
  f8:	9e b7       	in	r25, 0x3e	; 62
  fa:	06 96       	adiw	r24, 0x06	; 6
  fc:	0f b6       	in	r0, 0x3f	; 63
  fe:	f8 94       	cli
 100:	9e bf       	out	0x3e, r25	; 62
 102:	0f be       	out	0x3f, r0	; 63
 104:	8d bf       	out	0x3d, r24	; 61
 106:	c0 17       	cp	r28, r16
 108:	d1 07       	cpc	r29, r17
 10a:	f4 f2       	brlt	.-68     	; 0xc8 <printMyBlock+0x22>
	{
		printf("myBlock #%d = %c\n",i,*(p+i));
	}
}
 10c:	df 91       	pop	r29
 10e:	cf 91       	pop	r28
 110:	1f 91       	pop	r17
 112:	0f 91       	pop	r16
 114:	ff 90       	pop	r15
 116:	ef 90       	pop	r14
 118:	df 90       	pop	r13
 11a:	cf 90       	pop	r12
 11c:	08 95       	ret

0000011e <main>:
#include "c:\avrtoolbox\libavr\source\driver\usart\usart.h" 

void printMyBlock(char *p,int mB);

int main()
{
 11e:	ef 92       	push	r14
 120:	ff 92       	push	r15
 122:	0f 93       	push	r16
 124:	1f 93       	push	r17
 126:	df 93       	push	r29
 128:	cf 93       	push	r28
 12a:	00 d0       	rcall	.+0      	; 0x12c <main+0xe>
 12c:	00 d0       	rcall	.+0      	; 0x12e <main+0x10>
 12e:	0f 92       	push	r0
 130:	cd b7       	in	r28, 0x3d	; 61
 132:	de b7       	in	r29, 0x3e	; 62
  // Initialize usart for printf
  usart0_init_baud(57600);
 134:	60 e0       	ldi	r22, 0x00	; 0
 136:	71 ee       	ldi	r23, 0xE1	; 225
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <usart0_init_baud>
  printf("Address of z: &z = 0x%p\n",&z);
  printf("Contents at address of z: "
  "(unsigned int)z = 0x%x\n",(unsigned int)z);
  printf("Contents pointed to by z: *z = 0x%x\n\n",*z);
*/
  printf("Memory:\n");
 140:	82 e1       	ldi	r24, 0x12	; 18
 142:	91 e0       	ldi	r25, 0x01	; 1
 144:	0e 94 51 03 	call	0x6a2	; 0x6a2 <puts>
  
  volatile char a = 0x11;
 148:	81 e1       	ldi	r24, 0x11	; 17
 14a:	89 83       	std	Y+1, r24	; 0x01
  volatile char b = 0x22;
 14c:	82 e2       	ldi	r24, 0x22	; 34
 14e:	8a 83       	std	Y+2, r24	; 0x02
  volatile char c = 0x33;
 150:	83 e3       	ldi	r24, 0x33	; 51
 152:	8b 83       	std	Y+3, r24	; 0x03
  volatile char *p;
  volatile char *q;

  q = (volatile char *)0x8ff;
  p = &a;
 154:	ce 01       	movw	r24, r28
 156:	01 96       	adiw	r24, 0x01	; 1
 158:	9d 83       	std	Y+5, r25	; 0x05
 15a:	8c 83       	std	Y+4, r24	; 0x04

  printf("Pointer p address: %p\n",&p);
 15c:	00 d0       	rcall	.+0      	; 0x15e <main+0x40>
 15e:	00 d0       	rcall	.+0      	; 0x160 <main+0x42>
 160:	8a e1       	ldi	r24, 0x1A	; 26
 162:	91 e0       	ldi	r25, 0x01	; 1
 164:	ad b7       	in	r26, 0x3d	; 61
 166:	be b7       	in	r27, 0x3e	; 62
 168:	12 96       	adiw	r26, 0x02	; 2
 16a:	9c 93       	st	X, r25
 16c:	8e 93       	st	-X, r24
 16e:	11 97       	sbiw	r26, 0x01	; 1
 170:	ce 01       	movw	r24, r28
 172:	04 96       	adiw	r24, 0x04	; 4
 174:	14 96       	adiw	r26, 0x04	; 4
 176:	9c 93       	st	X, r25
 178:	8e 93       	st	-X, r24
 17a:	13 97       	sbiw	r26, 0x03	; 3
 17c:	0e 94 3c 03 	call	0x678	; 0x678 <printf>
 180:	0f ef       	ldi	r16, 0xFF	; 255
 182:	18 e0       	ldi	r17, 0x08	; 8
 184:	0f 90       	pop	r0
 186:	0f 90       	pop	r0
 188:	0f 90       	pop	r0
 18a:	0f 90       	pop	r0
  
  for(int i = 0 ; i < 25 ; i++)
  {
	//printf("Content of memory location %p is: %x\n",p-i,*(p-i));
	printf("Content of memory location %p is: 0x%02x\n",q-i,*(q-i));
 18c:	91 e3       	ldi	r25, 0x31	; 49
 18e:	e9 2e       	mov	r14, r25
 190:	91 e0       	ldi	r25, 0x01	; 1
 192:	f9 2e       	mov	r15, r25
 194:	f8 01       	movw	r30, r16
 196:	80 81       	ld	r24, Z
 198:	00 d0       	rcall	.+0      	; 0x19a <main+0x7c>
 19a:	00 d0       	rcall	.+0      	; 0x19c <main+0x7e>
 19c:	00 d0       	rcall	.+0      	; 0x19e <main+0x80>
 19e:	ed b7       	in	r30, 0x3d	; 61
 1a0:	fe b7       	in	r31, 0x3e	; 62
 1a2:	31 96       	adiw	r30, 0x01	; 1
 1a4:	ad b7       	in	r26, 0x3d	; 61
 1a6:	be b7       	in	r27, 0x3e	; 62
 1a8:	12 96       	adiw	r26, 0x02	; 2
 1aa:	fc 92       	st	X, r15
 1ac:	ee 92       	st	-X, r14
 1ae:	11 97       	sbiw	r26, 0x01	; 1
 1b0:	13 83       	std	Z+3, r17	; 0x03
 1b2:	02 83       	std	Z+2, r16	; 0x02
 1b4:	84 83       	std	Z+4, r24	; 0x04
 1b6:	15 82       	std	Z+5, r1	; 0x05
 1b8:	0e 94 3c 03 	call	0x678	; 0x678 <printf>
 1bc:	01 50       	subi	r16, 0x01	; 1
 1be:	10 40       	sbci	r17, 0x00	; 0
  q = (volatile char *)0x8ff;
  p = &a;

  printf("Pointer p address: %p\n",&p);
  
  for(int i = 0 ; i < 25 ; i++)
 1c0:	ed b7       	in	r30, 0x3d	; 61
 1c2:	fe b7       	in	r31, 0x3e	; 62
 1c4:	36 96       	adiw	r30, 0x06	; 6
 1c6:	0f b6       	in	r0, 0x3f	; 63
 1c8:	f8 94       	cli
 1ca:	fe bf       	out	0x3e, r31	; 62
 1cc:	0f be       	out	0x3f, r0	; 63
 1ce:	ed bf       	out	0x3d, r30	; 61
 1d0:	f8 e0       	ldi	r31, 0x08	; 8
 1d2:	06 3e       	cpi	r16, 0xE6	; 230
 1d4:	1f 07       	cpc	r17, r31
 1d6:	f1 f6       	brne	.-68     	; 0x194 <main+0x76>

  // Print the block
  printMyBlock(p,26);
*/

}
 1d8:	80 e0       	ldi	r24, 0x00	; 0
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	0f 90       	pop	r0
 1de:	0f 90       	pop	r0
 1e0:	0f 90       	pop	r0
 1e2:	0f 90       	pop	r0
 1e4:	0f 90       	pop	r0
 1e6:	cf 91       	pop	r28
 1e8:	df 91       	pop	r29
 1ea:	1f 91       	pop	r17
 1ec:	0f 91       	pop	r16
 1ee:	ff 90       	pop	r15
 1f0:	ef 90       	pop	r14
 1f2:	08 95       	ret

000001f4 <usart0_init_baud>:
 // please contact me with details so that I may correct the situation. 
 
#include "usart.h"

void usart0_init_baud(uint32_t baud)
{
 1f4:	8f 92       	push	r8
 1f6:	af 92       	push	r10
 1f8:	cf 92       	push	r12
 1fa:	ef 92       	push	r14
 1fc:	0f 93       	push	r16
	// Test usart initialization with all parameters
	cli();
 1fe:	f8 94       	cli
	uint8_t databits = 8;
	uint8_t stopbits = 1;
	usart_parity_t parity = parity_none;
	usart_flow_control_t flow_control = flow_none;

	usart0_init(baud, F_CPU, mode,  databits, stopbits, parity, flow_control);
 200:	20 e0       	ldi	r18, 0x00	; 0
 202:	34 e2       	ldi	r19, 0x24	; 36
 204:	44 ef       	ldi	r20, 0xF4	; 244
 206:	50 e0       	ldi	r21, 0x00	; 0
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	e8 e0       	ldi	r30, 0x08	; 8
 20c:	ee 2e       	mov	r14, r30
 20e:	cc 24       	eor	r12, r12
 210:	c3 94       	inc	r12
 212:	aa 24       	eor	r10, r10
 214:	88 24       	eor	r8, r8
 216:	0e 94 b1 01 	call	0x362	; 0x362 <usart0_init>

	sei();
 21a:	78 94       	sei
	
}
 21c:	0f 91       	pop	r16
 21e:	ef 90       	pop	r14
 220:	cf 90       	pop	r12
 222:	af 90       	pop	r10
 224:	8f 90       	pop	r8
 226:	08 95       	ret

00000228 <usart0_uninit>:


void usart0_uninit(void)
{
	// restore to datasheet defaults
	UART_CONTROL_STATUS_REG_A = 0x20;
 228:	80 e2       	ldi	r24, 0x20	; 32
 22a:	80 93 c0 00 	sts	0x00C0, r24
	UART_CONTROL_STATUS_REG_B = 0;
 22e:	10 92 c1 00 	sts	0x00C1, r1
	UART_CONTROL_STATUS_REG_C = 0x06;
 232:	86 e0       	ldi	r24, 0x06	; 6
 234:	80 93 c2 00 	sts	0x00C2, r24
}
 238:	08 95       	ret

0000023a <usart0_baud_set>:
}


// 3/18/11 JWP removed magic number for clock and added freq_cpu
void usart0_baud_set(uint32_t baudrate, uint32_t freq_cpu)
{
 23a:	ef 92       	push	r14
 23c:	ff 92       	push	r15
 23e:	0f 93       	push	r16
 240:	1f 93       	push	r17
 242:	7b 01       	movw	r14, r22
 244:	8c 01       	movw	r16, r24
	uint16_t setting;
	
	setting = usart_baudrate_to_setting(freq_cpu,baudrate);
 246:	84 e0       	ldi	r24, 0x04	; 4
 248:	ee 0c       	add	r14, r14
 24a:	ff 1c       	adc	r15, r15
 24c:	00 1f       	adc	r16, r16
 24e:	11 1f       	adc	r17, r17
 250:	8a 95       	dec	r24
 252:	d1 f7       	brne	.-12     	; 0x248 <usart0_baud_set+0xe>
 254:	ca 01       	movw	r24, r20
 256:	b9 01       	movw	r22, r18
 258:	a8 01       	movw	r20, r16
 25a:	97 01       	movw	r18, r14
 25c:	0e 94 13 03 	call	0x626	; 0x626 <__udivmodsi4>
 260:	21 50       	subi	r18, 0x01	; 1
 262:	30 40       	sbci	r19, 0x00	; 0
	
	// Write hi byte first as writing lo byte will trigger immediate update of baud prescaler.
	UART_BAUD_RATE_HIGH = bit_hi_byte(setting);
 264:	30 93 c5 00 	sts	0x00C5, r19
	UART_BAUD_RATE_LOW= bit_lo_byte(setting);
 268:	20 93 c4 00 	sts	0x00C4, r18
	
	return;
}
 26c:	1f 91       	pop	r17
 26e:	0f 91       	pop	r16
 270:	ff 90       	pop	r15
 272:	ef 90       	pop	r14
 274:	08 95       	ret

00000276 <__vector_18>:


// The interrupt service routines are included in the initialization .c file 
// since they must be associated with a .c file for the compiler
usart0_receive_interrupt_service_routine
{
 276:	1f 92       	push	r1
 278:	0f 92       	push	r0
 27a:	0f b6       	in	r0, 0x3f	; 63
 27c:	0f 92       	push	r0
 27e:	11 24       	eor	r1, r1
 280:	2f 93       	push	r18
 282:	3f 93       	push	r19
 284:	4f 93       	push	r20
 286:	5f 93       	push	r21
 288:	6f 93       	push	r22
 28a:	7f 93       	push	r23
 28c:	8f 93       	push	r24
 28e:	9f 93       	push	r25
 290:	af 93       	push	r26
 292:	bf 93       	push	r27
 294:	ef 93       	push	r30
 296:	ff 93       	push	r31
	// Get error conditions before getting the data.

	// Changed to bit operator due to warning
	//frame_error = usart0_frame_error();
	//frame_error	= bit_get(UART_CONTROL_STATUS_REG_A, bit(UART_FRAME_ERROR));
	frame_error	= (UART_CONTROL_STATUS_REG_A & (1<<UART_FRAME_ERROR));
 298:	80 91 c0 00 	lds	r24, 0x00C0
	
	parity_error = usart0_parity_error();
 29c:	90 91 c0 00 	lds	r25, 0x00C0
	
	data = UART_DATA_REG;
 2a0:	60 91 c6 00 	lds	r22, 0x00C6
    
	if(!frame_error && !parity_error)
 2a4:	84 fd       	sbrc	r24, 4
 2a6:	06 c0       	rjmp	.+12     	; 0x2b4 <__vector_18+0x3e>
 2a8:	94 fd       	sbrc	r25, 4
 2aa:	04 c0       	rjmp	.+8      	; 0x2b4 <__vector_18+0x3e>
	{
		// Store data in ring buffer.
        ring_add(&usart0_receive_ring, data);
 2ac:	82 ef       	ldi	r24, 0xF2	; 242
 2ae:	91 e0       	ldi	r25, 0x01	; 1
 2b0:	0e 94 80 02 	call	0x500	; 0x500 <ring_add>
	}

	return;
}
 2b4:	ff 91       	pop	r31
 2b6:	ef 91       	pop	r30
 2b8:	bf 91       	pop	r27
 2ba:	af 91       	pop	r26
 2bc:	9f 91       	pop	r25
 2be:	8f 91       	pop	r24
 2c0:	7f 91       	pop	r23
 2c2:	6f 91       	pop	r22
 2c4:	5f 91       	pop	r21
 2c6:	4f 91       	pop	r20
 2c8:	3f 91       	pop	r19
 2ca:	2f 91       	pop	r18
 2cc:	0f 90       	pop	r0
 2ce:	0f be       	out	0x3f, r0	; 63
 2d0:	0f 90       	pop	r0
 2d2:	1f 90       	pop	r1
 2d4:	18 95       	reti

000002d6 <__vector_20>:
// JWP 6/16/11 rewrote transmit interrupt to use TX complete vector
// rather than the Data Register Empty vector
// The interrupt service routines are included in the initialization .c file 
// since they must be associated with a .c file for the compiler
usart0_transmit_interrupt_service_routine
{
 2d6:	1f 92       	push	r1
 2d8:	0f 92       	push	r0
 2da:	0f b6       	in	r0, 0x3f	; 63
 2dc:	0f 92       	push	r0
 2de:	11 24       	eor	r1, r1
 2e0:	2f 93       	push	r18
 2e2:	3f 93       	push	r19
 2e4:	4f 93       	push	r20
 2e6:	5f 93       	push	r21
 2e8:	6f 93       	push	r22
 2ea:	7f 93       	push	r23
 2ec:	8f 93       	push	r24
 2ee:	9f 93       	push	r25
 2f0:	af 93       	push	r26
 2f2:	bf 93       	push	r27
 2f4:	ef 93       	push	r30
 2f6:	ff 93       	push	r31

	// Is buffered transmission enabled?
	if(usart_buffered_tx_flag)
 2f8:	80 91 3a 02 	lds	r24, 0x023A
 2fc:	88 23       	and	r24, r24
 2fe:	69 f0       	breq	.+26     	; 0x31a <__vector_20+0x44>
	{		
		//if(usart0_transmit_ring.count)// Alternate technique
		if(usart0_transmit_buffer_inuse_count())// Is there data in the buffer?
 300:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <usart0_transmit_buffer_inuse_count>
 304:	88 23       	and	r24, r24
 306:	39 f0       	breq	.+14     	; 0x316 <__vector_20+0x40>
		{
			// Send next byte in the buffer.
 	       UART_DATA_REG = ring_remove(&usart0_transmit_ring);
 308:	8a ee       	ldi	r24, 0xEA	; 234
 30a:	91 e0       	ldi	r25, 0x01	; 1
 30c:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <ring_remove>
 310:	80 93 c6 00 	sts	0x00C6, r24
 314:	05 c0       	rjmp	.+10     	; 0x320 <__vector_20+0x4a>
		}
		else
		{
			// The buffer is empty
			usart_buffered_tx_flag = false;
 316:	10 92 3a 02 	sts	0x023A, r1
		}
	}
	else // Not buffered so transmited single byte
	{
		// Set transmit ready flag
		usart_tx_ready_flag = true;
 31a:	81 e0       	ldi	r24, 0x01	; 1
 31c:	80 93 3b 02 	sts	0x023B, r24
	}
	
    return;
}
 320:	ff 91       	pop	r31
 322:	ef 91       	pop	r30
 324:	bf 91       	pop	r27
 326:	af 91       	pop	r26
 328:	9f 91       	pop	r25
 32a:	8f 91       	pop	r24
 32c:	7f 91       	pop	r23
 32e:	6f 91       	pop	r22
 330:	5f 91       	pop	r21
 332:	4f 91       	pop	r20
 334:	3f 91       	pop	r19
 336:	2f 91       	pop	r18
 338:	0f 90       	pop	r0
 33a:	0f be       	out	0x3f, r0	; 63
 33c:	0f 90       	pop	r0
 33e:	1f 90       	pop	r1
 340:	18 95       	reti

00000342 <usart0_send>:
// the ISR just sends the byte. 
void usart0_send(void)
{

	// Wait until the transmitter is ready
	while(!usart_tx_ready_flag);
 342:	80 91 3b 02 	lds	r24, 0x023B
 346:	88 23       	and	r24, r24
 348:	e1 f3       	breq	.-8      	; 0x342 <usart0_send>

	// Set flag for ISR
	usart_buffered_tx_flag = true;
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	80 93 3a 02 	sts	0x023A, r24
	
	// Send the byte
	UART_DATA_REG = ring_remove(&usart0_transmit_ring);
 350:	8a ee       	ldi	r24, 0xEA	; 234
 352:	91 e0       	ldi	r25, 0x01	; 1
 354:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <ring_remove>
 358:	80 93 c6 00 	sts	0x00C6, r24

	// Set the ready flag to false
	usart_tx_ready_flag = false;
 35c:	10 92 3b 02 	sts	0x023B, r1
}
 360:	08 95       	ret

00000362 <usart0_init>:

   	return 0; 
} 

void usart0_init(uint32_t baud, uint32_t freq_cpu, usart_mode_t mode, usart_databits_t databits, usart_stopbits_t stopbits, usart_parity_t parity, usart_flow_control_t flow_control)
{
 362:	4f 92       	push	r4
 364:	5f 92       	push	r5
 366:	6f 92       	push	r6
 368:	7f 92       	push	r7
 36a:	8f 92       	push	r8
 36c:	9f 92       	push	r9
 36e:	af 92       	push	r10
 370:	bf 92       	push	r11
 372:	cf 92       	push	r12
 374:	ef 92       	push	r14
 376:	0f 93       	push	r16
 378:	1f 93       	push	r17
 37a:	df 93       	push	r29
 37c:	cf 93       	push	r28
 37e:	cd b7       	in	r28, 0x3d	; 61
 380:	de b7       	in	r29, 0x3e	; 62
 382:	4b 01       	movw	r8, r22
 384:	5c 01       	movw	r10, r24
 386:	29 01       	movw	r4, r18
 388:	3a 01       	movw	r6, r20
 38a:	1e 2d       	mov	r17, r14
 38c:	0c 2d       	mov	r16, r12

	cli();
 38e:	f8 94       	cli

   	stdout = &mystdout;    //set the output stream 
 390:	8b e5       	ldi	r24, 0x5B	; 91
 392:	91 e0       	ldi	r25, 0x01	; 1
 394:	90 93 3f 02 	sts	0x023F, r25
 398:	80 93 3e 02 	sts	0x023E, r24
    // flow_out_tcb.run_interval = 0;
    // flow_out_tcb.enabled = false;
    // task_add(&flow_out_tcb);

 
 	usart0_transmit_disable();
 39c:	80 91 c1 00 	lds	r24, 0x00C1
 3a0:	87 7f       	andi	r24, 0xF7	; 247
 3a2:	80 93 c1 00 	sts	0x00C1, r24
    usart0_receive_disable();
 3a6:	80 91 c1 00 	lds	r24, 0x00C1
 3aa:	8f 7e       	andi	r24, 0xEF	; 239
 3ac:	80 93 c1 00 	sts	0x00C1, r24
	usart0_transmit_complete_interrupt_disable();
 3b0:	80 91 c1 00 	lds	r24, 0x00C1
 3b4:	8f 7b       	andi	r24, 0xBF	; 191
 3b6:	80 93 c1 00 	sts	0x00C1, r24
    usart0_receive_complete_interrupt_disable();
 3ba:	80 91 c1 00 	lds	r24, 0x00C1
 3be:	8f 77       	andi	r24, 0x7F	; 127
 3c0:	80 93 c1 00 	sts	0x00C1, r24

//  JWP 6/19/11 Just use default while testing
// TODO: figure this out someday   
//	usart0_mode(mode);
 	usart0_baud_set(baud, freq_cpu);
 3c4:	c5 01       	movw	r24, r10
 3c6:	b4 01       	movw	r22, r8
 3c8:	0e 94 1d 01 	call	0x23a	; 0x23a <usart0_baud_set>
    usart0_data_bits_set(databits);
 3cc:	8e 2d       	mov	r24, r14
 3ce:	85 50       	subi	r24, 0x05	; 5
 3d0:	84 30       	cpi	r24, 0x04	; 4
 3d2:	18 f5       	brcc	.+70     	; 0x41a <usart0_init+0xb8>
 3d4:	2e 2d       	mov	r18, r14
 3d6:	30 e0       	ldi	r19, 0x00	; 0
 3d8:	25 50       	subi	r18, 0x05	; 5
 3da:	30 40       	sbci	r19, 0x00	; 0
 3dc:	21 ff       	sbrs	r18, 1
 3de:	04 c0       	rjmp	.+8      	; 0x3e8 <usart0_init+0x86>
 3e0:	80 91 c2 00 	lds	r24, 0x00C2
 3e4:	84 60       	ori	r24, 0x04	; 4
 3e6:	03 c0       	rjmp	.+6      	; 0x3ee <usart0_init+0x8c>
 3e8:	80 91 c2 00 	lds	r24, 0x00C2
 3ec:	8b 7f       	andi	r24, 0xFB	; 251
 3ee:	80 93 c2 00 	sts	0x00C2, r24
 3f2:	80 91 c2 00 	lds	r24, 0x00C2
 3f6:	22 ff       	sbrs	r18, 2
 3f8:	04 c0       	rjmp	.+8      	; 0x402 <usart0_init+0xa0>
 3fa:	80 91 c2 00 	lds	r24, 0x00C2
 3fe:	80 61       	ori	r24, 0x10	; 16
 400:	03 c0       	rjmp	.+6      	; 0x408 <usart0_init+0xa6>
 402:	80 91 c2 00 	lds	r24, 0x00C2
 406:	8f 7e       	andi	r24, 0xEF	; 239
 408:	80 93 c2 00 	sts	0x00C2, r24
 40c:	80 91 c2 00 	lds	r24, 0x00C2
 410:	80 91 c1 00 	lds	r24, 0x00C1
 414:	8f 7e       	andi	r24, 0xEF	; 239
 416:	80 93 c1 00 	sts	0x00C1, r24
 41a:	19 30       	cpi	r17, 0x09	; 9
 41c:	79 f4       	brne	.+30     	; 0x43c <usart0_init+0xda>
 41e:	80 91 c2 00 	lds	r24, 0x00C2
 422:	84 60       	ori	r24, 0x04	; 4
 424:	80 93 c2 00 	sts	0x00C2, r24
 428:	80 91 c2 00 	lds	r24, 0x00C2
 42c:	80 61       	ori	r24, 0x10	; 16
 42e:	80 93 c2 00 	sts	0x00C2, r24
 432:	80 91 c1 00 	lds	r24, 0x00C1
 436:	80 61       	ori	r24, 0x10	; 16
 438:	80 93 c1 00 	sts	0x00C1, r24
    usart0_stop_bits_set(stopbits);
 43c:	80 2f       	mov	r24, r16
 43e:	81 50       	subi	r24, 0x01	; 1
 440:	82 30       	cpi	r24, 0x02	; 2
 442:	30 f4       	brcc	.+12     	; 0x450 <usart0_init+0xee>
 444:	80 91 c2 00 	lds	r24, 0x00C2
 448:	80 93 c2 00 	sts	0x00C2, r24
 44c:	80 91 c2 00 	lds	r24, 0x00C2
//    usart0_parity_set(parity);
 
 	usart0_baud_set(baud, freq_cpu);
 450:	c5 01       	movw	r24, r10
 452:	b4 01       	movw	r22, r8
 454:	a3 01       	movw	r20, r6
 456:	92 01       	movw	r18, r4
 458:	0e 94 1d 01 	call	0x23a	; 0x23a <usart0_baud_set>
#if defined(__AVR_ATmega169__) // Assume Butterfly
	butterfly_init();
#endif


	ring_init(&usart0_receive_ring, usart0_receive_buffer, USART0_RECEIVE_BUFFER_LEN);
 45c:	82 ef       	ldi	r24, 0xF2	; 242
 45e:	91 e0       	ldi	r25, 0x01	; 1
 460:	6a ef       	ldi	r22, 0xFA	; 250
 462:	71 e0       	ldi	r23, 0x01	; 1
 464:	40 e4       	ldi	r20, 0x40	; 64
 466:	0e 94 ae 02 	call	0x55c	; 0x55c <ring_init>
    ring_init(&usart0_transmit_ring, usart0_transmit_buffer, USART0_TRANSMIT_BUFFER_LEN);
 46a:	8a ee       	ldi	r24, 0xEA	; 234
 46c:	91 e0       	ldi	r25, 0x01	; 1
 46e:	6a e6       	ldi	r22, 0x6A	; 106
 470:	71 e0       	ldi	r23, 0x01	; 1
 472:	40 e8       	ldi	r20, 0x80	; 128
 474:	0e 94 ae 02 	call	0x55c	; 0x55c <ring_init>

	// JWP 6/16/11 
	usart0_transmit_enable();
 478:	80 91 c1 00 	lds	r24, 0x00C1
 47c:	88 60       	ori	r24, 0x08	; 8
 47e:	80 93 c1 00 	sts	0x00C1, r24
    usart0_receive_enable();
 482:	80 91 c1 00 	lds	r24, 0x00C1
 486:	80 61       	ori	r24, 0x10	; 16
 488:	80 93 c1 00 	sts	0x00C1, r24
	usart0_transmit_complete_interrupt_enable();
 48c:	80 91 c1 00 	lds	r24, 0x00C1
 490:	80 64       	ori	r24, 0x40	; 64
 492:	80 93 c1 00 	sts	0x00C1, r24
    usart0_receive_complete_interrupt_enable();
 496:	80 91 c1 00 	lds	r24, 0x00C1
 49a:	80 68       	ori	r24, 0x80	; 128
 49c:	80 93 c1 00 	sts	0x00C1, r24

	// JWP 6/16/11 - set flags for revised transmission logic
	usart_buffered_tx_flag = false;
 4a0:	10 92 3a 02 	sts	0x023A, r1
	usart_tx_ready_flag = true;
 4a4:	81 e0       	ldi	r24, 0x01	; 1
 4a6:	80 93 3b 02 	sts	0x023B, r24

	sei();
 4aa:	78 94       	sei

	return;
}
 4ac:	cf 91       	pop	r28
 4ae:	df 91       	pop	r29
 4b0:	1f 91       	pop	r17
 4b2:	0f 91       	pop	r16
 4b4:	ef 90       	pop	r14
 4b6:	cf 90       	pop	r12
 4b8:	bf 90       	pop	r11
 4ba:	af 90       	pop	r10
 4bc:	9f 90       	pop	r9
 4be:	8f 90       	pop	r8
 4c0:	7f 90       	pop	r7
 4c2:	6f 90       	pop	r6
 4c4:	5f 90       	pop	r5
 4c6:	4f 90       	pop	r4
 4c8:	08 95       	ret

000004ca <usart0_put_char_stream>:
int usart0_put_char_stream(char c, FILE *stream);

// Keep this in the same file as the usart0_put_char function
FILE mystdout = FDEV_SETUP_STREAM(usart0_put_char_stream, NULL, _FDEV_SETUP_WRITE);
int usart0_put_char_stream(char c, FILE *stream) 
{ 
 4ca:	1f 93       	push	r17
 4cc:	18 2f       	mov	r17, r24
	if (c == '\n') usart0_put_char_stream('\r', stream);
 4ce:	8a 30       	cpi	r24, 0x0A	; 10
 4d0:	19 f4       	brne	.+6      	; 0x4d8 <usart0_put_char_stream+0xe>
 4d2:	8d e0       	ldi	r24, 0x0D	; 13
 4d4:	0e 94 65 02 	call	0x4ca	; 0x4ca <usart0_put_char_stream>

	usart0_transmit_buffer_insert((uint8_t)c);
 4d8:	81 2f       	mov	r24, r17
 4da:	0e 94 75 02 	call	0x4ea	; 0x4ea <usart0_transmit_buffer_insert>
   	
	usart0_send();
 4de:	0e 94 a1 01 	call	0x342	; 0x342 <usart0_send>

   	return 0; 
} 
 4e2:	80 e0       	ldi	r24, 0x00	; 0
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	1f 91       	pop	r17
 4e8:	08 95       	ret

000004ea <usart0_transmit_buffer_insert>:
 // please contact me with details so that I may correct the situation. 
 
#include "usart.h"

bool usart0_transmit_buffer_insert(uint8_t c)
{
 4ea:	68 2f       	mov	r22, r24
    register bool result;
    result = usart0_buffer_insert(&usart0_transmit_ring, c);
 4ec:	8a ee       	ldi	r24, 0xEA	; 234
 4ee:	91 e0       	ldi	r25, 0x01	; 1
 4f0:	0e 94 ff 02 	call	0x5fe	; 0x5fe <usart0_buffer_insert>
	// JWP 6/14/11 don't automatically send. Use usart0_transmit_send when 
	// 		you have finished loading what you want to send in the buffer
	//if(result == true) usart0_transmit_check();

    return(result);
}
 4f4:	08 95       	ret

000004f6 <usart0_transmit_buffer_inuse_count>:
 
#include "usart.h"

uint8_t usart0_transmit_buffer_inuse_count(void)
{
    return(usart0_buffer_inuse_count(&usart0_transmit_ring));
 4f6:	8a ee       	ldi	r24, 0xEA	; 234
 4f8:	91 e0       	ldi	r25, 0x01	; 1
 4fa:	0e 94 0d 03 	call	0x61a	; 0x61a <usart0_buffer_inuse_count>
}
 4fe:	08 95       	ret

00000500 <ring_add>:
#include <stdbool.h>
#include <stdint.h>
#include "ring.h"

bool ring_add(ring_t *r, uint8_t data)
{
 500:	dc 01       	movw	r26, r24
    // Get the next head index.
    ring_index_t temp_head = r->head_index + 1;
 502:	13 96       	adiw	r26, 0x03	; 3
 504:	4d 91       	ld	r20, X+
 506:	5c 91       	ld	r21, X
 508:	14 97       	sbiw	r26, 0x04	; 4
    if(r->head_index >= r->size - 1)
 50a:	12 96       	adiw	r26, 0x02	; 2
 50c:	8c 91       	ld	r24, X
 50e:	12 97       	sbiw	r26, 0x02	; 2
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	01 97       	sbiw	r24, 0x01	; 1
 514:	48 17       	cp	r20, r24
 516:	59 07       	cpc	r21, r25
 518:	18 f0       	brcs	.+6      	; 0x520 <ring_add+0x20>
 51a:	20 e0       	ldi	r18, 0x00	; 0
 51c:	30 e0       	ldi	r19, 0x00	; 0
 51e:	03 c0       	rjmp	.+6      	; 0x526 <ring_add+0x26>
#include "ring.h"

bool ring_add(ring_t *r, uint8_t data)
{
    // Get the next head index.
    ring_index_t temp_head = r->head_index + 1;
 520:	9a 01       	movw	r18, r20
 522:	2f 5f       	subi	r18, 0xFF	; 255
 524:	3f 4f       	sbci	r19, 0xFF	; 255
    if(r->head_index >= r->size - 1)
    {
        temp_head = 0;
    }

    if(temp_head != r->tail_index)
 526:	15 96       	adiw	r26, 0x05	; 5
 528:	8d 91       	ld	r24, X+
 52a:	9c 91       	ld	r25, X
 52c:	16 97       	sbiw	r26, 0x06	; 6
 52e:	28 17       	cp	r18, r24
 530:	39 07       	cpc	r19, r25
 532:	11 f4       	brne	.+4      	; 0x538 <ring_add+0x38>
 534:	80 e0       	ldi	r24, 0x00	; 0
 536:	08 95       	ret
    {
        r->buffer[r->head_index] = data;    // Buffer receives data
 538:	ed 91       	ld	r30, X+
 53a:	fc 91       	ld	r31, X
 53c:	11 97       	sbiw	r26, 0x01	; 1
 53e:	e4 0f       	add	r30, r20
 540:	f5 1f       	adc	r31, r21
 542:	60 83       	st	Z, r22
        r->head_index = temp_head;
 544:	14 96       	adiw	r26, 0x04	; 4
 546:	3c 93       	st	X, r19
 548:	2e 93       	st	-X, r18
 54a:	13 97       	sbiw	r26, 0x03	; 3
        r->count++;
 54c:	17 96       	adiw	r26, 0x07	; 7
 54e:	8c 91       	ld	r24, X
 550:	17 97       	sbiw	r26, 0x07	; 7
 552:	8f 5f       	subi	r24, 0xFF	; 255
 554:	17 96       	adiw	r26, 0x07	; 7
 556:	8c 93       	st	X, r24
 558:	81 e0       	ldi	r24, 0x01	; 1
        return(true);       // Return complete
    }

    return(false);          // Return incomplete
}
 55a:	08 95       	ret

0000055c <ring_init>:
#include <stdbool.h>
#include <stdlib.h>
#include "ring.h"

bool ring_init(ring_t *r, ring_buffer_t buffer, ring_size_t size)
{
 55c:	fc 01       	movw	r30, r24
    bool success = false;
    bool clear;
    if (size >= 2 && r != NULL && buffer != NULL)
 55e:	42 30       	cpi	r20, 0x02	; 2
 560:	58 f0       	brcs	.+22     	; 0x578 <ring_init+0x1c>
 562:	00 97       	sbiw	r24, 0x00	; 0
 564:	49 f0       	breq	.+18     	; 0x578 <ring_init+0x1c>
 566:	61 15       	cp	r22, r1
 568:	71 05       	cpc	r23, r1
 56a:	31 f0       	breq	.+12     	; 0x578 <ring_init+0x1c>
    {
        r->buffer = buffer;     // Set index pointers
 56c:	71 83       	std	Z+1, r23	; 0x01
 56e:	60 83       	st	Z, r22
        r->size = size;
 570:	42 83       	std	Z+2, r20	; 0x02
        clear = ring_clear(r);  // Call ring_clear function
 572:	0e 94 be 02 	call	0x57c	; 0x57c <ring_clear>
 576:	08 95       	ret
 578:	80 e0       	ldi	r24, 0x00	; 0
        {
                success = true;
        }
    }
    return(success);
}
 57a:	08 95       	ret

0000057c <ring_clear>:
#include <stdlib.h>
#include <string.h>
#include "ring.h"

bool ring_clear(ring_t *r)
{
 57c:	fc 01       	movw	r30, r24
    bool success = false;
    if (r != NULL)
 57e:	00 97       	sbiw	r24, 0x00	; 0
 580:	11 f4       	brne	.+4      	; 0x586 <ring_clear+0xa>
 582:	80 e0       	ldi	r24, 0x00	; 0
 584:	08 95       	ret
    {
        r->head_index = 0;
 586:	14 82       	std	Z+4, r1	; 0x04
 588:	13 82       	std	Z+3, r1	; 0x03
        r->tail_index = 0;          // Assign new values
 58a:	16 82       	std	Z+6, r1	; 0x06
 58c:	15 82       	std	Z+5, r1	; 0x05
        r->count = 0;
 58e:	17 82       	std	Z+7, r1	; 0x07
        memset((void *)r->buffer, 0, r->size); // Clear out memory
 590:	42 81       	ldd	r20, Z+2	; 0x02
 592:	80 81       	ld	r24, Z
 594:	91 81       	ldd	r25, Z+1	; 0x01
 596:	60 e0       	ldi	r22, 0x00	; 0
 598:	70 e0       	ldi	r23, 0x00	; 0
 59a:	50 e0       	ldi	r21, 0x00	; 0
 59c:	0e 94 35 03 	call	0x66a	; 0x66a <memset>
 5a0:	81 e0       	ldi	r24, 0x01	; 1
        success = true;
    }
    return(success);
}
 5a2:	08 95       	ret

000005a4 <ring_remove>:

#include <stdint.h>
#include "ring.h"

uint8_t ring_remove(ring_t *r)
{
 5a4:	dc 01       	movw	r26, r24
    uint8_t data = 0;

    // Compare the head index and the tail index
    if(r->head_index != r->tail_index)
 5a6:	15 96       	adiw	r26, 0x05	; 5
 5a8:	2d 91       	ld	r18, X+
 5aa:	3c 91       	ld	r19, X
 5ac:	16 97       	sbiw	r26, 0x06	; 6
 5ae:	13 96       	adiw	r26, 0x03	; 3
 5b0:	8d 91       	ld	r24, X+
 5b2:	9c 91       	ld	r25, X
 5b4:	14 97       	sbiw	r26, 0x04	; 4
 5b6:	82 17       	cp	r24, r18
 5b8:	93 07       	cpc	r25, r19
 5ba:	11 f4       	brne	.+4      	; 0x5c0 <ring_remove+0x1c>
 5bc:	e0 e0       	ldi	r30, 0x00	; 0
 5be:	1d c0       	rjmp	.+58     	; 0x5fa <ring_remove+0x56>
    {
        // Get the Data from the buffer.
        data = r->buffer[r->tail_index];
 5c0:	ed 91       	ld	r30, X+
 5c2:	fc 91       	ld	r31, X
 5c4:	11 97       	sbiw	r26, 0x01	; 1
 5c6:	e2 0f       	add	r30, r18
 5c8:	f3 1f       	adc	r31, r19
 5ca:	e0 81       	ld	r30, Z

        // Get the next tail index.
        ring_index_t next_tail = r->tail_index + 1;
        if(r->tail_index >= r->size - 1)
 5cc:	12 96       	adiw	r26, 0x02	; 2
 5ce:	8c 91       	ld	r24, X
 5d0:	12 97       	sbiw	r26, 0x02	; 2
 5d2:	90 e0       	ldi	r25, 0x00	; 0
 5d4:	01 97       	sbiw	r24, 0x01	; 1
 5d6:	28 17       	cp	r18, r24
 5d8:	39 07       	cpc	r19, r25
 5da:	18 f0       	brcs	.+6      	; 0x5e2 <ring_remove+0x3e>
 5dc:	80 e0       	ldi	r24, 0x00	; 0
 5de:	90 e0       	ldi	r25, 0x00	; 0
 5e0:	02 c0       	rjmp	.+4      	; 0x5e6 <ring_remove+0x42>
    {
        // Get the Data from the buffer.
        data = r->buffer[r->tail_index];

        // Get the next tail index.
        ring_index_t next_tail = r->tail_index + 1;
 5e2:	c9 01       	movw	r24, r18
 5e4:	01 96       	adiw	r24, 0x01	; 1
        if(r->tail_index >= r->size - 1)
        {
            next_tail = 0;
        }

        r->tail_index = next_tail;      // Move index
 5e6:	16 96       	adiw	r26, 0x06	; 6
 5e8:	9c 93       	st	X, r25
 5ea:	8e 93       	st	-X, r24
 5ec:	15 97       	sbiw	r26, 0x05	; 5
        r->count--;             // Decrement count
 5ee:	17 96       	adiw	r26, 0x07	; 7
 5f0:	8c 91       	ld	r24, X
 5f2:	17 97       	sbiw	r26, 0x07	; 7
 5f4:	81 50       	subi	r24, 0x01	; 1
 5f6:	17 96       	adiw	r26, 0x07	; 7
 5f8:	8c 93       	st	X, r24
    }

    return(data);
}
 5fa:	8e 2f       	mov	r24, r30
 5fc:	08 95       	ret

000005fe <usart0_buffer_insert>:
 // please contact me with details so that I may correct the situation. 
 
#include "usart.h"

bool usart0_buffer_insert(ring_t *ring, uint8_t c)
{
 5fe:	1f 93       	push	r17
 600:	9c 01       	movw	r18, r24
    register bool result;
    register uint8_t sreg;
   
   	// Do not load buffer while transmitting from buffer
	while(usart_buffered_tx_flag);
 602:	80 91 3a 02 	lds	r24, 0x023A
 606:	88 23       	and	r24, r24
 608:	e1 f7       	brne	.-8      	; 0x602 <usart0_buffer_insert+0x4>
    
    sreg = SREG;
 60a:	1f b7       	in	r17, 0x3f	; 63
    cli();
 60c:	f8 94       	cli
    result = ring_add(ring, c);
 60e:	c9 01       	movw	r24, r18
 610:	0e 94 80 02 	call	0x500	; 0x500 <ring_add>
    SREG = sreg;
 614:	1f bf       	out	0x3f, r17	; 63
    return(result);
}
 616:	1f 91       	pop	r17
 618:	08 95       	ret

0000061a <usart0_buffer_inuse_count>:
 // please contact me with details so that I may correct the situation. 
 
#include "usart.h"

uint8_t usart0_buffer_inuse_count(ring_t *ring)
{
 61a:	fc 01       	movw	r30, r24
    register uint8_t result;
    register uint8_t sreg;
    
    sreg = SREG;
 61c:	8f b7       	in	r24, 0x3f	; 63
    cli();
 61e:	f8 94       	cli
    result = ring->count;
    SREG = sreg;
 620:	8f bf       	out	0x3f, r24	; 63
    return(result);
}
 622:	87 81       	ldd	r24, Z+7	; 0x07
 624:	08 95       	ret

00000626 <__udivmodsi4>:
 626:	a1 e2       	ldi	r26, 0x21	; 33
 628:	1a 2e       	mov	r1, r26
 62a:	aa 1b       	sub	r26, r26
 62c:	bb 1b       	sub	r27, r27
 62e:	fd 01       	movw	r30, r26
 630:	0d c0       	rjmp	.+26     	; 0x64c <__udivmodsi4_ep>

00000632 <__udivmodsi4_loop>:
 632:	aa 1f       	adc	r26, r26
 634:	bb 1f       	adc	r27, r27
 636:	ee 1f       	adc	r30, r30
 638:	ff 1f       	adc	r31, r31
 63a:	a2 17       	cp	r26, r18
 63c:	b3 07       	cpc	r27, r19
 63e:	e4 07       	cpc	r30, r20
 640:	f5 07       	cpc	r31, r21
 642:	20 f0       	brcs	.+8      	; 0x64c <__udivmodsi4_ep>
 644:	a2 1b       	sub	r26, r18
 646:	b3 0b       	sbc	r27, r19
 648:	e4 0b       	sbc	r30, r20
 64a:	f5 0b       	sbc	r31, r21

0000064c <__udivmodsi4_ep>:
 64c:	66 1f       	adc	r22, r22
 64e:	77 1f       	adc	r23, r23
 650:	88 1f       	adc	r24, r24
 652:	99 1f       	adc	r25, r25
 654:	1a 94       	dec	r1
 656:	69 f7       	brne	.-38     	; 0x632 <__udivmodsi4_loop>
 658:	60 95       	com	r22
 65a:	70 95       	com	r23
 65c:	80 95       	com	r24
 65e:	90 95       	com	r25
 660:	9b 01       	movw	r18, r22
 662:	ac 01       	movw	r20, r24
 664:	bd 01       	movw	r22, r26
 666:	cf 01       	movw	r24, r30
 668:	08 95       	ret

0000066a <memset>:
 66a:	dc 01       	movw	r26, r24
 66c:	01 c0       	rjmp	.+2      	; 0x670 <memset+0x6>
 66e:	6d 93       	st	X+, r22
 670:	41 50       	subi	r20, 0x01	; 1
 672:	50 40       	sbci	r21, 0x00	; 0
 674:	e0 f7       	brcc	.-8      	; 0x66e <memset+0x4>
 676:	08 95       	ret

00000678 <printf>:
 678:	a0 e0       	ldi	r26, 0x00	; 0
 67a:	b0 e0       	ldi	r27, 0x00	; 0
 67c:	e2 e4       	ldi	r30, 0x42	; 66
 67e:	f3 e0       	ldi	r31, 0x03	; 3
 680:	0c 94 13 06 	jmp	0xc26	; 0xc26 <__prologue_saves__+0x20>
 684:	fe 01       	movw	r30, r28
 686:	35 96       	adiw	r30, 0x05	; 5
 688:	61 91       	ld	r22, Z+
 68a:	71 91       	ld	r23, Z+
 68c:	80 91 3e 02 	lds	r24, 0x023E
 690:	90 91 3f 02 	lds	r25, 0x023F
 694:	af 01       	movw	r20, r30
 696:	0e 94 86 03 	call	0x70c	; 0x70c <vfprintf>
 69a:	20 96       	adiw	r28, 0x00	; 0
 69c:	e2 e0       	ldi	r30, 0x02	; 2
 69e:	0c 94 2f 06 	jmp	0xc5e	; 0xc5e <__epilogue_restores__+0x20>

000006a2 <puts>:
 6a2:	0f 93       	push	r16
 6a4:	1f 93       	push	r17
 6a6:	cf 93       	push	r28
 6a8:	df 93       	push	r29
 6aa:	8c 01       	movw	r16, r24
 6ac:	e0 91 3e 02 	lds	r30, 0x023E
 6b0:	f0 91 3f 02 	lds	r31, 0x023F
 6b4:	83 81       	ldd	r24, Z+3	; 0x03
 6b6:	81 ff       	sbrs	r24, 1
 6b8:	21 c0       	rjmp	.+66     	; 0x6fc <puts+0x5a>
 6ba:	c0 e0       	ldi	r28, 0x00	; 0
 6bc:	d0 e0       	ldi	r29, 0x00	; 0
 6be:	0d c0       	rjmp	.+26     	; 0x6da <puts+0x38>
 6c0:	e0 91 3e 02 	lds	r30, 0x023E
 6c4:	f0 91 3f 02 	lds	r31, 0x023F
 6c8:	20 85       	ldd	r18, Z+8	; 0x08
 6ca:	31 85       	ldd	r19, Z+9	; 0x09
 6cc:	bf 01       	movw	r22, r30
 6ce:	f9 01       	movw	r30, r18
 6d0:	09 95       	icall
 6d2:	89 2b       	or	r24, r25
 6d4:	11 f0       	breq	.+4      	; 0x6da <puts+0x38>
 6d6:	cf ef       	ldi	r28, 0xFF	; 255
 6d8:	df ef       	ldi	r29, 0xFF	; 255
 6da:	f8 01       	movw	r30, r16
 6dc:	81 91       	ld	r24, Z+
 6de:	8f 01       	movw	r16, r30
 6e0:	88 23       	and	r24, r24
 6e2:	71 f7       	brne	.-36     	; 0x6c0 <puts+0x1e>
 6e4:	e0 91 3e 02 	lds	r30, 0x023E
 6e8:	f0 91 3f 02 	lds	r31, 0x023F
 6ec:	20 85       	ldd	r18, Z+8	; 0x08
 6ee:	31 85       	ldd	r19, Z+9	; 0x09
 6f0:	8a e0       	ldi	r24, 0x0A	; 10
 6f2:	bf 01       	movw	r22, r30
 6f4:	f9 01       	movw	r30, r18
 6f6:	09 95       	icall
 6f8:	89 2b       	or	r24, r25
 6fa:	11 f0       	breq	.+4      	; 0x700 <puts+0x5e>
 6fc:	cf ef       	ldi	r28, 0xFF	; 255
 6fe:	df ef       	ldi	r29, 0xFF	; 255
 700:	ce 01       	movw	r24, r28
 702:	df 91       	pop	r29
 704:	cf 91       	pop	r28
 706:	1f 91       	pop	r17
 708:	0f 91       	pop	r16
 70a:	08 95       	ret

0000070c <vfprintf>:
 70c:	ab e0       	ldi	r26, 0x0B	; 11
 70e:	b0 e0       	ldi	r27, 0x00	; 0
 710:	ec e8       	ldi	r30, 0x8C	; 140
 712:	f3 e0       	ldi	r31, 0x03	; 3
 714:	0c 94 03 06 	jmp	0xc06	; 0xc06 <__prologue_saves__>
 718:	3c 01       	movw	r6, r24
 71a:	2b 01       	movw	r4, r22
 71c:	5a 01       	movw	r10, r20
 71e:	fc 01       	movw	r30, r24
 720:	17 82       	std	Z+7, r1	; 0x07
 722:	16 82       	std	Z+6, r1	; 0x06
 724:	83 81       	ldd	r24, Z+3	; 0x03
 726:	81 fd       	sbrc	r24, 1
 728:	03 c0       	rjmp	.+6      	; 0x730 <vfprintf+0x24>
 72a:	6f ef       	ldi	r22, 0xFF	; 255
 72c:	7f ef       	ldi	r23, 0xFF	; 255
 72e:	c6 c1       	rjmp	.+908    	; 0xabc <__stack+0x1bd>
 730:	9a e0       	ldi	r25, 0x0A	; 10
 732:	89 2e       	mov	r8, r25
 734:	1e 01       	movw	r2, r28
 736:	08 94       	sec
 738:	21 1c       	adc	r2, r1
 73a:	31 1c       	adc	r3, r1
 73c:	f3 01       	movw	r30, r6
 73e:	23 81       	ldd	r18, Z+3	; 0x03
 740:	f2 01       	movw	r30, r4
 742:	23 fd       	sbrc	r18, 3
 744:	85 91       	lpm	r24, Z+
 746:	23 ff       	sbrs	r18, 3
 748:	81 91       	ld	r24, Z+
 74a:	2f 01       	movw	r4, r30
 74c:	88 23       	and	r24, r24
 74e:	09 f4       	brne	.+2      	; 0x752 <vfprintf+0x46>
 750:	b2 c1       	rjmp	.+868    	; 0xab6 <__stack+0x1b7>
 752:	85 32       	cpi	r24, 0x25	; 37
 754:	39 f4       	brne	.+14     	; 0x764 <vfprintf+0x58>
 756:	23 fd       	sbrc	r18, 3
 758:	85 91       	lpm	r24, Z+
 75a:	23 ff       	sbrs	r18, 3
 75c:	81 91       	ld	r24, Z+
 75e:	2f 01       	movw	r4, r30
 760:	85 32       	cpi	r24, 0x25	; 37
 762:	29 f4       	brne	.+10     	; 0x76e <vfprintf+0x62>
 764:	90 e0       	ldi	r25, 0x00	; 0
 766:	b3 01       	movw	r22, r6
 768:	0e 94 79 05 	call	0xaf2	; 0xaf2 <fputc>
 76c:	e7 cf       	rjmp	.-50     	; 0x73c <vfprintf+0x30>
 76e:	98 2f       	mov	r25, r24
 770:	ff 24       	eor	r15, r15
 772:	ee 24       	eor	r14, r14
 774:	99 24       	eor	r9, r9
 776:	ff e1       	ldi	r31, 0x1F	; 31
 778:	ff 15       	cp	r31, r15
 77a:	d0 f0       	brcs	.+52     	; 0x7b0 <vfprintf+0xa4>
 77c:	9b 32       	cpi	r25, 0x2B	; 43
 77e:	69 f0       	breq	.+26     	; 0x79a <vfprintf+0x8e>
 780:	9c 32       	cpi	r25, 0x2C	; 44
 782:	28 f4       	brcc	.+10     	; 0x78e <vfprintf+0x82>
 784:	90 32       	cpi	r25, 0x20	; 32
 786:	59 f0       	breq	.+22     	; 0x79e <vfprintf+0x92>
 788:	93 32       	cpi	r25, 0x23	; 35
 78a:	91 f4       	brne	.+36     	; 0x7b0 <vfprintf+0xa4>
 78c:	0e c0       	rjmp	.+28     	; 0x7aa <vfprintf+0x9e>
 78e:	9d 32       	cpi	r25, 0x2D	; 45
 790:	49 f0       	breq	.+18     	; 0x7a4 <vfprintf+0x98>
 792:	90 33       	cpi	r25, 0x30	; 48
 794:	69 f4       	brne	.+26     	; 0x7b0 <vfprintf+0xa4>
 796:	41 e0       	ldi	r20, 0x01	; 1
 798:	24 c0       	rjmp	.+72     	; 0x7e2 <vfprintf+0xd6>
 79a:	52 e0       	ldi	r21, 0x02	; 2
 79c:	f5 2a       	or	r15, r21
 79e:	84 e0       	ldi	r24, 0x04	; 4
 7a0:	f8 2a       	or	r15, r24
 7a2:	28 c0       	rjmp	.+80     	; 0x7f4 <vfprintf+0xe8>
 7a4:	98 e0       	ldi	r25, 0x08	; 8
 7a6:	f9 2a       	or	r15, r25
 7a8:	25 c0       	rjmp	.+74     	; 0x7f4 <vfprintf+0xe8>
 7aa:	e0 e1       	ldi	r30, 0x10	; 16
 7ac:	fe 2a       	or	r15, r30
 7ae:	22 c0       	rjmp	.+68     	; 0x7f4 <vfprintf+0xe8>
 7b0:	f7 fc       	sbrc	r15, 7
 7b2:	29 c0       	rjmp	.+82     	; 0x806 <vfprintf+0xfa>
 7b4:	89 2f       	mov	r24, r25
 7b6:	80 53       	subi	r24, 0x30	; 48
 7b8:	8a 30       	cpi	r24, 0x0A	; 10
 7ba:	70 f4       	brcc	.+28     	; 0x7d8 <vfprintf+0xcc>
 7bc:	f6 fe       	sbrs	r15, 6
 7be:	05 c0       	rjmp	.+10     	; 0x7ca <vfprintf+0xbe>
 7c0:	98 9c       	mul	r9, r8
 7c2:	90 2c       	mov	r9, r0
 7c4:	11 24       	eor	r1, r1
 7c6:	98 0e       	add	r9, r24
 7c8:	15 c0       	rjmp	.+42     	; 0x7f4 <vfprintf+0xe8>
 7ca:	e8 9c       	mul	r14, r8
 7cc:	e0 2c       	mov	r14, r0
 7ce:	11 24       	eor	r1, r1
 7d0:	e8 0e       	add	r14, r24
 7d2:	f0 e2       	ldi	r31, 0x20	; 32
 7d4:	ff 2a       	or	r15, r31
 7d6:	0e c0       	rjmp	.+28     	; 0x7f4 <vfprintf+0xe8>
 7d8:	9e 32       	cpi	r25, 0x2E	; 46
 7da:	29 f4       	brne	.+10     	; 0x7e6 <vfprintf+0xda>
 7dc:	f6 fc       	sbrc	r15, 6
 7de:	6b c1       	rjmp	.+726    	; 0xab6 <__stack+0x1b7>
 7e0:	40 e4       	ldi	r20, 0x40	; 64
 7e2:	f4 2a       	or	r15, r20
 7e4:	07 c0       	rjmp	.+14     	; 0x7f4 <vfprintf+0xe8>
 7e6:	9c 36       	cpi	r25, 0x6C	; 108
 7e8:	19 f4       	brne	.+6      	; 0x7f0 <vfprintf+0xe4>
 7ea:	50 e8       	ldi	r21, 0x80	; 128
 7ec:	f5 2a       	or	r15, r21
 7ee:	02 c0       	rjmp	.+4      	; 0x7f4 <vfprintf+0xe8>
 7f0:	98 36       	cpi	r25, 0x68	; 104
 7f2:	49 f4       	brne	.+18     	; 0x806 <vfprintf+0xfa>
 7f4:	f2 01       	movw	r30, r4
 7f6:	23 fd       	sbrc	r18, 3
 7f8:	95 91       	lpm	r25, Z+
 7fa:	23 ff       	sbrs	r18, 3
 7fc:	91 91       	ld	r25, Z+
 7fe:	2f 01       	movw	r4, r30
 800:	99 23       	and	r25, r25
 802:	09 f0       	breq	.+2      	; 0x806 <vfprintf+0xfa>
 804:	b8 cf       	rjmp	.-144    	; 0x776 <vfprintf+0x6a>
 806:	89 2f       	mov	r24, r25
 808:	85 54       	subi	r24, 0x45	; 69
 80a:	83 30       	cpi	r24, 0x03	; 3
 80c:	18 f0       	brcs	.+6      	; 0x814 <vfprintf+0x108>
 80e:	80 52       	subi	r24, 0x20	; 32
 810:	83 30       	cpi	r24, 0x03	; 3
 812:	38 f4       	brcc	.+14     	; 0x822 <vfprintf+0x116>
 814:	44 e0       	ldi	r20, 0x04	; 4
 816:	50 e0       	ldi	r21, 0x00	; 0
 818:	a4 0e       	add	r10, r20
 81a:	b5 1e       	adc	r11, r21
 81c:	5f e3       	ldi	r21, 0x3F	; 63
 81e:	59 83       	std	Y+1, r21	; 0x01
 820:	0f c0       	rjmp	.+30     	; 0x840 <vfprintf+0x134>
 822:	93 36       	cpi	r25, 0x63	; 99
 824:	31 f0       	breq	.+12     	; 0x832 <vfprintf+0x126>
 826:	93 37       	cpi	r25, 0x73	; 115
 828:	79 f0       	breq	.+30     	; 0x848 <vfprintf+0x13c>
 82a:	93 35       	cpi	r25, 0x53	; 83
 82c:	09 f0       	breq	.+2      	; 0x830 <vfprintf+0x124>
 82e:	56 c0       	rjmp	.+172    	; 0x8dc <vfprintf+0x1d0>
 830:	20 c0       	rjmp	.+64     	; 0x872 <vfprintf+0x166>
 832:	f5 01       	movw	r30, r10
 834:	80 81       	ld	r24, Z
 836:	89 83       	std	Y+1, r24	; 0x01
 838:	42 e0       	ldi	r20, 0x02	; 2
 83a:	50 e0       	ldi	r21, 0x00	; 0
 83c:	a4 0e       	add	r10, r20
 83e:	b5 1e       	adc	r11, r21
 840:	61 01       	movw	r12, r2
 842:	01 e0       	ldi	r16, 0x01	; 1
 844:	10 e0       	ldi	r17, 0x00	; 0
 846:	12 c0       	rjmp	.+36     	; 0x86c <vfprintf+0x160>
 848:	f5 01       	movw	r30, r10
 84a:	c0 80       	ld	r12, Z
 84c:	d1 80       	ldd	r13, Z+1	; 0x01
 84e:	f6 fc       	sbrc	r15, 6
 850:	03 c0       	rjmp	.+6      	; 0x858 <vfprintf+0x14c>
 852:	6f ef       	ldi	r22, 0xFF	; 255
 854:	7f ef       	ldi	r23, 0xFF	; 255
 856:	02 c0       	rjmp	.+4      	; 0x85c <vfprintf+0x150>
 858:	69 2d       	mov	r22, r9
 85a:	70 e0       	ldi	r23, 0x00	; 0
 85c:	42 e0       	ldi	r20, 0x02	; 2
 85e:	50 e0       	ldi	r21, 0x00	; 0
 860:	a4 0e       	add	r10, r20
 862:	b5 1e       	adc	r11, r21
 864:	c6 01       	movw	r24, r12
 866:	0e 94 6e 05 	call	0xadc	; 0xadc <strnlen>
 86a:	8c 01       	movw	r16, r24
 86c:	5f e7       	ldi	r21, 0x7F	; 127
 86e:	f5 22       	and	r15, r21
 870:	14 c0       	rjmp	.+40     	; 0x89a <vfprintf+0x18e>
 872:	f5 01       	movw	r30, r10
 874:	c0 80       	ld	r12, Z
 876:	d1 80       	ldd	r13, Z+1	; 0x01
 878:	f6 fc       	sbrc	r15, 6
 87a:	03 c0       	rjmp	.+6      	; 0x882 <vfprintf+0x176>
 87c:	6f ef       	ldi	r22, 0xFF	; 255
 87e:	7f ef       	ldi	r23, 0xFF	; 255
 880:	02 c0       	rjmp	.+4      	; 0x886 <vfprintf+0x17a>
 882:	69 2d       	mov	r22, r9
 884:	70 e0       	ldi	r23, 0x00	; 0
 886:	42 e0       	ldi	r20, 0x02	; 2
 888:	50 e0       	ldi	r21, 0x00	; 0
 88a:	a4 0e       	add	r10, r20
 88c:	b5 1e       	adc	r11, r21
 88e:	c6 01       	movw	r24, r12
 890:	0e 94 63 05 	call	0xac6	; 0xac6 <strnlen_P>
 894:	8c 01       	movw	r16, r24
 896:	50 e8       	ldi	r21, 0x80	; 128
 898:	f5 2a       	or	r15, r21
 89a:	f3 fe       	sbrs	r15, 3
 89c:	07 c0       	rjmp	.+14     	; 0x8ac <vfprintf+0x1a0>
 89e:	1a c0       	rjmp	.+52     	; 0x8d4 <vfprintf+0x1c8>
 8a0:	80 e2       	ldi	r24, 0x20	; 32
 8a2:	90 e0       	ldi	r25, 0x00	; 0
 8a4:	b3 01       	movw	r22, r6
 8a6:	0e 94 79 05 	call	0xaf2	; 0xaf2 <fputc>
 8aa:	ea 94       	dec	r14
 8ac:	8e 2d       	mov	r24, r14
 8ae:	90 e0       	ldi	r25, 0x00	; 0
 8b0:	08 17       	cp	r16, r24
 8b2:	19 07       	cpc	r17, r25
 8b4:	a8 f3       	brcs	.-22     	; 0x8a0 <vfprintf+0x194>
 8b6:	0e c0       	rjmp	.+28     	; 0x8d4 <vfprintf+0x1c8>
 8b8:	f6 01       	movw	r30, r12
 8ba:	f7 fc       	sbrc	r15, 7
 8bc:	85 91       	lpm	r24, Z+
 8be:	f7 fe       	sbrs	r15, 7
 8c0:	81 91       	ld	r24, Z+
 8c2:	6f 01       	movw	r12, r30
 8c4:	90 e0       	ldi	r25, 0x00	; 0
 8c6:	b3 01       	movw	r22, r6
 8c8:	0e 94 79 05 	call	0xaf2	; 0xaf2 <fputc>
 8cc:	e1 10       	cpse	r14, r1
 8ce:	ea 94       	dec	r14
 8d0:	01 50       	subi	r16, 0x01	; 1
 8d2:	10 40       	sbci	r17, 0x00	; 0
 8d4:	01 15       	cp	r16, r1
 8d6:	11 05       	cpc	r17, r1
 8d8:	79 f7       	brne	.-34     	; 0x8b8 <vfprintf+0x1ac>
 8da:	ea c0       	rjmp	.+468    	; 0xab0 <__stack+0x1b1>
 8dc:	94 36       	cpi	r25, 0x64	; 100
 8de:	11 f0       	breq	.+4      	; 0x8e4 <vfprintf+0x1d8>
 8e0:	99 36       	cpi	r25, 0x69	; 105
 8e2:	69 f5       	brne	.+90     	; 0x93e <__stack+0x3f>
 8e4:	f7 fe       	sbrs	r15, 7
 8e6:	08 c0       	rjmp	.+16     	; 0x8f8 <vfprintf+0x1ec>
 8e8:	f5 01       	movw	r30, r10
 8ea:	20 81       	ld	r18, Z
 8ec:	31 81       	ldd	r19, Z+1	; 0x01
 8ee:	42 81       	ldd	r20, Z+2	; 0x02
 8f0:	53 81       	ldd	r21, Z+3	; 0x03
 8f2:	84 e0       	ldi	r24, 0x04	; 4
 8f4:	90 e0       	ldi	r25, 0x00	; 0
 8f6:	0a c0       	rjmp	.+20     	; 0x90c <__stack+0xd>
 8f8:	f5 01       	movw	r30, r10
 8fa:	80 81       	ld	r24, Z
 8fc:	91 81       	ldd	r25, Z+1	; 0x01
 8fe:	9c 01       	movw	r18, r24
 900:	44 27       	eor	r20, r20
 902:	37 fd       	sbrc	r19, 7
 904:	40 95       	com	r20
 906:	54 2f       	mov	r21, r20
 908:	82 e0       	ldi	r24, 0x02	; 2
 90a:	90 e0       	ldi	r25, 0x00	; 0
 90c:	a8 0e       	add	r10, r24
 90e:	b9 1e       	adc	r11, r25
 910:	9f e6       	ldi	r25, 0x6F	; 111
 912:	f9 22       	and	r15, r25
 914:	57 ff       	sbrs	r21, 7
 916:	09 c0       	rjmp	.+18     	; 0x92a <__stack+0x2b>
 918:	50 95       	com	r21
 91a:	40 95       	com	r20
 91c:	30 95       	com	r19
 91e:	21 95       	neg	r18
 920:	3f 4f       	sbci	r19, 0xFF	; 255
 922:	4f 4f       	sbci	r20, 0xFF	; 255
 924:	5f 4f       	sbci	r21, 0xFF	; 255
 926:	e0 e8       	ldi	r30, 0x80	; 128
 928:	fe 2a       	or	r15, r30
 92a:	ca 01       	movw	r24, r20
 92c:	b9 01       	movw	r22, r18
 92e:	a1 01       	movw	r20, r2
 930:	2a e0       	ldi	r18, 0x0A	; 10
 932:	30 e0       	ldi	r19, 0x00	; 0
 934:	0e 94 a5 05 	call	0xb4a	; 0xb4a <__ultoa_invert>
 938:	d8 2e       	mov	r13, r24
 93a:	d2 18       	sub	r13, r2
 93c:	40 c0       	rjmp	.+128    	; 0x9be <__stack+0xbf>
 93e:	95 37       	cpi	r25, 0x75	; 117
 940:	29 f4       	brne	.+10     	; 0x94c <__stack+0x4d>
 942:	1f 2d       	mov	r17, r15
 944:	1f 7e       	andi	r17, 0xEF	; 239
 946:	2a e0       	ldi	r18, 0x0A	; 10
 948:	30 e0       	ldi	r19, 0x00	; 0
 94a:	1d c0       	rjmp	.+58     	; 0x986 <__stack+0x87>
 94c:	1f 2d       	mov	r17, r15
 94e:	19 7f       	andi	r17, 0xF9	; 249
 950:	9f 36       	cpi	r25, 0x6F	; 111
 952:	61 f0       	breq	.+24     	; 0x96c <__stack+0x6d>
 954:	90 37       	cpi	r25, 0x70	; 112
 956:	20 f4       	brcc	.+8      	; 0x960 <__stack+0x61>
 958:	98 35       	cpi	r25, 0x58	; 88
 95a:	09 f0       	breq	.+2      	; 0x95e <__stack+0x5f>
 95c:	ac c0       	rjmp	.+344    	; 0xab6 <__stack+0x1b7>
 95e:	0f c0       	rjmp	.+30     	; 0x97e <__stack+0x7f>
 960:	90 37       	cpi	r25, 0x70	; 112
 962:	39 f0       	breq	.+14     	; 0x972 <__stack+0x73>
 964:	98 37       	cpi	r25, 0x78	; 120
 966:	09 f0       	breq	.+2      	; 0x96a <__stack+0x6b>
 968:	a6 c0       	rjmp	.+332    	; 0xab6 <__stack+0x1b7>
 96a:	04 c0       	rjmp	.+8      	; 0x974 <__stack+0x75>
 96c:	28 e0       	ldi	r18, 0x08	; 8
 96e:	30 e0       	ldi	r19, 0x00	; 0
 970:	0a c0       	rjmp	.+20     	; 0x986 <__stack+0x87>
 972:	10 61       	ori	r17, 0x10	; 16
 974:	14 fd       	sbrc	r17, 4
 976:	14 60       	ori	r17, 0x04	; 4
 978:	20 e1       	ldi	r18, 0x10	; 16
 97a:	30 e0       	ldi	r19, 0x00	; 0
 97c:	04 c0       	rjmp	.+8      	; 0x986 <__stack+0x87>
 97e:	14 fd       	sbrc	r17, 4
 980:	16 60       	ori	r17, 0x06	; 6
 982:	20 e1       	ldi	r18, 0x10	; 16
 984:	32 e0       	ldi	r19, 0x02	; 2
 986:	17 ff       	sbrs	r17, 7
 988:	08 c0       	rjmp	.+16     	; 0x99a <__stack+0x9b>
 98a:	f5 01       	movw	r30, r10
 98c:	60 81       	ld	r22, Z
 98e:	71 81       	ldd	r23, Z+1	; 0x01
 990:	82 81       	ldd	r24, Z+2	; 0x02
 992:	93 81       	ldd	r25, Z+3	; 0x03
 994:	44 e0       	ldi	r20, 0x04	; 4
 996:	50 e0       	ldi	r21, 0x00	; 0
 998:	08 c0       	rjmp	.+16     	; 0x9aa <__stack+0xab>
 99a:	f5 01       	movw	r30, r10
 99c:	80 81       	ld	r24, Z
 99e:	91 81       	ldd	r25, Z+1	; 0x01
 9a0:	bc 01       	movw	r22, r24
 9a2:	80 e0       	ldi	r24, 0x00	; 0
 9a4:	90 e0       	ldi	r25, 0x00	; 0
 9a6:	42 e0       	ldi	r20, 0x02	; 2
 9a8:	50 e0       	ldi	r21, 0x00	; 0
 9aa:	a4 0e       	add	r10, r20
 9ac:	b5 1e       	adc	r11, r21
 9ae:	a1 01       	movw	r20, r2
 9b0:	0e 94 a5 05 	call	0xb4a	; 0xb4a <__ultoa_invert>
 9b4:	d8 2e       	mov	r13, r24
 9b6:	d2 18       	sub	r13, r2
 9b8:	8f e7       	ldi	r24, 0x7F	; 127
 9ba:	f8 2e       	mov	r15, r24
 9bc:	f1 22       	and	r15, r17
 9be:	f6 fe       	sbrs	r15, 6
 9c0:	0b c0       	rjmp	.+22     	; 0x9d8 <__stack+0xd9>
 9c2:	5e ef       	ldi	r21, 0xFE	; 254
 9c4:	f5 22       	and	r15, r21
 9c6:	d9 14       	cp	r13, r9
 9c8:	38 f4       	brcc	.+14     	; 0x9d8 <__stack+0xd9>
 9ca:	f4 fe       	sbrs	r15, 4
 9cc:	07 c0       	rjmp	.+14     	; 0x9dc <__stack+0xdd>
 9ce:	f2 fc       	sbrc	r15, 2
 9d0:	05 c0       	rjmp	.+10     	; 0x9dc <__stack+0xdd>
 9d2:	8f ee       	ldi	r24, 0xEF	; 239
 9d4:	f8 22       	and	r15, r24
 9d6:	02 c0       	rjmp	.+4      	; 0x9dc <__stack+0xdd>
 9d8:	1d 2d       	mov	r17, r13
 9da:	01 c0       	rjmp	.+2      	; 0x9de <__stack+0xdf>
 9dc:	19 2d       	mov	r17, r9
 9de:	f4 fe       	sbrs	r15, 4
 9e0:	0d c0       	rjmp	.+26     	; 0x9fc <__stack+0xfd>
 9e2:	fe 01       	movw	r30, r28
 9e4:	ed 0d       	add	r30, r13
 9e6:	f1 1d       	adc	r31, r1
 9e8:	80 81       	ld	r24, Z
 9ea:	80 33       	cpi	r24, 0x30	; 48
 9ec:	19 f4       	brne	.+6      	; 0x9f4 <__stack+0xf5>
 9ee:	99 ee       	ldi	r25, 0xE9	; 233
 9f0:	f9 22       	and	r15, r25
 9f2:	08 c0       	rjmp	.+16     	; 0xa04 <__stack+0x105>
 9f4:	1f 5f       	subi	r17, 0xFF	; 255
 9f6:	f2 fe       	sbrs	r15, 2
 9f8:	05 c0       	rjmp	.+10     	; 0xa04 <__stack+0x105>
 9fa:	03 c0       	rjmp	.+6      	; 0xa02 <__stack+0x103>
 9fc:	8f 2d       	mov	r24, r15
 9fe:	86 78       	andi	r24, 0x86	; 134
 a00:	09 f0       	breq	.+2      	; 0xa04 <__stack+0x105>
 a02:	1f 5f       	subi	r17, 0xFF	; 255
 a04:	0f 2d       	mov	r16, r15
 a06:	f3 fc       	sbrc	r15, 3
 a08:	14 c0       	rjmp	.+40     	; 0xa32 <__stack+0x133>
 a0a:	f0 fe       	sbrs	r15, 0
 a0c:	0f c0       	rjmp	.+30     	; 0xa2c <__stack+0x12d>
 a0e:	1e 15       	cp	r17, r14
 a10:	10 f0       	brcs	.+4      	; 0xa16 <__stack+0x117>
 a12:	9d 2c       	mov	r9, r13
 a14:	0b c0       	rjmp	.+22     	; 0xa2c <__stack+0x12d>
 a16:	9d 2c       	mov	r9, r13
 a18:	9e 0c       	add	r9, r14
 a1a:	91 1a       	sub	r9, r17
 a1c:	1e 2d       	mov	r17, r14
 a1e:	06 c0       	rjmp	.+12     	; 0xa2c <__stack+0x12d>
 a20:	80 e2       	ldi	r24, 0x20	; 32
 a22:	90 e0       	ldi	r25, 0x00	; 0
 a24:	b3 01       	movw	r22, r6
 a26:	0e 94 79 05 	call	0xaf2	; 0xaf2 <fputc>
 a2a:	1f 5f       	subi	r17, 0xFF	; 255
 a2c:	1e 15       	cp	r17, r14
 a2e:	c0 f3       	brcs	.-16     	; 0xa20 <__stack+0x121>
 a30:	04 c0       	rjmp	.+8      	; 0xa3a <__stack+0x13b>
 a32:	1e 15       	cp	r17, r14
 a34:	10 f4       	brcc	.+4      	; 0xa3a <__stack+0x13b>
 a36:	e1 1a       	sub	r14, r17
 a38:	01 c0       	rjmp	.+2      	; 0xa3c <__stack+0x13d>
 a3a:	ee 24       	eor	r14, r14
 a3c:	04 ff       	sbrs	r16, 4
 a3e:	0f c0       	rjmp	.+30     	; 0xa5e <__stack+0x15f>
 a40:	80 e3       	ldi	r24, 0x30	; 48
 a42:	90 e0       	ldi	r25, 0x00	; 0
 a44:	b3 01       	movw	r22, r6
 a46:	0e 94 79 05 	call	0xaf2	; 0xaf2 <fputc>
 a4a:	02 ff       	sbrs	r16, 2
 a4c:	1d c0       	rjmp	.+58     	; 0xa88 <__stack+0x189>
 a4e:	01 fd       	sbrc	r16, 1
 a50:	03 c0       	rjmp	.+6      	; 0xa58 <__stack+0x159>
 a52:	88 e7       	ldi	r24, 0x78	; 120
 a54:	90 e0       	ldi	r25, 0x00	; 0
 a56:	0e c0       	rjmp	.+28     	; 0xa74 <__stack+0x175>
 a58:	88 e5       	ldi	r24, 0x58	; 88
 a5a:	90 e0       	ldi	r25, 0x00	; 0
 a5c:	0b c0       	rjmp	.+22     	; 0xa74 <__stack+0x175>
 a5e:	80 2f       	mov	r24, r16
 a60:	86 78       	andi	r24, 0x86	; 134
 a62:	91 f0       	breq	.+36     	; 0xa88 <__stack+0x189>
 a64:	01 ff       	sbrs	r16, 1
 a66:	02 c0       	rjmp	.+4      	; 0xa6c <__stack+0x16d>
 a68:	8b e2       	ldi	r24, 0x2B	; 43
 a6a:	01 c0       	rjmp	.+2      	; 0xa6e <__stack+0x16f>
 a6c:	80 e2       	ldi	r24, 0x20	; 32
 a6e:	f7 fc       	sbrc	r15, 7
 a70:	8d e2       	ldi	r24, 0x2D	; 45
 a72:	90 e0       	ldi	r25, 0x00	; 0
 a74:	b3 01       	movw	r22, r6
 a76:	0e 94 79 05 	call	0xaf2	; 0xaf2 <fputc>
 a7a:	06 c0       	rjmp	.+12     	; 0xa88 <__stack+0x189>
 a7c:	80 e3       	ldi	r24, 0x30	; 48
 a7e:	90 e0       	ldi	r25, 0x00	; 0
 a80:	b3 01       	movw	r22, r6
 a82:	0e 94 79 05 	call	0xaf2	; 0xaf2 <fputc>
 a86:	9a 94       	dec	r9
 a88:	d9 14       	cp	r13, r9
 a8a:	c0 f3       	brcs	.-16     	; 0xa7c <__stack+0x17d>
 a8c:	da 94       	dec	r13
 a8e:	f1 01       	movw	r30, r2
 a90:	ed 0d       	add	r30, r13
 a92:	f1 1d       	adc	r31, r1
 a94:	80 81       	ld	r24, Z
 a96:	90 e0       	ldi	r25, 0x00	; 0
 a98:	b3 01       	movw	r22, r6
 a9a:	0e 94 79 05 	call	0xaf2	; 0xaf2 <fputc>
 a9e:	dd 20       	and	r13, r13
 aa0:	a9 f7       	brne	.-22     	; 0xa8c <__stack+0x18d>
 aa2:	06 c0       	rjmp	.+12     	; 0xab0 <__stack+0x1b1>
 aa4:	80 e2       	ldi	r24, 0x20	; 32
 aa6:	90 e0       	ldi	r25, 0x00	; 0
 aa8:	b3 01       	movw	r22, r6
 aaa:	0e 94 79 05 	call	0xaf2	; 0xaf2 <fputc>
 aae:	ea 94       	dec	r14
 ab0:	ee 20       	and	r14, r14
 ab2:	c1 f7       	brne	.-16     	; 0xaa4 <__stack+0x1a5>
 ab4:	43 ce       	rjmp	.-890    	; 0x73c <vfprintf+0x30>
 ab6:	f3 01       	movw	r30, r6
 ab8:	66 81       	ldd	r22, Z+6	; 0x06
 aba:	77 81       	ldd	r23, Z+7	; 0x07
 abc:	cb 01       	movw	r24, r22
 abe:	2b 96       	adiw	r28, 0x0b	; 11
 ac0:	e2 e1       	ldi	r30, 0x12	; 18
 ac2:	0c 94 1f 06 	jmp	0xc3e	; 0xc3e <__epilogue_restores__>

00000ac6 <strnlen_P>:
 ac6:	fc 01       	movw	r30, r24
 ac8:	05 90       	lpm	r0, Z+
 aca:	61 50       	subi	r22, 0x01	; 1
 acc:	70 40       	sbci	r23, 0x00	; 0
 ace:	01 10       	cpse	r0, r1
 ad0:	d8 f7       	brcc	.-10     	; 0xac8 <strnlen_P+0x2>
 ad2:	80 95       	com	r24
 ad4:	90 95       	com	r25
 ad6:	8e 0f       	add	r24, r30
 ad8:	9f 1f       	adc	r25, r31
 ada:	08 95       	ret

00000adc <strnlen>:
 adc:	fc 01       	movw	r30, r24
 ade:	61 50       	subi	r22, 0x01	; 1
 ae0:	70 40       	sbci	r23, 0x00	; 0
 ae2:	01 90       	ld	r0, Z+
 ae4:	01 10       	cpse	r0, r1
 ae6:	d8 f7       	brcc	.-10     	; 0xade <strnlen+0x2>
 ae8:	80 95       	com	r24
 aea:	90 95       	com	r25
 aec:	8e 0f       	add	r24, r30
 aee:	9f 1f       	adc	r25, r31
 af0:	08 95       	ret

00000af2 <fputc>:
 af2:	0f 93       	push	r16
 af4:	1f 93       	push	r17
 af6:	cf 93       	push	r28
 af8:	df 93       	push	r29
 afa:	8c 01       	movw	r16, r24
 afc:	eb 01       	movw	r28, r22
 afe:	8b 81       	ldd	r24, Y+3	; 0x03
 b00:	81 ff       	sbrs	r24, 1
 b02:	1b c0       	rjmp	.+54     	; 0xb3a <fputc+0x48>
 b04:	82 ff       	sbrs	r24, 2
 b06:	0d c0       	rjmp	.+26     	; 0xb22 <fputc+0x30>
 b08:	2e 81       	ldd	r18, Y+6	; 0x06
 b0a:	3f 81       	ldd	r19, Y+7	; 0x07
 b0c:	8c 81       	ldd	r24, Y+4	; 0x04
 b0e:	9d 81       	ldd	r25, Y+5	; 0x05
 b10:	28 17       	cp	r18, r24
 b12:	39 07       	cpc	r19, r25
 b14:	64 f4       	brge	.+24     	; 0xb2e <fputc+0x3c>
 b16:	e8 81       	ld	r30, Y
 b18:	f9 81       	ldd	r31, Y+1	; 0x01
 b1a:	01 93       	st	Z+, r16
 b1c:	f9 83       	std	Y+1, r31	; 0x01
 b1e:	e8 83       	st	Y, r30
 b20:	06 c0       	rjmp	.+12     	; 0xb2e <fputc+0x3c>
 b22:	e8 85       	ldd	r30, Y+8	; 0x08
 b24:	f9 85       	ldd	r31, Y+9	; 0x09
 b26:	80 2f       	mov	r24, r16
 b28:	09 95       	icall
 b2a:	89 2b       	or	r24, r25
 b2c:	31 f4       	brne	.+12     	; 0xb3a <fputc+0x48>
 b2e:	8e 81       	ldd	r24, Y+6	; 0x06
 b30:	9f 81       	ldd	r25, Y+7	; 0x07
 b32:	01 96       	adiw	r24, 0x01	; 1
 b34:	9f 83       	std	Y+7, r25	; 0x07
 b36:	8e 83       	std	Y+6, r24	; 0x06
 b38:	02 c0       	rjmp	.+4      	; 0xb3e <fputc+0x4c>
 b3a:	0f ef       	ldi	r16, 0xFF	; 255
 b3c:	1f ef       	ldi	r17, 0xFF	; 255
 b3e:	c8 01       	movw	r24, r16
 b40:	df 91       	pop	r29
 b42:	cf 91       	pop	r28
 b44:	1f 91       	pop	r17
 b46:	0f 91       	pop	r16
 b48:	08 95       	ret

00000b4a <__ultoa_invert>:
 b4a:	fa 01       	movw	r30, r20
 b4c:	aa 27       	eor	r26, r26
 b4e:	28 30       	cpi	r18, 0x08	; 8
 b50:	51 f1       	breq	.+84     	; 0xba6 <__ultoa_invert+0x5c>
 b52:	20 31       	cpi	r18, 0x10	; 16
 b54:	81 f1       	breq	.+96     	; 0xbb6 <__ultoa_invert+0x6c>
 b56:	e8 94       	clt
 b58:	6f 93       	push	r22
 b5a:	6e 7f       	andi	r22, 0xFE	; 254
 b5c:	6e 5f       	subi	r22, 0xFE	; 254
 b5e:	7f 4f       	sbci	r23, 0xFF	; 255
 b60:	8f 4f       	sbci	r24, 0xFF	; 255
 b62:	9f 4f       	sbci	r25, 0xFF	; 255
 b64:	af 4f       	sbci	r26, 0xFF	; 255
 b66:	b1 e0       	ldi	r27, 0x01	; 1
 b68:	3e d0       	rcall	.+124    	; 0xbe6 <__ultoa_invert+0x9c>
 b6a:	b4 e0       	ldi	r27, 0x04	; 4
 b6c:	3c d0       	rcall	.+120    	; 0xbe6 <__ultoa_invert+0x9c>
 b6e:	67 0f       	add	r22, r23
 b70:	78 1f       	adc	r23, r24
 b72:	89 1f       	adc	r24, r25
 b74:	9a 1f       	adc	r25, r26
 b76:	a1 1d       	adc	r26, r1
 b78:	68 0f       	add	r22, r24
 b7a:	79 1f       	adc	r23, r25
 b7c:	8a 1f       	adc	r24, r26
 b7e:	91 1d       	adc	r25, r1
 b80:	a1 1d       	adc	r26, r1
 b82:	6a 0f       	add	r22, r26
 b84:	71 1d       	adc	r23, r1
 b86:	81 1d       	adc	r24, r1
 b88:	91 1d       	adc	r25, r1
 b8a:	a1 1d       	adc	r26, r1
 b8c:	20 d0       	rcall	.+64     	; 0xbce <__ultoa_invert+0x84>
 b8e:	09 f4       	brne	.+2      	; 0xb92 <__ultoa_invert+0x48>
 b90:	68 94       	set
 b92:	3f 91       	pop	r19
 b94:	2a e0       	ldi	r18, 0x0A	; 10
 b96:	26 9f       	mul	r18, r22
 b98:	11 24       	eor	r1, r1
 b9a:	30 19       	sub	r19, r0
 b9c:	30 5d       	subi	r19, 0xD0	; 208
 b9e:	31 93       	st	Z+, r19
 ba0:	de f6       	brtc	.-74     	; 0xb58 <__ultoa_invert+0xe>
 ba2:	cf 01       	movw	r24, r30
 ba4:	08 95       	ret
 ba6:	46 2f       	mov	r20, r22
 ba8:	47 70       	andi	r20, 0x07	; 7
 baa:	40 5d       	subi	r20, 0xD0	; 208
 bac:	41 93       	st	Z+, r20
 bae:	b3 e0       	ldi	r27, 0x03	; 3
 bb0:	0f d0       	rcall	.+30     	; 0xbd0 <__ultoa_invert+0x86>
 bb2:	c9 f7       	brne	.-14     	; 0xba6 <__ultoa_invert+0x5c>
 bb4:	f6 cf       	rjmp	.-20     	; 0xba2 <__ultoa_invert+0x58>
 bb6:	46 2f       	mov	r20, r22
 bb8:	4f 70       	andi	r20, 0x0F	; 15
 bba:	40 5d       	subi	r20, 0xD0	; 208
 bbc:	4a 33       	cpi	r20, 0x3A	; 58
 bbe:	18 f0       	brcs	.+6      	; 0xbc6 <__ultoa_invert+0x7c>
 bc0:	49 5d       	subi	r20, 0xD9	; 217
 bc2:	31 fd       	sbrc	r19, 1
 bc4:	40 52       	subi	r20, 0x20	; 32
 bc6:	41 93       	st	Z+, r20
 bc8:	02 d0       	rcall	.+4      	; 0xbce <__ultoa_invert+0x84>
 bca:	a9 f7       	brne	.-22     	; 0xbb6 <__ultoa_invert+0x6c>
 bcc:	ea cf       	rjmp	.-44     	; 0xba2 <__ultoa_invert+0x58>
 bce:	b4 e0       	ldi	r27, 0x04	; 4
 bd0:	a6 95       	lsr	r26
 bd2:	97 95       	ror	r25
 bd4:	87 95       	ror	r24
 bd6:	77 95       	ror	r23
 bd8:	67 95       	ror	r22
 bda:	ba 95       	dec	r27
 bdc:	c9 f7       	brne	.-14     	; 0xbd0 <__ultoa_invert+0x86>
 bde:	00 97       	sbiw	r24, 0x00	; 0
 be0:	61 05       	cpc	r22, r1
 be2:	71 05       	cpc	r23, r1
 be4:	08 95       	ret
 be6:	9b 01       	movw	r18, r22
 be8:	ac 01       	movw	r20, r24
 bea:	0a 2e       	mov	r0, r26
 bec:	06 94       	lsr	r0
 bee:	57 95       	ror	r21
 bf0:	47 95       	ror	r20
 bf2:	37 95       	ror	r19
 bf4:	27 95       	ror	r18
 bf6:	ba 95       	dec	r27
 bf8:	c9 f7       	brne	.-14     	; 0xbec <__ultoa_invert+0xa2>
 bfa:	62 0f       	add	r22, r18
 bfc:	73 1f       	adc	r23, r19
 bfe:	84 1f       	adc	r24, r20
 c00:	95 1f       	adc	r25, r21
 c02:	a0 1d       	adc	r26, r0
 c04:	08 95       	ret

00000c06 <__prologue_saves__>:
 c06:	2f 92       	push	r2
 c08:	3f 92       	push	r3
 c0a:	4f 92       	push	r4
 c0c:	5f 92       	push	r5
 c0e:	6f 92       	push	r6
 c10:	7f 92       	push	r7
 c12:	8f 92       	push	r8
 c14:	9f 92       	push	r9
 c16:	af 92       	push	r10
 c18:	bf 92       	push	r11
 c1a:	cf 92       	push	r12
 c1c:	df 92       	push	r13
 c1e:	ef 92       	push	r14
 c20:	ff 92       	push	r15
 c22:	0f 93       	push	r16
 c24:	1f 93       	push	r17
 c26:	cf 93       	push	r28
 c28:	df 93       	push	r29
 c2a:	cd b7       	in	r28, 0x3d	; 61
 c2c:	de b7       	in	r29, 0x3e	; 62
 c2e:	ca 1b       	sub	r28, r26
 c30:	db 0b       	sbc	r29, r27
 c32:	0f b6       	in	r0, 0x3f	; 63
 c34:	f8 94       	cli
 c36:	de bf       	out	0x3e, r29	; 62
 c38:	0f be       	out	0x3f, r0	; 63
 c3a:	cd bf       	out	0x3d, r28	; 61
 c3c:	09 94       	ijmp

00000c3e <__epilogue_restores__>:
 c3e:	2a 88       	ldd	r2, Y+18	; 0x12
 c40:	39 88       	ldd	r3, Y+17	; 0x11
 c42:	48 88       	ldd	r4, Y+16	; 0x10
 c44:	5f 84       	ldd	r5, Y+15	; 0x0f
 c46:	6e 84       	ldd	r6, Y+14	; 0x0e
 c48:	7d 84       	ldd	r7, Y+13	; 0x0d
 c4a:	8c 84       	ldd	r8, Y+12	; 0x0c
 c4c:	9b 84       	ldd	r9, Y+11	; 0x0b
 c4e:	aa 84       	ldd	r10, Y+10	; 0x0a
 c50:	b9 84       	ldd	r11, Y+9	; 0x09
 c52:	c8 84       	ldd	r12, Y+8	; 0x08
 c54:	df 80       	ldd	r13, Y+7	; 0x07
 c56:	ee 80       	ldd	r14, Y+6	; 0x06
 c58:	fd 80       	ldd	r15, Y+5	; 0x05
 c5a:	0c 81       	ldd	r16, Y+4	; 0x04
 c5c:	1b 81       	ldd	r17, Y+3	; 0x03
 c5e:	aa 81       	ldd	r26, Y+2	; 0x02
 c60:	b9 81       	ldd	r27, Y+1	; 0x01
 c62:	ce 0f       	add	r28, r30
 c64:	d1 1d       	adc	r29, r1
 c66:	0f b6       	in	r0, 0x3f	; 63
 c68:	f8 94       	cli
 c6a:	de bf       	out	0x3e, r29	; 62
 c6c:	0f be       	out	0x3f, r0	; 63
 c6e:	cd bf       	out	0x3d, r28	; 61
 c70:	ed 01       	movw	r28, r26
 c72:	08 95       	ret

00000c74 <_exit>:
 c74:	f8 94       	cli

00000c76 <__stop_program>:
 c76:	ff cf       	rjmp	.-2      	; 0xc76 <__stop_program>
