
command_line_demo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000052  00800100  000012ce  00001362  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000012ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d8  00800152  00800152  000013b4  2**0
                  ALLOC
  3 .debug_aranges 000001e0  00000000  00000000  000013b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000a2d  00000000  00000000  00001594  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002197  00000000  00000000  00001fc1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c2b  00000000  00000000  00004158  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000013a6  00000000  00000000  00004d83  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002f0  00000000  00000000  0000612c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000008cc  00000000  00000000  0000641c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006d0  00000000  00000000  00006ce8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a3 01 	jmp	0x346	; 0x346 <__ctors_end>
       4:	0c 94 c0 01 	jmp	0x380	; 0x380 <__bad_interrupt>
       8:	0c 94 c0 01 	jmp	0x380	; 0x380 <__bad_interrupt>
       c:	0c 94 c0 01 	jmp	0x380	; 0x380 <__bad_interrupt>
      10:	0c 94 c0 01 	jmp	0x380	; 0x380 <__bad_interrupt>
      14:	0c 94 c0 01 	jmp	0x380	; 0x380 <__bad_interrupt>
      18:	0c 94 c0 01 	jmp	0x380	; 0x380 <__bad_interrupt>
      1c:	0c 94 c0 01 	jmp	0x380	; 0x380 <__bad_interrupt>
      20:	0c 94 c0 01 	jmp	0x380	; 0x380 <__bad_interrupt>
      24:	0c 94 c0 01 	jmp	0x380	; 0x380 <__bad_interrupt>
      28:	0c 94 c0 01 	jmp	0x380	; 0x380 <__bad_interrupt>
      2c:	0c 94 c0 01 	jmp	0x380	; 0x380 <__bad_interrupt>
      30:	0c 94 c0 01 	jmp	0x380	; 0x380 <__bad_interrupt>
      34:	0c 94 c0 01 	jmp	0x380	; 0x380 <__bad_interrupt>
      38:	0c 94 c0 01 	jmp	0x380	; 0x380 <__bad_interrupt>
      3c:	0c 94 c0 01 	jmp	0x380	; 0x380 <__bad_interrupt>
      40:	0c 94 c0 01 	jmp	0x380	; 0x380 <__bad_interrupt>
      44:	0c 94 c0 01 	jmp	0x380	; 0x380 <__bad_interrupt>
      48:	0c 94 11 04 	jmp	0x822	; 0x822 <__vector_18>
      4c:	0c 94 c0 01 	jmp	0x380	; 0x380 <__bad_interrupt>
      50:	0c 94 41 04 	jmp	0x882	; 0x882 <__vector_20>
      54:	0c 94 c0 01 	jmp	0x380	; 0x380 <__bad_interrupt>
      58:	0c 94 c0 01 	jmp	0x380	; 0x380 <__bad_interrupt>
      5c:	0c 94 c0 01 	jmp	0x380	; 0x380 <__bad_interrupt>
      60:	0c 94 c0 01 	jmp	0x380	; 0x380 <__bad_interrupt>
      64:	0c 94 c0 01 	jmp	0x380	; 0x380 <__bad_interrupt>

00000068 <COMMANDS>:
      68:	00 01 34 02 09 01 23 02 12 01 12 02 1b 01 01 02     ..4...#.........
      78:	24 01 f0 01 2d 01 df 01 36 01 ce 01 3f 01 c2 01     $...-...6...?...
      88:	00 00 00 00                                         ....

0000008c <HELP>:
      8c:	0a 43 4f 4d 4d 41 4e 44 20 2d 20 44 41 54 41 54     .COMMAND - DATAT
      9c:	59 50 45 20 2d 20 53 55 4d 4d 41 52 59 0a 43 4f     YPE - SUMMARY.CO
      ac:	4d 4d 41 4e 44 31 20 2d 20 75 69 6e 74 31 36 5f     MMAND1 - uint16_
      bc:	74 20 64 61 74 61 20 2d 20 42 72 69 65 66 20 64     t data - Brief d
      cc:	65 73 63 72 69 70 74 69 6f 6e 20 6f 66 20 74 68     escription of th
      dc:	65 20 63 6f 6d 6d 61 6e 64 0a 43 4f 4d 4d 41 4e     e command.COMMAN
      ec:	44 32 20 2d 20 75 69 6e 74 31 36 5f 74 20 64 61     D2 - uint16_t da
      fc:	74 61 20 2d 20 42 72 69 65 66 20 64 65 73 63 72     ta - Brief descr
     10c:	69 70 74 69 6f 6e 20 6f 66 20 74 68 65 20 63 6f     iption of the co
     11c:	6d 6d 61 6e 64 0a 43 4f 4d 4d 41 4e 44 33 20 2d     mmand.COMMAND3 -
     12c:	20 75 69 6e 74 31 36 5f 74 20 64 61 74 61 20 2d      uint16_t data -
     13c:	20 42 72 69 65 66 20 64 65 73 63 72 69 70 74 69      Brief descripti
     14c:	6f 6e 20 6f 66 20 74 68 65 20 63 6f 6d 6d 61 6e     on of the comman
     15c:	64 0a 43 4f 4d 4d 41 4e 44 34 20 2d 20 75 69 6e     d.COMMAND4 - uin
     16c:	74 31 36 5f 74 20 64 61 74 61 20 2d 20 42 72 69     t16_t data - Bri
     17c:	65 66 20 64 65 73 63 72 69 70 74 69 6f 6e 20 6f     ef description o
     18c:	66 20 74 68 65 20 63 6f 6d 6d 61 6e 64 0a 43 4f     f the command.CO
     19c:	4d 4d 41 4e 44 35 20 2d 20 75 69 6e 74 31 36 5f     MMAND5 - uint16_
     1ac:	74 20 64 61 74 61 20 2d 20 42 72 69 65 66 20 64     t data - Brief d
     1bc:	65 73 63 72 69 70 74 69 6f 6e 20 6f 66 20 74 68     escription of th
     1cc:	65 20 63 6f 6d 6d 61 6e 64 0a 48 45 4c 50 20 2d     e command.HELP -
     1dc:	20 6e 6f 20 64 61 74 61 20 2d 20 44 69 73 70 6c      no data - Displ
     1ec:	61 79 20 74 68 65 20 68 65 6c 70 20 6c 69 73 74     ay the help list
     1fc:	0a 00                                               ..

000001fe <__c.2009>:
     1fe:	45 52 52 4f 52 20 69 6e 20 70 61 72 73 65 5f 63     ERROR in parse_c
     20e:	6f 6d 6d 61 6e 64 28 29 3a 20 6e 6f 74 20 61 20     ommand(): not a 
     21e:	6e 75 6d 62 65 72 20 2d 20 6e 6f 74 20 64 69 67     number - not dig
     22e:	69 74 3a 20 25 63 0a 00                             it: %c..

00000236 <__c.2007>:
     236:	45 52 52 4f 52 20 69 6e 20 70 61 72 73 65 5f 63     ERROR in parse_c
     246:	6f 6d 6d 61 6e 64 28 29 3a 20 6e 6f 74 20 61 20     ommand(): not a 
     256:	63 6f 6d 6d 61 6e 64 20 2d 20 6e 6f 74 20 61 6c     command - not al
     266:	70 68 61 2e 0a 00                                   pha...

0000026c <__c.1988>:
     26c:	45 52 52 4f 52 3a 20 63 61 6c 6c 5f 63 6f 6d 6d     ERROR: call_comm
     27c:	61 6e 64 20 2d 20 6e 6f 74 20 61 20 63 6f 6d 6d     and - not a comm
     28c:	61 6e 64 3a 20 25 73 0a 00                          and: %s..

00000295 <__c.1962>:
     295:	63 6f 6d 6d 61 6e 64 36 20 2d 20 64 61 74 61 20     command6 - data 
     2a5:	3d 20 25 75 0a 00                                   = %u..

000002ab <__c.1957>:
     2ab:	63 6f 6d 6d 61 6e 64 35 20 2d 20 64 61 74 61 20     command5 - data 
     2bb:	3d 20 25 75 0a 00                                   = %u..

000002c1 <__c.1952>:
     2c1:	63 6f 6d 6d 61 6e 64 34 20 2d 20 64 61 74 61 20     command4 - data 
     2d1:	3d 20 25 75 0a 00                                   = %u..

000002d7 <__c.1947>:
     2d7:	63 6f 6d 6d 61 6e 64 33 20 2d 20 64 61 74 61 20     command3 - data 
     2e7:	3d 20 25 75 0a 00                                   = %u..

000002ed <__c.1942>:
     2ed:	63 6f 6d 6d 61 6e 64 32 20 2d 20 64 61 74 61 20     command2 - data 
     2fd:	3d 20 25 75 0a 00                                   = %u..

00000303 <__c.1937>:
     303:	63 6f 6d 6d 61 6e 64 31 20 2d 20 64 61 74 61 20     command1 - data 
     313:	3d 20 25 75 0a 00                                   = %u..

00000319 <__c.1932>:
     319:	63 6f 6d 6d 61 6e 64 30 20 2d 20 64 61 74 61 20     command0 - data 
     329:	3d 20 25 75 0a 00                                   = %u..

0000032f <__c.1923>:
     32f:	63 6f 6d 6d 61 6e 64 5f 6c 69 6e 65 5f 64 65 6d     command_line_dem
     33f:	6f 20 30 32 38 0a 00                                o 028..

00000346 <__ctors_end>:
     346:	11 24       	eor	r1, r1
     348:	1f be       	out	0x3f, r1	; 63
     34a:	cf ef       	ldi	r28, 0xFF	; 255
     34c:	d8 e0       	ldi	r29, 0x08	; 8
     34e:	de bf       	out	0x3e, r29	; 62
     350:	cd bf       	out	0x3d, r28	; 61

00000352 <__do_copy_data>:
     352:	11 e0       	ldi	r17, 0x01	; 1
     354:	a0 e0       	ldi	r26, 0x00	; 0
     356:	b1 e0       	ldi	r27, 0x01	; 1
     358:	ee ec       	ldi	r30, 0xCE	; 206
     35a:	f2 e1       	ldi	r31, 0x12	; 18
     35c:	02 c0       	rjmp	.+4      	; 0x362 <.do_copy_data_start>

0000035e <.do_copy_data_loop>:
     35e:	05 90       	lpm	r0, Z+
     360:	0d 92       	st	X+, r0

00000362 <.do_copy_data_start>:
     362:	a2 35       	cpi	r26, 0x52	; 82
     364:	b1 07       	cpc	r27, r17
     366:	d9 f7       	brne	.-10     	; 0x35e <.do_copy_data_loop>

00000368 <__do_clear_bss>:
     368:	12 e0       	ldi	r17, 0x02	; 2
     36a:	a2 e5       	ldi	r26, 0x52	; 82
     36c:	b1 e0       	ldi	r27, 0x01	; 1
     36e:	01 c0       	rjmp	.+2      	; 0x372 <.do_clear_bss_start>

00000370 <.do_clear_bss_loop>:
     370:	1d 92       	st	X+, r1

00000372 <.do_clear_bss_start>:
     372:	aa 32       	cpi	r26, 0x2A	; 42
     374:	b1 07       	cpc	r27, r17
     376:	e1 f7       	brne	.-8      	; 0x370 <.do_clear_bss_loop>
     378:	0e 94 86 03 	call	0x70c	; 0x70c <main>
     37c:	0c 94 65 09 	jmp	0x12ca	; 0x12ca <_exit>

00000380 <__bad_interrupt>:
     380:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000384 <help>:
*/
const char HELP[] PROGMEM = "\nCOMMAND - DATATYPE - SUMMARY\nCOMMAND1 - uint16_t data - Brief description of the command\nCOMMAND2 - uint16_t data - Brief description of the command\nCOMMAND3 - uint16_t data - Brief description of the command\nCOMMAND4 - uint16_t data - Brief description of the command\nCOMMAND5 - uint16_t data - Brief description of the command\nHELP - no data - Display the help list\n";

void help(uint16_t data)
{
	printf_P(HELP);
     384:	00 d0       	rcall	.+0      	; 0x386 <help+0x2>
     386:	8c e8       	ldi	r24, 0x8C	; 140
     388:	90 e0       	ldi	r25, 0x00	; 0
     38a:	ed b7       	in	r30, 0x3d	; 61
     38c:	fe b7       	in	r31, 0x3e	; 62
     38e:	92 83       	std	Z+2, r25	; 0x02
     390:	81 83       	std	Z+1, r24	; 0x01
     392:	0e 94 8b 06 	call	0xd16	; 0xd16 <printf_P>
     396:	0f 90       	pop	r0
     398:	0f 90       	pop	r0
}
     39a:	08 95       	ret

0000039c <command6>:
{
	printf_P(PSTR("command5 - data = %u\n"),data);
}
void command6(uint16_t data)
{
	printf_P(PSTR("command6 - data = %u\n"),data);
     39c:	00 d0       	rcall	.+0      	; 0x39e <command6+0x2>
     39e:	00 d0       	rcall	.+0      	; 0x3a0 <command6+0x4>
     3a0:	25 e9       	ldi	r18, 0x95	; 149
     3a2:	32 e0       	ldi	r19, 0x02	; 2
     3a4:	ed b7       	in	r30, 0x3d	; 61
     3a6:	fe b7       	in	r31, 0x3e	; 62
     3a8:	32 83       	std	Z+2, r19	; 0x02
     3aa:	21 83       	std	Z+1, r18	; 0x01
     3ac:	94 83       	std	Z+4, r25	; 0x04
     3ae:	83 83       	std	Z+3, r24	; 0x03
     3b0:	0e 94 8b 06 	call	0xd16	; 0xd16 <printf_P>
     3b4:	0f 90       	pop	r0
     3b6:	0f 90       	pop	r0
     3b8:	0f 90       	pop	r0
     3ba:	0f 90       	pop	r0
}
     3bc:	08 95       	ret

000003be <command5>:
{
	printf_P(PSTR("command4 - data = %u\n"),data);
}
void command5(uint16_t data)
{
	printf_P(PSTR("command5 - data = %u\n"),data);
     3be:	00 d0       	rcall	.+0      	; 0x3c0 <command5+0x2>
     3c0:	00 d0       	rcall	.+0      	; 0x3c2 <command5+0x4>
     3c2:	2b ea       	ldi	r18, 0xAB	; 171
     3c4:	32 e0       	ldi	r19, 0x02	; 2
     3c6:	ed b7       	in	r30, 0x3d	; 61
     3c8:	fe b7       	in	r31, 0x3e	; 62
     3ca:	32 83       	std	Z+2, r19	; 0x02
     3cc:	21 83       	std	Z+1, r18	; 0x01
     3ce:	94 83       	std	Z+4, r25	; 0x04
     3d0:	83 83       	std	Z+3, r24	; 0x03
     3d2:	0e 94 8b 06 	call	0xd16	; 0xd16 <printf_P>
     3d6:	0f 90       	pop	r0
     3d8:	0f 90       	pop	r0
     3da:	0f 90       	pop	r0
     3dc:	0f 90       	pop	r0
}
     3de:	08 95       	ret

000003e0 <command4>:
{
	printf_P(PSTR("command3 - data = %u\n"),data);
}
void command4(uint16_t data)
{
	printf_P(PSTR("command4 - data = %u\n"),data);
     3e0:	00 d0       	rcall	.+0      	; 0x3e2 <command4+0x2>
     3e2:	00 d0       	rcall	.+0      	; 0x3e4 <command4+0x4>
     3e4:	21 ec       	ldi	r18, 0xC1	; 193
     3e6:	32 e0       	ldi	r19, 0x02	; 2
     3e8:	ed b7       	in	r30, 0x3d	; 61
     3ea:	fe b7       	in	r31, 0x3e	; 62
     3ec:	32 83       	std	Z+2, r19	; 0x02
     3ee:	21 83       	std	Z+1, r18	; 0x01
     3f0:	94 83       	std	Z+4, r25	; 0x04
     3f2:	83 83       	std	Z+3, r24	; 0x03
     3f4:	0e 94 8b 06 	call	0xd16	; 0xd16 <printf_P>
     3f8:	0f 90       	pop	r0
     3fa:	0f 90       	pop	r0
     3fc:	0f 90       	pop	r0
     3fe:	0f 90       	pop	r0
}
     400:	08 95       	ret

00000402 <command3>:
	printf_P(PSTR("command2 - data = %u\n"),data);
}

void command3(uint16_t data)
{
	printf_P(PSTR("command3 - data = %u\n"),data);
     402:	00 d0       	rcall	.+0      	; 0x404 <command3+0x2>
     404:	00 d0       	rcall	.+0      	; 0x406 <command3+0x4>
     406:	27 ed       	ldi	r18, 0xD7	; 215
     408:	32 e0       	ldi	r19, 0x02	; 2
     40a:	ed b7       	in	r30, 0x3d	; 61
     40c:	fe b7       	in	r31, 0x3e	; 62
     40e:	32 83       	std	Z+2, r19	; 0x02
     410:	21 83       	std	Z+1, r18	; 0x01
     412:	94 83       	std	Z+4, r25	; 0x04
     414:	83 83       	std	Z+3, r24	; 0x03
     416:	0e 94 8b 06 	call	0xd16	; 0xd16 <printf_P>
     41a:	0f 90       	pop	r0
     41c:	0f 90       	pop	r0
     41e:	0f 90       	pop	r0
     420:	0f 90       	pop	r0
}
     422:	08 95       	ret

00000424 <command2>:
	printf_P(PSTR("command1 - data = %u\n"),data);
}

void command2(uint16_t data)
{
	printf_P(PSTR("command2 - data = %u\n"),data);
     424:	00 d0       	rcall	.+0      	; 0x426 <command2+0x2>
     426:	00 d0       	rcall	.+0      	; 0x428 <command2+0x4>
     428:	2d ee       	ldi	r18, 0xED	; 237
     42a:	32 e0       	ldi	r19, 0x02	; 2
     42c:	ed b7       	in	r30, 0x3d	; 61
     42e:	fe b7       	in	r31, 0x3e	; 62
     430:	32 83       	std	Z+2, r19	; 0x02
     432:	21 83       	std	Z+1, r18	; 0x01
     434:	94 83       	std	Z+4, r25	; 0x04
     436:	83 83       	std	Z+3, r24	; 0x03
     438:	0e 94 8b 06 	call	0xd16	; 0xd16 <printf_P>
     43c:	0f 90       	pop	r0
     43e:	0f 90       	pop	r0
     440:	0f 90       	pop	r0
     442:	0f 90       	pop	r0
}
     444:	08 95       	ret

00000446 <command1>:
	printf_P(PSTR("command0 - data = %u\n"),data);
}

void command1(uint16_t data)
{
	printf_P(PSTR("command1 - data = %u\n"),data);
     446:	00 d0       	rcall	.+0      	; 0x448 <command1+0x2>
     448:	00 d0       	rcall	.+0      	; 0x44a <command1+0x4>
     44a:	23 e0       	ldi	r18, 0x03	; 3
     44c:	33 e0       	ldi	r19, 0x03	; 3
     44e:	ed b7       	in	r30, 0x3d	; 61
     450:	fe b7       	in	r31, 0x3e	; 62
     452:	32 83       	std	Z+2, r19	; 0x02
     454:	21 83       	std	Z+1, r18	; 0x01
     456:	94 83       	std	Z+4, r25	; 0x04
     458:	83 83       	std	Z+3, r24	; 0x03
     45a:	0e 94 8b 06 	call	0xd16	; 0xd16 <printf_P>
     45e:	0f 90       	pop	r0
     460:	0f 90       	pop	r0
     462:	0f 90       	pop	r0
     464:	0f 90       	pop	r0
}
     466:	08 95       	ret

00000468 <command0>:

}

void command0(uint16_t data)
{
	printf_P(PSTR("command0 - data = %u\n"),data);
     468:	00 d0       	rcall	.+0      	; 0x46a <command0+0x2>
     46a:	00 d0       	rcall	.+0      	; 0x46c <command0+0x4>
     46c:	29 e1       	ldi	r18, 0x19	; 25
     46e:	33 e0       	ldi	r19, 0x03	; 3
     470:	ed b7       	in	r30, 0x3d	; 61
     472:	fe b7       	in	r31, 0x3e	; 62
     474:	32 83       	std	Z+2, r19	; 0x02
     476:	21 83       	std	Z+1, r18	; 0x01
     478:	94 83       	std	Z+4, r25	; 0x04
     47a:	83 83       	std	Z+3, r24	; 0x03
     47c:	0e 94 8b 06 	call	0xd16	; 0xd16 <printf_P>
     480:	0f 90       	pop	r0
     482:	0f 90       	pop	r0
     484:	0f 90       	pop	r0
     486:	0f 90       	pop	r0
}
     488:	08 95       	ret

0000048a <call_command>:
	printf_P(HELP);
}


bool call_command(const char* command, const char* data)
{
     48a:	cf 92       	push	r12
     48c:	df 92       	push	r13
     48e:	ef 92       	push	r14
     490:	ff 92       	push	r15
     492:	0f 93       	push	r16
     494:	1f 93       	push	r17
     496:	cf 93       	push	r28
     498:	df 93       	push	r29
     49a:	7c 01       	movw	r14, r24
     49c:	6b 01       	movw	r12, r22
     49e:	00 e0       	ldi	r16, 0x00	; 0
     4a0:	c0 e0       	ldi	r28, 0x00	; 0
     4a2:	d0 e0       	ldi	r29, 0x00	; 0
     4a4:	15 c0       	rjmp	.+42     	; 0x4d0 <call_command+0x46>

	int i;
	// Loop terminates on the 0 entry for the command
	for (i=0; pgm_read_word(&COMMANDS[i].PTEXT); i++)
	{
		if( !strcmp( (char*)pgm_read_word(&COMMANDS[i].PTEXT),command) )
     4a6:	b7 01       	movw	r22, r14
     4a8:	0e 94 73 06 	call	0xce6	; 0xce6 <strcmp>
     4ac:	00 97       	sbiw	r24, 0x00	; 0
     4ae:	79 f4       	brne	.+30     	; 0x4ce <call_command+0x44>
		{
			// Get the function and call it
		    p_func = (PGM_VOID_P)pgm_read_word(&COMMANDS[i].PFUNC); 
     4b0:	fe 01       	movw	r30, r28
     4b2:	ee 0f       	add	r30, r30
     4b4:	ff 1f       	adc	r31, r31
     4b6:	ee 0f       	add	r30, r30
     4b8:	ff 1f       	adc	r31, r31
     4ba:	e6 59       	subi	r30, 0x96	; 150
     4bc:	ff 4f       	sbci	r31, 0xFF	; 255
     4be:	05 91       	lpm	r16, Z+
     4c0:	14 91       	lpm	r17, Z+
			p_func(atoi(data)); 
     4c2:	c6 01       	movw	r24, r12
     4c4:	0e 94 2f 06 	call	0xc5e	; 0xc5e <atoi>
     4c8:	f8 01       	movw	r30, r16
     4ca:	09 95       	icall
     4cc:	01 e0       	ldi	r16, 0x01	; 1
	// Is it a command?
    void (*p_func)(uint16_t);

	int i;
	// Loop terminates on the 0 entry for the command
	for (i=0; pgm_read_word(&COMMANDS[i].PTEXT); i++)
     4ce:	21 96       	adiw	r28, 0x01	; 1
     4d0:	fe 01       	movw	r30, r28
     4d2:	ee 0f       	add	r30, r30
     4d4:	ff 1f       	adc	r31, r31
     4d6:	ee 0f       	add	r30, r30
     4d8:	ff 1f       	adc	r31, r31
     4da:	e8 59       	subi	r30, 0x98	; 152
     4dc:	ff 4f       	sbci	r31, 0xFF	; 255
     4de:	85 91       	lpm	r24, Z+
     4e0:	94 91       	lpm	r25, Z+
     4e2:	00 97       	sbiw	r24, 0x00	; 0
     4e4:	01 f7       	brne	.-64     	; 0x4a6 <call_command+0x1c>
			p_func(atoi(data)); 
			valid = true;
		}
	}

	if(valid)
     4e6:	00 23       	and	r16, r16
     4e8:	11 f0       	breq	.+4      	; 0x4ee <call_command+0x64>
     4ea:	81 e0       	ldi	r24, 0x01	; 1
     4ec:	11 c0       	rjmp	.+34     	; 0x510 <call_command+0x86>
	{
		return true;
		}
	else 
	{
		printf_P(PSTR("ERROR: call_command - not a command: %s\n"),command);
     4ee:	00 d0       	rcall	.+0      	; 0x4f0 <call_command+0x66>
     4f0:	00 d0       	rcall	.+0      	; 0x4f2 <call_command+0x68>
     4f2:	8c e6       	ldi	r24, 0x6C	; 108
     4f4:	92 e0       	ldi	r25, 0x02	; 2
     4f6:	ed b7       	in	r30, 0x3d	; 61
     4f8:	fe b7       	in	r31, 0x3e	; 62
     4fa:	92 83       	std	Z+2, r25	; 0x02
     4fc:	81 83       	std	Z+1, r24	; 0x01
     4fe:	f4 82       	std	Z+4, r15	; 0x04
     500:	e3 82       	std	Z+3, r14	; 0x03
     502:	0e 94 8b 06 	call	0xd16	; 0xd16 <printf_P>
     506:	80 e0       	ldi	r24, 0x00	; 0
     508:	0f 90       	pop	r0
     50a:	0f 90       	pop	r0
     50c:	0f 90       	pop	r0
     50e:	0f 90       	pop	r0
		return false;
	}
}
     510:	df 91       	pop	r29
     512:	cf 91       	pop	r28
     514:	1f 91       	pop	r17
     516:	0f 91       	pop	r16
     518:	ff 90       	pop	r15
     51a:	ef 90       	pop	r14
     51c:	df 90       	pop	r13
     51e:	cf 90       	pop	r12
     520:	08 95       	ret

00000522 <parse_command>:


// Note: this by no means catches every possible error
void parse_command()
{
     522:	2f 92       	push	r2
     524:	3f 92       	push	r3
     526:	4f 92       	push	r4
     528:	5f 92       	push	r5
     52a:	6f 92       	push	r6
     52c:	7f 92       	push	r7
     52e:	8f 92       	push	r8
     530:	9f 92       	push	r9
     532:	af 92       	push	r10
     534:	bf 92       	push	r11
     536:	cf 92       	push	r12
     538:	df 92       	push	r13
     53a:	ef 92       	push	r14
     53c:	ff 92       	push	r15
     53e:	0f 93       	push	r16
     540:	1f 93       	push	r17
     542:	df 93       	push	r29
     544:	cf 93       	push	r28
     546:	cd b7       	in	r28, 0x3d	; 61
     548:	de b7       	in	r29, 0x3e	; 62
     54a:	ce 57       	subi	r28, 0x7E	; 126
     54c:	d0 40       	sbci	r29, 0x00	; 0
     54e:	0f b6       	in	r0, 0x3f	; 63
     550:	f8 94       	cli
     552:	de bf       	out	0x3e, r29	; 62
     554:	0f be       	out	0x3f, r0	; 63
     556:	cd bf       	out	0x3d, r28	; 61
	uint8_t data[BUFFLENGTH];

	// Transfer to input to local buffer
	// TODO: This could cause problems if the ISR is loading new
	// data while the buffer is being transferred. FIX THIS	
	strcpy((char *)buf,(char *)usart0_receive_buffer);	
     558:	8e 01       	movw	r16, r28
     55a:	03 5c       	subi	r16, 0xC3	; 195
     55c:	1f 4f       	sbci	r17, 0xFF	; 255
     55e:	c8 01       	movw	r24, r16
     560:	62 ee       	ldi	r22, 0xE2	; 226
     562:	71 e0       	ldi	r23, 0x01	; 1
     564:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <strcpy>
     568:	88 24       	eor	r8, r8
     56a:	99 24       	eor	r9, r9
     56c:	ee 24       	eor	r14, r14
     56e:	ff 24       	eor	r15, r15
     570:	cc 24       	eor	r12, r12
     572:	dd 24       	eor	r13, r13
	//#define TERMINATOR '!'
	//#define DELIMITER ','
	//#define SEPARATOR ' '

	// Show each command and data
	for(i = 0; i < strlen((const char *)buf); i++)
     574:	ef 96       	adiw	r28, 0x3f	; 63
     576:	1f af       	std	Y+63, r17	; 0x3f
     578:	0e af       	std	Y+62, r16	; 0x3e
     57a:	ef 97       	sbiw	r28, 0x3f	; 63
     57c:	3e 01       	movw	r6, r28
     57e:	08 94       	sec
     580:	61 1c       	adc	r6, r1
     582:	71 1c       	adc	r7, r1
		{
			temp_buf[j++] = buf[i];
		}
		else // Process command unit
		{
			temp_buf[j] = '\0'; // Turn it into a string
     584:	35 e1       	ldi	r19, 0x15	; 21
     586:	23 2e       	mov	r2, r19
     588:	31 2c       	mov	r3, r1
     58a:	2c 0e       	add	r2, r28
     58c:	3d 1e       	adc	r3, r29
						if(temp_buf[j] != '\0')//DELIMITER)
						{
							// Validate that the data is all digits
							if(isdigit(temp_buf[j]))
							{
								data[k] = temp_buf[j++];
     58e:	29 e2       	ldi	r18, 0x29	; 41
     590:	42 2e       	mov	r4, r18
     592:	51 2c       	mov	r5, r1
     594:	4c 0e       	add	r4, r28
     596:	5d 1e       	adc	r5, r29
     598:	8d c0       	rjmp	.+282    	; 0x6b4 <parse_command+0x192>
	//#define SEPARATOR ' '

	// Show each command and data
	for(i = 0; i < strlen((const char *)buf); i++)
	{
		if(buf[i] != DELIMITER)
     59a:	ed e3       	ldi	r30, 0x3D	; 61
     59c:	f0 e0       	ldi	r31, 0x00	; 0
     59e:	ec 0f       	add	r30, r28
     5a0:	fd 1f       	adc	r31, r29
     5a2:	e8 0d       	add	r30, r8
     5a4:	f9 1d       	adc	r31, r9
     5a6:	80 81       	ld	r24, Z
     5a8:	8c 32       	cpi	r24, 0x2C	; 44
     5aa:	41 f0       	breq	.+16     	; 0x5bc <parse_command+0x9a>
		{
			temp_buf[j++] = buf[i];
     5ac:	f3 01       	movw	r30, r6
     5ae:	ee 0d       	add	r30, r14
     5b0:	ff 1d       	adc	r31, r15
     5b2:	80 83       	st	Z, r24
     5b4:	08 94       	sec
     5b6:	e1 1c       	adc	r14, r1
     5b8:	f1 1c       	adc	r15, r1
     5ba:	79 c0       	rjmp	.+242    	; 0x6ae <parse_command+0x18c>
		}
		else // Process command unit
		{
			temp_buf[j] = '\0'; // Turn it into a string
     5bc:	e6 0c       	add	r14, r6
     5be:	f7 1c       	adc	r15, r7
     5c0:	d7 01       	movw	r26, r14
     5c2:	1c 92       	st	X, r1
     5c4:	51 01       	movw	r10, r2
     5c6:	ac 0c       	add	r10, r12
     5c8:	bd 1c       	adc	r11, r13
     5ca:	ee 24       	eor	r14, r14
     5cc:	ff 24       	eor	r15, r15

			// Extract the command name
			for(j = 0; j < 20; j++)
			{
				// Validate that command is all alphabetic or numeric
				if( (temp_buf[j] != SEPARATOR))
     5ce:	f3 01       	movw	r30, r6
     5d0:	ee 0d       	add	r30, r14
     5d2:	ff 1d       	adc	r31, r15
     5d4:	00 81       	ld	r16, Z
     5d6:	00 32       	cpi	r16, 0x20	; 32
     5d8:	11 f1       	breq	.+68     	; 0x61e <parse_command+0xfc>
				{
					if(isalnum(temp_buf[j]))
     5da:	80 2f       	mov	r24, r16
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	0e 94 4d 06 	call	0xc9a	; 0xc9a <isalnum>
     5e2:	89 2b       	or	r24, r25
     5e4:	71 f0       	breq	.+28     	; 0x602 <parse_command+0xe0>
					{
						command[k++] = temp_buf[j];
     5e6:	f5 01       	movw	r30, r10
     5e8:	01 93       	st	Z+, r16
     5ea:	5f 01       	movw	r10, r30
     5ec:	08 94       	sec
     5ee:	c1 1c       	adc	r12, r1
     5f0:	d1 1c       	adc	r13, r1
		{
			temp_buf[j] = '\0'; // Turn it into a string
			j = 0;

			// Extract the command name
			for(j = 0; j < 20; j++)
     5f2:	08 94       	sec
     5f4:	e1 1c       	adc	r14, r1
     5f6:	f1 1c       	adc	r15, r1
     5f8:	f4 e1       	ldi	r31, 0x14	; 20
     5fa:	ef 16       	cp	r14, r31
     5fc:	f1 04       	cpc	r15, r1
     5fe:	39 f7       	brne	.-50     	; 0x5ce <parse_command+0xac>
     600:	56 c0       	rjmp	.+172    	; 0x6ae <parse_command+0x18c>
					{
						command[k++] = temp_buf[j];
					}
					else
					{
						printf_P(PSTR("ERROR in parse_command(): not a command - not alpha.\n"));
     602:	00 d0       	rcall	.+0      	; 0x604 <parse_command+0xe2>
     604:	86 e3       	ldi	r24, 0x36	; 54
     606:	92 e0       	ldi	r25, 0x02	; 2
     608:	ad b7       	in	r26, 0x3d	; 61
     60a:	be b7       	in	r27, 0x3e	; 62
     60c:	12 96       	adiw	r26, 0x02	; 2
     60e:	9c 93       	st	X, r25
     610:	8e 93       	st	-X, r24
     612:	11 97       	sbiw	r26, 0x01	; 1
     614:	0e 94 8b 06 	call	0xd16	; 0xd16 <printf_P>
     618:	0f 90       	pop	r0
     61a:	0f 90       	pop	r0
     61c:	5d c0       	rjmp	.+186    	; 0x6d8 <parse_command+0x1b6>
						return;
					}
				}
				else
				{
					command[k] = '\0';
     61e:	c2 0c       	add	r12, r2
     620:	d3 1c       	adc	r13, r3
     622:	f6 01       	movw	r30, r12
     624:	10 82       	st	Z, r1
					k = 0;
					j++;
     626:	08 94       	sec
     628:	e1 1c       	adc	r14, r1
     62a:	f1 1c       	adc	r15, r1
     62c:	d3 01       	movw	r26, r6
     62e:	ae 0d       	add	r26, r14
     630:	bf 1d       	adc	r27, r15
     632:	cc 24       	eor	r12, r12
     634:	dd 24       	eor	r13, r13
					for(k = 0; k < 20; k++)
					{
						if(temp_buf[j] != '\0')//DELIMITER)
     636:	2c 91       	ld	r18, X
     638:	22 23       	and	r18, r18
     63a:	59 f1       	breq	.+86     	; 0x692 <parse_command+0x170>
						{
							// Validate that the data is all digits
							if(isdigit(temp_buf[j]))
     63c:	82 2f       	mov	r24, r18
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	c0 97       	sbiw	r24, 0x30	; 48
     642:	0a 97       	sbiw	r24, 0x0a	; 10
     644:	80 f4       	brcc	.+32     	; 0x666 <parse_command+0x144>
							{
								data[k] = temp_buf[j++];
     646:	f2 01       	movw	r30, r4
     648:	ec 0d       	add	r30, r12
     64a:	fd 1d       	adc	r31, r13
     64c:	20 83       	st	Z, r18
     64e:	08 94       	sec
     650:	e1 1c       	adc	r14, r1
     652:	f1 1c       	adc	r15, r1
				else
				{
					command[k] = '\0';
					k = 0;
					j++;
					for(k = 0; k < 20; k++)
     654:	08 94       	sec
     656:	c1 1c       	adc	r12, r1
     658:	d1 1c       	adc	r13, r1
     65a:	11 96       	adiw	r26, 0x01	; 1
     65c:	f4 e1       	ldi	r31, 0x14	; 20
     65e:	cf 16       	cp	r12, r31
     660:	d1 04       	cpc	r13, r1
     662:	49 f7       	brne	.-46     	; 0x636 <parse_command+0x114>
     664:	24 c0       	rjmp	.+72     	; 0x6ae <parse_command+0x18c>
							{
								data[k] = temp_buf[j++];
							}
							else
							{
								printf_P(PSTR("ERROR in parse_command(): not a number - not digit: %c\n"),temp_buf[j]);
     666:	00 d0       	rcall	.+0      	; 0x668 <parse_command+0x146>
     668:	00 d0       	rcall	.+0      	; 0x66a <parse_command+0x148>
     66a:	ed b7       	in	r30, 0x3d	; 61
     66c:	fe b7       	in	r31, 0x3e	; 62
     66e:	31 96       	adiw	r30, 0x01	; 1
     670:	8e ef       	ldi	r24, 0xFE	; 254
     672:	91 e0       	ldi	r25, 0x01	; 1
     674:	ad b7       	in	r26, 0x3d	; 61
     676:	be b7       	in	r27, 0x3e	; 62
     678:	12 96       	adiw	r26, 0x02	; 2
     67a:	9c 93       	st	X, r25
     67c:	8e 93       	st	-X, r24
     67e:	11 97       	sbiw	r26, 0x01	; 1
     680:	22 83       	std	Z+2, r18	; 0x02
     682:	13 82       	std	Z+3, r1	; 0x03
     684:	0e 94 8b 06 	call	0xd16	; 0xd16 <printf_P>
     688:	0f 90       	pop	r0
     68a:	0f 90       	pop	r0
     68c:	0f 90       	pop	r0
     68e:	0f 90       	pop	r0
     690:	23 c0       	rjmp	.+70     	; 0x6d8 <parse_command+0x1b6>
							}

						}
						else
						{
							data[k] = '\0';
     692:	c4 0c       	add	r12, r4
     694:	d5 1c       	adc	r13, r5
     696:	f6 01       	movw	r30, r12
     698:	10 82       	st	Z, r1
							k = 0;
							j = 0;
							
							//Call the command - bail out if it isn't valid
							if(!call_command((const char *)command,(const char *)data))return;
     69a:	c1 01       	movw	r24, r2
     69c:	b2 01       	movw	r22, r4
     69e:	0e 94 45 02 	call	0x48a	; 0x48a <call_command>
     6a2:	88 23       	and	r24, r24
     6a4:	c9 f0       	breq	.+50     	; 0x6d8 <parse_command+0x1b6>
     6a6:	ee 24       	eor	r14, r14
     6a8:	ff 24       	eor	r15, r15
     6aa:	cc 24       	eor	r12, r12
     6ac:	dd 24       	eor	r13, r13
	//#define TERMINATOR '!'
	//#define DELIMITER ','
	//#define SEPARATOR ' '

	// Show each command and data
	for(i = 0; i < strlen((const char *)buf); i++)
     6ae:	08 94       	sec
     6b0:	81 1c       	adc	r8, r1
     6b2:	91 1c       	adc	r9, r1
     6b4:	ef 96       	adiw	r28, 0x3f	; 63
     6b6:	ee ad       	ldd	r30, Y+62	; 0x3e
     6b8:	ff ad       	ldd	r31, Y+63	; 0x3f
     6ba:	ef 97       	sbiw	r28, 0x3f	; 63
     6bc:	01 90       	ld	r0, Z+
     6be:	00 20       	and	r0, r0
     6c0:	e9 f7       	brne	.-6      	; 0x6bc <parse_command+0x19a>
     6c2:	31 97       	sbiw	r30, 0x01	; 1
     6c4:	ef 96       	adiw	r28, 0x3f	; 63
     6c6:	8e ad       	ldd	r24, Y+62	; 0x3e
     6c8:	9f ad       	ldd	r25, Y+63	; 0x3f
     6ca:	ef 97       	sbiw	r28, 0x3f	; 63
     6cc:	e8 1b       	sub	r30, r24
     6ce:	f9 0b       	sbc	r31, r25
     6d0:	8e 16       	cp	r8, r30
     6d2:	9f 06       	cpc	r9, r31
     6d4:	08 f4       	brcc	.+2      	; 0x6d8 <parse_command+0x1b6>
     6d6:	61 cf       	rjmp	.-318    	; 0x59a <parse_command+0x78>
					break;
				}
			}	
		}
	}
}
     6d8:	c2 58       	subi	r28, 0x82	; 130
     6da:	df 4f       	sbci	r29, 0xFF	; 255
     6dc:	0f b6       	in	r0, 0x3f	; 63
     6de:	f8 94       	cli
     6e0:	de bf       	out	0x3e, r29	; 62
     6e2:	0f be       	out	0x3f, r0	; 63
     6e4:	cd bf       	out	0x3d, r28	; 61
     6e6:	cf 91       	pop	r28
     6e8:	df 91       	pop	r29
     6ea:	1f 91       	pop	r17
     6ec:	0f 91       	pop	r16
     6ee:	ff 90       	pop	r15
     6f0:	ef 90       	pop	r14
     6f2:	df 90       	pop	r13
     6f4:	cf 90       	pop	r12
     6f6:	bf 90       	pop	r11
     6f8:	af 90       	pop	r10
     6fa:	9f 90       	pop	r9
     6fc:	8f 90       	pop	r8
     6fe:	7f 90       	pop	r7
     700:	6f 90       	pop	r6
     702:	5f 90       	pop	r5
     704:	4f 90       	pop	r4
     706:	3f 90       	pop	r3
     708:	2f 90       	pop	r2
     70a:	08 95       	ret

0000070c <main>:
};


int main (void)
{
	usart0_init_baud(57600);
     70c:	60 e0       	ldi	r22, 0x00	; 0
     70e:	71 ee       	ldi	r23, 0xE1	; 225
     710:	80 e0       	ldi	r24, 0x00	; 0
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	0e 94 ad 03 	call	0x75a	; 0x75a <usart0_init_baud>

	printf_P(PSTR("command_line_demo 028\n"));
     718:	00 d0       	rcall	.+0      	; 0x71a <main+0xe>
     71a:	8f e2       	ldi	r24, 0x2F	; 47
     71c:	93 e0       	ldi	r25, 0x03	; 3
     71e:	ed b7       	in	r30, 0x3d	; 61
     720:	fe b7       	in	r31, 0x3e	; 62
     722:	92 83       	std	Z+2, r25	; 0x02
     724:	81 83       	std	Z+1, r24	; 0x01
     726:	0e 94 8b 06 	call	0xd16	; 0xd16 <printf_P>
     72a:	0f 90       	pop	r0
     72c:	0f 90       	pop	r0
   
	while(1)
	{
		if(usart0_available())//usart0_receive_buffer_inuse_count())
     72e:	0e 94 c7 03 	call	0x78e	; 0x78e <usart0_available>
     732:	88 23       	and	r24, r24
     734:	e1 f3       	breq	.-8      	; 0x72e <main+0x22>
		{
			// Load until terminator received
			if(strchr((const char*)usart0_receive_buffer,TERMINATOR))
     736:	82 ee       	ldi	r24, 0xE2	; 226
     738:	91 e0       	ldi	r25, 0x01	; 1
     73a:	61 e2       	ldi	r22, 0x21	; 33
     73c:	70 e0       	ldi	r23, 0x00	; 0
     73e:	0e 94 68 06 	call	0xcd0	; 0xcd0 <strchr>
     742:	00 97       	sbiw	r24, 0x00	; 0
     744:	a1 f3       	breq	.-24     	; 0x72e <main+0x22>
			{
				parse_command();
     746:	0e 94 91 02 	call	0x522	; 0x522 <parse_command>
				usart0_receive_buffer_clear();
     74a:	0e 94 a8 03 	call	0x750	; 0x750 <usart0_receive_buffer_clear>
     74e:	ef cf       	rjmp	.-34     	; 0x72e <main+0x22>

00000750 <usart0_receive_buffer_clear>:
 
#include "usart.h"

void usart0_receive_buffer_clear(void)
{
    usart0_buffer_clear(&usart0_receive_ring);
     750:	8a ed       	ldi	r24, 0xDA	; 218
     752:	91 e0       	ldi	r25, 0x01	; 1
     754:	0e 94 62 05 	call	0xac4	; 0xac4 <usart0_buffer_clear>
	return;
}
     758:	08 95       	ret

0000075a <usart0_init_baud>:
 // please contact me with details so that I may correct the situation. 
 
#include "usart.h"

void usart0_init_baud(uint32_t baud)
{
     75a:	8f 92       	push	r8
     75c:	af 92       	push	r10
     75e:	cf 92       	push	r12
     760:	ef 92       	push	r14
     762:	0f 93       	push	r16
	// Test usart initialization with all parameters
	cli();
     764:	f8 94       	cli
	uint8_t databits = 8;
	uint8_t stopbits = 1;
	usart_parity_t parity = parity_none;
	usart_flow_control_t flow_control = flow_none;

	usart0_init(baud, F_CPU, mode,  databits, stopbits, parity, flow_control);
     766:	20 e0       	ldi	r18, 0x00	; 0
     768:	34 e2       	ldi	r19, 0x24	; 36
     76a:	44 ef       	ldi	r20, 0xF4	; 244
     76c:	50 e0       	ldi	r21, 0x00	; 0
     76e:	00 e0       	ldi	r16, 0x00	; 0
     770:	e8 e0       	ldi	r30, 0x08	; 8
     772:	ee 2e       	mov	r14, r30
     774:	cc 24       	eor	r12, r12
     776:	c3 94       	inc	r12
     778:	aa 24       	eor	r10, r10
     77a:	88 24       	eor	r8, r8
     77c:	0e 94 87 04 	call	0x90e	; 0x90e <usart0_init>

	sei();
     780:	78 94       	sei
	
}
     782:	0f 91       	pop	r16
     784:	ef 90       	pop	r14
     786:	cf 90       	pop	r12
     788:	af 90       	pop	r10
     78a:	8f 90       	pop	r8
     78c:	08 95       	ret

0000078e <usart0_available>:

#include "usart.h"

bool usart0_available()
{
	if(usart0_receive_buffer_inuse_count()) return true;
     78e:	0e 94 6a 05 	call	0xad4	; 0xad4 <usart0_receive_buffer_inuse_count>
     792:	81 11       	cpse	r24, r1
     794:	81 e0       	ldi	r24, 0x01	; 1
	return false;
}
     796:	08 95       	ret

00000798 <usart0_uninit>:
	setting = usart_baudrate_to_setting(freq_cpu,baudrate);
	
	// Write hi byte first as writing lo byte will trigger immediate update of baud prescaler.
	UART_BAUD_RATE_HIGH = hi_byte(setting);
	UART_BAUD_RATE_LOW= lo_byte(setting);
	
     798:	80 e2       	ldi	r24, 0x20	; 32
     79a:	80 93 c0 00 	sts	0x00C0, r24
	return;
     79e:	10 92 c1 00 	sts	0x00C1, r1
}
     7a2:	86 e0       	ldi	r24, 0x06	; 6
     7a4:	80 93 c2 00 	sts	0x00C2, r24

     7a8:	08 95       	ret

000007aa <usart0_baud_set>:
		//if(usart0_transmit_ring.count)// Alternate technique
		if(usart0_transmit_buffer_inuse_count())// Is there data in the buffer?
		{
			// Send next byte in the buffer.
 	       UART_DATA_REG = ring_remove(&usart0_transmit_ring);
		}
     7aa:	ef 92       	push	r14
     7ac:	ff 92       	push	r15
     7ae:	0f 93       	push	r16
     7b0:	1f 93       	push	r17
     7b2:	7b 01       	movw	r14, r22
     7b4:	8c 01       	movw	r16, r24
		else
		{
			// The buffer is empty
     7b6:	84 e0       	ldi	r24, 0x04	; 4
     7b8:	ee 0c       	add	r14, r14
     7ba:	ff 1c       	adc	r15, r15
     7bc:	00 1f       	adc	r16, r16
     7be:	11 1f       	adc	r17, r17
     7c0:	8a 95       	dec	r24
     7c2:	d1 f7       	brne	.-12     	; 0x7b8 <usart0_baud_set+0xe>
     7c4:	ca 01       	movw	r24, r20
     7c6:	b9 01       	movw	r22, r18
     7c8:	a8 01       	movw	r20, r16
     7ca:	97 01       	movw	r18, r14
     7cc:	0e 94 0d 06 	call	0xc1a	; 0xc1a <__udivmodsi4>
     7d0:	21 50       	subi	r18, 0x01	; 1
     7d2:	30 40       	sbci	r19, 0x00	; 0
			usart_buffered_tx_flag = false;
			// Set the ready flag
			usart_tx_ready_flag = true;
     7d4:	30 93 c5 00 	sts	0x00C5, r19
		}
     7d8:	20 93 c4 00 	sts	0x00C4, r18
	}
	else // Not buffered so transmited single byte
	{
     7dc:	1f 91       	pop	r17
     7de:	0f 91       	pop	r16
     7e0:	ff 90       	pop	r15
     7e2:	ef 90       	pop	r14
     7e4:	08 95       	ret

000007e6 <usart0_parity_set>:
		// Set transmit ready flag
		usart_tx_ready_flag = true;
	}
	
     7e6:	81 11       	cpse	r24, r1
    return;
}
     7e8:	8f 5f       	subi	r24, 0xFF	; 255


     7ea:	98 2f       	mov	r25, r24
     7ec:	80 ff       	sbrs	r24, 0
     7ee:	04 c0       	rjmp	.+8      	; 0x7f8 <usart0_parity_set+0x12>
     7f0:	80 91 c2 00 	lds	r24, 0x00C2
     7f4:	80 61       	ori	r24, 0x10	; 16
     7f6:	03 c0       	rjmp	.+6      	; 0x7fe <usart0_parity_set+0x18>
     7f8:	80 91 c2 00 	lds	r24, 0x00C2
     7fc:	8f 7e       	andi	r24, 0xEF	; 239
     7fe:	80 93 c2 00 	sts	0x00C2, r24
     802:	80 91 c2 00 	lds	r24, 0x00C2
// The interrupt service routines are included in the initialization .c file 
     806:	91 ff       	sbrs	r25, 1
     808:	04 c0       	rjmp	.+8      	; 0x812 <usart0_parity_set+0x2c>
     80a:	80 91 c2 00 	lds	r24, 0x00C2
     80e:	80 62       	ori	r24, 0x20	; 32
     810:	03 c0       	rjmp	.+6      	; 0x818 <usart0_parity_set+0x32>
     812:	80 91 c2 00 	lds	r24, 0x00C2
     816:	8f 7d       	andi	r24, 0xDF	; 223
     818:	80 93 c2 00 	sts	0x00C2, r24
     81c:	80 91 c2 00 	lds	r24, 0x00C2
     820:	08 95       	ret

00000822 <__vector_18>:
     822:	1f 92       	push	r1
     824:	0f 92       	push	r0
     826:	0f b6       	in	r0, 0x3f	; 63
     828:	0f 92       	push	r0
     82a:	11 24       	eor	r1, r1
     82c:	2f 93       	push	r18
     82e:	3f 93       	push	r19
     830:	4f 93       	push	r20
     832:	5f 93       	push	r21
     834:	6f 93       	push	r22
     836:	7f 93       	push	r23
     838:	8f 93       	push	r24
     83a:	9f 93       	push	r25
     83c:	af 93       	push	r26
     83e:	bf 93       	push	r27
     840:	ef 93       	push	r30
     842:	ff 93       	push	r31
     844:	80 91 c0 00 	lds	r24, 0x00C0
     848:	90 91 c0 00 	lds	r25, 0x00C0
     84c:	60 91 c6 00 	lds	r22, 0x00C6
     850:	84 fd       	sbrc	r24, 4
     852:	06 c0       	rjmp	.+12     	; 0x860 <__vector_18+0x3e>
     854:	92 fd       	sbrc	r25, 2
     856:	04 c0       	rjmp	.+8      	; 0x860 <__vector_18+0x3e>
     858:	8a ed       	ldi	r24, 0xDA	; 218
     85a:	91 e0       	ldi	r25, 0x01	; 1
     85c:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <ring_add>
     860:	ff 91       	pop	r31
     862:	ef 91       	pop	r30
     864:	bf 91       	pop	r27
     866:	af 91       	pop	r26
     868:	9f 91       	pop	r25
     86a:	8f 91       	pop	r24
     86c:	7f 91       	pop	r23
     86e:	6f 91       	pop	r22
     870:	5f 91       	pop	r21
     872:	4f 91       	pop	r20
     874:	3f 91       	pop	r19
     876:	2f 91       	pop	r18
     878:	0f 90       	pop	r0
     87a:	0f be       	out	0x3f, r0	; 63
     87c:	0f 90       	pop	r0
     87e:	1f 90       	pop	r1
     880:	18 95       	reti

00000882 <__vector_20>:
	register uint8_t data;
	register uint8_t parity_error = false;
	register uint8_t frame_error = false;

	// Get error conditions before getting the data.
	frame_error = usart0_frame_error();
     882:	1f 92       	push	r1
     884:	0f 92       	push	r0
     886:	0f b6       	in	r0, 0x3f	; 63
     888:	0f 92       	push	r0
     88a:	11 24       	eor	r1, r1
     88c:	2f 93       	push	r18
     88e:	3f 93       	push	r19
     890:	4f 93       	push	r20
     892:	5f 93       	push	r21
     894:	6f 93       	push	r22
     896:	7f 93       	push	r23
     898:	8f 93       	push	r24
     89a:	9f 93       	push	r25
     89c:	af 93       	push	r26
     89e:	bf 93       	push	r27
     8a0:	ef 93       	push	r30
     8a2:	ff 93       	push	r31
	parity_error = usart0_parity_error();
	
	data = UART_DATA_REG;
     8a4:	80 91 22 02 	lds	r24, 0x0222
     8a8:	88 23       	and	r24, r24
     8aa:	69 f0       	breq	.+26     	; 0x8c6 <__vector_20+0x44>
    
	if(!frame_error && !parity_error)
	{
     8ac:	0e 94 75 05 	call	0xaea	; 0xaea <usart0_transmit_buffer_inuse_count>
     8b0:	88 23       	and	r24, r24
     8b2:	39 f0       	breq	.+14     	; 0x8c2 <__vector_20+0x40>
		// Store data in ring buffer.
        ring_add(&usart0_receive_ring, data);
	}
     8b4:	82 ed       	ldi	r24, 0xD2	; 210
     8b6:	91 e0       	ldi	r25, 0x01	; 1
     8b8:	0e 94 cc 05 	call	0xb98	; 0xb98 <ring_remove>
     8bc:	80 93 c6 00 	sts	0x00C6, r24
     8c0:	05 c0       	rjmp	.+10     	; 0x8cc <__vector_20+0x4a>

	return;
}


     8c2:	10 92 22 02 	sts	0x0222, r1
     8c6:	81 e0       	ldi	r24, 0x01	; 1
     8c8:	80 93 23 02 	sts	0x0223, r24
     8cc:	ff 91       	pop	r31
     8ce:	ef 91       	pop	r30
     8d0:	bf 91       	pop	r27
     8d2:	af 91       	pop	r26
     8d4:	9f 91       	pop	r25
     8d6:	8f 91       	pop	r24
     8d8:	7f 91       	pop	r23
     8da:	6f 91       	pop	r22
     8dc:	5f 91       	pop	r21
     8de:	4f 91       	pop	r20
     8e0:	3f 91       	pop	r19
     8e2:	2f 91       	pop	r18
     8e4:	0f 90       	pop	r0
     8e6:	0f be       	out	0x3f, r0	; 63
     8e8:	0f 90       	pop	r0
     8ea:	1f 90       	pop	r1
     8ec:	18 95       	reti

000008ee <usart0_send>:
    bit_write(bit_read(parity, BIT(0)), UART_CONTROL_STATUS_REG_C, BIT(UART_PARITY_MODE_0));
    bit_write(bit_read(parity, BIT(1)), UART_CONTROL_STATUS_REG_C, BIT(UART_PARITY_MODE_1));
    return;
}

// JWP 6/16/11 rewrote transmit interrupt to use TX complete vector
     8ee:	80 91 23 02 	lds	r24, 0x0223
     8f2:	88 23       	and	r24, r24
     8f4:	e1 f3       	breq	.-8      	; 0x8ee <usart0_send>
// rather than the Data Register Empty vector
// The interrupt service routines are included in the initialization .c file 
// since they must be associated with a .c file for the compiler
     8f6:	81 e0       	ldi	r24, 0x01	; 1
     8f8:	80 93 22 02 	sts	0x0222, r24
usart0_transmit_interrupt_service_routine
{

     8fc:	82 ed       	ldi	r24, 0xD2	; 210
     8fe:	91 e0       	ldi	r25, 0x01	; 1
     900:	0e 94 cc 05 	call	0xb98	; 0xb98 <ring_remove>
     904:	80 93 c6 00 	sts	0x00C6, r24
	// Is buffered transmission enabled?
	if(usart_buffered_tx_flag)
	{		
     908:	10 92 23 02 	sts	0x0223, r1
		//if(usart0_transmit_ring.count)// Alternate technique
     90c:	08 95       	ret

0000090e <usart0_init>:
    //flow.flow_out = true;
    //flow.flow_in = true;

	// JWP 3/27/11 the following was already commented out in xxx code
    // Initialize hw flow control task.
    // flow_out_tcb.handler = usart0_flow_out_hw_task;
     90e:	2f 92       	push	r2
     910:	3f 92       	push	r3
     912:	4f 92       	push	r4
     914:	5f 92       	push	r5
     916:	6f 92       	push	r6
     918:	7f 92       	push	r7
     91a:	8f 92       	push	r8
     91c:	9f 92       	push	r9
     91e:	af 92       	push	r10
     920:	cf 92       	push	r12
     922:	ef 92       	push	r14
     924:	0f 93       	push	r16
     926:	1f 93       	push	r17
     928:	df 93       	push	r29
     92a:	cf 93       	push	r28
     92c:	cd b7       	in	r28, 0x3d	; 61
     92e:	de b7       	in	r29, 0x3e	; 62
     930:	3b 01       	movw	r6, r22
     932:	4c 01       	movw	r8, r24
     934:	19 01       	movw	r2, r18
     936:	2a 01       	movw	r4, r20
     938:	1e 2d       	mov	r17, r14
     93a:	ec 2c       	mov	r14, r12
    // flow_out_tcb.absolute_timing = false;
    // flow_out_tcb.run_interval = 0;
     93c:	f8 94       	cli
    // flow_out_tcb.enabled = false;
    // task_add(&flow_out_tcb);
     93e:	84 e4       	ldi	r24, 0x44	; 68
     940:	91 e0       	ldi	r25, 0x01	; 1
     942:	90 93 27 02 	sts	0x0227, r25
     946:	80 93 26 02 	sts	0x0226, r24
//	usart0_mode(mode);
 	usart0_baud_set(baud, freq_cpu);
    usart0_data_bits_set(databits);
    usart0_stop_bits_set(stopbits);
    usart0_parity_set(parity);
 
     94a:	80 91 c1 00 	lds	r24, 0x00C1
     94e:	87 7f       	andi	r24, 0xF7	; 247
     950:	80 93 c1 00 	sts	0x00C1, r24
 	usart0_baud_set(baud, freq_cpu);
     954:	80 91 c1 00 	lds	r24, 0x00C1
     958:	8f 7e       	andi	r24, 0xEF	; 239
     95a:	80 93 c1 00 	sts	0x00C1, r24

     95e:	80 91 c1 00 	lds	r24, 0x00C1
     962:	8f 7b       	andi	r24, 0xBF	; 191
     964:	80 93 c1 00 	sts	0x00C1, r24
//JWP 6/16/11 The Butterfly requires special code for clock and baud
     968:	80 91 c1 00 	lds	r24, 0x00C1
     96c:	8f 77       	andi	r24, 0x7F	; 127
     96e:	80 93 c1 00 	sts	0x00C1, r24
#if defined(__AVR_ATmega169__) // Assume Butterfly
	butterfly_init();
#endif
     972:	80 91 c2 00 	lds	r24, 0x00C2
     976:	02 95       	swap	r16
     978:	00 0f       	add	r16, r16
     97a:	00 0f       	add	r16, r16
     97c:	00 7c       	andi	r16, 0xC0	; 192
     97e:	8f 73       	andi	r24, 0x3F	; 63
     980:	80 2b       	or	r24, r16
     982:	80 93 c2 00 	sts	0x00C2, r24

     986:	c4 01       	movw	r24, r8
     988:	b3 01       	movw	r22, r6
     98a:	0e 94 d5 03 	call	0x7aa	; 0x7aa <usart0_baud_set>

     98e:	81 2f       	mov	r24, r17
     990:	85 50       	subi	r24, 0x05	; 5
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	18 f5       	brcc	.+70     	; 0x9dc <usart0_init+0xce>
     996:	21 2f       	mov	r18, r17
     998:	30 e0       	ldi	r19, 0x00	; 0
     99a:	25 50       	subi	r18, 0x05	; 5
     99c:	30 40       	sbci	r19, 0x00	; 0
     99e:	20 ff       	sbrs	r18, 0
     9a0:	04 c0       	rjmp	.+8      	; 0x9aa <usart0_init+0x9c>
     9a2:	80 91 c2 00 	lds	r24, 0x00C2
     9a6:	82 60       	ori	r24, 0x02	; 2
     9a8:	03 c0       	rjmp	.+6      	; 0x9b0 <usart0_init+0xa2>
     9aa:	80 91 c2 00 	lds	r24, 0x00C2
     9ae:	8d 7f       	andi	r24, 0xFD	; 253
     9b0:	80 93 c2 00 	sts	0x00C2, r24
     9b4:	80 91 c2 00 	lds	r24, 0x00C2
     9b8:	21 ff       	sbrs	r18, 1
     9ba:	04 c0       	rjmp	.+8      	; 0x9c4 <usart0_init+0xb6>
     9bc:	80 91 c2 00 	lds	r24, 0x00C2
     9c0:	84 60       	ori	r24, 0x04	; 4
     9c2:	03 c0       	rjmp	.+6      	; 0x9ca <usart0_init+0xbc>
     9c4:	80 91 c2 00 	lds	r24, 0x00C2
     9c8:	8b 7f       	andi	r24, 0xFB	; 251
     9ca:	80 93 c2 00 	sts	0x00C2, r24
     9ce:	80 91 c2 00 	lds	r24, 0x00C2
     9d2:	80 91 c1 00 	lds	r24, 0x00C1
     9d6:	8b 7f       	andi	r24, 0xFB	; 251
     9d8:	80 93 c1 00 	sts	0x00C1, r24
     9dc:	19 30       	cpi	r17, 0x09	; 9
     9de:	79 f4       	brne	.+30     	; 0x9fe <usart0_init+0xf0>
     9e0:	80 91 c2 00 	lds	r24, 0x00C2
     9e4:	82 60       	ori	r24, 0x02	; 2
     9e6:	80 93 c2 00 	sts	0x00C2, r24
     9ea:	80 91 c2 00 	lds	r24, 0x00C2
     9ee:	84 60       	ori	r24, 0x04	; 4
     9f0:	80 93 c2 00 	sts	0x00C2, r24
     9f4:	80 91 c1 00 	lds	r24, 0x00C1
     9f8:	84 60       	ori	r24, 0x04	; 4
     9fa:	80 93 c1 00 	sts	0x00C1, r24
	ring_init(&usart0_receive_ring, usart0_receive_buffer, USART0_RECEIVE_BUFFER_LEN);
     9fe:	8e 2d       	mov	r24, r14
     a00:	81 50       	subi	r24, 0x01	; 1
     a02:	82 30       	cpi	r24, 0x02	; 2
     a04:	70 f4       	brcc	.+28     	; 0xa22 <usart0_init+0x114>
     a06:	81 e0       	ldi	r24, 0x01	; 1
     a08:	e8 16       	cp	r14, r24
     a0a:	21 f0       	breq	.+8      	; 0xa14 <usart0_init+0x106>
     a0c:	80 91 c2 00 	lds	r24, 0x00C2
     a10:	88 60       	ori	r24, 0x08	; 8
     a12:	03 c0       	rjmp	.+6      	; 0xa1a <usart0_init+0x10c>
     a14:	80 91 c2 00 	lds	r24, 0x00C2
     a18:	87 7f       	andi	r24, 0xF7	; 247
     a1a:	80 93 c2 00 	sts	0x00C2, r24
     a1e:	80 91 c2 00 	lds	r24, 0x00C2
    ring_init(&usart0_transmit_ring, usart0_transmit_buffer, USART0_TRANSMIT_BUFFER_LEN);
     a22:	8a 2d       	mov	r24, r10
     a24:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <usart0_parity_set>

	// JWP 6/16/11 
     a28:	c4 01       	movw	r24, r8
     a2a:	b3 01       	movw	r22, r6
     a2c:	a2 01       	movw	r20, r4
     a2e:	91 01       	movw	r18, r2
     a30:	0e 94 d5 03 	call	0x7aa	; 0x7aa <usart0_baud_set>
// JWP 6/16/11 added to change transmission logic.
// this function waits until a pending transmission is complete
// then sends a byte. If the usart_buffered_TX_flag is set true
// then the ISR continues to send until the buffer is empty, otherwise
// the ISR just sends the byte. 
void usart0_send(void)
     a34:	8a ed       	ldi	r24, 0xDA	; 218
     a36:	91 e0       	ldi	r25, 0x01	; 1
     a38:	62 ee       	ldi	r22, 0xE2	; 226
     a3a:	71 e0       	ldi	r23, 0x01	; 1
     a3c:	40 e4       	ldi	r20, 0x40	; 64
     a3e:	0e 94 a8 05 	call	0xb50	; 0xb50 <ring_init>
{
     a42:	82 ed       	ldi	r24, 0xD2	; 210
     a44:	91 e0       	ldi	r25, 0x01	; 1
     a46:	62 e5       	ldi	r22, 0x52	; 82
     a48:	71 e0       	ldi	r23, 0x01	; 1
     a4a:	40 e8       	ldi	r20, 0x80	; 128
     a4c:	0e 94 a8 05 	call	0xb50	; 0xb50 <ring_init>

	// Wait until the transmitter is ready
	while(!usart_tx_ready_flag);

	// Set flag for ISR
	usart_buffered_tx_flag = true;
     a50:	80 91 c1 00 	lds	r24, 0x00C1
     a54:	88 60       	ori	r24, 0x08	; 8
     a56:	80 93 c1 00 	sts	0x00C1, r24
	
     a5a:	80 91 c1 00 	lds	r24, 0x00C1
     a5e:	80 61       	ori	r24, 0x10	; 16
     a60:	80 93 c1 00 	sts	0x00C1, r24
	// Send the byte
     a64:	80 91 c1 00 	lds	r24, 0x00C1
     a68:	80 64       	ori	r24, 0x40	; 64
     a6a:	80 93 c1 00 	sts	0x00C1, r24
	UART_DATA_REG = ring_remove(&usart0_transmit_ring);
     a6e:	80 91 c1 00 	lds	r24, 0x00C1
     a72:	80 68       	ori	r24, 0x80	; 128
     a74:	80 93 c1 00 	sts	0x00C1, r24

	// Set the ready flag to false
	usart_tx_ready_flag = false;
}

     a78:	10 92 22 02 	sts	0x0222, r1

     a7c:	81 e0       	ldi	r24, 0x01	; 1
     a7e:	80 93 23 02 	sts	0x0223, r24
// 3/18/11 JWP removed magic number for clock and added freq_cpu
void usart0_baud_set(uint32_t baudrate, uint32_t freq_cpu)
     a82:	78 94       	sei
{
	uint16_t setting;
	
     a84:	cf 91       	pop	r28
     a86:	df 91       	pop	r29
     a88:	1f 91       	pop	r17
     a8a:	0f 91       	pop	r16
     a8c:	ef 90       	pop	r14
     a8e:	cf 90       	pop	r12
     a90:	af 90       	pop	r10
     a92:	9f 90       	pop	r9
     a94:	8f 90       	pop	r8
     a96:	7f 90       	pop	r7
     a98:	6f 90       	pop	r6
     a9a:	5f 90       	pop	r5
     a9c:	4f 90       	pop	r4
     a9e:	3f 90       	pop	r3
     aa0:	2f 90       	pop	r2
     aa2:	08 95       	ret

00000aa4 <usart0_put_char_stream>:
   	return 0; 
} 

void usart0_init(uint32_t baud, uint32_t freq_cpu, usart_mode_t mode, usart_databits_t databits, usart_stopbits_t stopbits, usart_parity_t parity, usart_flow_control_t flow_control)
{

     aa4:	1f 93       	push	r17
     aa6:	18 2f       	mov	r17, r24
	cli();
     aa8:	8a 30       	cpi	r24, 0x0A	; 10
     aaa:	19 f4       	brne	.+6      	; 0xab2 <usart0_put_char_stream+0xe>
     aac:	8d e0       	ldi	r24, 0x0D	; 13
     aae:	0e 94 52 05 	call	0xaa4	; 0xaa4 <usart0_put_char_stream>

   	stdout = &mystdout;    //set the output stream 
     ab2:	81 2f       	mov	r24, r17
     ab4:	0e 94 6f 05 	call	0xade	; 0xade <usart0_transmit_buffer_insert>

    //flow.flow_control = flow_control;
     ab8:	0e 94 77 04 	call	0x8ee	; 0x8ee <usart0_send>
    //flow.flow_out = true;
    //flow.flow_in = true;

     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	1f 91       	pop	r17
     ac2:	08 95       	ret

00000ac4 <usart0_buffer_clear>:
 // please contact me with details so that I may correct the situation. 
 
#include "usart.h"

void usart0_buffer_clear(ring_t *ring)
{
     ac4:	1f 93       	push	r17
    register uint8_t sreg;
    
    sreg = SREG;
     ac6:	1f b7       	in	r17, 0x3f	; 63
    cli();
     ac8:	f8 94       	cli
    ring_clear(ring);
     aca:	0e 94 b8 05 	call	0xb70	; 0xb70 <ring_clear>
    SREG = sreg;
     ace:	1f bf       	out	0x3f, r17	; 63
    return;
}
     ad0:	1f 91       	pop	r17
     ad2:	08 95       	ret

00000ad4 <usart0_receive_buffer_inuse_count>:
 
#include "usart.h"

uint8_t usart0_receive_buffer_inuse_count(void)
{
    return(usart0_buffer_inuse_count(&usart0_receive_ring));
     ad4:	8a ed       	ldi	r24, 0xDA	; 218
     ad6:	91 e0       	ldi	r25, 0x01	; 1
     ad8:	0e 94 07 06 	call	0xc0e	; 0xc0e <usart0_buffer_inuse_count>
}
     adc:	08 95       	ret

00000ade <usart0_transmit_buffer_insert>:
 // please contact me with details so that I may correct the situation. 
 
#include "usart.h"

bool usart0_transmit_buffer_insert(uint8_t c)
{
     ade:	68 2f       	mov	r22, r24
    register bool result;
    result = usart0_buffer_insert(&usart0_transmit_ring, c);
     ae0:	82 ed       	ldi	r24, 0xD2	; 210
     ae2:	91 e0       	ldi	r25, 0x01	; 1
     ae4:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <usart0_buffer_insert>
	// JWP 6/14/11 don't automatically send. Use usart0_transmit_send when 
	// 		you have finished loading what you want to send in the buffer
	//if(result == true) usart0_transmit_check();

    return(result);
}
     ae8:	08 95       	ret

00000aea <usart0_transmit_buffer_inuse_count>:
 
#include "usart.h"

uint8_t usart0_transmit_buffer_inuse_count(void)
{
    return(usart0_buffer_inuse_count(&usart0_transmit_ring));
     aea:	82 ed       	ldi	r24, 0xD2	; 210
     aec:	91 e0       	ldi	r25, 0x01	; 1
     aee:	0e 94 07 06 	call	0xc0e	; 0xc0e <usart0_buffer_inuse_count>
}
     af2:	08 95       	ret

00000af4 <ring_add>:
#include <stdbool.h>
#include <stdint.h>
#include "ring.h"

bool ring_add(ring_t *r, uint8_t data)
{
     af4:	dc 01       	movw	r26, r24
    // Get the next head index.
    ring_index_t temp_head = r->head_index + 1;
     af6:	13 96       	adiw	r26, 0x03	; 3
     af8:	4d 91       	ld	r20, X+
     afa:	5c 91       	ld	r21, X
     afc:	14 97       	sbiw	r26, 0x04	; 4
    if(r->head_index >= r->size - 1)
     afe:	12 96       	adiw	r26, 0x02	; 2
     b00:	8c 91       	ld	r24, X
     b02:	12 97       	sbiw	r26, 0x02	; 2
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	01 97       	sbiw	r24, 0x01	; 1
     b08:	48 17       	cp	r20, r24
     b0a:	59 07       	cpc	r21, r25
     b0c:	18 f0       	brcs	.+6      	; 0xb14 <ring_add+0x20>
     b0e:	20 e0       	ldi	r18, 0x00	; 0
     b10:	30 e0       	ldi	r19, 0x00	; 0
     b12:	03 c0       	rjmp	.+6      	; 0xb1a <ring_add+0x26>
#include "ring.h"

bool ring_add(ring_t *r, uint8_t data)
{
    // Get the next head index.
    ring_index_t temp_head = r->head_index + 1;
     b14:	9a 01       	movw	r18, r20
     b16:	2f 5f       	subi	r18, 0xFF	; 255
     b18:	3f 4f       	sbci	r19, 0xFF	; 255
    if(r->head_index >= r->size - 1)
    {
        temp_head = 0;
    }

    if(temp_head != r->tail_index)
     b1a:	15 96       	adiw	r26, 0x05	; 5
     b1c:	8d 91       	ld	r24, X+
     b1e:	9c 91       	ld	r25, X
     b20:	16 97       	sbiw	r26, 0x06	; 6
     b22:	28 17       	cp	r18, r24
     b24:	39 07       	cpc	r19, r25
     b26:	11 f4       	brne	.+4      	; 0xb2c <ring_add+0x38>
     b28:	80 e0       	ldi	r24, 0x00	; 0
     b2a:	08 95       	ret
    {
        r->buffer[r->head_index] = data;    // Buffer receives data
     b2c:	ed 91       	ld	r30, X+
     b2e:	fc 91       	ld	r31, X
     b30:	11 97       	sbiw	r26, 0x01	; 1
     b32:	e4 0f       	add	r30, r20
     b34:	f5 1f       	adc	r31, r21
     b36:	60 83       	st	Z, r22
        r->head_index = temp_head;
     b38:	14 96       	adiw	r26, 0x04	; 4
     b3a:	3c 93       	st	X, r19
     b3c:	2e 93       	st	-X, r18
     b3e:	13 97       	sbiw	r26, 0x03	; 3
        r->count++;
     b40:	17 96       	adiw	r26, 0x07	; 7
     b42:	8c 91       	ld	r24, X
     b44:	17 97       	sbiw	r26, 0x07	; 7
     b46:	8f 5f       	subi	r24, 0xFF	; 255
     b48:	17 96       	adiw	r26, 0x07	; 7
     b4a:	8c 93       	st	X, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
        return(true);       // Return complete
    }

    return(false);          // Return incomplete
}
     b4e:	08 95       	ret

00000b50 <ring_init>:
#include <stdbool.h>
#include <stdlib.h>
#include "ring.h"

bool ring_init(ring_t *r, ring_buffer_t buffer, ring_size_t size)
{
     b50:	fc 01       	movw	r30, r24
    bool success = false;
    bool clear;
    if (size >= 2 && r != NULL && buffer != NULL)
     b52:	42 30       	cpi	r20, 0x02	; 2
     b54:	58 f0       	brcs	.+22     	; 0xb6c <ring_init+0x1c>
     b56:	00 97       	sbiw	r24, 0x00	; 0
     b58:	49 f0       	breq	.+18     	; 0xb6c <ring_init+0x1c>
     b5a:	61 15       	cp	r22, r1
     b5c:	71 05       	cpc	r23, r1
     b5e:	31 f0       	breq	.+12     	; 0xb6c <ring_init+0x1c>
    {
        r->buffer = buffer;     // Set index pointers
     b60:	71 83       	std	Z+1, r23	; 0x01
     b62:	60 83       	st	Z, r22
        r->size = size;
     b64:	42 83       	std	Z+2, r20	; 0x02
        clear = ring_clear(r);  // Call ring_clear function
     b66:	0e 94 b8 05 	call	0xb70	; 0xb70 <ring_clear>
     b6a:	08 95       	ret
     b6c:	80 e0       	ldi	r24, 0x00	; 0
        {
                success = true;
        }
    }
    return(success);
}
     b6e:	08 95       	ret

00000b70 <ring_clear>:
#include <stdlib.h>
#include <string.h>
#include "ring.h"

bool ring_clear(ring_t *r)
{
     b70:	fc 01       	movw	r30, r24
    bool success = false;
    if (r != NULL)
     b72:	00 97       	sbiw	r24, 0x00	; 0
     b74:	11 f4       	brne	.+4      	; 0xb7a <ring_clear+0xa>
     b76:	80 e0       	ldi	r24, 0x00	; 0
     b78:	08 95       	ret
    {
        r->head_index = 0;
     b7a:	14 82       	std	Z+4, r1	; 0x04
     b7c:	13 82       	std	Z+3, r1	; 0x03
        r->tail_index = 0;          // Assign new values
     b7e:	16 82       	std	Z+6, r1	; 0x06
     b80:	15 82       	std	Z+5, r1	; 0x05
        r->count = 0;
     b82:	17 82       	std	Z+7, r1	; 0x07
        memset((void *)r->buffer, 0, r->size); // Clear out memory
     b84:	42 81       	ldd	r20, Z+2	; 0x02
     b86:	80 81       	ld	r24, Z
     b88:	91 81       	ldd	r25, Z+1	; 0x01
     b8a:	60 e0       	ldi	r22, 0x00	; 0
     b8c:	70 e0       	ldi	r23, 0x00	; 0
     b8e:	50 e0       	ldi	r21, 0x00	; 0
     b90:	0e 94 61 06 	call	0xcc2	; 0xcc2 <memset>
     b94:	81 e0       	ldi	r24, 0x01	; 1
        success = true;
    }
    return(success);
}
     b96:	08 95       	ret

00000b98 <ring_remove>:

#include <stdint.h>
#include "ring.h"

uint8_t ring_remove(ring_t *r)
{
     b98:	dc 01       	movw	r26, r24
    uint8_t data = 0;

    // Compare the head index and the tail index
    if(r->head_index != r->tail_index)
     b9a:	15 96       	adiw	r26, 0x05	; 5
     b9c:	2d 91       	ld	r18, X+
     b9e:	3c 91       	ld	r19, X
     ba0:	16 97       	sbiw	r26, 0x06	; 6
     ba2:	13 96       	adiw	r26, 0x03	; 3
     ba4:	8d 91       	ld	r24, X+
     ba6:	9c 91       	ld	r25, X
     ba8:	14 97       	sbiw	r26, 0x04	; 4
     baa:	82 17       	cp	r24, r18
     bac:	93 07       	cpc	r25, r19
     bae:	11 f4       	brne	.+4      	; 0xbb4 <ring_remove+0x1c>
     bb0:	e0 e0       	ldi	r30, 0x00	; 0
     bb2:	1d c0       	rjmp	.+58     	; 0xbee <ring_remove+0x56>
    {
        // Get the Data from the buffer.
        data = r->buffer[r->tail_index];
     bb4:	ed 91       	ld	r30, X+
     bb6:	fc 91       	ld	r31, X
     bb8:	11 97       	sbiw	r26, 0x01	; 1
     bba:	e2 0f       	add	r30, r18
     bbc:	f3 1f       	adc	r31, r19
     bbe:	e0 81       	ld	r30, Z

        // Get the next tail index.
        ring_index_t next_tail = r->tail_index + 1;
        if(r->tail_index >= r->size - 1)
     bc0:	12 96       	adiw	r26, 0x02	; 2
     bc2:	8c 91       	ld	r24, X
     bc4:	12 97       	sbiw	r26, 0x02	; 2
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	01 97       	sbiw	r24, 0x01	; 1
     bca:	28 17       	cp	r18, r24
     bcc:	39 07       	cpc	r19, r25
     bce:	18 f0       	brcs	.+6      	; 0xbd6 <ring_remove+0x3e>
     bd0:	80 e0       	ldi	r24, 0x00	; 0
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	02 c0       	rjmp	.+4      	; 0xbda <ring_remove+0x42>
    {
        // Get the Data from the buffer.
        data = r->buffer[r->tail_index];

        // Get the next tail index.
        ring_index_t next_tail = r->tail_index + 1;
     bd6:	c9 01       	movw	r24, r18
     bd8:	01 96       	adiw	r24, 0x01	; 1
        if(r->tail_index >= r->size - 1)
        {
            next_tail = 0;
        }

        r->tail_index = next_tail;      // Move index
     bda:	16 96       	adiw	r26, 0x06	; 6
     bdc:	9c 93       	st	X, r25
     bde:	8e 93       	st	-X, r24
     be0:	15 97       	sbiw	r26, 0x05	; 5
        r->count--;             // Decrement count
     be2:	17 96       	adiw	r26, 0x07	; 7
     be4:	8c 91       	ld	r24, X
     be6:	17 97       	sbiw	r26, 0x07	; 7
     be8:	81 50       	subi	r24, 0x01	; 1
     bea:	17 96       	adiw	r26, 0x07	; 7
     bec:	8c 93       	st	X, r24
    }

    return(data);
}
     bee:	8e 2f       	mov	r24, r30
     bf0:	08 95       	ret

00000bf2 <usart0_buffer_insert>:
 // please contact me with details so that I may correct the situation. 
 
#include "usart.h"

bool usart0_buffer_insert(ring_t *ring, uint8_t c)
{
     bf2:	1f 93       	push	r17
     bf4:	9c 01       	movw	r18, r24
    register bool result;
    register uint8_t sreg;
   
   	// Do not load buffer while transmitting from buffer
	while(usart_buffered_tx_flag);
     bf6:	80 91 22 02 	lds	r24, 0x0222
     bfa:	88 23       	and	r24, r24
     bfc:	e1 f7       	brne	.-8      	; 0xbf6 <usart0_buffer_insert+0x4>
    
    sreg = SREG;
     bfe:	1f b7       	in	r17, 0x3f	; 63
    cli();
     c00:	f8 94       	cli
    result = ring_add(ring, c);
     c02:	c9 01       	movw	r24, r18
     c04:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <ring_add>
    SREG = sreg;
     c08:	1f bf       	out	0x3f, r17	; 63
    return(result);
}
     c0a:	1f 91       	pop	r17
     c0c:	08 95       	ret

00000c0e <usart0_buffer_inuse_count>:
 // please contact me with details so that I may correct the situation. 
 
#include "usart.h"

uint8_t usart0_buffer_inuse_count(ring_t *ring)
{
     c0e:	fc 01       	movw	r30, r24
    register uint8_t result;
    register uint8_t sreg;
    
    sreg = SREG;
     c10:	8f b7       	in	r24, 0x3f	; 63
    cli();
     c12:	f8 94       	cli
    result = ring->count;
    SREG = sreg;
     c14:	8f bf       	out	0x3f, r24	; 63
    return(result);
}
     c16:	87 81       	ldd	r24, Z+7	; 0x07
     c18:	08 95       	ret

00000c1a <__udivmodsi4>:
     c1a:	a1 e2       	ldi	r26, 0x21	; 33
     c1c:	1a 2e       	mov	r1, r26
     c1e:	aa 1b       	sub	r26, r26
     c20:	bb 1b       	sub	r27, r27
     c22:	fd 01       	movw	r30, r26
     c24:	0d c0       	rjmp	.+26     	; 0xc40 <__udivmodsi4_ep>

00000c26 <__udivmodsi4_loop>:
     c26:	aa 1f       	adc	r26, r26
     c28:	bb 1f       	adc	r27, r27
     c2a:	ee 1f       	adc	r30, r30
     c2c:	ff 1f       	adc	r31, r31
     c2e:	a2 17       	cp	r26, r18
     c30:	b3 07       	cpc	r27, r19
     c32:	e4 07       	cpc	r30, r20
     c34:	f5 07       	cpc	r31, r21
     c36:	20 f0       	brcs	.+8      	; 0xc40 <__udivmodsi4_ep>
     c38:	a2 1b       	sub	r26, r18
     c3a:	b3 0b       	sbc	r27, r19
     c3c:	e4 0b       	sbc	r30, r20
     c3e:	f5 0b       	sbc	r31, r21

00000c40 <__udivmodsi4_ep>:
     c40:	66 1f       	adc	r22, r22
     c42:	77 1f       	adc	r23, r23
     c44:	88 1f       	adc	r24, r24
     c46:	99 1f       	adc	r25, r25
     c48:	1a 94       	dec	r1
     c4a:	69 f7       	brne	.-38     	; 0xc26 <__udivmodsi4_loop>
     c4c:	60 95       	com	r22
     c4e:	70 95       	com	r23
     c50:	80 95       	com	r24
     c52:	90 95       	com	r25
     c54:	9b 01       	movw	r18, r22
     c56:	ac 01       	movw	r20, r24
     c58:	bd 01       	movw	r22, r26
     c5a:	cf 01       	movw	r24, r30
     c5c:	08 95       	ret

00000c5e <atoi>:
     c5e:	fc 01       	movw	r30, r24
     c60:	88 27       	eor	r24, r24
     c62:	99 27       	eor	r25, r25
     c64:	e8 94       	clt
     c66:	21 91       	ld	r18, Z+
     c68:	20 32       	cpi	r18, 0x20	; 32
     c6a:	e9 f3       	breq	.-6      	; 0xc66 <atoi+0x8>
     c6c:	29 30       	cpi	r18, 0x09	; 9
     c6e:	10 f0       	brcs	.+4      	; 0xc74 <atoi+0x16>
     c70:	2e 30       	cpi	r18, 0x0E	; 14
     c72:	c8 f3       	brcs	.-14     	; 0xc66 <atoi+0x8>
     c74:	2b 32       	cpi	r18, 0x2B	; 43
     c76:	41 f0       	breq	.+16     	; 0xc88 <atoi+0x2a>
     c78:	2d 32       	cpi	r18, 0x2D	; 45
     c7a:	39 f4       	brne	.+14     	; 0xc8a <atoi+0x2c>
     c7c:	68 94       	set
     c7e:	04 c0       	rjmp	.+8      	; 0xc88 <atoi+0x2a>
     c80:	0e 94 83 06 	call	0xd06	; 0xd06 <__mulhi_const_10>
     c84:	82 0f       	add	r24, r18
     c86:	91 1d       	adc	r25, r1
     c88:	21 91       	ld	r18, Z+
     c8a:	20 53       	subi	r18, 0x30	; 48
     c8c:	2a 30       	cpi	r18, 0x0A	; 10
     c8e:	c0 f3       	brcs	.-16     	; 0xc80 <atoi+0x22>
     c90:	1e f4       	brtc	.+6      	; 0xc98 <atoi+0x3a>
     c92:	90 95       	com	r25
     c94:	81 95       	neg	r24
     c96:	9f 4f       	sbci	r25, 0xFF	; 255
     c98:	08 95       	ret

00000c9a <isalnum>:
     c9a:	91 11       	cpse	r25, r1
     c9c:	06 c0       	rjmp	.+12     	; 0xcaa <__ctype_isfalse>
     c9e:	80 53       	subi	r24, 0x30	; 48
     ca0:	8a 50       	subi	r24, 0x0A	; 10
     ca2:	10 f0       	brcs	.+4      	; 0xca8 <isalnum+0xe>
     ca4:	86 5c       	subi	r24, 0xC6	; 198
     ca6:	06 c0       	rjmp	.+12     	; 0xcb4 <isalpha>
     ca8:	08 95       	ret

00000caa <__ctype_isfalse>:
     caa:	99 27       	eor	r25, r25
     cac:	88 27       	eor	r24, r24

00000cae <__ctype_istrue>:
     cae:	08 95       	ret

00000cb0 <isupper>:
     cb0:	85 fd       	sbrc	r24, 5
     cb2:	fb cf       	rjmp	.-10     	; 0xcaa <__ctype_isfalse>

00000cb4 <isalpha>:
     cb4:	80 62       	ori	r24, 0x20	; 32

00000cb6 <islower>:
     cb6:	91 11       	cpse	r25, r1
     cb8:	f8 cf       	rjmp	.-16     	; 0xcaa <__ctype_isfalse>
     cba:	81 56       	subi	r24, 0x61	; 97
     cbc:	8a 51       	subi	r24, 0x1A	; 26
     cbe:	e0 f7       	brcc	.-8      	; 0xcb8 <islower+0x2>
     cc0:	08 95       	ret

00000cc2 <memset>:
     cc2:	dc 01       	movw	r26, r24
     cc4:	01 c0       	rjmp	.+2      	; 0xcc8 <memset+0x6>
     cc6:	6d 93       	st	X+, r22
     cc8:	41 50       	subi	r20, 0x01	; 1
     cca:	50 40       	sbci	r21, 0x00	; 0
     ccc:	e0 f7       	brcc	.-8      	; 0xcc6 <memset+0x4>
     cce:	08 95       	ret

00000cd0 <strchr>:
     cd0:	fc 01       	movw	r30, r24
     cd2:	81 91       	ld	r24, Z+
     cd4:	86 17       	cp	r24, r22
     cd6:	21 f0       	breq	.+8      	; 0xce0 <strchr+0x10>
     cd8:	88 23       	and	r24, r24
     cda:	d9 f7       	brne	.-10     	; 0xcd2 <strchr+0x2>
     cdc:	99 27       	eor	r25, r25
     cde:	08 95       	ret
     ce0:	31 97       	sbiw	r30, 0x01	; 1
     ce2:	cf 01       	movw	r24, r30
     ce4:	08 95       	ret

00000ce6 <strcmp>:
     ce6:	fb 01       	movw	r30, r22
     ce8:	dc 01       	movw	r26, r24
     cea:	8d 91       	ld	r24, X+
     cec:	01 90       	ld	r0, Z+
     cee:	80 19       	sub	r24, r0
     cf0:	01 10       	cpse	r0, r1
     cf2:	d9 f3       	breq	.-10     	; 0xcea <strcmp+0x4>
     cf4:	99 0b       	sbc	r25, r25
     cf6:	08 95       	ret

00000cf8 <strcpy>:
     cf8:	fb 01       	movw	r30, r22
     cfa:	dc 01       	movw	r26, r24
     cfc:	01 90       	ld	r0, Z+
     cfe:	0d 92       	st	X+, r0
     d00:	00 20       	and	r0, r0
     d02:	e1 f7       	brne	.-8      	; 0xcfc <strcpy+0x4>
     d04:	08 95       	ret

00000d06 <__mulhi_const_10>:
     d06:	7a e0       	ldi	r23, 0x0A	; 10
     d08:	97 9f       	mul	r25, r23
     d0a:	90 2d       	mov	r25, r0
     d0c:	87 9f       	mul	r24, r23
     d0e:	80 2d       	mov	r24, r0
     d10:	91 0d       	add	r25, r1
     d12:	11 24       	eor	r1, r1
     d14:	08 95       	ret

00000d16 <printf_P>:
     d16:	a0 e0       	ldi	r26, 0x00	; 0
     d18:	b0 e0       	ldi	r27, 0x00	; 0
     d1a:	e1 e9       	ldi	r30, 0x91	; 145
     d1c:	f6 e0       	ldi	r31, 0x06	; 6
     d1e:	0c 94 3e 09 	jmp	0x127c	; 0x127c <__prologue_saves__+0x20>
     d22:	fe 01       	movw	r30, r28
     d24:	35 96       	adiw	r30, 0x05	; 5
     d26:	61 91       	ld	r22, Z+
     d28:	71 91       	ld	r23, Z+
     d2a:	a0 91 26 02 	lds	r26, 0x0226
     d2e:	b0 91 27 02 	lds	r27, 0x0227
     d32:	13 96       	adiw	r26, 0x03	; 3
     d34:	8c 91       	ld	r24, X
     d36:	13 97       	sbiw	r26, 0x03	; 3
     d38:	88 60       	ori	r24, 0x08	; 8
     d3a:	13 96       	adiw	r26, 0x03	; 3
     d3c:	8c 93       	st	X, r24
     d3e:	80 91 26 02 	lds	r24, 0x0226
     d42:	90 91 27 02 	lds	r25, 0x0227
     d46:	af 01       	movw	r20, r30
     d48:	0e 94 b1 06 	call	0xd62	; 0xd62 <vfprintf>
     d4c:	e0 91 26 02 	lds	r30, 0x0226
     d50:	f0 91 27 02 	lds	r31, 0x0227
     d54:	23 81       	ldd	r18, Z+3	; 0x03
     d56:	27 7f       	andi	r18, 0xF7	; 247
     d58:	23 83       	std	Z+3, r18	; 0x03
     d5a:	20 96       	adiw	r28, 0x00	; 0
     d5c:	e2 e0       	ldi	r30, 0x02	; 2
     d5e:	0c 94 5a 09 	jmp	0x12b4	; 0x12b4 <__epilogue_restores__+0x20>

00000d62 <vfprintf>:
     d62:	ab e0       	ldi	r26, 0x0B	; 11
     d64:	b0 e0       	ldi	r27, 0x00	; 0
     d66:	e7 eb       	ldi	r30, 0xB7	; 183
     d68:	f6 e0       	ldi	r31, 0x06	; 6
     d6a:	0c 94 2e 09 	jmp	0x125c	; 0x125c <__prologue_saves__>
     d6e:	3c 01       	movw	r6, r24
     d70:	2b 01       	movw	r4, r22
     d72:	5a 01       	movw	r10, r20
     d74:	fc 01       	movw	r30, r24
     d76:	17 82       	std	Z+7, r1	; 0x07
     d78:	16 82       	std	Z+6, r1	; 0x06
     d7a:	83 81       	ldd	r24, Z+3	; 0x03
     d7c:	81 fd       	sbrc	r24, 1
     d7e:	03 c0       	rjmp	.+6      	; 0xd86 <vfprintf+0x24>
     d80:	6f ef       	ldi	r22, 0xFF	; 255
     d82:	7f ef       	ldi	r23, 0xFF	; 255
     d84:	c6 c1       	rjmp	.+908    	; 0x1112 <vfprintf+0x3b0>
     d86:	9a e0       	ldi	r25, 0x0A	; 10
     d88:	89 2e       	mov	r8, r25
     d8a:	1e 01       	movw	r2, r28
     d8c:	08 94       	sec
     d8e:	21 1c       	adc	r2, r1
     d90:	31 1c       	adc	r3, r1
     d92:	f3 01       	movw	r30, r6
     d94:	23 81       	ldd	r18, Z+3	; 0x03
     d96:	f2 01       	movw	r30, r4
     d98:	23 fd       	sbrc	r18, 3
     d9a:	85 91       	lpm	r24, Z+
     d9c:	23 ff       	sbrs	r18, 3
     d9e:	81 91       	ld	r24, Z+
     da0:	2f 01       	movw	r4, r30
     da2:	88 23       	and	r24, r24
     da4:	09 f4       	brne	.+2      	; 0xda8 <vfprintf+0x46>
     da6:	b2 c1       	rjmp	.+868    	; 0x110c <vfprintf+0x3aa>
     da8:	85 32       	cpi	r24, 0x25	; 37
     daa:	39 f4       	brne	.+14     	; 0xdba <vfprintf+0x58>
     dac:	23 fd       	sbrc	r18, 3
     dae:	85 91       	lpm	r24, Z+
     db0:	23 ff       	sbrs	r18, 3
     db2:	81 91       	ld	r24, Z+
     db4:	2f 01       	movw	r4, r30
     db6:	85 32       	cpi	r24, 0x25	; 37
     db8:	29 f4       	brne	.+10     	; 0xdc4 <vfprintf+0x62>
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	b3 01       	movw	r22, r6
     dbe:	0e 94 a4 08 	call	0x1148	; 0x1148 <fputc>
     dc2:	e7 cf       	rjmp	.-50     	; 0xd92 <vfprintf+0x30>
     dc4:	98 2f       	mov	r25, r24
     dc6:	ff 24       	eor	r15, r15
     dc8:	ee 24       	eor	r14, r14
     dca:	99 24       	eor	r9, r9
     dcc:	ff e1       	ldi	r31, 0x1F	; 31
     dce:	ff 15       	cp	r31, r15
     dd0:	d0 f0       	brcs	.+52     	; 0xe06 <vfprintf+0xa4>
     dd2:	9b 32       	cpi	r25, 0x2B	; 43
     dd4:	69 f0       	breq	.+26     	; 0xdf0 <vfprintf+0x8e>
     dd6:	9c 32       	cpi	r25, 0x2C	; 44
     dd8:	28 f4       	brcc	.+10     	; 0xde4 <vfprintf+0x82>
     dda:	90 32       	cpi	r25, 0x20	; 32
     ddc:	59 f0       	breq	.+22     	; 0xdf4 <vfprintf+0x92>
     dde:	93 32       	cpi	r25, 0x23	; 35
     de0:	91 f4       	brne	.+36     	; 0xe06 <vfprintf+0xa4>
     de2:	0e c0       	rjmp	.+28     	; 0xe00 <vfprintf+0x9e>
     de4:	9d 32       	cpi	r25, 0x2D	; 45
     de6:	49 f0       	breq	.+18     	; 0xdfa <vfprintf+0x98>
     de8:	90 33       	cpi	r25, 0x30	; 48
     dea:	69 f4       	brne	.+26     	; 0xe06 <vfprintf+0xa4>
     dec:	41 e0       	ldi	r20, 0x01	; 1
     dee:	24 c0       	rjmp	.+72     	; 0xe38 <vfprintf+0xd6>
     df0:	52 e0       	ldi	r21, 0x02	; 2
     df2:	f5 2a       	or	r15, r21
     df4:	84 e0       	ldi	r24, 0x04	; 4
     df6:	f8 2a       	or	r15, r24
     df8:	28 c0       	rjmp	.+80     	; 0xe4a <vfprintf+0xe8>
     dfa:	98 e0       	ldi	r25, 0x08	; 8
     dfc:	f9 2a       	or	r15, r25
     dfe:	25 c0       	rjmp	.+74     	; 0xe4a <vfprintf+0xe8>
     e00:	e0 e1       	ldi	r30, 0x10	; 16
     e02:	fe 2a       	or	r15, r30
     e04:	22 c0       	rjmp	.+68     	; 0xe4a <vfprintf+0xe8>
     e06:	f7 fc       	sbrc	r15, 7
     e08:	29 c0       	rjmp	.+82     	; 0xe5c <vfprintf+0xfa>
     e0a:	89 2f       	mov	r24, r25
     e0c:	80 53       	subi	r24, 0x30	; 48
     e0e:	8a 30       	cpi	r24, 0x0A	; 10
     e10:	70 f4       	brcc	.+28     	; 0xe2e <vfprintf+0xcc>
     e12:	f6 fe       	sbrs	r15, 6
     e14:	05 c0       	rjmp	.+10     	; 0xe20 <vfprintf+0xbe>
     e16:	98 9c       	mul	r9, r8
     e18:	90 2c       	mov	r9, r0
     e1a:	11 24       	eor	r1, r1
     e1c:	98 0e       	add	r9, r24
     e1e:	15 c0       	rjmp	.+42     	; 0xe4a <vfprintf+0xe8>
     e20:	e8 9c       	mul	r14, r8
     e22:	e0 2c       	mov	r14, r0
     e24:	11 24       	eor	r1, r1
     e26:	e8 0e       	add	r14, r24
     e28:	f0 e2       	ldi	r31, 0x20	; 32
     e2a:	ff 2a       	or	r15, r31
     e2c:	0e c0       	rjmp	.+28     	; 0xe4a <vfprintf+0xe8>
     e2e:	9e 32       	cpi	r25, 0x2E	; 46
     e30:	29 f4       	brne	.+10     	; 0xe3c <vfprintf+0xda>
     e32:	f6 fc       	sbrc	r15, 6
     e34:	6b c1       	rjmp	.+726    	; 0x110c <vfprintf+0x3aa>
     e36:	40 e4       	ldi	r20, 0x40	; 64
     e38:	f4 2a       	or	r15, r20
     e3a:	07 c0       	rjmp	.+14     	; 0xe4a <vfprintf+0xe8>
     e3c:	9c 36       	cpi	r25, 0x6C	; 108
     e3e:	19 f4       	brne	.+6      	; 0xe46 <vfprintf+0xe4>
     e40:	50 e8       	ldi	r21, 0x80	; 128
     e42:	f5 2a       	or	r15, r21
     e44:	02 c0       	rjmp	.+4      	; 0xe4a <vfprintf+0xe8>
     e46:	98 36       	cpi	r25, 0x68	; 104
     e48:	49 f4       	brne	.+18     	; 0xe5c <vfprintf+0xfa>
     e4a:	f2 01       	movw	r30, r4
     e4c:	23 fd       	sbrc	r18, 3
     e4e:	95 91       	lpm	r25, Z+
     e50:	23 ff       	sbrs	r18, 3
     e52:	91 91       	ld	r25, Z+
     e54:	2f 01       	movw	r4, r30
     e56:	99 23       	and	r25, r25
     e58:	09 f0       	breq	.+2      	; 0xe5c <vfprintf+0xfa>
     e5a:	b8 cf       	rjmp	.-144    	; 0xdcc <vfprintf+0x6a>
     e5c:	89 2f       	mov	r24, r25
     e5e:	85 54       	subi	r24, 0x45	; 69
     e60:	83 30       	cpi	r24, 0x03	; 3
     e62:	18 f0       	brcs	.+6      	; 0xe6a <vfprintf+0x108>
     e64:	80 52       	subi	r24, 0x20	; 32
     e66:	83 30       	cpi	r24, 0x03	; 3
     e68:	38 f4       	brcc	.+14     	; 0xe78 <vfprintf+0x116>
     e6a:	44 e0       	ldi	r20, 0x04	; 4
     e6c:	50 e0       	ldi	r21, 0x00	; 0
     e6e:	a4 0e       	add	r10, r20
     e70:	b5 1e       	adc	r11, r21
     e72:	5f e3       	ldi	r21, 0x3F	; 63
     e74:	59 83       	std	Y+1, r21	; 0x01
     e76:	0f c0       	rjmp	.+30     	; 0xe96 <vfprintf+0x134>
     e78:	93 36       	cpi	r25, 0x63	; 99
     e7a:	31 f0       	breq	.+12     	; 0xe88 <vfprintf+0x126>
     e7c:	93 37       	cpi	r25, 0x73	; 115
     e7e:	79 f0       	breq	.+30     	; 0xe9e <vfprintf+0x13c>
     e80:	93 35       	cpi	r25, 0x53	; 83
     e82:	09 f0       	breq	.+2      	; 0xe86 <vfprintf+0x124>
     e84:	56 c0       	rjmp	.+172    	; 0xf32 <vfprintf+0x1d0>
     e86:	20 c0       	rjmp	.+64     	; 0xec8 <vfprintf+0x166>
     e88:	f5 01       	movw	r30, r10
     e8a:	80 81       	ld	r24, Z
     e8c:	89 83       	std	Y+1, r24	; 0x01
     e8e:	42 e0       	ldi	r20, 0x02	; 2
     e90:	50 e0       	ldi	r21, 0x00	; 0
     e92:	a4 0e       	add	r10, r20
     e94:	b5 1e       	adc	r11, r21
     e96:	61 01       	movw	r12, r2
     e98:	01 e0       	ldi	r16, 0x01	; 1
     e9a:	10 e0       	ldi	r17, 0x00	; 0
     e9c:	12 c0       	rjmp	.+36     	; 0xec2 <vfprintf+0x160>
     e9e:	f5 01       	movw	r30, r10
     ea0:	c0 80       	ld	r12, Z
     ea2:	d1 80       	ldd	r13, Z+1	; 0x01
     ea4:	f6 fc       	sbrc	r15, 6
     ea6:	03 c0       	rjmp	.+6      	; 0xeae <vfprintf+0x14c>
     ea8:	6f ef       	ldi	r22, 0xFF	; 255
     eaa:	7f ef       	ldi	r23, 0xFF	; 255
     eac:	02 c0       	rjmp	.+4      	; 0xeb2 <vfprintf+0x150>
     eae:	69 2d       	mov	r22, r9
     eb0:	70 e0       	ldi	r23, 0x00	; 0
     eb2:	42 e0       	ldi	r20, 0x02	; 2
     eb4:	50 e0       	ldi	r21, 0x00	; 0
     eb6:	a4 0e       	add	r10, r20
     eb8:	b5 1e       	adc	r11, r21
     eba:	c6 01       	movw	r24, r12
     ebc:	0e 94 99 08 	call	0x1132	; 0x1132 <strnlen>
     ec0:	8c 01       	movw	r16, r24
     ec2:	5f e7       	ldi	r21, 0x7F	; 127
     ec4:	f5 22       	and	r15, r21
     ec6:	14 c0       	rjmp	.+40     	; 0xef0 <vfprintf+0x18e>
     ec8:	f5 01       	movw	r30, r10
     eca:	c0 80       	ld	r12, Z
     ecc:	d1 80       	ldd	r13, Z+1	; 0x01
     ece:	f6 fc       	sbrc	r15, 6
     ed0:	03 c0       	rjmp	.+6      	; 0xed8 <vfprintf+0x176>
     ed2:	6f ef       	ldi	r22, 0xFF	; 255
     ed4:	7f ef       	ldi	r23, 0xFF	; 255
     ed6:	02 c0       	rjmp	.+4      	; 0xedc <vfprintf+0x17a>
     ed8:	69 2d       	mov	r22, r9
     eda:	70 e0       	ldi	r23, 0x00	; 0
     edc:	42 e0       	ldi	r20, 0x02	; 2
     ede:	50 e0       	ldi	r21, 0x00	; 0
     ee0:	a4 0e       	add	r10, r20
     ee2:	b5 1e       	adc	r11, r21
     ee4:	c6 01       	movw	r24, r12
     ee6:	0e 94 8e 08 	call	0x111c	; 0x111c <strnlen_P>
     eea:	8c 01       	movw	r16, r24
     eec:	50 e8       	ldi	r21, 0x80	; 128
     eee:	f5 2a       	or	r15, r21
     ef0:	f3 fe       	sbrs	r15, 3
     ef2:	07 c0       	rjmp	.+14     	; 0xf02 <vfprintf+0x1a0>
     ef4:	1a c0       	rjmp	.+52     	; 0xf2a <vfprintf+0x1c8>
     ef6:	80 e2       	ldi	r24, 0x20	; 32
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	b3 01       	movw	r22, r6
     efc:	0e 94 a4 08 	call	0x1148	; 0x1148 <fputc>
     f00:	ea 94       	dec	r14
     f02:	8e 2d       	mov	r24, r14
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	08 17       	cp	r16, r24
     f08:	19 07       	cpc	r17, r25
     f0a:	a8 f3       	brcs	.-22     	; 0xef6 <vfprintf+0x194>
     f0c:	0e c0       	rjmp	.+28     	; 0xf2a <vfprintf+0x1c8>
     f0e:	f6 01       	movw	r30, r12
     f10:	f7 fc       	sbrc	r15, 7
     f12:	85 91       	lpm	r24, Z+
     f14:	f7 fe       	sbrs	r15, 7
     f16:	81 91       	ld	r24, Z+
     f18:	6f 01       	movw	r12, r30
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	b3 01       	movw	r22, r6
     f1e:	0e 94 a4 08 	call	0x1148	; 0x1148 <fputc>
     f22:	e1 10       	cpse	r14, r1
     f24:	ea 94       	dec	r14
     f26:	01 50       	subi	r16, 0x01	; 1
     f28:	10 40       	sbci	r17, 0x00	; 0
     f2a:	01 15       	cp	r16, r1
     f2c:	11 05       	cpc	r17, r1
     f2e:	79 f7       	brne	.-34     	; 0xf0e <vfprintf+0x1ac>
     f30:	ea c0       	rjmp	.+468    	; 0x1106 <vfprintf+0x3a4>
     f32:	94 36       	cpi	r25, 0x64	; 100
     f34:	11 f0       	breq	.+4      	; 0xf3a <vfprintf+0x1d8>
     f36:	99 36       	cpi	r25, 0x69	; 105
     f38:	69 f5       	brne	.+90     	; 0xf94 <vfprintf+0x232>
     f3a:	f7 fe       	sbrs	r15, 7
     f3c:	08 c0       	rjmp	.+16     	; 0xf4e <vfprintf+0x1ec>
     f3e:	f5 01       	movw	r30, r10
     f40:	20 81       	ld	r18, Z
     f42:	31 81       	ldd	r19, Z+1	; 0x01
     f44:	42 81       	ldd	r20, Z+2	; 0x02
     f46:	53 81       	ldd	r21, Z+3	; 0x03
     f48:	84 e0       	ldi	r24, 0x04	; 4
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	0a c0       	rjmp	.+20     	; 0xf62 <vfprintf+0x200>
     f4e:	f5 01       	movw	r30, r10
     f50:	80 81       	ld	r24, Z
     f52:	91 81       	ldd	r25, Z+1	; 0x01
     f54:	9c 01       	movw	r18, r24
     f56:	44 27       	eor	r20, r20
     f58:	37 fd       	sbrc	r19, 7
     f5a:	40 95       	com	r20
     f5c:	54 2f       	mov	r21, r20
     f5e:	82 e0       	ldi	r24, 0x02	; 2
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	a8 0e       	add	r10, r24
     f64:	b9 1e       	adc	r11, r25
     f66:	9f e6       	ldi	r25, 0x6F	; 111
     f68:	f9 22       	and	r15, r25
     f6a:	57 ff       	sbrs	r21, 7
     f6c:	09 c0       	rjmp	.+18     	; 0xf80 <vfprintf+0x21e>
     f6e:	50 95       	com	r21
     f70:	40 95       	com	r20
     f72:	30 95       	com	r19
     f74:	21 95       	neg	r18
     f76:	3f 4f       	sbci	r19, 0xFF	; 255
     f78:	4f 4f       	sbci	r20, 0xFF	; 255
     f7a:	5f 4f       	sbci	r21, 0xFF	; 255
     f7c:	e0 e8       	ldi	r30, 0x80	; 128
     f7e:	fe 2a       	or	r15, r30
     f80:	ca 01       	movw	r24, r20
     f82:	b9 01       	movw	r22, r18
     f84:	a1 01       	movw	r20, r2
     f86:	2a e0       	ldi	r18, 0x0A	; 10
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <__ultoa_invert>
     f8e:	d8 2e       	mov	r13, r24
     f90:	d2 18       	sub	r13, r2
     f92:	40 c0       	rjmp	.+128    	; 0x1014 <vfprintf+0x2b2>
     f94:	95 37       	cpi	r25, 0x75	; 117
     f96:	29 f4       	brne	.+10     	; 0xfa2 <vfprintf+0x240>
     f98:	1f 2d       	mov	r17, r15
     f9a:	1f 7e       	andi	r17, 0xEF	; 239
     f9c:	2a e0       	ldi	r18, 0x0A	; 10
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	1d c0       	rjmp	.+58     	; 0xfdc <vfprintf+0x27a>
     fa2:	1f 2d       	mov	r17, r15
     fa4:	19 7f       	andi	r17, 0xF9	; 249
     fa6:	9f 36       	cpi	r25, 0x6F	; 111
     fa8:	61 f0       	breq	.+24     	; 0xfc2 <vfprintf+0x260>
     faa:	90 37       	cpi	r25, 0x70	; 112
     fac:	20 f4       	brcc	.+8      	; 0xfb6 <vfprintf+0x254>
     fae:	98 35       	cpi	r25, 0x58	; 88
     fb0:	09 f0       	breq	.+2      	; 0xfb4 <vfprintf+0x252>
     fb2:	ac c0       	rjmp	.+344    	; 0x110c <vfprintf+0x3aa>
     fb4:	0f c0       	rjmp	.+30     	; 0xfd4 <vfprintf+0x272>
     fb6:	90 37       	cpi	r25, 0x70	; 112
     fb8:	39 f0       	breq	.+14     	; 0xfc8 <vfprintf+0x266>
     fba:	98 37       	cpi	r25, 0x78	; 120
     fbc:	09 f0       	breq	.+2      	; 0xfc0 <vfprintf+0x25e>
     fbe:	a6 c0       	rjmp	.+332    	; 0x110c <vfprintf+0x3aa>
     fc0:	04 c0       	rjmp	.+8      	; 0xfca <vfprintf+0x268>
     fc2:	28 e0       	ldi	r18, 0x08	; 8
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	0a c0       	rjmp	.+20     	; 0xfdc <vfprintf+0x27a>
     fc8:	10 61       	ori	r17, 0x10	; 16
     fca:	14 fd       	sbrc	r17, 4
     fcc:	14 60       	ori	r17, 0x04	; 4
     fce:	20 e1       	ldi	r18, 0x10	; 16
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	04 c0       	rjmp	.+8      	; 0xfdc <vfprintf+0x27a>
     fd4:	14 fd       	sbrc	r17, 4
     fd6:	16 60       	ori	r17, 0x06	; 6
     fd8:	20 e1       	ldi	r18, 0x10	; 16
     fda:	32 e0       	ldi	r19, 0x02	; 2
     fdc:	17 ff       	sbrs	r17, 7
     fde:	08 c0       	rjmp	.+16     	; 0xff0 <vfprintf+0x28e>
     fe0:	f5 01       	movw	r30, r10
     fe2:	60 81       	ld	r22, Z
     fe4:	71 81       	ldd	r23, Z+1	; 0x01
     fe6:	82 81       	ldd	r24, Z+2	; 0x02
     fe8:	93 81       	ldd	r25, Z+3	; 0x03
     fea:	44 e0       	ldi	r20, 0x04	; 4
     fec:	50 e0       	ldi	r21, 0x00	; 0
     fee:	08 c0       	rjmp	.+16     	; 0x1000 <vfprintf+0x29e>
     ff0:	f5 01       	movw	r30, r10
     ff2:	80 81       	ld	r24, Z
     ff4:	91 81       	ldd	r25, Z+1	; 0x01
     ff6:	bc 01       	movw	r22, r24
     ff8:	80 e0       	ldi	r24, 0x00	; 0
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	42 e0       	ldi	r20, 0x02	; 2
     ffe:	50 e0       	ldi	r21, 0x00	; 0
    1000:	a4 0e       	add	r10, r20
    1002:	b5 1e       	adc	r11, r21
    1004:	a1 01       	movw	r20, r2
    1006:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <__ultoa_invert>
    100a:	d8 2e       	mov	r13, r24
    100c:	d2 18       	sub	r13, r2
    100e:	8f e7       	ldi	r24, 0x7F	; 127
    1010:	f8 2e       	mov	r15, r24
    1012:	f1 22       	and	r15, r17
    1014:	f6 fe       	sbrs	r15, 6
    1016:	0b c0       	rjmp	.+22     	; 0x102e <vfprintf+0x2cc>
    1018:	5e ef       	ldi	r21, 0xFE	; 254
    101a:	f5 22       	and	r15, r21
    101c:	d9 14       	cp	r13, r9
    101e:	38 f4       	brcc	.+14     	; 0x102e <vfprintf+0x2cc>
    1020:	f4 fe       	sbrs	r15, 4
    1022:	07 c0       	rjmp	.+14     	; 0x1032 <vfprintf+0x2d0>
    1024:	f2 fc       	sbrc	r15, 2
    1026:	05 c0       	rjmp	.+10     	; 0x1032 <vfprintf+0x2d0>
    1028:	8f ee       	ldi	r24, 0xEF	; 239
    102a:	f8 22       	and	r15, r24
    102c:	02 c0       	rjmp	.+4      	; 0x1032 <vfprintf+0x2d0>
    102e:	1d 2d       	mov	r17, r13
    1030:	01 c0       	rjmp	.+2      	; 0x1034 <vfprintf+0x2d2>
    1032:	19 2d       	mov	r17, r9
    1034:	f4 fe       	sbrs	r15, 4
    1036:	0d c0       	rjmp	.+26     	; 0x1052 <vfprintf+0x2f0>
    1038:	fe 01       	movw	r30, r28
    103a:	ed 0d       	add	r30, r13
    103c:	f1 1d       	adc	r31, r1
    103e:	80 81       	ld	r24, Z
    1040:	80 33       	cpi	r24, 0x30	; 48
    1042:	19 f4       	brne	.+6      	; 0x104a <vfprintf+0x2e8>
    1044:	99 ee       	ldi	r25, 0xE9	; 233
    1046:	f9 22       	and	r15, r25
    1048:	08 c0       	rjmp	.+16     	; 0x105a <vfprintf+0x2f8>
    104a:	1f 5f       	subi	r17, 0xFF	; 255
    104c:	f2 fe       	sbrs	r15, 2
    104e:	05 c0       	rjmp	.+10     	; 0x105a <vfprintf+0x2f8>
    1050:	03 c0       	rjmp	.+6      	; 0x1058 <vfprintf+0x2f6>
    1052:	8f 2d       	mov	r24, r15
    1054:	86 78       	andi	r24, 0x86	; 134
    1056:	09 f0       	breq	.+2      	; 0x105a <vfprintf+0x2f8>
    1058:	1f 5f       	subi	r17, 0xFF	; 255
    105a:	0f 2d       	mov	r16, r15
    105c:	f3 fc       	sbrc	r15, 3
    105e:	14 c0       	rjmp	.+40     	; 0x1088 <vfprintf+0x326>
    1060:	f0 fe       	sbrs	r15, 0
    1062:	0f c0       	rjmp	.+30     	; 0x1082 <vfprintf+0x320>
    1064:	1e 15       	cp	r17, r14
    1066:	10 f0       	brcs	.+4      	; 0x106c <vfprintf+0x30a>
    1068:	9d 2c       	mov	r9, r13
    106a:	0b c0       	rjmp	.+22     	; 0x1082 <vfprintf+0x320>
    106c:	9d 2c       	mov	r9, r13
    106e:	9e 0c       	add	r9, r14
    1070:	91 1a       	sub	r9, r17
    1072:	1e 2d       	mov	r17, r14
    1074:	06 c0       	rjmp	.+12     	; 0x1082 <vfprintf+0x320>
    1076:	80 e2       	ldi	r24, 0x20	; 32
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	b3 01       	movw	r22, r6
    107c:	0e 94 a4 08 	call	0x1148	; 0x1148 <fputc>
    1080:	1f 5f       	subi	r17, 0xFF	; 255
    1082:	1e 15       	cp	r17, r14
    1084:	c0 f3       	brcs	.-16     	; 0x1076 <vfprintf+0x314>
    1086:	04 c0       	rjmp	.+8      	; 0x1090 <vfprintf+0x32e>
    1088:	1e 15       	cp	r17, r14
    108a:	10 f4       	brcc	.+4      	; 0x1090 <vfprintf+0x32e>
    108c:	e1 1a       	sub	r14, r17
    108e:	01 c0       	rjmp	.+2      	; 0x1092 <vfprintf+0x330>
    1090:	ee 24       	eor	r14, r14
    1092:	04 ff       	sbrs	r16, 4
    1094:	0f c0       	rjmp	.+30     	; 0x10b4 <vfprintf+0x352>
    1096:	80 e3       	ldi	r24, 0x30	; 48
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	b3 01       	movw	r22, r6
    109c:	0e 94 a4 08 	call	0x1148	; 0x1148 <fputc>
    10a0:	02 ff       	sbrs	r16, 2
    10a2:	1d c0       	rjmp	.+58     	; 0x10de <vfprintf+0x37c>
    10a4:	01 fd       	sbrc	r16, 1
    10a6:	03 c0       	rjmp	.+6      	; 0x10ae <vfprintf+0x34c>
    10a8:	88 e7       	ldi	r24, 0x78	; 120
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	0e c0       	rjmp	.+28     	; 0x10ca <vfprintf+0x368>
    10ae:	88 e5       	ldi	r24, 0x58	; 88
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	0b c0       	rjmp	.+22     	; 0x10ca <vfprintf+0x368>
    10b4:	80 2f       	mov	r24, r16
    10b6:	86 78       	andi	r24, 0x86	; 134
    10b8:	91 f0       	breq	.+36     	; 0x10de <vfprintf+0x37c>
    10ba:	01 ff       	sbrs	r16, 1
    10bc:	02 c0       	rjmp	.+4      	; 0x10c2 <vfprintf+0x360>
    10be:	8b e2       	ldi	r24, 0x2B	; 43
    10c0:	01 c0       	rjmp	.+2      	; 0x10c4 <vfprintf+0x362>
    10c2:	80 e2       	ldi	r24, 0x20	; 32
    10c4:	f7 fc       	sbrc	r15, 7
    10c6:	8d e2       	ldi	r24, 0x2D	; 45
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	b3 01       	movw	r22, r6
    10cc:	0e 94 a4 08 	call	0x1148	; 0x1148 <fputc>
    10d0:	06 c0       	rjmp	.+12     	; 0x10de <vfprintf+0x37c>
    10d2:	80 e3       	ldi	r24, 0x30	; 48
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	b3 01       	movw	r22, r6
    10d8:	0e 94 a4 08 	call	0x1148	; 0x1148 <fputc>
    10dc:	9a 94       	dec	r9
    10de:	d9 14       	cp	r13, r9
    10e0:	c0 f3       	brcs	.-16     	; 0x10d2 <vfprintf+0x370>
    10e2:	da 94       	dec	r13
    10e4:	f1 01       	movw	r30, r2
    10e6:	ed 0d       	add	r30, r13
    10e8:	f1 1d       	adc	r31, r1
    10ea:	80 81       	ld	r24, Z
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	b3 01       	movw	r22, r6
    10f0:	0e 94 a4 08 	call	0x1148	; 0x1148 <fputc>
    10f4:	dd 20       	and	r13, r13
    10f6:	a9 f7       	brne	.-22     	; 0x10e2 <vfprintf+0x380>
    10f8:	06 c0       	rjmp	.+12     	; 0x1106 <vfprintf+0x3a4>
    10fa:	80 e2       	ldi	r24, 0x20	; 32
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	b3 01       	movw	r22, r6
    1100:	0e 94 a4 08 	call	0x1148	; 0x1148 <fputc>
    1104:	ea 94       	dec	r14
    1106:	ee 20       	and	r14, r14
    1108:	c1 f7       	brne	.-16     	; 0x10fa <vfprintf+0x398>
    110a:	43 ce       	rjmp	.-890    	; 0xd92 <vfprintf+0x30>
    110c:	f3 01       	movw	r30, r6
    110e:	66 81       	ldd	r22, Z+6	; 0x06
    1110:	77 81       	ldd	r23, Z+7	; 0x07
    1112:	cb 01       	movw	r24, r22
    1114:	2b 96       	adiw	r28, 0x0b	; 11
    1116:	e2 e1       	ldi	r30, 0x12	; 18
    1118:	0c 94 4a 09 	jmp	0x1294	; 0x1294 <__epilogue_restores__>

0000111c <strnlen_P>:
    111c:	fc 01       	movw	r30, r24
    111e:	05 90       	lpm	r0, Z+
    1120:	61 50       	subi	r22, 0x01	; 1
    1122:	70 40       	sbci	r23, 0x00	; 0
    1124:	01 10       	cpse	r0, r1
    1126:	d8 f7       	brcc	.-10     	; 0x111e <strnlen_P+0x2>
    1128:	80 95       	com	r24
    112a:	90 95       	com	r25
    112c:	8e 0f       	add	r24, r30
    112e:	9f 1f       	adc	r25, r31
    1130:	08 95       	ret

00001132 <strnlen>:
    1132:	fc 01       	movw	r30, r24
    1134:	61 50       	subi	r22, 0x01	; 1
    1136:	70 40       	sbci	r23, 0x00	; 0
    1138:	01 90       	ld	r0, Z+
    113a:	01 10       	cpse	r0, r1
    113c:	d8 f7       	brcc	.-10     	; 0x1134 <strnlen+0x2>
    113e:	80 95       	com	r24
    1140:	90 95       	com	r25
    1142:	8e 0f       	add	r24, r30
    1144:	9f 1f       	adc	r25, r31
    1146:	08 95       	ret

00001148 <fputc>:
    1148:	0f 93       	push	r16
    114a:	1f 93       	push	r17
    114c:	cf 93       	push	r28
    114e:	df 93       	push	r29
    1150:	8c 01       	movw	r16, r24
    1152:	eb 01       	movw	r28, r22
    1154:	8b 81       	ldd	r24, Y+3	; 0x03
    1156:	81 ff       	sbrs	r24, 1
    1158:	1b c0       	rjmp	.+54     	; 0x1190 <fputc+0x48>
    115a:	82 ff       	sbrs	r24, 2
    115c:	0d c0       	rjmp	.+26     	; 0x1178 <fputc+0x30>
    115e:	2e 81       	ldd	r18, Y+6	; 0x06
    1160:	3f 81       	ldd	r19, Y+7	; 0x07
    1162:	8c 81       	ldd	r24, Y+4	; 0x04
    1164:	9d 81       	ldd	r25, Y+5	; 0x05
    1166:	28 17       	cp	r18, r24
    1168:	39 07       	cpc	r19, r25
    116a:	64 f4       	brge	.+24     	; 0x1184 <fputc+0x3c>
    116c:	e8 81       	ld	r30, Y
    116e:	f9 81       	ldd	r31, Y+1	; 0x01
    1170:	01 93       	st	Z+, r16
    1172:	f9 83       	std	Y+1, r31	; 0x01
    1174:	e8 83       	st	Y, r30
    1176:	06 c0       	rjmp	.+12     	; 0x1184 <fputc+0x3c>
    1178:	e8 85       	ldd	r30, Y+8	; 0x08
    117a:	f9 85       	ldd	r31, Y+9	; 0x09
    117c:	80 2f       	mov	r24, r16
    117e:	09 95       	icall
    1180:	89 2b       	or	r24, r25
    1182:	31 f4       	brne	.+12     	; 0x1190 <fputc+0x48>
    1184:	8e 81       	ldd	r24, Y+6	; 0x06
    1186:	9f 81       	ldd	r25, Y+7	; 0x07
    1188:	01 96       	adiw	r24, 0x01	; 1
    118a:	9f 83       	std	Y+7, r25	; 0x07
    118c:	8e 83       	std	Y+6, r24	; 0x06
    118e:	02 c0       	rjmp	.+4      	; 0x1194 <fputc+0x4c>
    1190:	0f ef       	ldi	r16, 0xFF	; 255
    1192:	1f ef       	ldi	r17, 0xFF	; 255
    1194:	c8 01       	movw	r24, r16
    1196:	df 91       	pop	r29
    1198:	cf 91       	pop	r28
    119a:	1f 91       	pop	r17
    119c:	0f 91       	pop	r16
    119e:	08 95       	ret

000011a0 <__ultoa_invert>:
    11a0:	fa 01       	movw	r30, r20
    11a2:	aa 27       	eor	r26, r26
    11a4:	28 30       	cpi	r18, 0x08	; 8
    11a6:	51 f1       	breq	.+84     	; 0x11fc <__ultoa_invert+0x5c>
    11a8:	20 31       	cpi	r18, 0x10	; 16
    11aa:	81 f1       	breq	.+96     	; 0x120c <__ultoa_invert+0x6c>
    11ac:	e8 94       	clt
    11ae:	6f 93       	push	r22
    11b0:	6e 7f       	andi	r22, 0xFE	; 254
    11b2:	6e 5f       	subi	r22, 0xFE	; 254
    11b4:	7f 4f       	sbci	r23, 0xFF	; 255
    11b6:	8f 4f       	sbci	r24, 0xFF	; 255
    11b8:	9f 4f       	sbci	r25, 0xFF	; 255
    11ba:	af 4f       	sbci	r26, 0xFF	; 255
    11bc:	b1 e0       	ldi	r27, 0x01	; 1
    11be:	3e d0       	rcall	.+124    	; 0x123c <__ultoa_invert+0x9c>
    11c0:	b4 e0       	ldi	r27, 0x04	; 4
    11c2:	3c d0       	rcall	.+120    	; 0x123c <__ultoa_invert+0x9c>
    11c4:	67 0f       	add	r22, r23
    11c6:	78 1f       	adc	r23, r24
    11c8:	89 1f       	adc	r24, r25
    11ca:	9a 1f       	adc	r25, r26
    11cc:	a1 1d       	adc	r26, r1
    11ce:	68 0f       	add	r22, r24
    11d0:	79 1f       	adc	r23, r25
    11d2:	8a 1f       	adc	r24, r26
    11d4:	91 1d       	adc	r25, r1
    11d6:	a1 1d       	adc	r26, r1
    11d8:	6a 0f       	add	r22, r26
    11da:	71 1d       	adc	r23, r1
    11dc:	81 1d       	adc	r24, r1
    11de:	91 1d       	adc	r25, r1
    11e0:	a1 1d       	adc	r26, r1
    11e2:	20 d0       	rcall	.+64     	; 0x1224 <__ultoa_invert+0x84>
    11e4:	09 f4       	brne	.+2      	; 0x11e8 <__ultoa_invert+0x48>
    11e6:	68 94       	set
    11e8:	3f 91       	pop	r19
    11ea:	2a e0       	ldi	r18, 0x0A	; 10
    11ec:	26 9f       	mul	r18, r22
    11ee:	11 24       	eor	r1, r1
    11f0:	30 19       	sub	r19, r0
    11f2:	30 5d       	subi	r19, 0xD0	; 208
    11f4:	31 93       	st	Z+, r19
    11f6:	de f6       	brtc	.-74     	; 0x11ae <__ultoa_invert+0xe>
    11f8:	cf 01       	movw	r24, r30
    11fa:	08 95       	ret
    11fc:	46 2f       	mov	r20, r22
    11fe:	47 70       	andi	r20, 0x07	; 7
    1200:	40 5d       	subi	r20, 0xD0	; 208
    1202:	41 93       	st	Z+, r20
    1204:	b3 e0       	ldi	r27, 0x03	; 3
    1206:	0f d0       	rcall	.+30     	; 0x1226 <__ultoa_invert+0x86>
    1208:	c9 f7       	brne	.-14     	; 0x11fc <__ultoa_invert+0x5c>
    120a:	f6 cf       	rjmp	.-20     	; 0x11f8 <__ultoa_invert+0x58>
    120c:	46 2f       	mov	r20, r22
    120e:	4f 70       	andi	r20, 0x0F	; 15
    1210:	40 5d       	subi	r20, 0xD0	; 208
    1212:	4a 33       	cpi	r20, 0x3A	; 58
    1214:	18 f0       	brcs	.+6      	; 0x121c <__ultoa_invert+0x7c>
    1216:	49 5d       	subi	r20, 0xD9	; 217
    1218:	31 fd       	sbrc	r19, 1
    121a:	40 52       	subi	r20, 0x20	; 32
    121c:	41 93       	st	Z+, r20
    121e:	02 d0       	rcall	.+4      	; 0x1224 <__ultoa_invert+0x84>
    1220:	a9 f7       	brne	.-22     	; 0x120c <__ultoa_invert+0x6c>
    1222:	ea cf       	rjmp	.-44     	; 0x11f8 <__ultoa_invert+0x58>
    1224:	b4 e0       	ldi	r27, 0x04	; 4
    1226:	a6 95       	lsr	r26
    1228:	97 95       	ror	r25
    122a:	87 95       	ror	r24
    122c:	77 95       	ror	r23
    122e:	67 95       	ror	r22
    1230:	ba 95       	dec	r27
    1232:	c9 f7       	brne	.-14     	; 0x1226 <__ultoa_invert+0x86>
    1234:	00 97       	sbiw	r24, 0x00	; 0
    1236:	61 05       	cpc	r22, r1
    1238:	71 05       	cpc	r23, r1
    123a:	08 95       	ret
    123c:	9b 01       	movw	r18, r22
    123e:	ac 01       	movw	r20, r24
    1240:	0a 2e       	mov	r0, r26
    1242:	06 94       	lsr	r0
    1244:	57 95       	ror	r21
    1246:	47 95       	ror	r20
    1248:	37 95       	ror	r19
    124a:	27 95       	ror	r18
    124c:	ba 95       	dec	r27
    124e:	c9 f7       	brne	.-14     	; 0x1242 <__ultoa_invert+0xa2>
    1250:	62 0f       	add	r22, r18
    1252:	73 1f       	adc	r23, r19
    1254:	84 1f       	adc	r24, r20
    1256:	95 1f       	adc	r25, r21
    1258:	a0 1d       	adc	r26, r0
    125a:	08 95       	ret

0000125c <__prologue_saves__>:
    125c:	2f 92       	push	r2
    125e:	3f 92       	push	r3
    1260:	4f 92       	push	r4
    1262:	5f 92       	push	r5
    1264:	6f 92       	push	r6
    1266:	7f 92       	push	r7
    1268:	8f 92       	push	r8
    126a:	9f 92       	push	r9
    126c:	af 92       	push	r10
    126e:	bf 92       	push	r11
    1270:	cf 92       	push	r12
    1272:	df 92       	push	r13
    1274:	ef 92       	push	r14
    1276:	ff 92       	push	r15
    1278:	0f 93       	push	r16
    127a:	1f 93       	push	r17
    127c:	cf 93       	push	r28
    127e:	df 93       	push	r29
    1280:	cd b7       	in	r28, 0x3d	; 61
    1282:	de b7       	in	r29, 0x3e	; 62
    1284:	ca 1b       	sub	r28, r26
    1286:	db 0b       	sbc	r29, r27
    1288:	0f b6       	in	r0, 0x3f	; 63
    128a:	f8 94       	cli
    128c:	de bf       	out	0x3e, r29	; 62
    128e:	0f be       	out	0x3f, r0	; 63
    1290:	cd bf       	out	0x3d, r28	; 61
    1292:	09 94       	ijmp

00001294 <__epilogue_restores__>:
    1294:	2a 88       	ldd	r2, Y+18	; 0x12
    1296:	39 88       	ldd	r3, Y+17	; 0x11
    1298:	48 88       	ldd	r4, Y+16	; 0x10
    129a:	5f 84       	ldd	r5, Y+15	; 0x0f
    129c:	6e 84       	ldd	r6, Y+14	; 0x0e
    129e:	7d 84       	ldd	r7, Y+13	; 0x0d
    12a0:	8c 84       	ldd	r8, Y+12	; 0x0c
    12a2:	9b 84       	ldd	r9, Y+11	; 0x0b
    12a4:	aa 84       	ldd	r10, Y+10	; 0x0a
    12a6:	b9 84       	ldd	r11, Y+9	; 0x09
    12a8:	c8 84       	ldd	r12, Y+8	; 0x08
    12aa:	df 80       	ldd	r13, Y+7	; 0x07
    12ac:	ee 80       	ldd	r14, Y+6	; 0x06
    12ae:	fd 80       	ldd	r15, Y+5	; 0x05
    12b0:	0c 81       	ldd	r16, Y+4	; 0x04
    12b2:	1b 81       	ldd	r17, Y+3	; 0x03
    12b4:	aa 81       	ldd	r26, Y+2	; 0x02
    12b6:	b9 81       	ldd	r27, Y+1	; 0x01
    12b8:	ce 0f       	add	r28, r30
    12ba:	d1 1d       	adc	r29, r1
    12bc:	0f b6       	in	r0, 0x3f	; 63
    12be:	f8 94       	cli
    12c0:	de bf       	out	0x3e, r29	; 62
    12c2:	0f be       	out	0x3f, r0	; 63
    12c4:	cd bf       	out	0x3d, r28	; 61
    12c6:	ed 01       	movw	r28, r26
    12c8:	08 95       	ret

000012ca <_exit>:
    12ca:	f8 94       	cli

000012cc <__stop_program>:
    12cc:	ff cf       	rjmp	.-2      	; 0x12cc <__stop_program>
