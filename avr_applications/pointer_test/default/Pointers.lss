
Pointers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009c  00800100  00000c42  00000cd6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c42  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d8  0080019c  0080019c  00000d72  2**0
                  ALLOC
  3 .debug_aranges 00000160  00000000  00000000  00000d72  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000066c  00000000  00000000  00000ed2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001674  00000000  00000000  0000153e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000924  00000000  00000000  00002bb2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000d58  00000000  00000000  000034d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001d0  00000000  00000000  00004230  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006c2  00000000  00000000  00004400  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000449  00000000  00000000  00004ac2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 20 01 	jmp	0x240	; 0x240 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__vector_20>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e4       	ldi	r30, 0x42	; 66
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	ac 39       	cpi	r26, 0x9C	; 156
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	12 e0       	ldi	r17, 0x02	; 2
  8c:	ac e9       	ldi	r26, 0x9C	; 156
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 37       	cpi	r26, 0x74	; 116
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 92 00 	call	0x124	; 0x124 <main>
  9e:	0c 94 1f 06 	jmp	0xc3e	; 0xc3e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <printMyBlock>:
*/
  printMyBlock(q,16);
}

void printMyBlock(char *p,int mB)
{
  a6:	cf 92       	push	r12
  a8:	df 92       	push	r13
  aa:	ef 92       	push	r14
  ac:	ff 92       	push	r15
  ae:	0f 93       	push	r16
  b0:	1f 93       	push	r17
  b2:	cf 93       	push	r28
  b4:	df 93       	push	r29
  b6:	7b 01       	movw	r14, r22
  b8:	ec 01       	movw	r28, r24
  ba:	00 e0       	ldi	r16, 0x00	; 0
  bc:	10 e0       	ldi	r17, 0x00	; 0
  for(int i = 0 ; i < mB ; i++)
  {
	printf(" %p       0x%02x\n",p-i,*(p-i));
  be:	80 e0       	ldi	r24, 0x00	; 0
  c0:	c8 2e       	mov	r12, r24
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	d8 2e       	mov	r13, r24
  c6:	1e c0       	rjmp	.+60     	; 0x104 <printMyBlock+0x5e>
  c8:	00 d0       	rcall	.+0      	; 0xca <printMyBlock+0x24>
  ca:	00 d0       	rcall	.+0      	; 0xcc <printMyBlock+0x26>
  cc:	00 d0       	rcall	.+0      	; 0xce <printMyBlock+0x28>
  ce:	ed b7       	in	r30, 0x3d	; 61
  d0:	fe b7       	in	r31, 0x3e	; 62
  d2:	31 96       	adiw	r30, 0x01	; 1
  d4:	ad b7       	in	r26, 0x3d	; 61
  d6:	be b7       	in	r27, 0x3e	; 62
  d8:	12 96       	adiw	r26, 0x02	; 2
  da:	dc 92       	st	X, r13
  dc:	ce 92       	st	-X, r12
  de:	11 97       	sbiw	r26, 0x01	; 1
  e0:	d3 83       	std	Z+3, r29	; 0x03
  e2:	c2 83       	std	Z+2, r28	; 0x02
  e4:	88 81       	ld	r24, Y
  e6:	84 83       	std	Z+4, r24	; 0x04
  e8:	15 82       	std	Z+5, r1	; 0x05
  ea:	0e 94 21 03 	call	0x642	; 0x642 <printf>
  printMyBlock(q,16);
}

void printMyBlock(char *p,int mB)
{
  for(int i = 0 ; i < mB ; i++)
  ee:	0f 5f       	subi	r16, 0xFF	; 255
  f0:	1f 4f       	sbci	r17, 0xFF	; 255
  f2:	21 97       	sbiw	r28, 0x01	; 1
  f4:	8d b7       	in	r24, 0x3d	; 61
  f6:	9e b7       	in	r25, 0x3e	; 62
  f8:	06 96       	adiw	r24, 0x06	; 6
  fa:	0f b6       	in	r0, 0x3f	; 63
  fc:	f8 94       	cli
  fe:	9e bf       	out	0x3e, r25	; 62
 100:	0f be       	out	0x3f, r0	; 63
 102:	8d bf       	out	0x3d, r24	; 61
 104:	0e 15       	cp	r16, r14
 106:	1f 05       	cpc	r17, r15
 108:	fc f2       	brlt	.-66     	; 0xc8 <printMyBlock+0x22>
  {
	printf(" %p       0x%02x\n",p-i,*(p-i));
  }

printf("printmyBlock\n");
 10a:	82 e1       	ldi	r24, 0x12	; 18
 10c:	91 e0       	ldi	r25, 0x01	; 1
 10e:	0e 94 36 03 	call	0x66c	; 0x66c <puts>
	/*for(int i = 0 ; i < mB ; i++)
	{
		printf("myBlock #%d = %c\n",i,*(p+i));
	}*/
}
 112:	df 91       	pop	r29
 114:	cf 91       	pop	r28
 116:	1f 91       	pop	r17
 118:	0f 91       	pop	r16
 11a:	ff 90       	pop	r15
 11c:	ef 90       	pop	r14
 11e:	df 90       	pop	r13
 120:	cf 90       	pop	r12
 122:	08 95       	ret

00000124 <main>:
#include "c:\avrtoolbox\libavr\source\driver\usart\usart.h" 

void printMyBlock(char *p,int mB);

int main()
{
 124:	df 93       	push	r29
 126:	cf 93       	push	r28
 128:	00 d0       	rcall	.+0      	; 0x12a <main+0x6>
 12a:	0f 92       	push	r0
 12c:	cd b7       	in	r28, 0x3d	; 61
 12e:	de b7       	in	r29, 0x3e	; 62
  // Initialize usart for printf
  usart0_init_baud(57600);
 130:	60 e0       	ldi	r22, 0x00	; 0
 132:	71 ee       	ldi	r23, 0xE1	; 225
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	0e 94 df 00 	call	0x1be	; 0x1be <usart0_init_baud>
  
  char a = 'A';
 13c:	81 e4       	ldi	r24, 0x41	; 65
 13e:	89 83       	std	Y+1, r24	; 0x01
  char *q;

  // Point to top of SRAM
  q = (char *)0x8ff;
  // Point to the char a;
  p = &a;
 140:	ce 01       	movw	r24, r28
 142:	01 96       	adiw	r24, 0x01	; 1
 144:	9b 83       	std	Y+3, r25	; 0x03
 146:	8a 83       	std	Y+2, r24	; 0x02

  printf("Pointer p address: &p = %p\n",&p);
 148:	00 d0       	rcall	.+0      	; 0x14a <main+0x26>
 14a:	00 d0       	rcall	.+0      	; 0x14c <main+0x28>
 14c:	8f e1       	ldi	r24, 0x1F	; 31
 14e:	91 e0       	ldi	r25, 0x01	; 1
 150:	ed b7       	in	r30, 0x3d	; 61
 152:	fe b7       	in	r31, 0x3e	; 62
 154:	92 83       	std	Z+2, r25	; 0x02
 156:	81 83       	std	Z+1, r24	; 0x01
 158:	ce 01       	movw	r24, r28
 15a:	02 96       	adiw	r24, 0x02	; 2
 15c:	94 83       	std	Z+4, r25	; 0x04
 15e:	83 83       	std	Z+3, r24	; 0x03
 160:	0e 94 21 03 	call	0x642	; 0x642 <printf>
  printf("Points to content *p = %c\n",*p);
 164:	ad b7       	in	r26, 0x3d	; 61
 166:	be b7       	in	r27, 0x3e	; 62
 168:	11 96       	adiw	r26, 0x01	; 1
 16a:	8b e3       	ldi	r24, 0x3B	; 59
 16c:	91 e0       	ldi	r25, 0x01	; 1
 16e:	ed b7       	in	r30, 0x3d	; 61
 170:	fe b7       	in	r31, 0x3e	; 62
 172:	92 83       	std	Z+2, r25	; 0x02
 174:	81 83       	std	Z+1, r24	; 0x01
 176:	ea 81       	ldd	r30, Y+2	; 0x02
 178:	fb 81       	ldd	r31, Y+3	; 0x03
 17a:	80 81       	ld	r24, Z
 17c:	12 96       	adiw	r26, 0x02	; 2
 17e:	8c 93       	st	X, r24
 180:	12 97       	sbiw	r26, 0x02	; 2
 182:	13 96       	adiw	r26, 0x03	; 3
 184:	1c 92       	st	X, r1
 186:	0e 94 21 03 	call	0x642	; 0x642 <printf>

  printf("\nContent of top 16 memory locations:\n");
 18a:	0f 90       	pop	r0
 18c:	0f 90       	pop	r0
 18e:	0f 90       	pop	r0
 190:	0f 90       	pop	r0
 192:	86 e5       	ldi	r24, 0x56	; 86
 194:	91 e0       	ldi	r25, 0x01	; 1
 196:	0e 94 36 03 	call	0x66c	; 0x66c <puts>
  printf("Address   Content\n");
 19a:	8b e7       	ldi	r24, 0x7B	; 123
 19c:	91 e0       	ldi	r25, 0x01	; 1
 19e:	0e 94 36 03 	call	0x66c	; 0x66c <puts>
  for(int i = 0 ; i < 16 ; i++)
  {
	printf(" %p       0x%02x\n",q-i,*(q-i));
  }
*/
  printMyBlock(q,16);
 1a2:	8f ef       	ldi	r24, 0xFF	; 255
 1a4:	98 e0       	ldi	r25, 0x08	; 8
 1a6:	60 e1       	ldi	r22, 0x10	; 16
 1a8:	70 e0       	ldi	r23, 0x00	; 0
 1aa:	0e 94 53 00 	call	0xa6	; 0xa6 <printMyBlock>
}
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	0f 90       	pop	r0
 1b4:	0f 90       	pop	r0
 1b6:	0f 90       	pop	r0
 1b8:	cf 91       	pop	r28
 1ba:	df 91       	pop	r29
 1bc:	08 95       	ret

000001be <usart0_init_baud>:
 // please contact me with details so that I may correct the situation. 
 
#include "usart.h"

void usart0_init_baud(uint32_t baud)
{
 1be:	8f 92       	push	r8
 1c0:	af 92       	push	r10
 1c2:	cf 92       	push	r12
 1c4:	ef 92       	push	r14
 1c6:	0f 93       	push	r16
	// Test usart initialization with all parameters
	cli();
 1c8:	f8 94       	cli
	uint8_t databits = 8;
	uint8_t stopbits = 1;
	usart_parity_t parity = parity_none;
	usart_flow_control_t flow_control = flow_none;

	usart0_init(baud, F_CPU, mode,  databits, stopbits, parity, flow_control);
 1ca:	20 e0       	ldi	r18, 0x00	; 0
 1cc:	34 e2       	ldi	r19, 0x24	; 36
 1ce:	44 ef       	ldi	r20, 0xF4	; 244
 1d0:	50 e0       	ldi	r21, 0x00	; 0
 1d2:	00 e0       	ldi	r16, 0x00	; 0
 1d4:	e8 e0       	ldi	r30, 0x08	; 8
 1d6:	ee 2e       	mov	r14, r30
 1d8:	cc 24       	eor	r12, r12
 1da:	c3 94       	inc	r12
 1dc:	aa 24       	eor	r10, r10
 1de:	88 24       	eor	r8, r8
 1e0:	0e 94 96 01 	call	0x32c	; 0x32c <usart0_init>

	sei();
 1e4:	78 94       	sei
	
}
 1e6:	0f 91       	pop	r16
 1e8:	ef 90       	pop	r14
 1ea:	cf 90       	pop	r12
 1ec:	af 90       	pop	r10
 1ee:	8f 90       	pop	r8
 1f0:	08 95       	ret

000001f2 <usart0_uninit>:


void usart0_uninit(void)
{
	// restore to datasheet defaults
	UART_CONTROL_STATUS_REG_A = 0x20;
 1f2:	80 e2       	ldi	r24, 0x20	; 32
 1f4:	80 93 c0 00 	sts	0x00C0, r24
	UART_CONTROL_STATUS_REG_B = 0;
 1f8:	10 92 c1 00 	sts	0x00C1, r1
	UART_CONTROL_STATUS_REG_C = 0x06;
 1fc:	86 e0       	ldi	r24, 0x06	; 6
 1fe:	80 93 c2 00 	sts	0x00C2, r24
}
 202:	08 95       	ret

00000204 <usart0_baud_set>:
}


// 3/18/11 JWP removed magic number for clock and added freq_cpu
void usart0_baud_set(uint32_t baudrate, uint32_t freq_cpu)
{
 204:	ef 92       	push	r14
 206:	ff 92       	push	r15
 208:	0f 93       	push	r16
 20a:	1f 93       	push	r17
 20c:	7b 01       	movw	r14, r22
 20e:	8c 01       	movw	r16, r24
	uint16_t setting;
	
	setting = usart_baudrate_to_setting(freq_cpu,baudrate);
 210:	84 e0       	ldi	r24, 0x04	; 4
 212:	ee 0c       	add	r14, r14
 214:	ff 1c       	adc	r15, r15
 216:	00 1f       	adc	r16, r16
 218:	11 1f       	adc	r17, r17
 21a:	8a 95       	dec	r24
 21c:	d1 f7       	brne	.-12     	; 0x212 <usart0_baud_set+0xe>
 21e:	ca 01       	movw	r24, r20
 220:	b9 01       	movw	r22, r18
 222:	a8 01       	movw	r20, r16
 224:	97 01       	movw	r18, r14
 226:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <__udivmodsi4>
 22a:	21 50       	subi	r18, 0x01	; 1
 22c:	30 40       	sbci	r19, 0x00	; 0
	
	// Write hi byte first as writing lo byte will trigger immediate update of baud prescaler.
	UART_BAUD_RATE_HIGH = bit_hi_byte(setting);
 22e:	30 93 c5 00 	sts	0x00C5, r19
	UART_BAUD_RATE_LOW= bit_lo_byte(setting);
 232:	20 93 c4 00 	sts	0x00C4, r18
	
	return;
}
 236:	1f 91       	pop	r17
 238:	0f 91       	pop	r16
 23a:	ff 90       	pop	r15
 23c:	ef 90       	pop	r14
 23e:	08 95       	ret

00000240 <__vector_18>:


// The interrupt service routines are included in the initialization .c file 
// since they must be associated with a .c file for the compiler
usart0_receive_interrupt_service_routine
{
 240:	1f 92       	push	r1
 242:	0f 92       	push	r0
 244:	0f b6       	in	r0, 0x3f	; 63
 246:	0f 92       	push	r0
 248:	11 24       	eor	r1, r1
 24a:	2f 93       	push	r18
 24c:	3f 93       	push	r19
 24e:	4f 93       	push	r20
 250:	5f 93       	push	r21
 252:	6f 93       	push	r22
 254:	7f 93       	push	r23
 256:	8f 93       	push	r24
 258:	9f 93       	push	r25
 25a:	af 93       	push	r26
 25c:	bf 93       	push	r27
 25e:	ef 93       	push	r30
 260:	ff 93       	push	r31
	// Get error conditions before getting the data.

	// Changed to bit operator due to warning
	//frame_error = usart0_frame_error();
	//frame_error	= bit_get(UART_CONTROL_STATUS_REG_A, bit(UART_FRAME_ERROR));
	frame_error	= (UART_CONTROL_STATUS_REG_A & (1<<UART_FRAME_ERROR));
 262:	80 91 c0 00 	lds	r24, 0x00C0
	
	parity_error = usart0_parity_error();
 266:	90 91 c0 00 	lds	r25, 0x00C0
	
	data = UART_DATA_REG;
 26a:	60 91 c6 00 	lds	r22, 0x00C6
    
	if(!frame_error && !parity_error)
 26e:	84 fd       	sbrc	r24, 4
 270:	06 c0       	rjmp	.+12     	; 0x27e <__vector_18+0x3e>
 272:	94 fd       	sbrc	r25, 4
 274:	04 c0       	rjmp	.+8      	; 0x27e <__vector_18+0x3e>
	{
		// Store data in ring buffer.
        ring_add(&usart0_receive_ring, data);
 276:	84 e2       	ldi	r24, 0x24	; 36
 278:	92 e0       	ldi	r25, 0x02	; 2
 27a:	0e 94 65 02 	call	0x4ca	; 0x4ca <ring_add>
	}

	return;
}
 27e:	ff 91       	pop	r31
 280:	ef 91       	pop	r30
 282:	bf 91       	pop	r27
 284:	af 91       	pop	r26
 286:	9f 91       	pop	r25
 288:	8f 91       	pop	r24
 28a:	7f 91       	pop	r23
 28c:	6f 91       	pop	r22
 28e:	5f 91       	pop	r21
 290:	4f 91       	pop	r20
 292:	3f 91       	pop	r19
 294:	2f 91       	pop	r18
 296:	0f 90       	pop	r0
 298:	0f be       	out	0x3f, r0	; 63
 29a:	0f 90       	pop	r0
 29c:	1f 90       	pop	r1
 29e:	18 95       	reti

000002a0 <__vector_20>:
// JWP 6/16/11 rewrote transmit interrupt to use TX complete vector
// rather than the Data Register Empty vector
// The interrupt service routines are included in the initialization .c file 
// since they must be associated with a .c file for the compiler
usart0_transmit_interrupt_service_routine
{
 2a0:	1f 92       	push	r1
 2a2:	0f 92       	push	r0
 2a4:	0f b6       	in	r0, 0x3f	; 63
 2a6:	0f 92       	push	r0
 2a8:	11 24       	eor	r1, r1
 2aa:	2f 93       	push	r18
 2ac:	3f 93       	push	r19
 2ae:	4f 93       	push	r20
 2b0:	5f 93       	push	r21
 2b2:	6f 93       	push	r22
 2b4:	7f 93       	push	r23
 2b6:	8f 93       	push	r24
 2b8:	9f 93       	push	r25
 2ba:	af 93       	push	r26
 2bc:	bf 93       	push	r27
 2be:	ef 93       	push	r30
 2c0:	ff 93       	push	r31

	// Is buffered transmission enabled?
	if(usart_buffered_tx_flag)
 2c2:	80 91 6c 02 	lds	r24, 0x026C
 2c6:	88 23       	and	r24, r24
 2c8:	69 f0       	breq	.+26     	; 0x2e4 <__vector_20+0x44>
	{		
		//if(usart0_transmit_ring.count)// Alternate technique
		if(usart0_transmit_buffer_inuse_count())// Is there data in the buffer?
 2ca:	0e 94 60 02 	call	0x4c0	; 0x4c0 <usart0_transmit_buffer_inuse_count>
 2ce:	88 23       	and	r24, r24
 2d0:	39 f0       	breq	.+14     	; 0x2e0 <__vector_20+0x40>
		{
			// Send next byte in the buffer.
 	       UART_DATA_REG = ring_remove(&usart0_transmit_ring);
 2d2:	8c e1       	ldi	r24, 0x1C	; 28
 2d4:	92 e0       	ldi	r25, 0x02	; 2
 2d6:	0e 94 b7 02 	call	0x56e	; 0x56e <ring_remove>
 2da:	80 93 c6 00 	sts	0x00C6, r24
 2de:	05 c0       	rjmp	.+10     	; 0x2ea <__vector_20+0x4a>
		}
		else
		{
			// The buffer is empty
			usart_buffered_tx_flag = false;
 2e0:	10 92 6c 02 	sts	0x026C, r1
		}
	}
	else // Not buffered so transmited single byte
	{
		// Set transmit ready flag
		usart_tx_ready_flag = true;
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	80 93 6d 02 	sts	0x026D, r24
	}
	
    return;
}
 2ea:	ff 91       	pop	r31
 2ec:	ef 91       	pop	r30
 2ee:	bf 91       	pop	r27
 2f0:	af 91       	pop	r26
 2f2:	9f 91       	pop	r25
 2f4:	8f 91       	pop	r24
 2f6:	7f 91       	pop	r23
 2f8:	6f 91       	pop	r22
 2fa:	5f 91       	pop	r21
 2fc:	4f 91       	pop	r20
 2fe:	3f 91       	pop	r19
 300:	2f 91       	pop	r18
 302:	0f 90       	pop	r0
 304:	0f be       	out	0x3f, r0	; 63
 306:	0f 90       	pop	r0
 308:	1f 90       	pop	r1
 30a:	18 95       	reti

0000030c <usart0_send>:
// the ISR just sends the byte. 
void usart0_send(void)
{

	// Wait until the transmitter is ready
	while(!usart_tx_ready_flag);
 30c:	80 91 6d 02 	lds	r24, 0x026D
 310:	88 23       	and	r24, r24
 312:	e1 f3       	breq	.-8      	; 0x30c <usart0_send>

	// Set flag for ISR
	usart_buffered_tx_flag = true;
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	80 93 6c 02 	sts	0x026C, r24
	
	// Send the byte
	UART_DATA_REG = ring_remove(&usart0_transmit_ring);
 31a:	8c e1       	ldi	r24, 0x1C	; 28
 31c:	92 e0       	ldi	r25, 0x02	; 2
 31e:	0e 94 b7 02 	call	0x56e	; 0x56e <ring_remove>
 322:	80 93 c6 00 	sts	0x00C6, r24

	// Set the ready flag to false
	usart_tx_ready_flag = false;
 326:	10 92 6d 02 	sts	0x026D, r1
}
 32a:	08 95       	ret

0000032c <usart0_init>:

   	return 0; 
} 

void usart0_init(uint32_t baud, uint32_t freq_cpu, usart_mode_t mode, usart_databits_t databits, usart_stopbits_t stopbits, usart_parity_t parity, usart_flow_control_t flow_control)
{
 32c:	4f 92       	push	r4
 32e:	5f 92       	push	r5
 330:	6f 92       	push	r6
 332:	7f 92       	push	r7
 334:	8f 92       	push	r8
 336:	9f 92       	push	r9
 338:	af 92       	push	r10
 33a:	bf 92       	push	r11
 33c:	cf 92       	push	r12
 33e:	ef 92       	push	r14
 340:	0f 93       	push	r16
 342:	1f 93       	push	r17
 344:	df 93       	push	r29
 346:	cf 93       	push	r28
 348:	cd b7       	in	r28, 0x3d	; 61
 34a:	de b7       	in	r29, 0x3e	; 62
 34c:	4b 01       	movw	r8, r22
 34e:	5c 01       	movw	r10, r24
 350:	29 01       	movw	r4, r18
 352:	3a 01       	movw	r6, r20
 354:	1e 2d       	mov	r17, r14
 356:	0c 2d       	mov	r16, r12

	cli();
 358:	f8 94       	cli

   	stdout = &mystdout;    //set the output stream 
 35a:	8d e8       	ldi	r24, 0x8D	; 141
 35c:	91 e0       	ldi	r25, 0x01	; 1
 35e:	90 93 71 02 	sts	0x0271, r25
 362:	80 93 70 02 	sts	0x0270, r24
    // flow_out_tcb.run_interval = 0;
    // flow_out_tcb.enabled = false;
    // task_add(&flow_out_tcb);

 
 	usart0_transmit_disable();
 366:	80 91 c1 00 	lds	r24, 0x00C1
 36a:	87 7f       	andi	r24, 0xF7	; 247
 36c:	80 93 c1 00 	sts	0x00C1, r24
    usart0_receive_disable();
 370:	80 91 c1 00 	lds	r24, 0x00C1
 374:	8f 7e       	andi	r24, 0xEF	; 239
 376:	80 93 c1 00 	sts	0x00C1, r24
	usart0_transmit_complete_interrupt_disable();
 37a:	80 91 c1 00 	lds	r24, 0x00C1
 37e:	8f 7b       	andi	r24, 0xBF	; 191
 380:	80 93 c1 00 	sts	0x00C1, r24
    usart0_receive_complete_interrupt_disable();
 384:	80 91 c1 00 	lds	r24, 0x00C1
 388:	8f 77       	andi	r24, 0x7F	; 127
 38a:	80 93 c1 00 	sts	0x00C1, r24

//  JWP 6/19/11 Just use default while testing
// TODO: figure this out someday   
//	usart0_mode(mode);
 	usart0_baud_set(baud, freq_cpu);
 38e:	c5 01       	movw	r24, r10
 390:	b4 01       	movw	r22, r8
 392:	0e 94 02 01 	call	0x204	; 0x204 <usart0_baud_set>
    usart0_data_bits_set(databits);
 396:	8e 2d       	mov	r24, r14
 398:	85 50       	subi	r24, 0x05	; 5
 39a:	84 30       	cpi	r24, 0x04	; 4
 39c:	18 f5       	brcc	.+70     	; 0x3e4 <usart0_init+0xb8>
 39e:	2e 2d       	mov	r18, r14
 3a0:	30 e0       	ldi	r19, 0x00	; 0
 3a2:	25 50       	subi	r18, 0x05	; 5
 3a4:	30 40       	sbci	r19, 0x00	; 0
 3a6:	21 ff       	sbrs	r18, 1
 3a8:	04 c0       	rjmp	.+8      	; 0x3b2 <usart0_init+0x86>
 3aa:	80 91 c2 00 	lds	r24, 0x00C2
 3ae:	84 60       	ori	r24, 0x04	; 4
 3b0:	03 c0       	rjmp	.+6      	; 0x3b8 <usart0_init+0x8c>
 3b2:	80 91 c2 00 	lds	r24, 0x00C2
 3b6:	8b 7f       	andi	r24, 0xFB	; 251
 3b8:	80 93 c2 00 	sts	0x00C2, r24
 3bc:	80 91 c2 00 	lds	r24, 0x00C2
 3c0:	22 ff       	sbrs	r18, 2
 3c2:	04 c0       	rjmp	.+8      	; 0x3cc <usart0_init+0xa0>
 3c4:	80 91 c2 00 	lds	r24, 0x00C2
 3c8:	80 61       	ori	r24, 0x10	; 16
 3ca:	03 c0       	rjmp	.+6      	; 0x3d2 <usart0_init+0xa6>
 3cc:	80 91 c2 00 	lds	r24, 0x00C2
 3d0:	8f 7e       	andi	r24, 0xEF	; 239
 3d2:	80 93 c2 00 	sts	0x00C2, r24
 3d6:	80 91 c2 00 	lds	r24, 0x00C2
 3da:	80 91 c1 00 	lds	r24, 0x00C1
 3de:	8f 7e       	andi	r24, 0xEF	; 239
 3e0:	80 93 c1 00 	sts	0x00C1, r24
 3e4:	19 30       	cpi	r17, 0x09	; 9
 3e6:	79 f4       	brne	.+30     	; 0x406 <usart0_init+0xda>
 3e8:	80 91 c2 00 	lds	r24, 0x00C2
 3ec:	84 60       	ori	r24, 0x04	; 4
 3ee:	80 93 c2 00 	sts	0x00C2, r24
 3f2:	80 91 c2 00 	lds	r24, 0x00C2
 3f6:	80 61       	ori	r24, 0x10	; 16
 3f8:	80 93 c2 00 	sts	0x00C2, r24
 3fc:	80 91 c1 00 	lds	r24, 0x00C1
 400:	80 61       	ori	r24, 0x10	; 16
 402:	80 93 c1 00 	sts	0x00C1, r24
    usart0_stop_bits_set(stopbits);
 406:	80 2f       	mov	r24, r16
 408:	81 50       	subi	r24, 0x01	; 1
 40a:	82 30       	cpi	r24, 0x02	; 2
 40c:	30 f4       	brcc	.+12     	; 0x41a <usart0_init+0xee>
 40e:	80 91 c2 00 	lds	r24, 0x00C2
 412:	80 93 c2 00 	sts	0x00C2, r24
 416:	80 91 c2 00 	lds	r24, 0x00C2
//    usart0_parity_set(parity);
 
 	usart0_baud_set(baud, freq_cpu);
 41a:	c5 01       	movw	r24, r10
 41c:	b4 01       	movw	r22, r8
 41e:	a3 01       	movw	r20, r6
 420:	92 01       	movw	r18, r4
 422:	0e 94 02 01 	call	0x204	; 0x204 <usart0_baud_set>
#if defined(__AVR_ATmega169__) // Assume Butterfly
	butterfly_init();
#endif


	ring_init(&usart0_receive_ring, usart0_receive_buffer, USART0_RECEIVE_BUFFER_LEN);
 426:	84 e2       	ldi	r24, 0x24	; 36
 428:	92 e0       	ldi	r25, 0x02	; 2
 42a:	6c e2       	ldi	r22, 0x2C	; 44
 42c:	72 e0       	ldi	r23, 0x02	; 2
 42e:	40 e4       	ldi	r20, 0x40	; 64
 430:	0e 94 93 02 	call	0x526	; 0x526 <ring_init>
    ring_init(&usart0_transmit_ring, usart0_transmit_buffer, USART0_TRANSMIT_BUFFER_LEN);
 434:	8c e1       	ldi	r24, 0x1C	; 28
 436:	92 e0       	ldi	r25, 0x02	; 2
 438:	6c e9       	ldi	r22, 0x9C	; 156
 43a:	71 e0       	ldi	r23, 0x01	; 1
 43c:	40 e8       	ldi	r20, 0x80	; 128
 43e:	0e 94 93 02 	call	0x526	; 0x526 <ring_init>

	// JWP 6/16/11 
	usart0_transmit_enable();
 442:	80 91 c1 00 	lds	r24, 0x00C1
 446:	88 60       	ori	r24, 0x08	; 8
 448:	80 93 c1 00 	sts	0x00C1, r24
    usart0_receive_enable();
 44c:	80 91 c1 00 	lds	r24, 0x00C1
 450:	80 61       	ori	r24, 0x10	; 16
 452:	80 93 c1 00 	sts	0x00C1, r24
	usart0_transmit_complete_interrupt_enable();
 456:	80 91 c1 00 	lds	r24, 0x00C1
 45a:	80 64       	ori	r24, 0x40	; 64
 45c:	80 93 c1 00 	sts	0x00C1, r24
    usart0_receive_complete_interrupt_enable();
 460:	80 91 c1 00 	lds	r24, 0x00C1
 464:	80 68       	ori	r24, 0x80	; 128
 466:	80 93 c1 00 	sts	0x00C1, r24

	// JWP 6/16/11 - set flags for revised transmission logic
	usart_buffered_tx_flag = false;
 46a:	10 92 6c 02 	sts	0x026C, r1
	usart_tx_ready_flag = true;
 46e:	81 e0       	ldi	r24, 0x01	; 1
 470:	80 93 6d 02 	sts	0x026D, r24

	sei();
 474:	78 94       	sei

	return;
}
 476:	cf 91       	pop	r28
 478:	df 91       	pop	r29
 47a:	1f 91       	pop	r17
 47c:	0f 91       	pop	r16
 47e:	ef 90       	pop	r14
 480:	cf 90       	pop	r12
 482:	bf 90       	pop	r11
 484:	af 90       	pop	r10
 486:	9f 90       	pop	r9
 488:	8f 90       	pop	r8
 48a:	7f 90       	pop	r7
 48c:	6f 90       	pop	r6
 48e:	5f 90       	pop	r5
 490:	4f 90       	pop	r4
 492:	08 95       	ret

00000494 <usart0_put_char_stream>:
int usart0_put_char_stream(char c, FILE *stream);

// Keep this in the same file as the usart0_put_char function
FILE mystdout = FDEV_SETUP_STREAM(usart0_put_char_stream, NULL, _FDEV_SETUP_WRITE);
int usart0_put_char_stream(char c, FILE *stream) 
{ 
 494:	1f 93       	push	r17
 496:	18 2f       	mov	r17, r24
	if (c == '\n') usart0_put_char_stream('\r', stream);
 498:	8a 30       	cpi	r24, 0x0A	; 10
 49a:	19 f4       	brne	.+6      	; 0x4a2 <usart0_put_char_stream+0xe>
 49c:	8d e0       	ldi	r24, 0x0D	; 13
 49e:	0e 94 4a 02 	call	0x494	; 0x494 <usart0_put_char_stream>

	usart0_transmit_buffer_insert((uint8_t)c);
 4a2:	81 2f       	mov	r24, r17
 4a4:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <usart0_transmit_buffer_insert>
   	
	usart0_send();
 4a8:	0e 94 86 01 	call	0x30c	; 0x30c <usart0_send>

   	return 0; 
} 
 4ac:	80 e0       	ldi	r24, 0x00	; 0
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	1f 91       	pop	r17
 4b2:	08 95       	ret

000004b4 <usart0_transmit_buffer_insert>:
 // please contact me with details so that I may correct the situation. 
 
#include "usart.h"

bool usart0_transmit_buffer_insert(uint8_t c)
{
 4b4:	68 2f       	mov	r22, r24
    register bool result;
    result = usart0_buffer_insert(&usart0_transmit_ring, c);
 4b6:	8c e1       	ldi	r24, 0x1C	; 28
 4b8:	92 e0       	ldi	r25, 0x02	; 2
 4ba:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <usart0_buffer_insert>
	// JWP 6/14/11 don't automatically send. Use usart0_transmit_send when 
	// 		you have finished loading what you want to send in the buffer
	//if(result == true) usart0_transmit_check();

    return(result);
}
 4be:	08 95       	ret

000004c0 <usart0_transmit_buffer_inuse_count>:
 
#include "usart.h"

uint8_t usart0_transmit_buffer_inuse_count(void)
{
    return(usart0_buffer_inuse_count(&usart0_transmit_ring));
 4c0:	8c e1       	ldi	r24, 0x1C	; 28
 4c2:	92 e0       	ldi	r25, 0x02	; 2
 4c4:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <usart0_buffer_inuse_count>
}
 4c8:	08 95       	ret

000004ca <ring_add>:
#include <stdbool.h>
#include <stdint.h>
#include "ring.h"

bool ring_add(ring_t *r, uint8_t data)
{
 4ca:	dc 01       	movw	r26, r24
    // Get the next head index.
    ring_index_t temp_head = r->head_index + 1;
 4cc:	13 96       	adiw	r26, 0x03	; 3
 4ce:	4d 91       	ld	r20, X+
 4d0:	5c 91       	ld	r21, X
 4d2:	14 97       	sbiw	r26, 0x04	; 4
    if(r->head_index >= r->size - 1)
 4d4:	12 96       	adiw	r26, 0x02	; 2
 4d6:	8c 91       	ld	r24, X
 4d8:	12 97       	sbiw	r26, 0x02	; 2
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	01 97       	sbiw	r24, 0x01	; 1
 4de:	48 17       	cp	r20, r24
 4e0:	59 07       	cpc	r21, r25
 4e2:	18 f0       	brcs	.+6      	; 0x4ea <ring_add+0x20>
 4e4:	20 e0       	ldi	r18, 0x00	; 0
 4e6:	30 e0       	ldi	r19, 0x00	; 0
 4e8:	03 c0       	rjmp	.+6      	; 0x4f0 <ring_add+0x26>
#include "ring.h"

bool ring_add(ring_t *r, uint8_t data)
{
    // Get the next head index.
    ring_index_t temp_head = r->head_index + 1;
 4ea:	9a 01       	movw	r18, r20
 4ec:	2f 5f       	subi	r18, 0xFF	; 255
 4ee:	3f 4f       	sbci	r19, 0xFF	; 255
    if(r->head_index >= r->size - 1)
    {
        temp_head = 0;
    }

    if(temp_head != r->tail_index)
 4f0:	15 96       	adiw	r26, 0x05	; 5
 4f2:	8d 91       	ld	r24, X+
 4f4:	9c 91       	ld	r25, X
 4f6:	16 97       	sbiw	r26, 0x06	; 6
 4f8:	28 17       	cp	r18, r24
 4fa:	39 07       	cpc	r19, r25
 4fc:	11 f4       	brne	.+4      	; 0x502 <ring_add+0x38>
 4fe:	80 e0       	ldi	r24, 0x00	; 0
 500:	08 95       	ret
    {
        r->buffer[r->head_index] = data;    // Buffer receives data
 502:	ed 91       	ld	r30, X+
 504:	fc 91       	ld	r31, X
 506:	11 97       	sbiw	r26, 0x01	; 1
 508:	e4 0f       	add	r30, r20
 50a:	f5 1f       	adc	r31, r21
 50c:	60 83       	st	Z, r22
        r->head_index = temp_head;
 50e:	14 96       	adiw	r26, 0x04	; 4
 510:	3c 93       	st	X, r19
 512:	2e 93       	st	-X, r18
 514:	13 97       	sbiw	r26, 0x03	; 3
        r->count++;
 516:	17 96       	adiw	r26, 0x07	; 7
 518:	8c 91       	ld	r24, X
 51a:	17 97       	sbiw	r26, 0x07	; 7
 51c:	8f 5f       	subi	r24, 0xFF	; 255
 51e:	17 96       	adiw	r26, 0x07	; 7
 520:	8c 93       	st	X, r24
 522:	81 e0       	ldi	r24, 0x01	; 1
        return(true);       // Return complete
    }

    return(false);          // Return incomplete
}
 524:	08 95       	ret

00000526 <ring_init>:
#include <stdbool.h>
#include <stdlib.h>
#include "ring.h"

bool ring_init(ring_t *r, ring_buffer_t buffer, ring_size_t size)
{
 526:	fc 01       	movw	r30, r24
    bool success = false;
    bool clear;
    if (size >= 2 && r != NULL && buffer != NULL)
 528:	42 30       	cpi	r20, 0x02	; 2
 52a:	58 f0       	brcs	.+22     	; 0x542 <ring_init+0x1c>
 52c:	00 97       	sbiw	r24, 0x00	; 0
 52e:	49 f0       	breq	.+18     	; 0x542 <ring_init+0x1c>
 530:	61 15       	cp	r22, r1
 532:	71 05       	cpc	r23, r1
 534:	31 f0       	breq	.+12     	; 0x542 <ring_init+0x1c>
    {
        r->buffer = buffer;     // Set index pointers
 536:	71 83       	std	Z+1, r23	; 0x01
 538:	60 83       	st	Z, r22
        r->size = size;
 53a:	42 83       	std	Z+2, r20	; 0x02
        clear = ring_clear(r);  // Call ring_clear function
 53c:	0e 94 a3 02 	call	0x546	; 0x546 <ring_clear>
 540:	08 95       	ret
 542:	80 e0       	ldi	r24, 0x00	; 0
        {
                success = true;
        }
    }
    return(success);
}
 544:	08 95       	ret

00000546 <ring_clear>:
#include <stdlib.h>
#include <string.h>
#include "ring.h"

bool ring_clear(ring_t *r)
{
 546:	fc 01       	movw	r30, r24
    bool success = false;
    if (r != NULL)
 548:	00 97       	sbiw	r24, 0x00	; 0
 54a:	11 f4       	brne	.+4      	; 0x550 <ring_clear+0xa>
 54c:	80 e0       	ldi	r24, 0x00	; 0
 54e:	08 95       	ret
    {
        r->head_index = 0;
 550:	14 82       	std	Z+4, r1	; 0x04
 552:	13 82       	std	Z+3, r1	; 0x03
        r->tail_index = 0;          // Assign new values
 554:	16 82       	std	Z+6, r1	; 0x06
 556:	15 82       	std	Z+5, r1	; 0x05
        r->count = 0;
 558:	17 82       	std	Z+7, r1	; 0x07
        memset((void *)r->buffer, 0, r->size); // Clear out memory
 55a:	42 81       	ldd	r20, Z+2	; 0x02
 55c:	80 81       	ld	r24, Z
 55e:	91 81       	ldd	r25, Z+1	; 0x01
 560:	60 e0       	ldi	r22, 0x00	; 0
 562:	70 e0       	ldi	r23, 0x00	; 0
 564:	50 e0       	ldi	r21, 0x00	; 0
 566:	0e 94 1a 03 	call	0x634	; 0x634 <memset>
 56a:	81 e0       	ldi	r24, 0x01	; 1
        success = true;
    }
    return(success);
}
 56c:	08 95       	ret

0000056e <ring_remove>:

#include <stdint.h>
#include "ring.h"

uint8_t ring_remove(ring_t *r)
{
 56e:	dc 01       	movw	r26, r24
    uint8_t data = 0;

    // Compare the head index and the tail index
    if(r->head_index != r->tail_index)
 570:	15 96       	adiw	r26, 0x05	; 5
 572:	2d 91       	ld	r18, X+
 574:	3c 91       	ld	r19, X
 576:	16 97       	sbiw	r26, 0x06	; 6
 578:	13 96       	adiw	r26, 0x03	; 3
 57a:	8d 91       	ld	r24, X+
 57c:	9c 91       	ld	r25, X
 57e:	14 97       	sbiw	r26, 0x04	; 4
 580:	82 17       	cp	r24, r18
 582:	93 07       	cpc	r25, r19
 584:	11 f4       	brne	.+4      	; 0x58a <ring_remove+0x1c>
 586:	e0 e0       	ldi	r30, 0x00	; 0
 588:	1d c0       	rjmp	.+58     	; 0x5c4 <ring_remove+0x56>
    {
        // Get the Data from the buffer.
        data = r->buffer[r->tail_index];
 58a:	ed 91       	ld	r30, X+
 58c:	fc 91       	ld	r31, X
 58e:	11 97       	sbiw	r26, 0x01	; 1
 590:	e2 0f       	add	r30, r18
 592:	f3 1f       	adc	r31, r19
 594:	e0 81       	ld	r30, Z

        // Get the next tail index.
        ring_index_t next_tail = r->tail_index + 1;
        if(r->tail_index >= r->size - 1)
 596:	12 96       	adiw	r26, 0x02	; 2
 598:	8c 91       	ld	r24, X
 59a:	12 97       	sbiw	r26, 0x02	; 2
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	01 97       	sbiw	r24, 0x01	; 1
 5a0:	28 17       	cp	r18, r24
 5a2:	39 07       	cpc	r19, r25
 5a4:	18 f0       	brcs	.+6      	; 0x5ac <ring_remove+0x3e>
 5a6:	80 e0       	ldi	r24, 0x00	; 0
 5a8:	90 e0       	ldi	r25, 0x00	; 0
 5aa:	02 c0       	rjmp	.+4      	; 0x5b0 <ring_remove+0x42>
    {
        // Get the Data from the buffer.
        data = r->buffer[r->tail_index];

        // Get the next tail index.
        ring_index_t next_tail = r->tail_index + 1;
 5ac:	c9 01       	movw	r24, r18
 5ae:	01 96       	adiw	r24, 0x01	; 1
        if(r->tail_index >= r->size - 1)
        {
            next_tail = 0;
        }

        r->tail_index = next_tail;      // Move index
 5b0:	16 96       	adiw	r26, 0x06	; 6
 5b2:	9c 93       	st	X, r25
 5b4:	8e 93       	st	-X, r24
 5b6:	15 97       	sbiw	r26, 0x05	; 5
        r->count--;             // Decrement count
 5b8:	17 96       	adiw	r26, 0x07	; 7
 5ba:	8c 91       	ld	r24, X
 5bc:	17 97       	sbiw	r26, 0x07	; 7
 5be:	81 50       	subi	r24, 0x01	; 1
 5c0:	17 96       	adiw	r26, 0x07	; 7
 5c2:	8c 93       	st	X, r24
    }

    return(data);
}
 5c4:	8e 2f       	mov	r24, r30
 5c6:	08 95       	ret

000005c8 <usart0_buffer_insert>:
 // please contact me with details so that I may correct the situation. 
 
#include "usart.h"

bool usart0_buffer_insert(ring_t *ring, uint8_t c)
{
 5c8:	1f 93       	push	r17
 5ca:	9c 01       	movw	r18, r24
    register bool result;
    register uint8_t sreg;
   
   	// Do not load buffer while transmitting from buffer
	while(usart_buffered_tx_flag);
 5cc:	80 91 6c 02 	lds	r24, 0x026C
 5d0:	88 23       	and	r24, r24
 5d2:	e1 f7       	brne	.-8      	; 0x5cc <usart0_buffer_insert+0x4>
    
    sreg = SREG;
 5d4:	1f b7       	in	r17, 0x3f	; 63
    cli();
 5d6:	f8 94       	cli
    result = ring_add(ring, c);
 5d8:	c9 01       	movw	r24, r18
 5da:	0e 94 65 02 	call	0x4ca	; 0x4ca <ring_add>
    SREG = sreg;
 5de:	1f bf       	out	0x3f, r17	; 63
    return(result);
}
 5e0:	1f 91       	pop	r17
 5e2:	08 95       	ret

000005e4 <usart0_buffer_inuse_count>:
 // please contact me with details so that I may correct the situation. 
 
#include "usart.h"

uint8_t usart0_buffer_inuse_count(ring_t *ring)
{
 5e4:	fc 01       	movw	r30, r24
    register uint8_t result;
    register uint8_t sreg;
    
    sreg = SREG;
 5e6:	8f b7       	in	r24, 0x3f	; 63
    cli();
 5e8:	f8 94       	cli
    result = ring->count;
    SREG = sreg;
 5ea:	8f bf       	out	0x3f, r24	; 63
    return(result);
}
 5ec:	87 81       	ldd	r24, Z+7	; 0x07
 5ee:	08 95       	ret

000005f0 <__udivmodsi4>:
 5f0:	a1 e2       	ldi	r26, 0x21	; 33
 5f2:	1a 2e       	mov	r1, r26
 5f4:	aa 1b       	sub	r26, r26
 5f6:	bb 1b       	sub	r27, r27
 5f8:	fd 01       	movw	r30, r26
 5fa:	0d c0       	rjmp	.+26     	; 0x616 <__udivmodsi4_ep>

000005fc <__udivmodsi4_loop>:
 5fc:	aa 1f       	adc	r26, r26
 5fe:	bb 1f       	adc	r27, r27
 600:	ee 1f       	adc	r30, r30
 602:	ff 1f       	adc	r31, r31
 604:	a2 17       	cp	r26, r18
 606:	b3 07       	cpc	r27, r19
 608:	e4 07       	cpc	r30, r20
 60a:	f5 07       	cpc	r31, r21
 60c:	20 f0       	brcs	.+8      	; 0x616 <__udivmodsi4_ep>
 60e:	a2 1b       	sub	r26, r18
 610:	b3 0b       	sbc	r27, r19
 612:	e4 0b       	sbc	r30, r20
 614:	f5 0b       	sbc	r31, r21

00000616 <__udivmodsi4_ep>:
 616:	66 1f       	adc	r22, r22
 618:	77 1f       	adc	r23, r23
 61a:	88 1f       	adc	r24, r24
 61c:	99 1f       	adc	r25, r25
 61e:	1a 94       	dec	r1
 620:	69 f7       	brne	.-38     	; 0x5fc <__udivmodsi4_loop>
 622:	60 95       	com	r22
 624:	70 95       	com	r23
 626:	80 95       	com	r24
 628:	90 95       	com	r25
 62a:	9b 01       	movw	r18, r22
 62c:	ac 01       	movw	r20, r24
 62e:	bd 01       	movw	r22, r26
 630:	cf 01       	movw	r24, r30
 632:	08 95       	ret

00000634 <memset>:
 634:	dc 01       	movw	r26, r24
 636:	01 c0       	rjmp	.+2      	; 0x63a <memset+0x6>
 638:	6d 93       	st	X+, r22
 63a:	41 50       	subi	r20, 0x01	; 1
 63c:	50 40       	sbci	r21, 0x00	; 0
 63e:	e0 f7       	brcc	.-8      	; 0x638 <memset+0x4>
 640:	08 95       	ret

00000642 <printf>:
 642:	a0 e0       	ldi	r26, 0x00	; 0
 644:	b0 e0       	ldi	r27, 0x00	; 0
 646:	e7 e2       	ldi	r30, 0x27	; 39
 648:	f3 e0       	ldi	r31, 0x03	; 3
 64a:	0c 94 f8 05 	jmp	0xbf0	; 0xbf0 <__prologue_saves__+0x20>
 64e:	fe 01       	movw	r30, r28
 650:	35 96       	adiw	r30, 0x05	; 5
 652:	61 91       	ld	r22, Z+
 654:	71 91       	ld	r23, Z+
 656:	80 91 70 02 	lds	r24, 0x0270
 65a:	90 91 71 02 	lds	r25, 0x0271
 65e:	af 01       	movw	r20, r30
 660:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <vfprintf>
 664:	20 96       	adiw	r28, 0x00	; 0
 666:	e2 e0       	ldi	r30, 0x02	; 2
 668:	0c 94 14 06 	jmp	0xc28	; 0xc28 <__epilogue_restores__+0x20>

0000066c <puts>:
 66c:	0f 93       	push	r16
 66e:	1f 93       	push	r17
 670:	cf 93       	push	r28
 672:	df 93       	push	r29
 674:	8c 01       	movw	r16, r24
 676:	e0 91 70 02 	lds	r30, 0x0270
 67a:	f0 91 71 02 	lds	r31, 0x0271
 67e:	83 81       	ldd	r24, Z+3	; 0x03
 680:	81 ff       	sbrs	r24, 1
 682:	21 c0       	rjmp	.+66     	; 0x6c6 <puts+0x5a>
 684:	c0 e0       	ldi	r28, 0x00	; 0
 686:	d0 e0       	ldi	r29, 0x00	; 0
 688:	0d c0       	rjmp	.+26     	; 0x6a4 <puts+0x38>
 68a:	e0 91 70 02 	lds	r30, 0x0270
 68e:	f0 91 71 02 	lds	r31, 0x0271
 692:	20 85       	ldd	r18, Z+8	; 0x08
 694:	31 85       	ldd	r19, Z+9	; 0x09
 696:	bf 01       	movw	r22, r30
 698:	f9 01       	movw	r30, r18
 69a:	09 95       	icall
 69c:	89 2b       	or	r24, r25
 69e:	11 f0       	breq	.+4      	; 0x6a4 <puts+0x38>
 6a0:	cf ef       	ldi	r28, 0xFF	; 255
 6a2:	df ef       	ldi	r29, 0xFF	; 255
 6a4:	f8 01       	movw	r30, r16
 6a6:	81 91       	ld	r24, Z+
 6a8:	8f 01       	movw	r16, r30
 6aa:	88 23       	and	r24, r24
 6ac:	71 f7       	brne	.-36     	; 0x68a <puts+0x1e>
 6ae:	e0 91 70 02 	lds	r30, 0x0270
 6b2:	f0 91 71 02 	lds	r31, 0x0271
 6b6:	20 85       	ldd	r18, Z+8	; 0x08
 6b8:	31 85       	ldd	r19, Z+9	; 0x09
 6ba:	8a e0       	ldi	r24, 0x0A	; 10
 6bc:	bf 01       	movw	r22, r30
 6be:	f9 01       	movw	r30, r18
 6c0:	09 95       	icall
 6c2:	89 2b       	or	r24, r25
 6c4:	11 f0       	breq	.+4      	; 0x6ca <puts+0x5e>
 6c6:	cf ef       	ldi	r28, 0xFF	; 255
 6c8:	df ef       	ldi	r29, 0xFF	; 255
 6ca:	ce 01       	movw	r24, r28
 6cc:	df 91       	pop	r29
 6ce:	cf 91       	pop	r28
 6d0:	1f 91       	pop	r17
 6d2:	0f 91       	pop	r16
 6d4:	08 95       	ret

000006d6 <vfprintf>:
 6d6:	ab e0       	ldi	r26, 0x0B	; 11
 6d8:	b0 e0       	ldi	r27, 0x00	; 0
 6da:	e1 e7       	ldi	r30, 0x71	; 113
 6dc:	f3 e0       	ldi	r31, 0x03	; 3
 6de:	0c 94 e8 05 	jmp	0xbd0	; 0xbd0 <__prologue_saves__>
 6e2:	3c 01       	movw	r6, r24
 6e4:	2b 01       	movw	r4, r22
 6e6:	5a 01       	movw	r10, r20
 6e8:	fc 01       	movw	r30, r24
 6ea:	17 82       	std	Z+7, r1	; 0x07
 6ec:	16 82       	std	Z+6, r1	; 0x06
 6ee:	83 81       	ldd	r24, Z+3	; 0x03
 6f0:	81 fd       	sbrc	r24, 1
 6f2:	03 c0       	rjmp	.+6      	; 0x6fa <vfprintf+0x24>
 6f4:	6f ef       	ldi	r22, 0xFF	; 255
 6f6:	7f ef       	ldi	r23, 0xFF	; 255
 6f8:	c6 c1       	rjmp	.+908    	; 0xa86 <__stack+0x187>
 6fa:	9a e0       	ldi	r25, 0x0A	; 10
 6fc:	89 2e       	mov	r8, r25
 6fe:	1e 01       	movw	r2, r28
 700:	08 94       	sec
 702:	21 1c       	adc	r2, r1
 704:	31 1c       	adc	r3, r1
 706:	f3 01       	movw	r30, r6
 708:	23 81       	ldd	r18, Z+3	; 0x03
 70a:	f2 01       	movw	r30, r4
 70c:	23 fd       	sbrc	r18, 3
 70e:	85 91       	lpm	r24, Z+
 710:	23 ff       	sbrs	r18, 3
 712:	81 91       	ld	r24, Z+
 714:	2f 01       	movw	r4, r30
 716:	88 23       	and	r24, r24
 718:	09 f4       	brne	.+2      	; 0x71c <vfprintf+0x46>
 71a:	b2 c1       	rjmp	.+868    	; 0xa80 <__stack+0x181>
 71c:	85 32       	cpi	r24, 0x25	; 37
 71e:	39 f4       	brne	.+14     	; 0x72e <vfprintf+0x58>
 720:	23 fd       	sbrc	r18, 3
 722:	85 91       	lpm	r24, Z+
 724:	23 ff       	sbrs	r18, 3
 726:	81 91       	ld	r24, Z+
 728:	2f 01       	movw	r4, r30
 72a:	85 32       	cpi	r24, 0x25	; 37
 72c:	29 f4       	brne	.+10     	; 0x738 <vfprintf+0x62>
 72e:	90 e0       	ldi	r25, 0x00	; 0
 730:	b3 01       	movw	r22, r6
 732:	0e 94 5e 05 	call	0xabc	; 0xabc <fputc>
 736:	e7 cf       	rjmp	.-50     	; 0x706 <vfprintf+0x30>
 738:	98 2f       	mov	r25, r24
 73a:	ff 24       	eor	r15, r15
 73c:	ee 24       	eor	r14, r14
 73e:	99 24       	eor	r9, r9
 740:	ff e1       	ldi	r31, 0x1F	; 31
 742:	ff 15       	cp	r31, r15
 744:	d0 f0       	brcs	.+52     	; 0x77a <vfprintf+0xa4>
 746:	9b 32       	cpi	r25, 0x2B	; 43
 748:	69 f0       	breq	.+26     	; 0x764 <vfprintf+0x8e>
 74a:	9c 32       	cpi	r25, 0x2C	; 44
 74c:	28 f4       	brcc	.+10     	; 0x758 <vfprintf+0x82>
 74e:	90 32       	cpi	r25, 0x20	; 32
 750:	59 f0       	breq	.+22     	; 0x768 <vfprintf+0x92>
 752:	93 32       	cpi	r25, 0x23	; 35
 754:	91 f4       	brne	.+36     	; 0x77a <vfprintf+0xa4>
 756:	0e c0       	rjmp	.+28     	; 0x774 <vfprintf+0x9e>
 758:	9d 32       	cpi	r25, 0x2D	; 45
 75a:	49 f0       	breq	.+18     	; 0x76e <vfprintf+0x98>
 75c:	90 33       	cpi	r25, 0x30	; 48
 75e:	69 f4       	brne	.+26     	; 0x77a <vfprintf+0xa4>
 760:	41 e0       	ldi	r20, 0x01	; 1
 762:	24 c0       	rjmp	.+72     	; 0x7ac <vfprintf+0xd6>
 764:	52 e0       	ldi	r21, 0x02	; 2
 766:	f5 2a       	or	r15, r21
 768:	84 e0       	ldi	r24, 0x04	; 4
 76a:	f8 2a       	or	r15, r24
 76c:	28 c0       	rjmp	.+80     	; 0x7be <vfprintf+0xe8>
 76e:	98 e0       	ldi	r25, 0x08	; 8
 770:	f9 2a       	or	r15, r25
 772:	25 c0       	rjmp	.+74     	; 0x7be <vfprintf+0xe8>
 774:	e0 e1       	ldi	r30, 0x10	; 16
 776:	fe 2a       	or	r15, r30
 778:	22 c0       	rjmp	.+68     	; 0x7be <vfprintf+0xe8>
 77a:	f7 fc       	sbrc	r15, 7
 77c:	29 c0       	rjmp	.+82     	; 0x7d0 <vfprintf+0xfa>
 77e:	89 2f       	mov	r24, r25
 780:	80 53       	subi	r24, 0x30	; 48
 782:	8a 30       	cpi	r24, 0x0A	; 10
 784:	70 f4       	brcc	.+28     	; 0x7a2 <vfprintf+0xcc>
 786:	f6 fe       	sbrs	r15, 6
 788:	05 c0       	rjmp	.+10     	; 0x794 <vfprintf+0xbe>
 78a:	98 9c       	mul	r9, r8
 78c:	90 2c       	mov	r9, r0
 78e:	11 24       	eor	r1, r1
 790:	98 0e       	add	r9, r24
 792:	15 c0       	rjmp	.+42     	; 0x7be <vfprintf+0xe8>
 794:	e8 9c       	mul	r14, r8
 796:	e0 2c       	mov	r14, r0
 798:	11 24       	eor	r1, r1
 79a:	e8 0e       	add	r14, r24
 79c:	f0 e2       	ldi	r31, 0x20	; 32
 79e:	ff 2a       	or	r15, r31
 7a0:	0e c0       	rjmp	.+28     	; 0x7be <vfprintf+0xe8>
 7a2:	9e 32       	cpi	r25, 0x2E	; 46
 7a4:	29 f4       	brne	.+10     	; 0x7b0 <vfprintf+0xda>
 7a6:	f6 fc       	sbrc	r15, 6
 7a8:	6b c1       	rjmp	.+726    	; 0xa80 <__stack+0x181>
 7aa:	40 e4       	ldi	r20, 0x40	; 64
 7ac:	f4 2a       	or	r15, r20
 7ae:	07 c0       	rjmp	.+14     	; 0x7be <vfprintf+0xe8>
 7b0:	9c 36       	cpi	r25, 0x6C	; 108
 7b2:	19 f4       	brne	.+6      	; 0x7ba <vfprintf+0xe4>
 7b4:	50 e8       	ldi	r21, 0x80	; 128
 7b6:	f5 2a       	or	r15, r21
 7b8:	02 c0       	rjmp	.+4      	; 0x7be <vfprintf+0xe8>
 7ba:	98 36       	cpi	r25, 0x68	; 104
 7bc:	49 f4       	brne	.+18     	; 0x7d0 <vfprintf+0xfa>
 7be:	f2 01       	movw	r30, r4
 7c0:	23 fd       	sbrc	r18, 3
 7c2:	95 91       	lpm	r25, Z+
 7c4:	23 ff       	sbrs	r18, 3
 7c6:	91 91       	ld	r25, Z+
 7c8:	2f 01       	movw	r4, r30
 7ca:	99 23       	and	r25, r25
 7cc:	09 f0       	breq	.+2      	; 0x7d0 <vfprintf+0xfa>
 7ce:	b8 cf       	rjmp	.-144    	; 0x740 <vfprintf+0x6a>
 7d0:	89 2f       	mov	r24, r25
 7d2:	85 54       	subi	r24, 0x45	; 69
 7d4:	83 30       	cpi	r24, 0x03	; 3
 7d6:	18 f0       	brcs	.+6      	; 0x7de <vfprintf+0x108>
 7d8:	80 52       	subi	r24, 0x20	; 32
 7da:	83 30       	cpi	r24, 0x03	; 3
 7dc:	38 f4       	brcc	.+14     	; 0x7ec <vfprintf+0x116>
 7de:	44 e0       	ldi	r20, 0x04	; 4
 7e0:	50 e0       	ldi	r21, 0x00	; 0
 7e2:	a4 0e       	add	r10, r20
 7e4:	b5 1e       	adc	r11, r21
 7e6:	5f e3       	ldi	r21, 0x3F	; 63
 7e8:	59 83       	std	Y+1, r21	; 0x01
 7ea:	0f c0       	rjmp	.+30     	; 0x80a <vfprintf+0x134>
 7ec:	93 36       	cpi	r25, 0x63	; 99
 7ee:	31 f0       	breq	.+12     	; 0x7fc <vfprintf+0x126>
 7f0:	93 37       	cpi	r25, 0x73	; 115
 7f2:	79 f0       	breq	.+30     	; 0x812 <vfprintf+0x13c>
 7f4:	93 35       	cpi	r25, 0x53	; 83
 7f6:	09 f0       	breq	.+2      	; 0x7fa <vfprintf+0x124>
 7f8:	56 c0       	rjmp	.+172    	; 0x8a6 <vfprintf+0x1d0>
 7fa:	20 c0       	rjmp	.+64     	; 0x83c <vfprintf+0x166>
 7fc:	f5 01       	movw	r30, r10
 7fe:	80 81       	ld	r24, Z
 800:	89 83       	std	Y+1, r24	; 0x01
 802:	42 e0       	ldi	r20, 0x02	; 2
 804:	50 e0       	ldi	r21, 0x00	; 0
 806:	a4 0e       	add	r10, r20
 808:	b5 1e       	adc	r11, r21
 80a:	61 01       	movw	r12, r2
 80c:	01 e0       	ldi	r16, 0x01	; 1
 80e:	10 e0       	ldi	r17, 0x00	; 0
 810:	12 c0       	rjmp	.+36     	; 0x836 <vfprintf+0x160>
 812:	f5 01       	movw	r30, r10
 814:	c0 80       	ld	r12, Z
 816:	d1 80       	ldd	r13, Z+1	; 0x01
 818:	f6 fc       	sbrc	r15, 6
 81a:	03 c0       	rjmp	.+6      	; 0x822 <vfprintf+0x14c>
 81c:	6f ef       	ldi	r22, 0xFF	; 255
 81e:	7f ef       	ldi	r23, 0xFF	; 255
 820:	02 c0       	rjmp	.+4      	; 0x826 <vfprintf+0x150>
 822:	69 2d       	mov	r22, r9
 824:	70 e0       	ldi	r23, 0x00	; 0
 826:	42 e0       	ldi	r20, 0x02	; 2
 828:	50 e0       	ldi	r21, 0x00	; 0
 82a:	a4 0e       	add	r10, r20
 82c:	b5 1e       	adc	r11, r21
 82e:	c6 01       	movw	r24, r12
 830:	0e 94 53 05 	call	0xaa6	; 0xaa6 <strnlen>
 834:	8c 01       	movw	r16, r24
 836:	5f e7       	ldi	r21, 0x7F	; 127
 838:	f5 22       	and	r15, r21
 83a:	14 c0       	rjmp	.+40     	; 0x864 <vfprintf+0x18e>
 83c:	f5 01       	movw	r30, r10
 83e:	c0 80       	ld	r12, Z
 840:	d1 80       	ldd	r13, Z+1	; 0x01
 842:	f6 fc       	sbrc	r15, 6
 844:	03 c0       	rjmp	.+6      	; 0x84c <vfprintf+0x176>
 846:	6f ef       	ldi	r22, 0xFF	; 255
 848:	7f ef       	ldi	r23, 0xFF	; 255
 84a:	02 c0       	rjmp	.+4      	; 0x850 <vfprintf+0x17a>
 84c:	69 2d       	mov	r22, r9
 84e:	70 e0       	ldi	r23, 0x00	; 0
 850:	42 e0       	ldi	r20, 0x02	; 2
 852:	50 e0       	ldi	r21, 0x00	; 0
 854:	a4 0e       	add	r10, r20
 856:	b5 1e       	adc	r11, r21
 858:	c6 01       	movw	r24, r12
 85a:	0e 94 48 05 	call	0xa90	; 0xa90 <strnlen_P>
 85e:	8c 01       	movw	r16, r24
 860:	50 e8       	ldi	r21, 0x80	; 128
 862:	f5 2a       	or	r15, r21
 864:	f3 fe       	sbrs	r15, 3
 866:	07 c0       	rjmp	.+14     	; 0x876 <vfprintf+0x1a0>
 868:	1a c0       	rjmp	.+52     	; 0x89e <vfprintf+0x1c8>
 86a:	80 e2       	ldi	r24, 0x20	; 32
 86c:	90 e0       	ldi	r25, 0x00	; 0
 86e:	b3 01       	movw	r22, r6
 870:	0e 94 5e 05 	call	0xabc	; 0xabc <fputc>
 874:	ea 94       	dec	r14
 876:	8e 2d       	mov	r24, r14
 878:	90 e0       	ldi	r25, 0x00	; 0
 87a:	08 17       	cp	r16, r24
 87c:	19 07       	cpc	r17, r25
 87e:	a8 f3       	brcs	.-22     	; 0x86a <vfprintf+0x194>
 880:	0e c0       	rjmp	.+28     	; 0x89e <vfprintf+0x1c8>
 882:	f6 01       	movw	r30, r12
 884:	f7 fc       	sbrc	r15, 7
 886:	85 91       	lpm	r24, Z+
 888:	f7 fe       	sbrs	r15, 7
 88a:	81 91       	ld	r24, Z+
 88c:	6f 01       	movw	r12, r30
 88e:	90 e0       	ldi	r25, 0x00	; 0
 890:	b3 01       	movw	r22, r6
 892:	0e 94 5e 05 	call	0xabc	; 0xabc <fputc>
 896:	e1 10       	cpse	r14, r1
 898:	ea 94       	dec	r14
 89a:	01 50       	subi	r16, 0x01	; 1
 89c:	10 40       	sbci	r17, 0x00	; 0
 89e:	01 15       	cp	r16, r1
 8a0:	11 05       	cpc	r17, r1
 8a2:	79 f7       	brne	.-34     	; 0x882 <vfprintf+0x1ac>
 8a4:	ea c0       	rjmp	.+468    	; 0xa7a <__stack+0x17b>
 8a6:	94 36       	cpi	r25, 0x64	; 100
 8a8:	11 f0       	breq	.+4      	; 0x8ae <vfprintf+0x1d8>
 8aa:	99 36       	cpi	r25, 0x69	; 105
 8ac:	69 f5       	brne	.+90     	; 0x908 <__stack+0x9>
 8ae:	f7 fe       	sbrs	r15, 7
 8b0:	08 c0       	rjmp	.+16     	; 0x8c2 <vfprintf+0x1ec>
 8b2:	f5 01       	movw	r30, r10
 8b4:	20 81       	ld	r18, Z
 8b6:	31 81       	ldd	r19, Z+1	; 0x01
 8b8:	42 81       	ldd	r20, Z+2	; 0x02
 8ba:	53 81       	ldd	r21, Z+3	; 0x03
 8bc:	84 e0       	ldi	r24, 0x04	; 4
 8be:	90 e0       	ldi	r25, 0x00	; 0
 8c0:	0a c0       	rjmp	.+20     	; 0x8d6 <vfprintf+0x200>
 8c2:	f5 01       	movw	r30, r10
 8c4:	80 81       	ld	r24, Z
 8c6:	91 81       	ldd	r25, Z+1	; 0x01
 8c8:	9c 01       	movw	r18, r24
 8ca:	44 27       	eor	r20, r20
 8cc:	37 fd       	sbrc	r19, 7
 8ce:	40 95       	com	r20
 8d0:	54 2f       	mov	r21, r20
 8d2:	82 e0       	ldi	r24, 0x02	; 2
 8d4:	90 e0       	ldi	r25, 0x00	; 0
 8d6:	a8 0e       	add	r10, r24
 8d8:	b9 1e       	adc	r11, r25
 8da:	9f e6       	ldi	r25, 0x6F	; 111
 8dc:	f9 22       	and	r15, r25
 8de:	57 ff       	sbrs	r21, 7
 8e0:	09 c0       	rjmp	.+18     	; 0x8f4 <vfprintf+0x21e>
 8e2:	50 95       	com	r21
 8e4:	40 95       	com	r20
 8e6:	30 95       	com	r19
 8e8:	21 95       	neg	r18
 8ea:	3f 4f       	sbci	r19, 0xFF	; 255
 8ec:	4f 4f       	sbci	r20, 0xFF	; 255
 8ee:	5f 4f       	sbci	r21, 0xFF	; 255
 8f0:	e0 e8       	ldi	r30, 0x80	; 128
 8f2:	fe 2a       	or	r15, r30
 8f4:	ca 01       	movw	r24, r20
 8f6:	b9 01       	movw	r22, r18
 8f8:	a1 01       	movw	r20, r2
 8fa:	2a e0       	ldi	r18, 0x0A	; 10
 8fc:	30 e0       	ldi	r19, 0x00	; 0
 8fe:	0e 94 8a 05 	call	0xb14	; 0xb14 <__ultoa_invert>
 902:	d8 2e       	mov	r13, r24
 904:	d2 18       	sub	r13, r2
 906:	40 c0       	rjmp	.+128    	; 0x988 <__stack+0x89>
 908:	95 37       	cpi	r25, 0x75	; 117
 90a:	29 f4       	brne	.+10     	; 0x916 <__stack+0x17>
 90c:	1f 2d       	mov	r17, r15
 90e:	1f 7e       	andi	r17, 0xEF	; 239
 910:	2a e0       	ldi	r18, 0x0A	; 10
 912:	30 e0       	ldi	r19, 0x00	; 0
 914:	1d c0       	rjmp	.+58     	; 0x950 <__stack+0x51>
 916:	1f 2d       	mov	r17, r15
 918:	19 7f       	andi	r17, 0xF9	; 249
 91a:	9f 36       	cpi	r25, 0x6F	; 111
 91c:	61 f0       	breq	.+24     	; 0x936 <__stack+0x37>
 91e:	90 37       	cpi	r25, 0x70	; 112
 920:	20 f4       	brcc	.+8      	; 0x92a <__stack+0x2b>
 922:	98 35       	cpi	r25, 0x58	; 88
 924:	09 f0       	breq	.+2      	; 0x928 <__stack+0x29>
 926:	ac c0       	rjmp	.+344    	; 0xa80 <__stack+0x181>
 928:	0f c0       	rjmp	.+30     	; 0x948 <__stack+0x49>
 92a:	90 37       	cpi	r25, 0x70	; 112
 92c:	39 f0       	breq	.+14     	; 0x93c <__stack+0x3d>
 92e:	98 37       	cpi	r25, 0x78	; 120
 930:	09 f0       	breq	.+2      	; 0x934 <__stack+0x35>
 932:	a6 c0       	rjmp	.+332    	; 0xa80 <__stack+0x181>
 934:	04 c0       	rjmp	.+8      	; 0x93e <__stack+0x3f>
 936:	28 e0       	ldi	r18, 0x08	; 8
 938:	30 e0       	ldi	r19, 0x00	; 0
 93a:	0a c0       	rjmp	.+20     	; 0x950 <__stack+0x51>
 93c:	10 61       	ori	r17, 0x10	; 16
 93e:	14 fd       	sbrc	r17, 4
 940:	14 60       	ori	r17, 0x04	; 4
 942:	20 e1       	ldi	r18, 0x10	; 16
 944:	30 e0       	ldi	r19, 0x00	; 0
 946:	04 c0       	rjmp	.+8      	; 0x950 <__stack+0x51>
 948:	14 fd       	sbrc	r17, 4
 94a:	16 60       	ori	r17, 0x06	; 6
 94c:	20 e1       	ldi	r18, 0x10	; 16
 94e:	32 e0       	ldi	r19, 0x02	; 2
 950:	17 ff       	sbrs	r17, 7
 952:	08 c0       	rjmp	.+16     	; 0x964 <__stack+0x65>
 954:	f5 01       	movw	r30, r10
 956:	60 81       	ld	r22, Z
 958:	71 81       	ldd	r23, Z+1	; 0x01
 95a:	82 81       	ldd	r24, Z+2	; 0x02
 95c:	93 81       	ldd	r25, Z+3	; 0x03
 95e:	44 e0       	ldi	r20, 0x04	; 4
 960:	50 e0       	ldi	r21, 0x00	; 0
 962:	08 c0       	rjmp	.+16     	; 0x974 <__stack+0x75>
 964:	f5 01       	movw	r30, r10
 966:	80 81       	ld	r24, Z
 968:	91 81       	ldd	r25, Z+1	; 0x01
 96a:	bc 01       	movw	r22, r24
 96c:	80 e0       	ldi	r24, 0x00	; 0
 96e:	90 e0       	ldi	r25, 0x00	; 0
 970:	42 e0       	ldi	r20, 0x02	; 2
 972:	50 e0       	ldi	r21, 0x00	; 0
 974:	a4 0e       	add	r10, r20
 976:	b5 1e       	adc	r11, r21
 978:	a1 01       	movw	r20, r2
 97a:	0e 94 8a 05 	call	0xb14	; 0xb14 <__ultoa_invert>
 97e:	d8 2e       	mov	r13, r24
 980:	d2 18       	sub	r13, r2
 982:	8f e7       	ldi	r24, 0x7F	; 127
 984:	f8 2e       	mov	r15, r24
 986:	f1 22       	and	r15, r17
 988:	f6 fe       	sbrs	r15, 6
 98a:	0b c0       	rjmp	.+22     	; 0x9a2 <__stack+0xa3>
 98c:	5e ef       	ldi	r21, 0xFE	; 254
 98e:	f5 22       	and	r15, r21
 990:	d9 14       	cp	r13, r9
 992:	38 f4       	brcc	.+14     	; 0x9a2 <__stack+0xa3>
 994:	f4 fe       	sbrs	r15, 4
 996:	07 c0       	rjmp	.+14     	; 0x9a6 <__stack+0xa7>
 998:	f2 fc       	sbrc	r15, 2
 99a:	05 c0       	rjmp	.+10     	; 0x9a6 <__stack+0xa7>
 99c:	8f ee       	ldi	r24, 0xEF	; 239
 99e:	f8 22       	and	r15, r24
 9a0:	02 c0       	rjmp	.+4      	; 0x9a6 <__stack+0xa7>
 9a2:	1d 2d       	mov	r17, r13
 9a4:	01 c0       	rjmp	.+2      	; 0x9a8 <__stack+0xa9>
 9a6:	19 2d       	mov	r17, r9
 9a8:	f4 fe       	sbrs	r15, 4
 9aa:	0d c0       	rjmp	.+26     	; 0x9c6 <__stack+0xc7>
 9ac:	fe 01       	movw	r30, r28
 9ae:	ed 0d       	add	r30, r13
 9b0:	f1 1d       	adc	r31, r1
 9b2:	80 81       	ld	r24, Z
 9b4:	80 33       	cpi	r24, 0x30	; 48
 9b6:	19 f4       	brne	.+6      	; 0x9be <__stack+0xbf>
 9b8:	99 ee       	ldi	r25, 0xE9	; 233
 9ba:	f9 22       	and	r15, r25
 9bc:	08 c0       	rjmp	.+16     	; 0x9ce <__stack+0xcf>
 9be:	1f 5f       	subi	r17, 0xFF	; 255
 9c0:	f2 fe       	sbrs	r15, 2
 9c2:	05 c0       	rjmp	.+10     	; 0x9ce <__stack+0xcf>
 9c4:	03 c0       	rjmp	.+6      	; 0x9cc <__stack+0xcd>
 9c6:	8f 2d       	mov	r24, r15
 9c8:	86 78       	andi	r24, 0x86	; 134
 9ca:	09 f0       	breq	.+2      	; 0x9ce <__stack+0xcf>
 9cc:	1f 5f       	subi	r17, 0xFF	; 255
 9ce:	0f 2d       	mov	r16, r15
 9d0:	f3 fc       	sbrc	r15, 3
 9d2:	14 c0       	rjmp	.+40     	; 0x9fc <__stack+0xfd>
 9d4:	f0 fe       	sbrs	r15, 0
 9d6:	0f c0       	rjmp	.+30     	; 0x9f6 <__stack+0xf7>
 9d8:	1e 15       	cp	r17, r14
 9da:	10 f0       	brcs	.+4      	; 0x9e0 <__stack+0xe1>
 9dc:	9d 2c       	mov	r9, r13
 9de:	0b c0       	rjmp	.+22     	; 0x9f6 <__stack+0xf7>
 9e0:	9d 2c       	mov	r9, r13
 9e2:	9e 0c       	add	r9, r14
 9e4:	91 1a       	sub	r9, r17
 9e6:	1e 2d       	mov	r17, r14
 9e8:	06 c0       	rjmp	.+12     	; 0x9f6 <__stack+0xf7>
 9ea:	80 e2       	ldi	r24, 0x20	; 32
 9ec:	90 e0       	ldi	r25, 0x00	; 0
 9ee:	b3 01       	movw	r22, r6
 9f0:	0e 94 5e 05 	call	0xabc	; 0xabc <fputc>
 9f4:	1f 5f       	subi	r17, 0xFF	; 255
 9f6:	1e 15       	cp	r17, r14
 9f8:	c0 f3       	brcs	.-16     	; 0x9ea <__stack+0xeb>
 9fa:	04 c0       	rjmp	.+8      	; 0xa04 <__stack+0x105>
 9fc:	1e 15       	cp	r17, r14
 9fe:	10 f4       	brcc	.+4      	; 0xa04 <__stack+0x105>
 a00:	e1 1a       	sub	r14, r17
 a02:	01 c0       	rjmp	.+2      	; 0xa06 <__stack+0x107>
 a04:	ee 24       	eor	r14, r14
 a06:	04 ff       	sbrs	r16, 4
 a08:	0f c0       	rjmp	.+30     	; 0xa28 <__stack+0x129>
 a0a:	80 e3       	ldi	r24, 0x30	; 48
 a0c:	90 e0       	ldi	r25, 0x00	; 0
 a0e:	b3 01       	movw	r22, r6
 a10:	0e 94 5e 05 	call	0xabc	; 0xabc <fputc>
 a14:	02 ff       	sbrs	r16, 2
 a16:	1d c0       	rjmp	.+58     	; 0xa52 <__stack+0x153>
 a18:	01 fd       	sbrc	r16, 1
 a1a:	03 c0       	rjmp	.+6      	; 0xa22 <__stack+0x123>
 a1c:	88 e7       	ldi	r24, 0x78	; 120
 a1e:	90 e0       	ldi	r25, 0x00	; 0
 a20:	0e c0       	rjmp	.+28     	; 0xa3e <__stack+0x13f>
 a22:	88 e5       	ldi	r24, 0x58	; 88
 a24:	90 e0       	ldi	r25, 0x00	; 0
 a26:	0b c0       	rjmp	.+22     	; 0xa3e <__stack+0x13f>
 a28:	80 2f       	mov	r24, r16
 a2a:	86 78       	andi	r24, 0x86	; 134
 a2c:	91 f0       	breq	.+36     	; 0xa52 <__stack+0x153>
 a2e:	01 ff       	sbrs	r16, 1
 a30:	02 c0       	rjmp	.+4      	; 0xa36 <__stack+0x137>
 a32:	8b e2       	ldi	r24, 0x2B	; 43
 a34:	01 c0       	rjmp	.+2      	; 0xa38 <__stack+0x139>
 a36:	80 e2       	ldi	r24, 0x20	; 32
 a38:	f7 fc       	sbrc	r15, 7
 a3a:	8d e2       	ldi	r24, 0x2D	; 45
 a3c:	90 e0       	ldi	r25, 0x00	; 0
 a3e:	b3 01       	movw	r22, r6
 a40:	0e 94 5e 05 	call	0xabc	; 0xabc <fputc>
 a44:	06 c0       	rjmp	.+12     	; 0xa52 <__stack+0x153>
 a46:	80 e3       	ldi	r24, 0x30	; 48
 a48:	90 e0       	ldi	r25, 0x00	; 0
 a4a:	b3 01       	movw	r22, r6
 a4c:	0e 94 5e 05 	call	0xabc	; 0xabc <fputc>
 a50:	9a 94       	dec	r9
 a52:	d9 14       	cp	r13, r9
 a54:	c0 f3       	brcs	.-16     	; 0xa46 <__stack+0x147>
 a56:	da 94       	dec	r13
 a58:	f1 01       	movw	r30, r2
 a5a:	ed 0d       	add	r30, r13
 a5c:	f1 1d       	adc	r31, r1
 a5e:	80 81       	ld	r24, Z
 a60:	90 e0       	ldi	r25, 0x00	; 0
 a62:	b3 01       	movw	r22, r6
 a64:	0e 94 5e 05 	call	0xabc	; 0xabc <fputc>
 a68:	dd 20       	and	r13, r13
 a6a:	a9 f7       	brne	.-22     	; 0xa56 <__stack+0x157>
 a6c:	06 c0       	rjmp	.+12     	; 0xa7a <__stack+0x17b>
 a6e:	80 e2       	ldi	r24, 0x20	; 32
 a70:	90 e0       	ldi	r25, 0x00	; 0
 a72:	b3 01       	movw	r22, r6
 a74:	0e 94 5e 05 	call	0xabc	; 0xabc <fputc>
 a78:	ea 94       	dec	r14
 a7a:	ee 20       	and	r14, r14
 a7c:	c1 f7       	brne	.-16     	; 0xa6e <__stack+0x16f>
 a7e:	43 ce       	rjmp	.-890    	; 0x706 <vfprintf+0x30>
 a80:	f3 01       	movw	r30, r6
 a82:	66 81       	ldd	r22, Z+6	; 0x06
 a84:	77 81       	ldd	r23, Z+7	; 0x07
 a86:	cb 01       	movw	r24, r22
 a88:	2b 96       	adiw	r28, 0x0b	; 11
 a8a:	e2 e1       	ldi	r30, 0x12	; 18
 a8c:	0c 94 04 06 	jmp	0xc08	; 0xc08 <__epilogue_restores__>

00000a90 <strnlen_P>:
 a90:	fc 01       	movw	r30, r24
 a92:	05 90       	lpm	r0, Z+
 a94:	61 50       	subi	r22, 0x01	; 1
 a96:	70 40       	sbci	r23, 0x00	; 0
 a98:	01 10       	cpse	r0, r1
 a9a:	d8 f7       	brcc	.-10     	; 0xa92 <strnlen_P+0x2>
 a9c:	80 95       	com	r24
 a9e:	90 95       	com	r25
 aa0:	8e 0f       	add	r24, r30
 aa2:	9f 1f       	adc	r25, r31
 aa4:	08 95       	ret

00000aa6 <strnlen>:
 aa6:	fc 01       	movw	r30, r24
 aa8:	61 50       	subi	r22, 0x01	; 1
 aaa:	70 40       	sbci	r23, 0x00	; 0
 aac:	01 90       	ld	r0, Z+
 aae:	01 10       	cpse	r0, r1
 ab0:	d8 f7       	brcc	.-10     	; 0xaa8 <strnlen+0x2>
 ab2:	80 95       	com	r24
 ab4:	90 95       	com	r25
 ab6:	8e 0f       	add	r24, r30
 ab8:	9f 1f       	adc	r25, r31
 aba:	08 95       	ret

00000abc <fputc>:
 abc:	0f 93       	push	r16
 abe:	1f 93       	push	r17
 ac0:	cf 93       	push	r28
 ac2:	df 93       	push	r29
 ac4:	8c 01       	movw	r16, r24
 ac6:	eb 01       	movw	r28, r22
 ac8:	8b 81       	ldd	r24, Y+3	; 0x03
 aca:	81 ff       	sbrs	r24, 1
 acc:	1b c0       	rjmp	.+54     	; 0xb04 <fputc+0x48>
 ace:	82 ff       	sbrs	r24, 2
 ad0:	0d c0       	rjmp	.+26     	; 0xaec <fputc+0x30>
 ad2:	2e 81       	ldd	r18, Y+6	; 0x06
 ad4:	3f 81       	ldd	r19, Y+7	; 0x07
 ad6:	8c 81       	ldd	r24, Y+4	; 0x04
 ad8:	9d 81       	ldd	r25, Y+5	; 0x05
 ada:	28 17       	cp	r18, r24
 adc:	39 07       	cpc	r19, r25
 ade:	64 f4       	brge	.+24     	; 0xaf8 <fputc+0x3c>
 ae0:	e8 81       	ld	r30, Y
 ae2:	f9 81       	ldd	r31, Y+1	; 0x01
 ae4:	01 93       	st	Z+, r16
 ae6:	f9 83       	std	Y+1, r31	; 0x01
 ae8:	e8 83       	st	Y, r30
 aea:	06 c0       	rjmp	.+12     	; 0xaf8 <fputc+0x3c>
 aec:	e8 85       	ldd	r30, Y+8	; 0x08
 aee:	f9 85       	ldd	r31, Y+9	; 0x09
 af0:	80 2f       	mov	r24, r16
 af2:	09 95       	icall
 af4:	89 2b       	or	r24, r25
 af6:	31 f4       	brne	.+12     	; 0xb04 <fputc+0x48>
 af8:	8e 81       	ldd	r24, Y+6	; 0x06
 afa:	9f 81       	ldd	r25, Y+7	; 0x07
 afc:	01 96       	adiw	r24, 0x01	; 1
 afe:	9f 83       	std	Y+7, r25	; 0x07
 b00:	8e 83       	std	Y+6, r24	; 0x06
 b02:	02 c0       	rjmp	.+4      	; 0xb08 <fputc+0x4c>
 b04:	0f ef       	ldi	r16, 0xFF	; 255
 b06:	1f ef       	ldi	r17, 0xFF	; 255
 b08:	c8 01       	movw	r24, r16
 b0a:	df 91       	pop	r29
 b0c:	cf 91       	pop	r28
 b0e:	1f 91       	pop	r17
 b10:	0f 91       	pop	r16
 b12:	08 95       	ret

00000b14 <__ultoa_invert>:
 b14:	fa 01       	movw	r30, r20
 b16:	aa 27       	eor	r26, r26
 b18:	28 30       	cpi	r18, 0x08	; 8
 b1a:	51 f1       	breq	.+84     	; 0xb70 <__ultoa_invert+0x5c>
 b1c:	20 31       	cpi	r18, 0x10	; 16
 b1e:	81 f1       	breq	.+96     	; 0xb80 <__ultoa_invert+0x6c>
 b20:	e8 94       	clt
 b22:	6f 93       	push	r22
 b24:	6e 7f       	andi	r22, 0xFE	; 254
 b26:	6e 5f       	subi	r22, 0xFE	; 254
 b28:	7f 4f       	sbci	r23, 0xFF	; 255
 b2a:	8f 4f       	sbci	r24, 0xFF	; 255
 b2c:	9f 4f       	sbci	r25, 0xFF	; 255
 b2e:	af 4f       	sbci	r26, 0xFF	; 255
 b30:	b1 e0       	ldi	r27, 0x01	; 1
 b32:	3e d0       	rcall	.+124    	; 0xbb0 <__ultoa_invert+0x9c>
 b34:	b4 e0       	ldi	r27, 0x04	; 4
 b36:	3c d0       	rcall	.+120    	; 0xbb0 <__ultoa_invert+0x9c>
 b38:	67 0f       	add	r22, r23
 b3a:	78 1f       	adc	r23, r24
 b3c:	89 1f       	adc	r24, r25
 b3e:	9a 1f       	adc	r25, r26
 b40:	a1 1d       	adc	r26, r1
 b42:	68 0f       	add	r22, r24
 b44:	79 1f       	adc	r23, r25
 b46:	8a 1f       	adc	r24, r26
 b48:	91 1d       	adc	r25, r1
 b4a:	a1 1d       	adc	r26, r1
 b4c:	6a 0f       	add	r22, r26
 b4e:	71 1d       	adc	r23, r1
 b50:	81 1d       	adc	r24, r1
 b52:	91 1d       	adc	r25, r1
 b54:	a1 1d       	adc	r26, r1
 b56:	20 d0       	rcall	.+64     	; 0xb98 <__ultoa_invert+0x84>
 b58:	09 f4       	brne	.+2      	; 0xb5c <__ultoa_invert+0x48>
 b5a:	68 94       	set
 b5c:	3f 91       	pop	r19
 b5e:	2a e0       	ldi	r18, 0x0A	; 10
 b60:	26 9f       	mul	r18, r22
 b62:	11 24       	eor	r1, r1
 b64:	30 19       	sub	r19, r0
 b66:	30 5d       	subi	r19, 0xD0	; 208
 b68:	31 93       	st	Z+, r19
 b6a:	de f6       	brtc	.-74     	; 0xb22 <__ultoa_invert+0xe>
 b6c:	cf 01       	movw	r24, r30
 b6e:	08 95       	ret
 b70:	46 2f       	mov	r20, r22
 b72:	47 70       	andi	r20, 0x07	; 7
 b74:	40 5d       	subi	r20, 0xD0	; 208
 b76:	41 93       	st	Z+, r20
 b78:	b3 e0       	ldi	r27, 0x03	; 3
 b7a:	0f d0       	rcall	.+30     	; 0xb9a <__ultoa_invert+0x86>
 b7c:	c9 f7       	brne	.-14     	; 0xb70 <__ultoa_invert+0x5c>
 b7e:	f6 cf       	rjmp	.-20     	; 0xb6c <__ultoa_invert+0x58>
 b80:	46 2f       	mov	r20, r22
 b82:	4f 70       	andi	r20, 0x0F	; 15
 b84:	40 5d       	subi	r20, 0xD0	; 208
 b86:	4a 33       	cpi	r20, 0x3A	; 58
 b88:	18 f0       	brcs	.+6      	; 0xb90 <__ultoa_invert+0x7c>
 b8a:	49 5d       	subi	r20, 0xD9	; 217
 b8c:	31 fd       	sbrc	r19, 1
 b8e:	40 52       	subi	r20, 0x20	; 32
 b90:	41 93       	st	Z+, r20
 b92:	02 d0       	rcall	.+4      	; 0xb98 <__ultoa_invert+0x84>
 b94:	a9 f7       	brne	.-22     	; 0xb80 <__ultoa_invert+0x6c>
 b96:	ea cf       	rjmp	.-44     	; 0xb6c <__ultoa_invert+0x58>
 b98:	b4 e0       	ldi	r27, 0x04	; 4
 b9a:	a6 95       	lsr	r26
 b9c:	97 95       	ror	r25
 b9e:	87 95       	ror	r24
 ba0:	77 95       	ror	r23
 ba2:	67 95       	ror	r22
 ba4:	ba 95       	dec	r27
 ba6:	c9 f7       	brne	.-14     	; 0xb9a <__ultoa_invert+0x86>
 ba8:	00 97       	sbiw	r24, 0x00	; 0
 baa:	61 05       	cpc	r22, r1
 bac:	71 05       	cpc	r23, r1
 bae:	08 95       	ret
 bb0:	9b 01       	movw	r18, r22
 bb2:	ac 01       	movw	r20, r24
 bb4:	0a 2e       	mov	r0, r26
 bb6:	06 94       	lsr	r0
 bb8:	57 95       	ror	r21
 bba:	47 95       	ror	r20
 bbc:	37 95       	ror	r19
 bbe:	27 95       	ror	r18
 bc0:	ba 95       	dec	r27
 bc2:	c9 f7       	brne	.-14     	; 0xbb6 <__ultoa_invert+0xa2>
 bc4:	62 0f       	add	r22, r18
 bc6:	73 1f       	adc	r23, r19
 bc8:	84 1f       	adc	r24, r20
 bca:	95 1f       	adc	r25, r21
 bcc:	a0 1d       	adc	r26, r0
 bce:	08 95       	ret

00000bd0 <__prologue_saves__>:
 bd0:	2f 92       	push	r2
 bd2:	3f 92       	push	r3
 bd4:	4f 92       	push	r4
 bd6:	5f 92       	push	r5
 bd8:	6f 92       	push	r6
 bda:	7f 92       	push	r7
 bdc:	8f 92       	push	r8
 bde:	9f 92       	push	r9
 be0:	af 92       	push	r10
 be2:	bf 92       	push	r11
 be4:	cf 92       	push	r12
 be6:	df 92       	push	r13
 be8:	ef 92       	push	r14
 bea:	ff 92       	push	r15
 bec:	0f 93       	push	r16
 bee:	1f 93       	push	r17
 bf0:	cf 93       	push	r28
 bf2:	df 93       	push	r29
 bf4:	cd b7       	in	r28, 0x3d	; 61
 bf6:	de b7       	in	r29, 0x3e	; 62
 bf8:	ca 1b       	sub	r28, r26
 bfa:	db 0b       	sbc	r29, r27
 bfc:	0f b6       	in	r0, 0x3f	; 63
 bfe:	f8 94       	cli
 c00:	de bf       	out	0x3e, r29	; 62
 c02:	0f be       	out	0x3f, r0	; 63
 c04:	cd bf       	out	0x3d, r28	; 61
 c06:	09 94       	ijmp

00000c08 <__epilogue_restores__>:
 c08:	2a 88       	ldd	r2, Y+18	; 0x12
 c0a:	39 88       	ldd	r3, Y+17	; 0x11
 c0c:	48 88       	ldd	r4, Y+16	; 0x10
 c0e:	5f 84       	ldd	r5, Y+15	; 0x0f
 c10:	6e 84       	ldd	r6, Y+14	; 0x0e
 c12:	7d 84       	ldd	r7, Y+13	; 0x0d
 c14:	8c 84       	ldd	r8, Y+12	; 0x0c
 c16:	9b 84       	ldd	r9, Y+11	; 0x0b
 c18:	aa 84       	ldd	r10, Y+10	; 0x0a
 c1a:	b9 84       	ldd	r11, Y+9	; 0x09
 c1c:	c8 84       	ldd	r12, Y+8	; 0x08
 c1e:	df 80       	ldd	r13, Y+7	; 0x07
 c20:	ee 80       	ldd	r14, Y+6	; 0x06
 c22:	fd 80       	ldd	r15, Y+5	; 0x05
 c24:	0c 81       	ldd	r16, Y+4	; 0x04
 c26:	1b 81       	ldd	r17, Y+3	; 0x03
 c28:	aa 81       	ldd	r26, Y+2	; 0x02
 c2a:	b9 81       	ldd	r27, Y+1	; 0x01
 c2c:	ce 0f       	add	r28, r30
 c2e:	d1 1d       	adc	r29, r1
 c30:	0f b6       	in	r0, 0x3f	; 63
 c32:	f8 94       	cli
 c34:	de bf       	out	0x3e, r29	; 62
 c36:	0f be       	out	0x3f, r0	; 63
 c38:	cd bf       	out	0x3d, r28	; 61
 c3a:	ed 01       	movw	r28, r26
 c3c:	08 95       	ret

00000c3e <_exit>:
 c3e:	f8 94       	cli

00000c40 <__stop_program>:
 c40:	ff cf       	rjmp	.-2      	; 0xc40 <__stop_program>
