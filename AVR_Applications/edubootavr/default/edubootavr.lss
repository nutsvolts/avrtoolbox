
edubootavr.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003d0  0000fc00  0000fc00  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000102  00800100  00800100  00000444  2**0
                  ALLOC
  2 .debug_aranges 00000028  00000000  00000000  00000444  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000053  00000000  00000000  0000046c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000056d  00000000  00000000  000004bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000002a4  00000000  00000000  00000a2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000467  00000000  00000000  00000cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000060  00000000  00000000  00001138  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000283  00000000  00000000  00001198  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000002a9  00000000  00000000  0000141b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000128  00000000  00000000  000016c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0000fc00 <__ctors_end>:
    fc00:	12 e0       	ldi	r17, 0x02	; 2
    fc02:	a0 e0       	ldi	r26, 0x00	; 0
    fc04:	b1 e0       	ldi	r27, 0x01	; 1
    fc06:	01 c0       	rjmp	.+2      	; 0xfc0a <.do_clear_bss_start>

0000fc08 <.do_clear_bss_loop>:
    fc08:	1d 92       	st	X+, r1

0000fc0a <.do_clear_bss_start>:
    fc0a:	a2 30       	cpi	r26, 0x02	; 2
    fc0c:	b1 07       	cpc	r27, r17
    fc0e:	e1 f7       	brne	.-8      	; 0xfc08 <.do_clear_bss_loop>

0000fc10 <__jumpMain>:
// From Peter Fluery AVRFreaks Aug 10 2005 - to remove interrupt Vector table
// put -nostartfiles in LDFlags, add the following function saves wasted space
void __jumpMain (void) __attribute__ ((naked)) __attribute__ ((section (".init9")));

void __jumpMain(void)
{   
    fc10:	11 24       	eor	r1, r1
    asm volatile ( ".set __stack, %0" :: "i" (RAMEND) );
    asm volatile ( "clr __zero_reg__" );        // r1 set to 0
    asm volatile ( "rjmp main");                   // jump to main()
    fc12:	39 c0       	rjmp	.+114    	; 0xfc86 <main>

0000fc14 <sendByte>:
   #error "No USART definition for MCU in USARTInit"
#endif 
}

void sendByte( uint8_t data )
{
    fc14:	98 2f       	mov	r25, r24
	wdt_reset(); // reset the watchdog timer, if it is set
    fc16:	a8 95       	wdr
	// Wait for empty transmit buffer 
	while ( !( USART_CONTROL_STATUS_REG_A & (1<<USART_READY_TO_TRANSMIT)) );
    fc18:	e0 ec       	ldi	r30, 0xC0	; 192
    fc1a:	f0 e0       	ldi	r31, 0x00	; 0
    fc1c:	80 81       	ld	r24, Z
    fc1e:	85 ff       	sbrs	r24, 5
    fc20:	fd cf       	rjmp	.-6      	; 0xfc1c <sendByte+0x8>
	// Put data into buffer, sends the data
	USART_DATA_REG = data;
    fc22:	90 93 c6 00 	sts	0x00C6, r25
}
    fc26:	08 95       	ret

0000fc28 <receiveByte>:

uint8_t receiveByte( void )
{
    fc28:	cf 92       	push	r12
    fc2a:	df 92       	push	r13
    fc2c:	ef 92       	push	r14
    fc2e:	ff 92       	push	r15
    fc30:	0f 93       	push	r16
    fc32:	1f 93       	push	r17
    fc34:	cf 93       	push	r28
    fc36:	df 93       	push	r29
	uint32_t count = 0;

	wdt_reset(); // reset the watchdog timer, if it is set
    fc38:	a8 95       	wdr
    fc3a:	ee 24       	eor	r14, r14
    fc3c:	ff 24       	eor	r15, r15
    fc3e:	87 01       	movw	r16, r14
	// Wait for data to be received 
	while ( !(USART_CONTROL_STATUS_REG_A & (1<<USART_RECEIVE_COMPLETE)) )
    fc40:	c0 ec       	ldi	r28, 0xC0	; 192
    fc42:	d0 e0       	ldi	r29, 0x00	; 0
	{
		// JWP 12/20/10 extend wait
		//if(count++ >= (F_CPU >> 4)) application_ptr();
		if(count++ >= (F_CPU)) application_ptr();
    fc44:	cc 24       	eor	r12, r12
    fc46:	dd 24       	eor	r13, r13
    fc48:	10 c0       	rjmp	.+32     	; 0xfc6a <receiveByte+0x42>
    fc4a:	80 e0       	ldi	r24, 0x00	; 0
    fc4c:	e8 16       	cp	r14, r24
    fc4e:	84 e2       	ldi	r24, 0x24	; 36
    fc50:	f8 06       	cpc	r15, r24
    fc52:	84 ef       	ldi	r24, 0xF4	; 244
    fc54:	08 07       	cpc	r16, r24
    fc56:	80 e0       	ldi	r24, 0x00	; 0
    fc58:	18 07       	cpc	r17, r24
    fc5a:	10 f0       	brcs	.+4      	; 0xfc60 <receiveByte+0x38>
    fc5c:	f6 01       	movw	r30, r12
    fc5e:	09 95       	icall
    fc60:	08 94       	sec
    fc62:	e1 1c       	adc	r14, r1
    fc64:	f1 1c       	adc	r15, r1
    fc66:	01 1d       	adc	r16, r1
    fc68:	11 1d       	adc	r17, r1
{
	uint32_t count = 0;

	wdt_reset(); // reset the watchdog timer, if it is set
	// Wait for data to be received 
	while ( !(USART_CONTROL_STATUS_REG_A & (1<<USART_RECEIVE_COMPLETE)) )
    fc6a:	88 81       	ld	r24, Y
    fc6c:	88 23       	and	r24, r24
    fc6e:	6c f7       	brge	.-38     	; 0xfc4a <receiveByte+0x22>
	}
	
	count = 0;	
		
	// Get and return received data from buffer 
	return USART_DATA_REG;
    fc70:	80 91 c6 00 	lds	r24, 0x00C6
}
    fc74:	df 91       	pop	r29
    fc76:	cf 91       	pop	r28
    fc78:	1f 91       	pop	r17
    fc7a:	0f 91       	pop	r16
    fc7c:	ff 90       	pop	r15
    fc7e:	ef 90       	pop	r14
    fc80:	df 90       	pop	r13
    fc82:	cf 90       	pop	r12
    fc84:	08 95       	ret

0000fc86 <main>:
#define BOOT_STATE_PIN_NUMBER PIND6
#define BOOT_STATE_PIN_DDR DDRD
#endif

int main(void) 
{ 
    fc86:	2f 92       	push	r2
    fc88:	3f 92       	push	r3
    fc8a:	4f 92       	push	r4
    fc8c:	5f 92       	push	r5
    fc8e:	6f 92       	push	r6
    fc90:	7f 92       	push	r7
    fc92:	8f 92       	push	r8
    fc94:	9f 92       	push	r9
    fc96:	af 92       	push	r10
    fc98:	bf 92       	push	r11
    fc9a:	cf 92       	push	r12
    fc9c:	df 92       	push	r13
    fc9e:	ef 92       	push	r14
    fca0:	ff 92       	push	r15
    fca2:	0f 93       	push	r16
    fca4:	1f 93       	push	r17
    fca6:	df 93       	push	r29
    fca8:	cf 93       	push	r28
    fcaa:	00 d0       	rcall	.+0      	; 0xfcac <main+0x26>
    fcac:	00 d0       	rcall	.+0      	; 0xfcae <main+0x28>
    fcae:	00 d0       	rcall	.+0      	; 0xfcb0 <main+0x2a>
    fcb0:	cd b7       	in	r28, 0x3d	; 61
    fcb2:	de b7       	in	r29, 0x3e	; 62

	#if defined(BOOT_PIN)
	// Set pin for input
	BOOT_STATE_PIN_DDR |= (1<<BOOT_STATE_PIN_NUMBER);
    fcb4:	ea e2       	ldi	r30, 0x2A	; 42
    fcb6:	f0 e0       	ldi	r31, 0x00	; 0
    fcb8:	80 81       	ld	r24, Z
    fcba:	80 64       	ori	r24, 0x40	; 64
    fcbc:	80 83       	st	Z, r24
	// Set pin with pullup
	BOOT_STATE_PIN |= (1<<BOOT_STATE_PIN_NUMBER);
    fcbe:	e9 e2       	ldi	r30, 0x29	; 41
    fcc0:	f0 e0       	ldi	r31, 0x00	; 0
    fcc2:	80 81       	ld	r24, Z
    fcc4:	80 64       	ori	r24, 0x40	; 64
    fcc6:	80 83       	st	Z, r24

	// Check boot enable pin state
	// If BOOT_STATE_PIN_NUMBER is low, use bootloader.
	if((BOOT_STATE_PIN & (1<<BOOT_STATE_PIN_NUMBER)) )
    fcc8:	80 81       	ld	r24, Z
    fcca:	86 ff       	sbrs	r24, 6
    fccc:	03 c0       	rjmp	.+6      	; 0xfcd4 <main+0x4e>
	{
		// Jump to the application section
		application_ptr();
    fcce:	e0 e0       	ldi	r30, 0x00	; 0
    fcd0:	f0 e0       	ldi	r31, 0x00	; 0
    fcd2:	09 95       	icall
void USARTInit()
{
	// Set baud rate hard coded to 19200 for 12MHz
	//USART_BAUD_RATE_LOW = 38;

	USART_BAUD_RATE_LOW =(uint8_t)(F_CPU/(BAUD*16L)-1);
    fcd4:	80 e1       	ldi	r24, 0x10	; 16
    fcd6:	80 93 c4 00 	sts	0x00C4, r24
	// Enable receiver and transmitter
	USART_CONTROL_STATUS_REG_B = (1 << USART_ENABLE_RECEIVER) | (1 << USART_ENABLE_TRANSMITTER);
    fcda:	88 e1       	ldi	r24, 0x18	; 24
    fcdc:	80 93 c1 00 	sts	0x00C1, r24
	// Set frame format: n,8,1
#if defined(ATmega644)
	USART_CONTROL_STATUS_REG_C |= (1 << USART_STOP_BIT_SELECT) | (1 << USART_CHARACTER_SIZE);  
    fce0:	e2 ec       	ldi	r30, 0xC2	; 194
    fce2:	f0 e0       	ldi	r31, 0x00	; 0
    fce4:	80 81       	ld	r24, Z
    fce6:	8a 60       	ori	r24, 0x0A	; 10
    fce8:	80 83       	st	Z, r24
	else blockFlashRead( tempSize  );
}

void blockFlashLoad(uint16_t size)
{ 
	uint16_t tempAddress = address;
    fcea:	82 e0       	ldi	r24, 0x02	; 2
    fcec:	91 e0       	ldi	r25, 0x01	; 1
    fcee:	8b 83       	std	Y+3, r24	; 0x03
    fcf0:	9c 83       	std	Y+4, r25	; 0x04
		if (i<size) pageBuffer[i]=receiveByte();
		else pageBuffer[i]=0xFF;
	}
	i=0;
 
    boot_page_erase(address);//_safe(address);	// Perform page erase
    fcf2:	0f 2e       	mov	r0, r31
    fcf4:	f3 e0       	ldi	r31, 0x03	; 3
    fcf6:	7f 2e       	mov	r7, r31
    fcf8:	f0 2d       	mov	r31, r0
    boot_spm_busy_wait();		// Wait until the memory is erased.
    fcfa:	0f 2e       	mov	r0, r31
    fcfc:	f7 e5       	ldi	r31, 0x57	; 87
    fcfe:	cf 2e       	mov	r12, r31
    fd00:	dd 24       	eor	r13, r13
    fd02:	f0 2d       	mov	r31, r0

    for(i = 0; i < size; i+=2)
	{
		tempWord = pageBuffer[i]; // load the little end then increment i
		tempWord += (pageBuffer[i+1] << 8); // load the big end
        boot_page_fill(address,tempWord);;//_safe(address,tempWord);
    fd04:	66 24       	eor	r6, r6
    fd06:	63 94       	inc	r6



	while(1)// Loop forever
	{
		cmd = receiveByte();
    fd08:	0e 94 14 7e 	call	0xfc28	; 0xfc28 <receiveByte>
    fd0c:	08 2f       	mov	r16, r24

		switch (cmd)
    fd0e:	84 35       	cpi	r24, 0x54	; 84
    fd10:	09 f4       	brne	.+2      	; 0xfd14 <main+0x8e>
    fd12:	64 c0       	rjmp	.+200    	; 0xfddc <main+0x156>
    fd14:	85 35       	cpi	r24, 0x55	; 85
    fd16:	a0 f4       	brcc	.+40     	; 0xfd40 <main+0xba>
    fd18:	85 34       	cpi	r24, 0x45	; 69
    fd1a:	09 f4       	brne	.+2      	; 0xfd1e <main+0x98>
    fd1c:	23 c1       	rjmp	.+582    	; 0xff64 <main+0x2de>
    fd1e:	86 34       	cpi	r24, 0x46	; 70
    fd20:	30 f4       	brcc	.+12     	; 0xfd2e <main+0xa8>
    fd22:	81 34       	cpi	r24, 0x41	; 65
    fd24:	69 f1       	breq	.+90     	; 0xfd80 <main+0xfa>
    fd26:	82 34       	cpi	r24, 0x42	; 66
    fd28:	09 f0       	breq	.+2      	; 0xfd2c <main+0xa6>
    fd2a:	20 c1       	rjmp	.+576    	; 0xff6c <main+0x2e6>
    fd2c:	92 c0       	rjmp	.+292    	; 0xfe52 <main+0x1cc>
    fd2e:	80 35       	cpi	r24, 0x50	; 80
    fd30:	f9 f0       	breq	.+62     	; 0xfd70 <main+0xea>
    fd32:	83 35       	cpi	r24, 0x53	; 83
    fd34:	09 f4       	brne	.+2      	; 0xfd38 <main+0xb2>
    fd36:	69 c0       	rjmp	.+210    	; 0xfe0a <main+0x184>
    fd38:	8c 34       	cpi	r24, 0x4C	; 76
    fd3a:	09 f0       	breq	.+2      	; 0xfd3e <main+0xb8>
    fd3c:	17 c1       	rjmp	.+558    	; 0xff6c <main+0x2e6>
    fd3e:	18 c0       	rjmp	.+48     	; 0xfd70 <main+0xea>
    fd40:	87 36       	cpi	r24, 0x67	; 103
    fd42:	09 f4       	brne	.+2      	; 0xfd46 <main+0xc0>
    fd44:	86 c0       	rjmp	.+268    	; 0xfe52 <main+0x1cc>
    fd46:	88 36       	cpi	r24, 0x68	; 104
    fd48:	48 f4       	brcc	.+18     	; 0xfd5c <main+0xd6>
    fd4a:	82 36       	cpi	r24, 0x62	; 98
    fd4c:	09 f4       	brne	.+2      	; 0xfd50 <main+0xca>
    fd4e:	77 c0       	rjmp	.+238    	; 0xfe3e <main+0x1b8>
    fd50:	85 36       	cpi	r24, 0x65	; 101
    fd52:	71 f1       	breq	.+92     	; 0xfdb0 <main+0x12a>
    fd54:	81 36       	cpi	r24, 0x61	; 97
    fd56:	09 f0       	breq	.+2      	; 0xfd5a <main+0xd4>
    fd58:	09 c1       	rjmp	.+530    	; 0xff6c <main+0x2e6>
    fd5a:	0e c0       	rjmp	.+28     	; 0xfd78 <main+0xf2>
    fd5c:	83 37       	cpi	r24, 0x73	; 115
    fd5e:	09 f4       	brne	.+2      	; 0xfd62 <main+0xdc>
    fd60:	43 c0       	rjmp	.+134    	; 0xfde8 <main+0x162>
    fd62:	84 37       	cpi	r24, 0x74	; 116
    fd64:	09 f4       	brne	.+2      	; 0xfd68 <main+0xe2>
    fd66:	4a c0       	rjmp	.+148    	; 0xfdfc <main+0x176>
    fd68:	80 37       	cpi	r24, 0x70	; 112
    fd6a:	09 f0       	breq	.+2      	; 0xfd6e <main+0xe8>
    fd6c:	ff c0       	rjmp	.+510    	; 0xff6c <main+0x2e6>
    fd6e:	63 c0       	rjmp	.+198    	; 0xfe36 <main+0x1b0>
		{
			case 'P':// Enter program mode
			case 'L':// Leave program mode
				sendByte('\r');
    fd70:	8d e0       	ldi	r24, 0x0D	; 13
    fd72:	0e 94 0a 7e 	call	0xfc14	; 0xfc14 <sendByte>
    fd76:	c8 cf       	rjmp	.-112    	; 0xfd08 <main+0x82>
******************************************************/

void autoIncrementAddress(void) // 'a'
{ 
	// Yes, this code autoincrements
	sendByte('Y');
    fd78:	89 e5       	ldi	r24, 0x59	; 89
    fd7a:	0e 94 0a 7e 	call	0xfc14	; 0xfc14 <sendByte>
    fd7e:	c4 cf       	rjmp	.-120    	; 0xfd08 <main+0x82>
}

void setAddress(void) // 'A'
{ 
	// Note that flash addresses are in words, not bytes               
    address = receiveByte();   
    fd80:	0e 94 14 7e 	call	0xfc28	; 0xfc28 <receiveByte>
    fd84:	18 2f       	mov	r17, r24
    fd86:	80 93 00 01 	sts	0x0100, r24
    fd8a:	10 92 01 01 	sts	0x0101, r1
	address = (address << 8) | receiveByte();
    fd8e:	0e 94 14 7e 	call	0xfc28	; 0xfc28 <receiveByte>
	address = address << 1; // convert word address to byte address
    fd92:	31 2e       	mov	r3, r17
    fd94:	22 24       	eor	r2, r2
    fd96:	90 e0       	ldi	r25, 0x00	; 0
    fd98:	82 29       	or	r24, r2
    fd9a:	93 29       	or	r25, r3
    fd9c:	88 0f       	add	r24, r24
    fd9e:	99 1f       	adc	r25, r25
    fda0:	90 93 01 01 	sts	0x0101, r25
    fda4:	80 93 00 01 	sts	0x0100, r24

 	sendByte('\r');  // respond okay
    fda8:	8d e0       	ldi	r24, 0x0D	; 13
    fdaa:	0e 94 0a 7e 	call	0xfc14	; 0xfc14 <sendByte>
    fdae:	ac cf       	rjmp	.-168    	; 0xfd08 <main+0x82>
    fdb0:	20 e0       	ldi	r18, 0x00	; 0
    fdb2:	30 e0       	ldi	r19, 0x00	; 0
    fdb4:	e0 e0       	ldi	r30, 0x00	; 0
    fdb6:	f0 e0       	ldi	r31, 0x00	; 0
void chipErase(void) // 'e'
{ 
 	int i;
 	for(i = 0 ; i < (FLASHEND - (BOOTSIZE * 2)); i += SPM_PAGESIZE)
	{
    	boot_page_erase(i);//_safe(i);	// Erase the page
    fdb8:	70 92 57 00 	sts	0x0057, r7
    fdbc:	e8 95       	spm
    	boot_spm_busy_wait();		// Wait until finished.
    fdbe:	d6 01       	movw	r26, r12
    fdc0:	8c 91       	ld	r24, X
    fdc2:	80 fd       	sbrc	r24, 0
    fdc4:	fc cf       	rjmp	.-8      	; 0xfdbe <main+0x138>
}

void chipErase(void) // 'e'
{ 
 	int i;
 	for(i = 0 ; i < (FLASHEND - (BOOTSIZE * 2)); i += SPM_PAGESIZE)
    fdc6:	20 50       	subi	r18, 0x00	; 0
    fdc8:	3f 4f       	sbci	r19, 0xFF	; 255
    fdca:	f9 01       	movw	r30, r18
    fdcc:	bc ef       	ldi	r27, 0xFC	; 252
    fdce:	20 30       	cpi	r18, 0x00	; 0
    fdd0:	3b 07       	cpc	r19, r27
    fdd2:	91 f7       	brne	.-28     	; 0xfdb8 <main+0x132>
	{
    	boot_page_erase(i);//_safe(i);	// Erase the page
    	boot_spm_busy_wait();		// Wait until finished.
	}
   
	sendByte('\r');  // respond okay
    fdd4:	8d e0       	ldi	r24, 0x0D	; 13
    fdd6:	0e 94 0a 7e 	call	0xfc14	; 0xfc14 <sendByte>
    fdda:	96 cf       	rjmp	.-212    	; 0xfd08 <main+0x82>

void selectDeviceType() // 'T'
{
	//dummy read since we only have one device type
	uint8_t dummy;
	dummy = receiveByte();
    fddc:	0e 94 14 7e 	call	0xfc28	; 0xfc28 <receiveByte>
	sendByte('\r');
    fde0:	8d e0       	ldi	r24, 0x0D	; 13
    fde2:	0e 94 0a 7e 	call	0xfc14	; 0xfc14 <sendByte>
    fde6:	90 cf       	rjmp	.-224    	; 0xfd08 <main+0x82>
}

void readSignatureBytes(void) // 'S'
{ 
    sendByte( SIGNATURE_BYTE_3 );
    fde8:	89 e0       	ldi	r24, 0x09	; 9
    fdea:	0e 94 0a 7e 	call	0xfc14	; 0xfc14 <sendByte>
    sendByte( SIGNATURE_BYTE_2 );
    fdee:	86 e9       	ldi	r24, 0x96	; 150
    fdf0:	0e 94 0a 7e 	call	0xfc14	; 0xfc14 <sendByte>
    sendByte( SIGNATURE_BYTE_1 );
    fdf4:	8e e1       	ldi	r24, 0x1E	; 30
    fdf6:	0e 94 0a 7e 	call	0xfc14	; 0xfc14 <sendByte>
    fdfa:	86 cf       	rjmp	.-244    	; 0xfd08 <main+0x82>
}

void returnSupportedDeviceCodes(void) // 't'
{
	//sendByte((char)0); // list terminator
	sendByte(SUPPORTED_DEVICE_CODE); // Support only this device
    fdfc:	83 e7       	ldi	r24, 0x73	; 115
    fdfe:	0e 94 0a 7e 	call	0xfc14	; 0xfc14 <sendByte>
	sendByte((char)0); // list terminator
    fe02:	80 e0       	ldi	r24, 0x00	; 0
    fe04:	0e 94 0a 7e 	call	0xfc14	; 0xfc14 <sendByte>
    fe08:	7f cf       	rjmp	.-258    	; 0xfd08 <main+0x82>
}

void returnSoftwareIdentifier(void) // 'S'
{ 
    // Software identifier is 'AVRBOOT'
	sendByte('A');
    fe0a:	81 e4       	ldi	r24, 0x41	; 65
    fe0c:	0e 94 0a 7e 	call	0xfc14	; 0xfc14 <sendByte>
    sendByte('V'); 
    fe10:	86 e5       	ldi	r24, 0x56	; 86
    fe12:	0e 94 0a 7e 	call	0xfc14	; 0xfc14 <sendByte>
    sendByte('R');
    fe16:	82 e5       	ldi	r24, 0x52	; 82
    fe18:	0e 94 0a 7e 	call	0xfc14	; 0xfc14 <sendByte>
    sendByte('B');
    fe1c:	82 e4       	ldi	r24, 0x42	; 66
    fe1e:	0e 94 0a 7e 	call	0xfc14	; 0xfc14 <sendByte>
    sendByte('O');
    fe22:	8f e4       	ldi	r24, 0x4F	; 79
    fe24:	0e 94 0a 7e 	call	0xfc14	; 0xfc14 <sendByte>
    sendByte('O');
    fe28:	8f e4       	ldi	r24, 0x4F	; 79
    fe2a:	0e 94 0a 7e 	call	0xfc14	; 0xfc14 <sendByte>
    sendByte('T');
    fe2e:	84 e5       	ldi	r24, 0x54	; 84
    fe30:	0e 94 0a 7e 	call	0xfc14	; 0xfc14 <sendByte>
    fe34:	69 cf       	rjmp	.-302    	; 0xfd08 <main+0x82>
}

void returnProgrammerType(void) // 'p'
{      
	// Get programmer type - serial.
    sendByte('S');
    fe36:	83 e5       	ldi	r24, 0x53	; 83
    fe38:	0e 94 0a 7e 	call	0xfc14	; 0xfc14 <sendByte>
    fe3c:	65 cf       	rjmp	.-310    	; 0xfd08 <main+0x82>
}

void checkBlockSupport(void) // 'b'
{ 
    sendByte('Y'); // yes, block load is supported.
    fe3e:	89 e5       	ldi	r24, 0x59	; 89
    fe40:	0e 94 0a 7e 	call	0xfc14	; 0xfc14 <sendByte>
    sendByte((SPM_PAGESIZE>>8) & 0xFF); // send MSB first.
    fe44:	86 2d       	mov	r24, r6
    fe46:	0e 94 0a 7e 	call	0xfc14	; 0xfc14 <sendByte>
    sendByte(SPM_PAGESIZE & 0xFF); // send LSB second.
    fe4a:	80 e0       	ldi	r24, 0x00	; 0
    fe4c:	0e 94 0a 7e 	call	0xfc14	; 0xfc14 <sendByte>
    fe50:	5b cf       	rjmp	.-330    	; 0xfd08 <main+0x82>
void startBlockAction(uint8_t cmd)
{
	uint8_t tempRec;
	uint16_t tempSize;

	tempSize = (receiveByte() << 8) | receiveByte();
    fe52:	0e 94 14 7e 	call	0xfc28	; 0xfc28 <receiveByte>
    fe56:	18 2f       	mov	r17, r24
    fe58:	0e 94 14 7e 	call	0xfc28	; 0xfc28 <receiveByte>
    fe5c:	1a 83       	std	Y+2, r17	; 0x02
    fe5e:	19 82       	std	Y+1, r1	; 0x01
    fe60:	90 e0       	ldi	r25, 0x00	; 0
    fe62:	a9 80       	ldd	r10, Y+1	; 0x01
    fe64:	ba 80       	ldd	r11, Y+2	; 0x02
    fe66:	a8 2a       	or	r10, r24
    fe68:	b9 2a       	or	r11, r25
	// dummy read for type - we only do flash NOT EEPROM
	tempRec = receiveByte(); 
    fe6a:	0e 94 14 7e 	call	0xfc28	; 0xfc28 <receiveByte>
	if(cmd == 'B') blockFlashLoad( tempSize );
    fe6e:	02 34       	cpi	r16, 0x42	; 66
    fe70:	09 f0       	breq	.+2      	; 0xfe74 <main+0x1ee>
    fe72:	63 c0       	rjmp	.+198    	; 0xff3a <main+0x2b4>
	else blockFlashRead( tempSize  );
}

void blockFlashLoad(uint16_t size)
{ 
	uint16_t tempAddress = address;
    fe74:	40 90 00 01 	lds	r4, 0x0100
    fe78:	50 90 01 01 	lds	r5, 0x0101
    fe7c:	0f 2e       	mov	r0, r31
    fe7e:	f2 e0       	ldi	r31, 0x02	; 2
    fe80:	ef 2e       	mov	r14, r31
    fe82:	f1 e0       	ldi	r31, 0x01	; 1
    fe84:	ff 2e       	mov	r15, r31
    fe86:	f0 2d       	mov	r31, r0
    fe88:	8b 81       	ldd	r24, Y+3	; 0x03
    fe8a:	9c 81       	ldd	r25, Y+4	; 0x04
    fe8c:	8c 01       	movw	r16, r24
    fe8e:	1e 82       	std	Y+6, r1	; 0x06
    fe90:	1d 82       	std	Y+5, r1	; 0x05

	uint16_t i,tempWord;

	// store values to be programmed in temporary buffer
	for (i=0; i<USART_RX_BUFFER_SIZE; i++) {
		if (i<size) pageBuffer[i]=receiveByte();
    fe92:	ed 81       	ldd	r30, Y+5	; 0x05
    fe94:	fe 81       	ldd	r31, Y+6	; 0x06
    fe96:	ea 15       	cp	r30, r10
    fe98:	fb 05       	cpc	r31, r11
    fe9a:	28 f4       	brcc	.+10     	; 0xfea6 <main+0x220>
    fe9c:	0e 94 14 7e 	call	0xfc28	; 0xfc28 <receiveByte>
    fea0:	d8 01       	movw	r26, r16
    fea2:	8c 93       	st	X, r24
    fea4:	03 c0       	rjmp	.+6      	; 0xfeac <main+0x226>
		else pageBuffer[i]=0xFF;
    fea6:	2f ef       	ldi	r18, 0xFF	; 255
    fea8:	f8 01       	movw	r30, r16
    feaa:	20 83       	st	Z, r18
	uint16_t tempAddress = address;

	uint16_t i,tempWord;

	// store values to be programmed in temporary buffer
	for (i=0; i<USART_RX_BUFFER_SIZE; i++) {
    feac:	4d 81       	ldd	r20, Y+5	; 0x05
    feae:	5e 81       	ldd	r21, Y+6	; 0x06
    feb0:	4f 5f       	subi	r20, 0xFF	; 255
    feb2:	5f 4f       	sbci	r21, 0xFF	; 255
    feb4:	5e 83       	std	Y+6, r21	; 0x06
    feb6:	4d 83       	std	Y+5, r20	; 0x05
    feb8:	0f 5f       	subi	r16, 0xFF	; 255
    feba:	1f 4f       	sbci	r17, 0xFF	; 255
    febc:	40 50       	subi	r20, 0x00	; 0
    febe:	51 40       	sbci	r21, 0x01	; 1
    fec0:	41 f7       	brne	.-48     	; 0xfe92 <main+0x20c>
		if (i<size) pageBuffer[i]=receiveByte();
		else pageBuffer[i]=0xFF;
	}
	i=0;
 
    boot_page_erase(address);//_safe(address);	// Perform page erase
    fec2:	e0 91 00 01 	lds	r30, 0x0100
    fec6:	f0 91 01 01 	lds	r31, 0x0101
    feca:	70 92 57 00 	sts	0x0057, r7
    fece:	e8 95       	spm
    boot_spm_busy_wait();		// Wait until the memory is erased.
    fed0:	d6 01       	movw	r26, r12
    fed2:	8c 91       	ld	r24, X
    fed4:	80 fd       	sbrc	r24, 0
    fed6:	fc cf       	rjmp	.-8      	; 0xfed0 <main+0x24a>

    for(i = 0; i < size; i+=2)
    fed8:	a1 14       	cp	r10, r1
    feda:	b1 04       	cpc	r11, r1
    fedc:	e9 f0       	breq	.+58     	; 0xff18 <main+0x292>
    fede:	20 e0       	ldi	r18, 0x00	; 0
    fee0:	30 e0       	ldi	r19, 0x00	; 0
	{
		tempWord = pageBuffer[i]; // load the little end then increment i
    fee2:	d7 01       	movw	r26, r14
    fee4:	8c 91       	ld	r24, X
		tempWord += (pageBuffer[i+1] << 8); // load the big end
        boot_page_fill(address,tempWord);;//_safe(address,tempWord);
    fee6:	11 96       	adiw	r26, 0x01	; 1
    fee8:	9c 90       	ld	r9, X
    feea:	88 24       	eor	r8, r8
    feec:	a4 01       	movw	r20, r8
    feee:	48 0f       	add	r20, r24
    fef0:	51 1d       	adc	r21, r1
    fef2:	0a 01       	movw	r0, r20
    fef4:	60 92 57 00 	sts	0x0057, r6
    fef8:	e8 95       	spm
    fefa:	11 24       	eor	r1, r1
    fefc:	32 96       	adiw	r30, 0x02	; 2
	i=0;
 
    boot_page_erase(address);//_safe(address);	// Perform page erase
    boot_spm_busy_wait();		// Wait until the memory is erased.

    for(i = 0; i < size; i+=2)
    fefe:	2e 5f       	subi	r18, 0xFE	; 254
    ff00:	3f 4f       	sbci	r19, 0xFF	; 255
    ff02:	82 e0       	ldi	r24, 0x02	; 2
    ff04:	90 e0       	ldi	r25, 0x00	; 0
    ff06:	e8 0e       	add	r14, r24
    ff08:	f9 1e       	adc	r15, r25
    ff0a:	2a 15       	cp	r18, r10
    ff0c:	3b 05       	cpc	r19, r11
    ff0e:	48 f3       	brcs	.-46     	; 0xfee2 <main+0x25c>
    ff10:	f0 93 01 01 	sts	0x0101, r31
    ff14:	e0 93 00 01 	sts	0x0100, r30
        boot_page_fill(address,tempWord);;//_safe(address,tempWord);
    							
        address = address + 2;  	// word increment
    } 
    
    boot_page_write(tempAddress);//_safe(tempAddress);
    ff18:	25 e0       	ldi	r18, 0x05	; 5
    ff1a:	f2 01       	movw	r30, r4
    ff1c:	20 93 57 00 	sts	0x0057, r18
    ff20:	e8 95       	spm
    boot_spm_busy_wait();	
    ff22:	d6 01       	movw	r26, r12
    ff24:	8c 91       	ld	r24, X
    ff26:	80 fd       	sbrc	r24, 0
    ff28:	fc cf       	rjmp	.-8      	; 0xff22 <main+0x29c>
    boot_rww_enable();				// Re-enable the RWW section   
    ff2a:	b1 e1       	ldi	r27, 0x11	; 17
    ff2c:	b0 93 57 00 	sts	0x0057, r27
    ff30:	e8 95       	spm

	sendByte('\r');
    ff32:	8d e0       	ldi	r24, 0x0D	; 13
    ff34:	0e 94 0a 7e 	call	0xfc14	; 0xfc14 <sendByte>
    ff38:	e7 ce       	rjmp	.-562    	; 0xfd08 <main+0x82>
void blockFlashRead(uint16_t size)
{ 
	uint8_t data;
	do {
		// read_program_memory(address,0x00);
		data = pgm_read_byte_near(address++);
    ff3a:	e0 91 00 01 	lds	r30, 0x0100
    ff3e:	f0 91 01 01 	lds	r31, 0x0101
    ff42:	cf 01       	movw	r24, r30
    ff44:	01 96       	adiw	r24, 0x01	; 1
    ff46:	90 93 01 01 	sts	0x0101, r25
    ff4a:	80 93 00 01 	sts	0x0100, r24
    ff4e:	e4 91       	lpm	r30, Z+
		// send byte
		sendByte(data);
    ff50:	8e 2f       	mov	r24, r30
    ff52:	0e 94 0a 7e 	call	0xfc14	; 0xfc14 <sendByte>
		// reduce number of bytes to read by one
		size--;	
    ff56:	08 94       	sec
    ff58:	a1 08       	sbc	r10, r1
    ff5a:	b1 08       	sbc	r11, r1
								
	} while (size);	// loop through size
    ff5c:	a1 14       	cp	r10, r1
    ff5e:	b1 04       	cpc	r11, r1
    ff60:	61 f7       	brne	.-40     	; 0xff3a <main+0x2b4>
    ff62:	d2 ce       	rjmp	.-604    	; 0xfd08 <main+0x82>
}


void exitBootloader()
{
	sendByte('\r');
    ff64:	8d e0       	ldi	r24, 0x0D	; 13
    ff66:	0e 94 0a 7e 	call	0xfc14	; 0xfc14 <sendByte>
    ff6a:	ce ce       	rjmp	.-612    	; 0xfd08 <main+0x82>
				break;
			case 'E':
				exitBootloader();
				break;									
			default:
				if(cmd != 0x1B) sendByte('?');
    ff6c:	0b 31       	cpi	r16, 0x1B	; 27
    ff6e:	09 f4       	brne	.+2      	; 0xff72 <main+0x2ec>
    ff70:	cb ce       	rjmp	.-618    	; 0xfd08 <main+0x82>
    ff72:	8f e3       	ldi	r24, 0x3F	; 63
    ff74:	0e 94 0a 7e 	call	0xfc14	; 0xfc14 <sendByte>
    ff78:	c7 ce       	rjmp	.-626    	; 0xfd08 <main+0x82>

0000ff7a <flash_led>:
#if defined (LED)
#define LED_PORT PORTD
#define LED_PIN 7
#include <util\delay.h>
void flash_led(uint8_t num)
{
    ff7a:	cf 93       	push	r28
    ff7c:	df 93       	push	r29

	for( int i = 0; i < num ; i++)
    ff7e:	c8 2f       	mov	r28, r24
    ff80:	d0 e0       	ldi	r29, 0x00	; 0
    ff82:	1c 16       	cp	r1, r28
    ff84:	1d 06       	cpc	r1, r29
    ff86:	0c f5       	brge	.+66     	; 0xffca <flash_led+0x50>
    ff88:	60 e0       	ldi	r22, 0x00	; 0
    ff8a:	70 e0       	ldi	r23, 0x00	; 0
	{
		LED_PORT &= ~(1 << LED_PIN);
    ff8c:	eb e2       	ldi	r30, 0x2B	; 43
    ff8e:	f0 e0       	ldi	r31, 0x00	; 0
    ff90:	a8 e8       	ldi	r26, 0x88	; 136
    ff92:	b3 e1       	ldi	r27, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    ff94:	40 e9       	ldi	r20, 0x90	; 144
    ff96:	51 e0       	ldi	r21, 0x01	; 1
    ff98:	80 81       	ld	r24, Z
    ff9a:	8f 77       	andi	r24, 0x7F	; 127
    ff9c:	80 83       	st	Z, r24
    ff9e:	9d 01       	movw	r18, r26
    ffa0:	ca 01       	movw	r24, r20
    ffa2:	01 97       	sbiw	r24, 0x01	; 1
    ffa4:	f1 f7       	brne	.-4      	; 0xffa2 <flash_led+0x28>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    ffa6:	21 50       	subi	r18, 0x01	; 1
    ffa8:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    ffaa:	d1 f7       	brne	.-12     	; 0xffa0 <flash_led+0x26>
		_delay_ms(500);
		LED_PORT |= (1 << LED_PIN);
    ffac:	80 81       	ld	r24, Z
    ffae:	80 68       	ori	r24, 0x80	; 128
    ffb0:	80 83       	st	Z, r24
    ffb2:	9d 01       	movw	r18, r26
    ffb4:	ca 01       	movw	r24, r20
    ffb6:	01 97       	sbiw	r24, 0x01	; 1
    ffb8:	f1 f7       	brne	.-4      	; 0xffb6 <flash_led+0x3c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    ffba:	21 50       	subi	r18, 0x01	; 1
    ffbc:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    ffbe:	d1 f7       	brne	.-12     	; 0xffb4 <flash_led+0x3a>
#define LED_PIN 7
#include <util\delay.h>
void flash_led(uint8_t num)
{

	for( int i = 0; i < num ; i++)
    ffc0:	6f 5f       	subi	r22, 0xFF	; 255
    ffc2:	7f 4f       	sbci	r23, 0xFF	; 255
    ffc4:	6c 17       	cp	r22, r28
    ffc6:	7d 07       	cpc	r23, r29
    ffc8:	3c f3       	brlt	.-50     	; 0xff98 <flash_led+0x1e>
		LED_PORT |= (1 << LED_PIN);
		_delay_ms(500);

	}
	
}
    ffca:	df 91       	pop	r29
    ffcc:	cf 91       	pop	r28
    ffce:	08 95       	ret
