
usart_lib_maker.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  0000092e  000009c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000092e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  0080010e  0080010e  000009d0  2**0
                  ALLOC
  3 .debug_aranges 00000100  00000000  00000000  000009d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000194  00000000  00000000  00000ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000aa5  00000000  00000000  00000c64  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000621  00000000  00000000  00001709  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006a1  00000000  00000000  00001d2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000120  00000000  00000000  000023cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000243  00000000  00000000  000024ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001a0  00000000  00000000  0000272f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__ctors_end>
   4:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
   8:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
   c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
  10:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
  14:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
  18:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
  1c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
  20:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
  24:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
  28:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
  2c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
  30:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
  34:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__vector_13>
  38:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
  3c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
  40:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
  44:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
  48:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
  4c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
  50:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
  54:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
  58:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>

0000005c <__c.1524>:
  5c:	75 73 61 72 74 20 55 4e 4b 4e 4f 57 4e 20 45 52     usart UNKNOWN ER
  6c:	52 4f 52 0d 00                                      ROR..

00000071 <__c.1521>:
  71:	75 73 61 72 74 20 42 55 46 46 45 52 5f 53 49 5a     usart BUFFER_SIZ
  81:	45 20 45 52 52 4f 52 0d 00                          E ERROR..

0000008a <__c.1517>:
  8a:	75 73 61 72 74 20 42 55 46 46 45 52 5f 4e 55 4c     usart BUFFER_NUL
  9a:	4c 5f 50 4f 49 4e 54 45 52 20 45 52 52 4f 52 0d     L_POINTER ERROR.
	...

000000ab <__c.1519>:
  ab:	49 53 52 20 66 69 66 6f 5f 70 75 74 5f 62 79 74     ISR fifo_put_byt
  bb:	65 20 45 72 72 6f 72 0d 00                          e Error..

000000c4 <__ctors_end>:
  c4:	11 24       	eor	r1, r1
  c6:	1f be       	out	0x3f, r1	; 63
  c8:	cf ef       	ldi	r28, 0xFF	; 255
  ca:	d4 e0       	ldi	r29, 0x04	; 4
  cc:	de bf       	out	0x3e, r29	; 62
  ce:	cd bf       	out	0x3d, r28	; 61

000000d0 <__do_copy_data>:
  d0:	11 e0       	ldi	r17, 0x01	; 1
  d2:	a0 e0       	ldi	r26, 0x00	; 0
  d4:	b1 e0       	ldi	r27, 0x01	; 1
  d6:	ee e2       	ldi	r30, 0x2E	; 46
  d8:	f9 e0       	ldi	r31, 0x09	; 9
  da:	02 c0       	rjmp	.+4      	; 0xe0 <.do_copy_data_start>

000000dc <.do_copy_data_loop>:
  dc:	05 90       	lpm	r0, Z+
  de:	0d 92       	st	X+, r0

000000e0 <.do_copy_data_start>:
  e0:	ae 30       	cpi	r26, 0x0E	; 14
  e2:	b1 07       	cpc	r27, r17
  e4:	d9 f7       	brne	.-10     	; 0xdc <.do_copy_data_loop>

000000e6 <__do_clear_bss>:
  e6:	11 e0       	ldi	r17, 0x01	; 1
  e8:	ae e0       	ldi	r26, 0x0E	; 14
  ea:	b1 e0       	ldi	r27, 0x01	; 1
  ec:	01 c0       	rjmp	.+2      	; 0xf0 <.do_clear_bss_start>

000000ee <.do_clear_bss_loop>:
  ee:	1d 92       	st	X+, r1

000000f0 <.do_clear_bss_start>:
  f0:	ad 31       	cpi	r26, 0x1D	; 29
  f2:	b1 07       	cpc	r27, r17
  f4:	e1 f7       	brne	.-8      	; 0xee <.do_clear_bss_loop>
  f6:	0e 94 81 00 	call	0x102	; 0x102 <main>
  fa:	0c 94 95 04 	jmp	0x92a	; 0x92a <_exit>

000000fe <__bad_interrupt>:
  fe:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000102 <main>:
int main()
{

}
 102:	80 e0       	ldi	r24, 0x00	; 0
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	08 95       	ret

00000108 <usart_error>:
#include "usart.h"

void usart_error(uint8_t error_num)
{

	switch(error_num)
 108:	88 23       	and	r24, r24
 10a:	19 f0       	breq	.+6      	; 0x112 <usart_error+0xa>
 10c:	81 30       	cpi	r24, 0x01	; 1
 10e:	49 f4       	brne	.+18     	; 0x122 <usart_error+0x1a>
 110:	04 c0       	rjmp	.+8      	; 0x11a <usart_error+0x12>
	{
		case(BUFFER_NULL_POINTER):
			printf_P(PSTR("usart BUFFER_NULL_POINTER ERROR\r"));
 112:	00 d0       	rcall	.+0      	; 0x114 <usart_error+0xc>
 114:	8a e8       	ldi	r24, 0x8A	; 138
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	07 c0       	rjmp	.+14     	; 0x128 <usart_error+0x20>
			break;
		case(BUFFER_SIZE):
			printf_P(PSTR("usart BUFFER_SIZE ERROR\r"));
 11a:	00 d0       	rcall	.+0      	; 0x11c <usart_error+0x14>
 11c:	81 e7       	ldi	r24, 0x71	; 113
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	03 c0       	rjmp	.+6      	; 0x128 <usart_error+0x20>
			break;
		default: 
			printf_P(PSTR("usart UNKNOWN ERROR\r"));
 122:	00 d0       	rcall	.+0      	; 0x124 <usart_error+0x1c>
 124:	8c e5       	ldi	r24, 0x5C	; 92
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	ed b7       	in	r30, 0x3d	; 61
 12a:	fe b7       	in	r31, 0x3e	; 62
 12c:	92 83       	std	Z+2, r25	; 0x02
 12e:	81 83       	std	Z+1, r24	; 0x01
 130:	0e 94 85 01 	call	0x30a	; 0x30a <printf_P>
 134:	0f 90       	pop	r0
 136:	0f 90       	pop	r0
 138:	08 95       	ret

0000013a <usart_set_buffer>:
	// Put char in buffer
	if (!fifo_put_byte(&buffer, b) )printf_P(PSTR("ISR fifo_put_byte Error\r")) ;	
}

uint8_t usart_set_buffer(struct fifo_struct fifo)
{
 13a:	0f 93       	push	r16
 13c:	1f 93       	push	r17
 13e:	df 93       	push	r29
 140:	cf 93       	push	r28
 142:	cd b7       	in	r28, 0x3d	; 61
 144:	de b7       	in	r29, 0x3e	; 62
 146:	29 97       	sbiw	r28, 0x09	; 9
 148:	0f b6       	in	r0, 0x3f	; 63
 14a:	f8 94       	cli
 14c:	de bf       	out	0x3e, r29	; 62
 14e:	0f be       	out	0x3f, r0	; 63
 150:	cd bf       	out	0x3d, r28	; 61
 152:	09 83       	std	Y+1, r16	; 0x01
 154:	1a 83       	std	Y+2, r17	; 0x02
 156:	2b 83       	std	Y+3, r18	; 0x03
 158:	3c 83       	std	Y+4, r19	; 0x04
 15a:	4d 83       	std	Y+5, r20	; 0x05
 15c:	5e 83       	std	Y+6, r21	; 0x06
 15e:	6f 83       	std	Y+7, r22	; 0x07
 160:	78 87       	std	Y+8, r23	; 0x08
 162:	89 87       	std	Y+9, r24	; 0x09

	buffer = fifo;
 164:	ae e0       	ldi	r26, 0x0E	; 14
 166:	b1 e0       	ldi	r27, 0x01	; 1
 168:	fe 01       	movw	r30, r28
 16a:	31 96       	adiw	r30, 0x01	; 1
 16c:	89 e0       	ldi	r24, 0x09	; 9
 16e:	01 90       	ld	r0, Z+
 170:	0d 92       	st	X+, r0
 172:	81 50       	subi	r24, 0x01	; 1
 174:	e1 f7       	brne	.-8      	; 0x16e <usart_set_buffer+0x34>
		usart_error(BUFFER_SIZE);
		return (0);
	}*/

	return(1);
}
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	29 96       	adiw	r28, 0x09	; 9
 17a:	0f b6       	in	r0, 0x3f	; 63
 17c:	f8 94       	cli
 17e:	de bf       	out	0x3e, r29	; 62
 180:	0f be       	out	0x3f, r0	; 63
 182:	cd bf       	out	0x3d, r28	; 61
 184:	cf 91       	pop	r28
 186:	df 91       	pop	r29
 188:	1f 91       	pop	r17
 18a:	0f 91       	pop	r16
 18c:	08 95       	ret

0000018e <usart_init>:

// Keep this in the same file as the usart_put_char function
FILE mystdout = FDEV_SETUP_STREAM(usart_put_char, NULL, _FDEV_SETUP_WRITE);

void usart_init(uint32_t baudrate)
{
 18e:	9b 01       	movw	r18, r22
 190:	ac 01       	movw	r20, r24
   	stdout = &mystdout;    //set the output stream 
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	91 e0       	ldi	r25, 0x01	; 1
 196:	90 93 1a 01 	sts	0x011A, r25
 19a:	80 93 19 01 	sts	0x0119, r24
		
	//#if defined(Butterfly) 
	//butterfly_init();
	//#endif

	sei(); // Set the Global Interrupt Enable flag
 19e:	78 94       	sei

	// Set Baud registers with values from <util\setbaud.h> in SmileyUSART.h
	USART_BAUD_RATE_HIGH = (F_CPU/(baudrate*16L)-1) >> 8;
 1a0:	64 e0       	ldi	r22, 0x04	; 4
 1a2:	22 0f       	add	r18, r18
 1a4:	33 1f       	adc	r19, r19
 1a6:	44 1f       	adc	r20, r20
 1a8:	55 1f       	adc	r21, r21
 1aa:	6a 95       	dec	r22
 1ac:	d1 f7       	brne	.-12     	; 0x1a2 <usart_init+0x14>
 1ae:	60 e4       	ldi	r22, 0x40	; 64
 1b0:	72 e4       	ldi	r23, 0x42	; 66
 1b2:	8f e0       	ldi	r24, 0x0F	; 15
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	0e 94 3c 04 	call	0x878	; 0x878 <__udivmodsi4>
 1ba:	c9 01       	movw	r24, r18
 1bc:	da 01       	movw	r26, r20
 1be:	01 97       	sbiw	r24, 0x01	; 1
 1c0:	a1 09       	sbc	r26, r1
 1c2:	b1 09       	sbc	r27, r1
 1c4:	29 2f       	mov	r18, r25
 1c6:	3a 2f       	mov	r19, r26
 1c8:	4b 2f       	mov	r20, r27
 1ca:	55 27       	eor	r21, r21
 1cc:	01 96       	adiw	r24, 0x01	; 1
 1ce:	a1 1d       	adc	r26, r1
 1d0:	b1 1d       	adc	r27, r1
 1d2:	20 93 c5 00 	sts	0x00C5, r18
	USART_BAUD_RATE_LOW = (uint8_t)(F_CPU/(baudrate*16L)-1);
 1d6:	81 50       	subi	r24, 0x01	; 1
 1d8:	80 93 c4 00 	sts	0x00C4, r24

	// Enable receiver and transmitter
	USART_CONTROL_STATUS_REG_B = (1 << RXCIE) | (1 << USART_ENABLE_RECEIVER) | (1 << USART_ENABLE_TRANSMITTER);
 1dc:	88 e9       	ldi	r24, 0x98	; 152
 1de:	80 93 c1 00 	sts	0x00C1, r24
	// for the Butterfly reuse the Atmel code for the USART in the intialization process
#else
   #error "No USART definition for MCU in USARTInit"
#endif 

}
 1e2:	08 95       	ret

000001e4 <__vector_13>:
#include "usart.h"

// Used for intial testing if ISR
//extern volatile uint8_t usart_flag;
ISR(USART0_RX_vect)
{
 1e4:	1f 92       	push	r1
 1e6:	0f 92       	push	r0
 1e8:	0f b6       	in	r0, 0x3f	; 63
 1ea:	0f 92       	push	r0
 1ec:	11 24       	eor	r1, r1
 1ee:	2f 93       	push	r18
 1f0:	3f 93       	push	r19
 1f2:	4f 93       	push	r20
 1f4:	5f 93       	push	r21
 1f6:	6f 93       	push	r22
 1f8:	7f 93       	push	r23
 1fa:	8f 93       	push	r24
 1fc:	9f 93       	push	r25
 1fe:	af 93       	push	r26
 200:	bf 93       	push	r27
 202:	ef 93       	push	r30
 204:	ff 93       	push	r31
	uint8_t b = UDR;
 206:	60 91 c6 00 	lds	r22, 0x00C6
	// Used in testing
	// First test ping back received byte.
	//usart_send_byte(b);

	// Put char in buffer
	if (!fifo_put_byte(&buffer, b) )printf_P(PSTR("ISR fifo_put_byte Error\r")) ;	
 20a:	8e e0       	ldi	r24, 0x0E	; 14
 20c:	91 e0       	ldi	r25, 0x01	; 1
 20e:	0e 94 62 01 	call	0x2c4	; 0x2c4 <fifo_put_byte>
 212:	88 23       	and	r24, r24
 214:	59 f4       	brne	.+22     	; 0x22c <__vector_13+0x48>
 216:	00 d0       	rcall	.+0      	; 0x218 <__vector_13+0x34>
 218:	8b ea       	ldi	r24, 0xAB	; 171
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	ed b7       	in	r30, 0x3d	; 61
 21e:	fe b7       	in	r31, 0x3e	; 62
 220:	92 83       	std	Z+2, r25	; 0x02
 222:	81 83       	std	Z+1, r24	; 0x01
 224:	0e 94 85 01 	call	0x30a	; 0x30a <printf_P>
 228:	0f 90       	pop	r0
 22a:	0f 90       	pop	r0
}
 22c:	ff 91       	pop	r31
 22e:	ef 91       	pop	r30
 230:	bf 91       	pop	r27
 232:	af 91       	pop	r26
 234:	9f 91       	pop	r25
 236:	8f 91       	pop	r24
 238:	7f 91       	pop	r23
 23a:	6f 91       	pop	r22
 23c:	5f 91       	pop	r21
 23e:	4f 91       	pop	r20
 240:	3f 91       	pop	r19
 242:	2f 91       	pop	r18
 244:	0f 90       	pop	r0
 246:	0f be       	out	0x3f, r0	; 63
 248:	0f 90       	pop	r0
 24a:	1f 90       	pop	r1
 24c:	18 95       	reti

0000024e <usart_put_char>:

#include "usart.h"

 
int usart_put_char(char c, FILE *stream) 
{ 
 24e:	1f 93       	push	r17
 250:	18 2f       	mov	r17, r24
	if (c == '\n') usart_put_char('\r', stream);
 252:	8a 30       	cpi	r24, 0x0A	; 10
 254:	19 f4       	brne	.+6      	; 0x25c <usart_put_char+0xe>
 256:	8d e0       	ldi	r24, 0x0D	; 13
 258:	0e 94 27 01 	call	0x24e	; 0x24e <usart_put_char>
   	loop_until_bit_is_set(UCSRA, UDRE); // wait for UDR to be clear 
 25c:	80 91 c0 00 	lds	r24, 0x00C0
 260:	85 ff       	sbrs	r24, 5
 262:	fc cf       	rjmp	.-8      	; 0x25c <usart_put_char+0xe>
   	UDR = c;    //send the character 
 264:	10 93 c6 00 	sts	0x00C6, r17
   	return 0; 
} 
 268:	80 e0       	ldi	r24, 0x00	; 0
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	1f 91       	pop	r17
 26e:	08 95       	ret

00000270 <usart_receive_byte>:

#include "usart.h"

uint8_t usart_receive_byte( void )
{
	wdt_reset(); /// reset the watchdog timer, if it is set
 270:	a8 95       	wdr
	/// Wait for data to be received 
	while ( !(USART_CONTROL_STATUS_REG_A & (1<<USART_RECEIVE_COMPLETE)) );	
 272:	80 91 c0 00 	lds	r24, 0x00C0
 276:	87 ff       	sbrs	r24, 7
 278:	fc cf       	rjmp	.-8      	; 0x272 <usart_receive_byte+0x2>
	/// Get and return received data from buffer 
	return USART_DATA_REG;
 27a:	80 91 c6 00 	lds	r24, 0x00C6
}
 27e:	08 95       	ret

00000280 <usart_send_byte>:
 */

#include "usart.h"

void usart_send_byte( uint8_t data )
{
 280:	98 2f       	mov	r25, r24
	wdt_reset(); /// reset the watchdog timer, if it is set
 282:	a8 95       	wdr
	/// Wait for empty transmit buffer 
	while ( !( USART_CONTROL_STATUS_REG_A & (1<<USART_READY_TO_TRANSMIT)) );
 284:	80 91 c0 00 	lds	r24, 0x00C0
 288:	85 ff       	sbrs	r24, 5
 28a:	fc cf       	rjmp	.-8      	; 0x284 <usart_send_byte+0x4>
	/// Put data into buffer, sends the data
	USART_DATA_REG = data;
 28c:	90 93 c6 00 	sts	0x00C6, r25
}
 290:	08 95       	ret

00000292 <usart_send_pmstring>:
 *  POSSIBILITY OF SUCH DAMAGE.
 */
#include "usart.h"

void usart_send_pmstring(const char *FlashString)
{
 292:	0f 93       	push	r16
 294:	1f 93       	push	r17
 296:	cf 93       	push	r28
 298:	df 93       	push	r29
 29a:	8c 01       	movw	r16, r24
 29c:	c0 e0       	ldi	r28, 0x00	; 0
 29e:	d0 e0       	ldi	r29, 0x00	; 0
 2a0:	03 c0       	rjmp	.+6      	; 0x2a8 <usart_send_pmstring+0x16>
	/// '\0' is 'null' and terminates C strings
	/// The 80 prevents too much overrun if we get a bad pointer
	/// and it limits the string size	
	for( i = 0 ; pgm_read_byte(&FlashString[i]) && i < 80; i++) 
	{
			usart_send_byte(pgm_read_byte(&FlashString[i]));
 2a2:	0e 94 40 01 	call	0x280	; 0x280 <usart_send_byte>

	/// The 'for' logic terminates if the byte is '\0' or if i = 60.
	/// '\0' is 'null' and terminates C strings
	/// The 80 prevents too much overrun if we get a bad pointer
	/// and it limits the string size	
	for( i = 0 ; pgm_read_byte(&FlashString[i]) && i < 80; i++) 
 2a6:	21 96       	adiw	r28, 0x01	; 1
 2a8:	f8 01       	movw	r30, r16
 2aa:	ec 0f       	add	r30, r28
 2ac:	fd 1f       	adc	r31, r29
 2ae:	84 91       	lpm	r24, Z+
 2b0:	88 23       	and	r24, r24
 2b2:	19 f0       	breq	.+6      	; 0x2ba <usart_send_pmstring+0x28>
 2b4:	c0 35       	cpi	r28, 0x50	; 80
 2b6:	d1 05       	cpc	r29, r1
 2b8:	a1 f7       	brne	.-24     	; 0x2a2 <usart_send_pmstring+0x10>
	{
			usart_send_byte(pgm_read_byte(&FlashString[i]));
	}
 2ba:	df 91       	pop	r29
 2bc:	cf 91       	pop	r28
 2be:	1f 91       	pop	r17
 2c0:	0f 91       	pop	r16
 2c2:	08 95       	ret

000002c4 <fifo_put_byte>:
	\date 10/22/10
	\version 1.01
*/
/************************************************************/
uint8_t fifo_put_byte(struct fifo_struct *fifo, uint8_t b)
{
 2c4:	cf 93       	push	r28
 2c6:	df 93       	push	r29
 2c8:	ec 01       	movw	r28, r24
 2ca:	46 2f       	mov	r20, r22
	//printf("fifo->length: %d fifo->size: %d\r",fifo->length,fifo->size);

	// Does the fifo have available space?
	if(fifo->length < fifo->size)
 2cc:	2e 81       	ldd	r18, Y+6	; 0x06
 2ce:	3f 81       	ldd	r19, Y+7	; 0x07
 2d0:	6a 81       	ldd	r22, Y+2	; 0x02
 2d2:	7b 81       	ldd	r23, Y+3	; 0x03
 2d4:	26 17       	cp	r18, r22
 2d6:	37 07       	cpc	r19, r23
 2d8:	90 f4       	brcc	.+36     	; 0x2fe <fifo_put_byte+0x3a>
	{
		// Put the byte at the index of the fifo
		fifo->ptr[(fifo->index + fifo->length) % fifo->size] = b;
 2da:	8c 81       	ldd	r24, Y+4	; 0x04
 2dc:	9d 81       	ldd	r25, Y+5	; 0x05
 2de:	82 0f       	add	r24, r18
 2e0:	93 1f       	adc	r25, r19
 2e2:	0e 94 28 04 	call	0x850	; 0x850 <__udivmodhi4>
 2e6:	e8 81       	ld	r30, Y
 2e8:	f9 81       	ldd	r31, Y+1	; 0x01
 2ea:	e8 0f       	add	r30, r24
 2ec:	f9 1f       	adc	r31, r25
 2ee:	40 83       	st	Z, r20
		// Increment the length
		fifo->length++;
 2f0:	8e 81       	ldd	r24, Y+6	; 0x06
 2f2:	9f 81       	ldd	r25, Y+7	; 0x07
 2f4:	01 96       	adiw	r24, 0x01	; 1
 2f6:	9f 83       	std	Y+7, r25	; 0x07
 2f8:	8e 83       	std	Y+6, r24	; 0x06
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	03 c0       	rjmp	.+6      	; 0x304 <fifo_put_byte+0x40>
		
		return 1; // return success
	}
	else
	{
		fifo->error = FIFO_ATTEMPT_PUT_WHEN_FULL;
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	88 87       	std	Y+8, r24	; 0x08
 302:	80 e0       	ldi	r24, 0x00	; 0
 		return 0; // return failure
	}

}
 304:	df 91       	pop	r29
 306:	cf 91       	pop	r28
 308:	08 95       	ret

0000030a <printf_P>:
 30a:	a0 e0       	ldi	r26, 0x00	; 0
 30c:	b0 e0       	ldi	r27, 0x00	; 0
 30e:	eb e8       	ldi	r30, 0x8B	; 139
 310:	f1 e0       	ldi	r31, 0x01	; 1
 312:	0c 94 6e 04 	jmp	0x8dc	; 0x8dc <__prologue_saves__+0x20>
 316:	fe 01       	movw	r30, r28
 318:	35 96       	adiw	r30, 0x05	; 5
 31a:	61 91       	ld	r22, Z+
 31c:	71 91       	ld	r23, Z+
 31e:	a0 91 19 01 	lds	r26, 0x0119
 322:	b0 91 1a 01 	lds	r27, 0x011A
 326:	13 96       	adiw	r26, 0x03	; 3
 328:	8c 91       	ld	r24, X
 32a:	13 97       	sbiw	r26, 0x03	; 3
 32c:	88 60       	ori	r24, 0x08	; 8
 32e:	13 96       	adiw	r26, 0x03	; 3
 330:	8c 93       	st	X, r24
 332:	80 91 19 01 	lds	r24, 0x0119
 336:	90 91 1a 01 	lds	r25, 0x011A
 33a:	af 01       	movw	r20, r30
 33c:	0e 94 ab 01 	call	0x356	; 0x356 <vfprintf>
 340:	e0 91 19 01 	lds	r30, 0x0119
 344:	f0 91 1a 01 	lds	r31, 0x011A
 348:	23 81       	ldd	r18, Z+3	; 0x03
 34a:	27 7f       	andi	r18, 0xF7	; 247
 34c:	23 83       	std	Z+3, r18	; 0x03
 34e:	20 96       	adiw	r28, 0x00	; 0
 350:	e2 e0       	ldi	r30, 0x02	; 2
 352:	0c 94 8a 04 	jmp	0x914	; 0x914 <__epilogue_restores__+0x20>

00000356 <vfprintf>:
 356:	ab e0       	ldi	r26, 0x0B	; 11
 358:	b0 e0       	ldi	r27, 0x00	; 0
 35a:	e1 eb       	ldi	r30, 0xB1	; 177
 35c:	f1 e0       	ldi	r31, 0x01	; 1
 35e:	0c 94 5e 04 	jmp	0x8bc	; 0x8bc <__prologue_saves__>
 362:	3c 01       	movw	r6, r24
 364:	2b 01       	movw	r4, r22
 366:	5a 01       	movw	r10, r20
 368:	fc 01       	movw	r30, r24
 36a:	17 82       	std	Z+7, r1	; 0x07
 36c:	16 82       	std	Z+6, r1	; 0x06
 36e:	83 81       	ldd	r24, Z+3	; 0x03
 370:	81 fd       	sbrc	r24, 1
 372:	03 c0       	rjmp	.+6      	; 0x37a <vfprintf+0x24>
 374:	6f ef       	ldi	r22, 0xFF	; 255
 376:	7f ef       	ldi	r23, 0xFF	; 255
 378:	c6 c1       	rjmp	.+908    	; 0x706 <__stack+0x207>
 37a:	9a e0       	ldi	r25, 0x0A	; 10
 37c:	89 2e       	mov	r8, r25
 37e:	1e 01       	movw	r2, r28
 380:	08 94       	sec
 382:	21 1c       	adc	r2, r1
 384:	31 1c       	adc	r3, r1
 386:	f3 01       	movw	r30, r6
 388:	23 81       	ldd	r18, Z+3	; 0x03
 38a:	f2 01       	movw	r30, r4
 38c:	23 fd       	sbrc	r18, 3
 38e:	85 91       	lpm	r24, Z+
 390:	23 ff       	sbrs	r18, 3
 392:	81 91       	ld	r24, Z+
 394:	2f 01       	movw	r4, r30
 396:	88 23       	and	r24, r24
 398:	09 f4       	brne	.+2      	; 0x39c <vfprintf+0x46>
 39a:	b2 c1       	rjmp	.+868    	; 0x700 <__stack+0x201>
 39c:	85 32       	cpi	r24, 0x25	; 37
 39e:	39 f4       	brne	.+14     	; 0x3ae <vfprintf+0x58>
 3a0:	23 fd       	sbrc	r18, 3
 3a2:	85 91       	lpm	r24, Z+
 3a4:	23 ff       	sbrs	r18, 3
 3a6:	81 91       	ld	r24, Z+
 3a8:	2f 01       	movw	r4, r30
 3aa:	85 32       	cpi	r24, 0x25	; 37
 3ac:	29 f4       	brne	.+10     	; 0x3b8 <vfprintf+0x62>
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	b3 01       	movw	r22, r6
 3b2:	0e 94 9e 03 	call	0x73c	; 0x73c <fputc>
 3b6:	e7 cf       	rjmp	.-50     	; 0x386 <vfprintf+0x30>
 3b8:	98 2f       	mov	r25, r24
 3ba:	ff 24       	eor	r15, r15
 3bc:	ee 24       	eor	r14, r14
 3be:	99 24       	eor	r9, r9
 3c0:	ff e1       	ldi	r31, 0x1F	; 31
 3c2:	ff 15       	cp	r31, r15
 3c4:	d0 f0       	brcs	.+52     	; 0x3fa <vfprintf+0xa4>
 3c6:	9b 32       	cpi	r25, 0x2B	; 43
 3c8:	69 f0       	breq	.+26     	; 0x3e4 <vfprintf+0x8e>
 3ca:	9c 32       	cpi	r25, 0x2C	; 44
 3cc:	28 f4       	brcc	.+10     	; 0x3d8 <vfprintf+0x82>
 3ce:	90 32       	cpi	r25, 0x20	; 32
 3d0:	59 f0       	breq	.+22     	; 0x3e8 <vfprintf+0x92>
 3d2:	93 32       	cpi	r25, 0x23	; 35
 3d4:	91 f4       	brne	.+36     	; 0x3fa <vfprintf+0xa4>
 3d6:	0e c0       	rjmp	.+28     	; 0x3f4 <vfprintf+0x9e>
 3d8:	9d 32       	cpi	r25, 0x2D	; 45
 3da:	49 f0       	breq	.+18     	; 0x3ee <vfprintf+0x98>
 3dc:	90 33       	cpi	r25, 0x30	; 48
 3de:	69 f4       	brne	.+26     	; 0x3fa <vfprintf+0xa4>
 3e0:	41 e0       	ldi	r20, 0x01	; 1
 3e2:	24 c0       	rjmp	.+72     	; 0x42c <vfprintf+0xd6>
 3e4:	52 e0       	ldi	r21, 0x02	; 2
 3e6:	f5 2a       	or	r15, r21
 3e8:	84 e0       	ldi	r24, 0x04	; 4
 3ea:	f8 2a       	or	r15, r24
 3ec:	28 c0       	rjmp	.+80     	; 0x43e <vfprintf+0xe8>
 3ee:	98 e0       	ldi	r25, 0x08	; 8
 3f0:	f9 2a       	or	r15, r25
 3f2:	25 c0       	rjmp	.+74     	; 0x43e <vfprintf+0xe8>
 3f4:	e0 e1       	ldi	r30, 0x10	; 16
 3f6:	fe 2a       	or	r15, r30
 3f8:	22 c0       	rjmp	.+68     	; 0x43e <vfprintf+0xe8>
 3fa:	f7 fc       	sbrc	r15, 7
 3fc:	29 c0       	rjmp	.+82     	; 0x450 <vfprintf+0xfa>
 3fe:	89 2f       	mov	r24, r25
 400:	80 53       	subi	r24, 0x30	; 48
 402:	8a 30       	cpi	r24, 0x0A	; 10
 404:	70 f4       	brcc	.+28     	; 0x422 <vfprintf+0xcc>
 406:	f6 fe       	sbrs	r15, 6
 408:	05 c0       	rjmp	.+10     	; 0x414 <vfprintf+0xbe>
 40a:	98 9c       	mul	r9, r8
 40c:	90 2c       	mov	r9, r0
 40e:	11 24       	eor	r1, r1
 410:	98 0e       	add	r9, r24
 412:	15 c0       	rjmp	.+42     	; 0x43e <vfprintf+0xe8>
 414:	e8 9c       	mul	r14, r8
 416:	e0 2c       	mov	r14, r0
 418:	11 24       	eor	r1, r1
 41a:	e8 0e       	add	r14, r24
 41c:	f0 e2       	ldi	r31, 0x20	; 32
 41e:	ff 2a       	or	r15, r31
 420:	0e c0       	rjmp	.+28     	; 0x43e <vfprintf+0xe8>
 422:	9e 32       	cpi	r25, 0x2E	; 46
 424:	29 f4       	brne	.+10     	; 0x430 <vfprintf+0xda>
 426:	f6 fc       	sbrc	r15, 6
 428:	6b c1       	rjmp	.+726    	; 0x700 <__stack+0x201>
 42a:	40 e4       	ldi	r20, 0x40	; 64
 42c:	f4 2a       	or	r15, r20
 42e:	07 c0       	rjmp	.+14     	; 0x43e <vfprintf+0xe8>
 430:	9c 36       	cpi	r25, 0x6C	; 108
 432:	19 f4       	brne	.+6      	; 0x43a <vfprintf+0xe4>
 434:	50 e8       	ldi	r21, 0x80	; 128
 436:	f5 2a       	or	r15, r21
 438:	02 c0       	rjmp	.+4      	; 0x43e <vfprintf+0xe8>
 43a:	98 36       	cpi	r25, 0x68	; 104
 43c:	49 f4       	brne	.+18     	; 0x450 <vfprintf+0xfa>
 43e:	f2 01       	movw	r30, r4
 440:	23 fd       	sbrc	r18, 3
 442:	95 91       	lpm	r25, Z+
 444:	23 ff       	sbrs	r18, 3
 446:	91 91       	ld	r25, Z+
 448:	2f 01       	movw	r4, r30
 44a:	99 23       	and	r25, r25
 44c:	09 f0       	breq	.+2      	; 0x450 <vfprintf+0xfa>
 44e:	b8 cf       	rjmp	.-144    	; 0x3c0 <vfprintf+0x6a>
 450:	89 2f       	mov	r24, r25
 452:	85 54       	subi	r24, 0x45	; 69
 454:	83 30       	cpi	r24, 0x03	; 3
 456:	18 f0       	brcs	.+6      	; 0x45e <vfprintf+0x108>
 458:	80 52       	subi	r24, 0x20	; 32
 45a:	83 30       	cpi	r24, 0x03	; 3
 45c:	38 f4       	brcc	.+14     	; 0x46c <vfprintf+0x116>
 45e:	44 e0       	ldi	r20, 0x04	; 4
 460:	50 e0       	ldi	r21, 0x00	; 0
 462:	a4 0e       	add	r10, r20
 464:	b5 1e       	adc	r11, r21
 466:	5f e3       	ldi	r21, 0x3F	; 63
 468:	59 83       	std	Y+1, r21	; 0x01
 46a:	0f c0       	rjmp	.+30     	; 0x48a <vfprintf+0x134>
 46c:	93 36       	cpi	r25, 0x63	; 99
 46e:	31 f0       	breq	.+12     	; 0x47c <vfprintf+0x126>
 470:	93 37       	cpi	r25, 0x73	; 115
 472:	79 f0       	breq	.+30     	; 0x492 <vfprintf+0x13c>
 474:	93 35       	cpi	r25, 0x53	; 83
 476:	09 f0       	breq	.+2      	; 0x47a <vfprintf+0x124>
 478:	56 c0       	rjmp	.+172    	; 0x526 <__stack+0x27>
 47a:	20 c0       	rjmp	.+64     	; 0x4bc <vfprintf+0x166>
 47c:	f5 01       	movw	r30, r10
 47e:	80 81       	ld	r24, Z
 480:	89 83       	std	Y+1, r24	; 0x01
 482:	42 e0       	ldi	r20, 0x02	; 2
 484:	50 e0       	ldi	r21, 0x00	; 0
 486:	a4 0e       	add	r10, r20
 488:	b5 1e       	adc	r11, r21
 48a:	61 01       	movw	r12, r2
 48c:	01 e0       	ldi	r16, 0x01	; 1
 48e:	10 e0       	ldi	r17, 0x00	; 0
 490:	12 c0       	rjmp	.+36     	; 0x4b6 <vfprintf+0x160>
 492:	f5 01       	movw	r30, r10
 494:	c0 80       	ld	r12, Z
 496:	d1 80       	ldd	r13, Z+1	; 0x01
 498:	f6 fc       	sbrc	r15, 6
 49a:	03 c0       	rjmp	.+6      	; 0x4a2 <vfprintf+0x14c>
 49c:	6f ef       	ldi	r22, 0xFF	; 255
 49e:	7f ef       	ldi	r23, 0xFF	; 255
 4a0:	02 c0       	rjmp	.+4      	; 0x4a6 <vfprintf+0x150>
 4a2:	69 2d       	mov	r22, r9
 4a4:	70 e0       	ldi	r23, 0x00	; 0
 4a6:	42 e0       	ldi	r20, 0x02	; 2
 4a8:	50 e0       	ldi	r21, 0x00	; 0
 4aa:	a4 0e       	add	r10, r20
 4ac:	b5 1e       	adc	r11, r21
 4ae:	c6 01       	movw	r24, r12
 4b0:	0e 94 93 03 	call	0x726	; 0x726 <strnlen>
 4b4:	8c 01       	movw	r16, r24
 4b6:	5f e7       	ldi	r21, 0x7F	; 127
 4b8:	f5 22       	and	r15, r21
 4ba:	14 c0       	rjmp	.+40     	; 0x4e4 <vfprintf+0x18e>
 4bc:	f5 01       	movw	r30, r10
 4be:	c0 80       	ld	r12, Z
 4c0:	d1 80       	ldd	r13, Z+1	; 0x01
 4c2:	f6 fc       	sbrc	r15, 6
 4c4:	03 c0       	rjmp	.+6      	; 0x4cc <vfprintf+0x176>
 4c6:	6f ef       	ldi	r22, 0xFF	; 255
 4c8:	7f ef       	ldi	r23, 0xFF	; 255
 4ca:	02 c0       	rjmp	.+4      	; 0x4d0 <vfprintf+0x17a>
 4cc:	69 2d       	mov	r22, r9
 4ce:	70 e0       	ldi	r23, 0x00	; 0
 4d0:	42 e0       	ldi	r20, 0x02	; 2
 4d2:	50 e0       	ldi	r21, 0x00	; 0
 4d4:	a4 0e       	add	r10, r20
 4d6:	b5 1e       	adc	r11, r21
 4d8:	c6 01       	movw	r24, r12
 4da:	0e 94 88 03 	call	0x710	; 0x710 <strnlen_P>
 4de:	8c 01       	movw	r16, r24
 4e0:	50 e8       	ldi	r21, 0x80	; 128
 4e2:	f5 2a       	or	r15, r21
 4e4:	f3 fe       	sbrs	r15, 3
 4e6:	07 c0       	rjmp	.+14     	; 0x4f6 <vfprintf+0x1a0>
 4e8:	1a c0       	rjmp	.+52     	; 0x51e <__stack+0x1f>
 4ea:	80 e2       	ldi	r24, 0x20	; 32
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	b3 01       	movw	r22, r6
 4f0:	0e 94 9e 03 	call	0x73c	; 0x73c <fputc>
 4f4:	ea 94       	dec	r14
 4f6:	8e 2d       	mov	r24, r14
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	08 17       	cp	r16, r24
 4fc:	19 07       	cpc	r17, r25
 4fe:	a8 f3       	brcs	.-22     	; 0x4ea <vfprintf+0x194>
 500:	0e c0       	rjmp	.+28     	; 0x51e <__stack+0x1f>
 502:	f6 01       	movw	r30, r12
 504:	f7 fc       	sbrc	r15, 7
 506:	85 91       	lpm	r24, Z+
 508:	f7 fe       	sbrs	r15, 7
 50a:	81 91       	ld	r24, Z+
 50c:	6f 01       	movw	r12, r30
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	b3 01       	movw	r22, r6
 512:	0e 94 9e 03 	call	0x73c	; 0x73c <fputc>
 516:	e1 10       	cpse	r14, r1
 518:	ea 94       	dec	r14
 51a:	01 50       	subi	r16, 0x01	; 1
 51c:	10 40       	sbci	r17, 0x00	; 0
 51e:	01 15       	cp	r16, r1
 520:	11 05       	cpc	r17, r1
 522:	79 f7       	brne	.-34     	; 0x502 <__stack+0x3>
 524:	ea c0       	rjmp	.+468    	; 0x6fa <__stack+0x1fb>
 526:	94 36       	cpi	r25, 0x64	; 100
 528:	11 f0       	breq	.+4      	; 0x52e <__stack+0x2f>
 52a:	99 36       	cpi	r25, 0x69	; 105
 52c:	69 f5       	brne	.+90     	; 0x588 <__stack+0x89>
 52e:	f7 fe       	sbrs	r15, 7
 530:	08 c0       	rjmp	.+16     	; 0x542 <__stack+0x43>
 532:	f5 01       	movw	r30, r10
 534:	20 81       	ld	r18, Z
 536:	31 81       	ldd	r19, Z+1	; 0x01
 538:	42 81       	ldd	r20, Z+2	; 0x02
 53a:	53 81       	ldd	r21, Z+3	; 0x03
 53c:	84 e0       	ldi	r24, 0x04	; 4
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	0a c0       	rjmp	.+20     	; 0x556 <__stack+0x57>
 542:	f5 01       	movw	r30, r10
 544:	80 81       	ld	r24, Z
 546:	91 81       	ldd	r25, Z+1	; 0x01
 548:	9c 01       	movw	r18, r24
 54a:	44 27       	eor	r20, r20
 54c:	37 fd       	sbrc	r19, 7
 54e:	40 95       	com	r20
 550:	54 2f       	mov	r21, r20
 552:	82 e0       	ldi	r24, 0x02	; 2
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	a8 0e       	add	r10, r24
 558:	b9 1e       	adc	r11, r25
 55a:	9f e6       	ldi	r25, 0x6F	; 111
 55c:	f9 22       	and	r15, r25
 55e:	57 ff       	sbrs	r21, 7
 560:	09 c0       	rjmp	.+18     	; 0x574 <__stack+0x75>
 562:	50 95       	com	r21
 564:	40 95       	com	r20
 566:	30 95       	com	r19
 568:	21 95       	neg	r18
 56a:	3f 4f       	sbci	r19, 0xFF	; 255
 56c:	4f 4f       	sbci	r20, 0xFF	; 255
 56e:	5f 4f       	sbci	r21, 0xFF	; 255
 570:	e0 e8       	ldi	r30, 0x80	; 128
 572:	fe 2a       	or	r15, r30
 574:	ca 01       	movw	r24, r20
 576:	b9 01       	movw	r22, r18
 578:	a1 01       	movw	r20, r2
 57a:	2a e0       	ldi	r18, 0x0A	; 10
 57c:	30 e0       	ldi	r19, 0x00	; 0
 57e:	0e 94 ca 03 	call	0x794	; 0x794 <__ultoa_invert>
 582:	d8 2e       	mov	r13, r24
 584:	d2 18       	sub	r13, r2
 586:	40 c0       	rjmp	.+128    	; 0x608 <__stack+0x109>
 588:	95 37       	cpi	r25, 0x75	; 117
 58a:	29 f4       	brne	.+10     	; 0x596 <__stack+0x97>
 58c:	1f 2d       	mov	r17, r15
 58e:	1f 7e       	andi	r17, 0xEF	; 239
 590:	2a e0       	ldi	r18, 0x0A	; 10
 592:	30 e0       	ldi	r19, 0x00	; 0
 594:	1d c0       	rjmp	.+58     	; 0x5d0 <__stack+0xd1>
 596:	1f 2d       	mov	r17, r15
 598:	19 7f       	andi	r17, 0xF9	; 249
 59a:	9f 36       	cpi	r25, 0x6F	; 111
 59c:	61 f0       	breq	.+24     	; 0x5b6 <__stack+0xb7>
 59e:	90 37       	cpi	r25, 0x70	; 112
 5a0:	20 f4       	brcc	.+8      	; 0x5aa <__stack+0xab>
 5a2:	98 35       	cpi	r25, 0x58	; 88
 5a4:	09 f0       	breq	.+2      	; 0x5a8 <__stack+0xa9>
 5a6:	ac c0       	rjmp	.+344    	; 0x700 <__stack+0x201>
 5a8:	0f c0       	rjmp	.+30     	; 0x5c8 <__stack+0xc9>
 5aa:	90 37       	cpi	r25, 0x70	; 112
 5ac:	39 f0       	breq	.+14     	; 0x5bc <__stack+0xbd>
 5ae:	98 37       	cpi	r25, 0x78	; 120
 5b0:	09 f0       	breq	.+2      	; 0x5b4 <__stack+0xb5>
 5b2:	a6 c0       	rjmp	.+332    	; 0x700 <__stack+0x201>
 5b4:	04 c0       	rjmp	.+8      	; 0x5be <__stack+0xbf>
 5b6:	28 e0       	ldi	r18, 0x08	; 8
 5b8:	30 e0       	ldi	r19, 0x00	; 0
 5ba:	0a c0       	rjmp	.+20     	; 0x5d0 <__stack+0xd1>
 5bc:	10 61       	ori	r17, 0x10	; 16
 5be:	14 fd       	sbrc	r17, 4
 5c0:	14 60       	ori	r17, 0x04	; 4
 5c2:	20 e1       	ldi	r18, 0x10	; 16
 5c4:	30 e0       	ldi	r19, 0x00	; 0
 5c6:	04 c0       	rjmp	.+8      	; 0x5d0 <__stack+0xd1>
 5c8:	14 fd       	sbrc	r17, 4
 5ca:	16 60       	ori	r17, 0x06	; 6
 5cc:	20 e1       	ldi	r18, 0x10	; 16
 5ce:	32 e0       	ldi	r19, 0x02	; 2
 5d0:	17 ff       	sbrs	r17, 7
 5d2:	08 c0       	rjmp	.+16     	; 0x5e4 <__stack+0xe5>
 5d4:	f5 01       	movw	r30, r10
 5d6:	60 81       	ld	r22, Z
 5d8:	71 81       	ldd	r23, Z+1	; 0x01
 5da:	82 81       	ldd	r24, Z+2	; 0x02
 5dc:	93 81       	ldd	r25, Z+3	; 0x03
 5de:	44 e0       	ldi	r20, 0x04	; 4
 5e0:	50 e0       	ldi	r21, 0x00	; 0
 5e2:	08 c0       	rjmp	.+16     	; 0x5f4 <__stack+0xf5>
 5e4:	f5 01       	movw	r30, r10
 5e6:	80 81       	ld	r24, Z
 5e8:	91 81       	ldd	r25, Z+1	; 0x01
 5ea:	bc 01       	movw	r22, r24
 5ec:	80 e0       	ldi	r24, 0x00	; 0
 5ee:	90 e0       	ldi	r25, 0x00	; 0
 5f0:	42 e0       	ldi	r20, 0x02	; 2
 5f2:	50 e0       	ldi	r21, 0x00	; 0
 5f4:	a4 0e       	add	r10, r20
 5f6:	b5 1e       	adc	r11, r21
 5f8:	a1 01       	movw	r20, r2
 5fa:	0e 94 ca 03 	call	0x794	; 0x794 <__ultoa_invert>
 5fe:	d8 2e       	mov	r13, r24
 600:	d2 18       	sub	r13, r2
 602:	8f e7       	ldi	r24, 0x7F	; 127
 604:	f8 2e       	mov	r15, r24
 606:	f1 22       	and	r15, r17
 608:	f6 fe       	sbrs	r15, 6
 60a:	0b c0       	rjmp	.+22     	; 0x622 <__stack+0x123>
 60c:	5e ef       	ldi	r21, 0xFE	; 254
 60e:	f5 22       	and	r15, r21
 610:	d9 14       	cp	r13, r9
 612:	38 f4       	brcc	.+14     	; 0x622 <__stack+0x123>
 614:	f4 fe       	sbrs	r15, 4
 616:	07 c0       	rjmp	.+14     	; 0x626 <__stack+0x127>
 618:	f2 fc       	sbrc	r15, 2
 61a:	05 c0       	rjmp	.+10     	; 0x626 <__stack+0x127>
 61c:	8f ee       	ldi	r24, 0xEF	; 239
 61e:	f8 22       	and	r15, r24
 620:	02 c0       	rjmp	.+4      	; 0x626 <__stack+0x127>
 622:	1d 2d       	mov	r17, r13
 624:	01 c0       	rjmp	.+2      	; 0x628 <__stack+0x129>
 626:	19 2d       	mov	r17, r9
 628:	f4 fe       	sbrs	r15, 4
 62a:	0d c0       	rjmp	.+26     	; 0x646 <__stack+0x147>
 62c:	fe 01       	movw	r30, r28
 62e:	ed 0d       	add	r30, r13
 630:	f1 1d       	adc	r31, r1
 632:	80 81       	ld	r24, Z
 634:	80 33       	cpi	r24, 0x30	; 48
 636:	19 f4       	brne	.+6      	; 0x63e <__stack+0x13f>
 638:	99 ee       	ldi	r25, 0xE9	; 233
 63a:	f9 22       	and	r15, r25
 63c:	08 c0       	rjmp	.+16     	; 0x64e <__stack+0x14f>
 63e:	1f 5f       	subi	r17, 0xFF	; 255
 640:	f2 fe       	sbrs	r15, 2
 642:	05 c0       	rjmp	.+10     	; 0x64e <__stack+0x14f>
 644:	03 c0       	rjmp	.+6      	; 0x64c <__stack+0x14d>
 646:	8f 2d       	mov	r24, r15
 648:	86 78       	andi	r24, 0x86	; 134
 64a:	09 f0       	breq	.+2      	; 0x64e <__stack+0x14f>
 64c:	1f 5f       	subi	r17, 0xFF	; 255
 64e:	0f 2d       	mov	r16, r15
 650:	f3 fc       	sbrc	r15, 3
 652:	14 c0       	rjmp	.+40     	; 0x67c <__stack+0x17d>
 654:	f0 fe       	sbrs	r15, 0
 656:	0f c0       	rjmp	.+30     	; 0x676 <__stack+0x177>
 658:	1e 15       	cp	r17, r14
 65a:	10 f0       	brcs	.+4      	; 0x660 <__stack+0x161>
 65c:	9d 2c       	mov	r9, r13
 65e:	0b c0       	rjmp	.+22     	; 0x676 <__stack+0x177>
 660:	9d 2c       	mov	r9, r13
 662:	9e 0c       	add	r9, r14
 664:	91 1a       	sub	r9, r17
 666:	1e 2d       	mov	r17, r14
 668:	06 c0       	rjmp	.+12     	; 0x676 <__stack+0x177>
 66a:	80 e2       	ldi	r24, 0x20	; 32
 66c:	90 e0       	ldi	r25, 0x00	; 0
 66e:	b3 01       	movw	r22, r6
 670:	0e 94 9e 03 	call	0x73c	; 0x73c <fputc>
 674:	1f 5f       	subi	r17, 0xFF	; 255
 676:	1e 15       	cp	r17, r14
 678:	c0 f3       	brcs	.-16     	; 0x66a <__stack+0x16b>
 67a:	04 c0       	rjmp	.+8      	; 0x684 <__stack+0x185>
 67c:	1e 15       	cp	r17, r14
 67e:	10 f4       	brcc	.+4      	; 0x684 <__stack+0x185>
 680:	e1 1a       	sub	r14, r17
 682:	01 c0       	rjmp	.+2      	; 0x686 <__stack+0x187>
 684:	ee 24       	eor	r14, r14
 686:	04 ff       	sbrs	r16, 4
 688:	0f c0       	rjmp	.+30     	; 0x6a8 <__stack+0x1a9>
 68a:	80 e3       	ldi	r24, 0x30	; 48
 68c:	90 e0       	ldi	r25, 0x00	; 0
 68e:	b3 01       	movw	r22, r6
 690:	0e 94 9e 03 	call	0x73c	; 0x73c <fputc>
 694:	02 ff       	sbrs	r16, 2
 696:	1d c0       	rjmp	.+58     	; 0x6d2 <__stack+0x1d3>
 698:	01 fd       	sbrc	r16, 1
 69a:	03 c0       	rjmp	.+6      	; 0x6a2 <__stack+0x1a3>
 69c:	88 e7       	ldi	r24, 0x78	; 120
 69e:	90 e0       	ldi	r25, 0x00	; 0
 6a0:	0e c0       	rjmp	.+28     	; 0x6be <__stack+0x1bf>
 6a2:	88 e5       	ldi	r24, 0x58	; 88
 6a4:	90 e0       	ldi	r25, 0x00	; 0
 6a6:	0b c0       	rjmp	.+22     	; 0x6be <__stack+0x1bf>
 6a8:	80 2f       	mov	r24, r16
 6aa:	86 78       	andi	r24, 0x86	; 134
 6ac:	91 f0       	breq	.+36     	; 0x6d2 <__stack+0x1d3>
 6ae:	01 ff       	sbrs	r16, 1
 6b0:	02 c0       	rjmp	.+4      	; 0x6b6 <__stack+0x1b7>
 6b2:	8b e2       	ldi	r24, 0x2B	; 43
 6b4:	01 c0       	rjmp	.+2      	; 0x6b8 <__stack+0x1b9>
 6b6:	80 e2       	ldi	r24, 0x20	; 32
 6b8:	f7 fc       	sbrc	r15, 7
 6ba:	8d e2       	ldi	r24, 0x2D	; 45
 6bc:	90 e0       	ldi	r25, 0x00	; 0
 6be:	b3 01       	movw	r22, r6
 6c0:	0e 94 9e 03 	call	0x73c	; 0x73c <fputc>
 6c4:	06 c0       	rjmp	.+12     	; 0x6d2 <__stack+0x1d3>
 6c6:	80 e3       	ldi	r24, 0x30	; 48
 6c8:	90 e0       	ldi	r25, 0x00	; 0
 6ca:	b3 01       	movw	r22, r6
 6cc:	0e 94 9e 03 	call	0x73c	; 0x73c <fputc>
 6d0:	9a 94       	dec	r9
 6d2:	d9 14       	cp	r13, r9
 6d4:	c0 f3       	brcs	.-16     	; 0x6c6 <__stack+0x1c7>
 6d6:	da 94       	dec	r13
 6d8:	f1 01       	movw	r30, r2
 6da:	ed 0d       	add	r30, r13
 6dc:	f1 1d       	adc	r31, r1
 6de:	80 81       	ld	r24, Z
 6e0:	90 e0       	ldi	r25, 0x00	; 0
 6e2:	b3 01       	movw	r22, r6
 6e4:	0e 94 9e 03 	call	0x73c	; 0x73c <fputc>
 6e8:	dd 20       	and	r13, r13
 6ea:	a9 f7       	brne	.-22     	; 0x6d6 <__stack+0x1d7>
 6ec:	06 c0       	rjmp	.+12     	; 0x6fa <__stack+0x1fb>
 6ee:	80 e2       	ldi	r24, 0x20	; 32
 6f0:	90 e0       	ldi	r25, 0x00	; 0
 6f2:	b3 01       	movw	r22, r6
 6f4:	0e 94 9e 03 	call	0x73c	; 0x73c <fputc>
 6f8:	ea 94       	dec	r14
 6fa:	ee 20       	and	r14, r14
 6fc:	c1 f7       	brne	.-16     	; 0x6ee <__stack+0x1ef>
 6fe:	43 ce       	rjmp	.-890    	; 0x386 <vfprintf+0x30>
 700:	f3 01       	movw	r30, r6
 702:	66 81       	ldd	r22, Z+6	; 0x06
 704:	77 81       	ldd	r23, Z+7	; 0x07
 706:	cb 01       	movw	r24, r22
 708:	2b 96       	adiw	r28, 0x0b	; 11
 70a:	e2 e1       	ldi	r30, 0x12	; 18
 70c:	0c 94 7a 04 	jmp	0x8f4	; 0x8f4 <__epilogue_restores__>

00000710 <strnlen_P>:
 710:	fc 01       	movw	r30, r24
 712:	05 90       	lpm	r0, Z+
 714:	61 50       	subi	r22, 0x01	; 1
 716:	70 40       	sbci	r23, 0x00	; 0
 718:	01 10       	cpse	r0, r1
 71a:	d8 f7       	brcc	.-10     	; 0x712 <strnlen_P+0x2>
 71c:	80 95       	com	r24
 71e:	90 95       	com	r25
 720:	8e 0f       	add	r24, r30
 722:	9f 1f       	adc	r25, r31
 724:	08 95       	ret

00000726 <strnlen>:
 726:	fc 01       	movw	r30, r24
 728:	61 50       	subi	r22, 0x01	; 1
 72a:	70 40       	sbci	r23, 0x00	; 0
 72c:	01 90       	ld	r0, Z+
 72e:	01 10       	cpse	r0, r1
 730:	d8 f7       	brcc	.-10     	; 0x728 <strnlen+0x2>
 732:	80 95       	com	r24
 734:	90 95       	com	r25
 736:	8e 0f       	add	r24, r30
 738:	9f 1f       	adc	r25, r31
 73a:	08 95       	ret

0000073c <fputc>:
 73c:	0f 93       	push	r16
 73e:	1f 93       	push	r17
 740:	cf 93       	push	r28
 742:	df 93       	push	r29
 744:	8c 01       	movw	r16, r24
 746:	eb 01       	movw	r28, r22
 748:	8b 81       	ldd	r24, Y+3	; 0x03
 74a:	81 ff       	sbrs	r24, 1
 74c:	1b c0       	rjmp	.+54     	; 0x784 <fputc+0x48>
 74e:	82 ff       	sbrs	r24, 2
 750:	0d c0       	rjmp	.+26     	; 0x76c <fputc+0x30>
 752:	2e 81       	ldd	r18, Y+6	; 0x06
 754:	3f 81       	ldd	r19, Y+7	; 0x07
 756:	8c 81       	ldd	r24, Y+4	; 0x04
 758:	9d 81       	ldd	r25, Y+5	; 0x05
 75a:	28 17       	cp	r18, r24
 75c:	39 07       	cpc	r19, r25
 75e:	64 f4       	brge	.+24     	; 0x778 <fputc+0x3c>
 760:	e8 81       	ld	r30, Y
 762:	f9 81       	ldd	r31, Y+1	; 0x01
 764:	01 93       	st	Z+, r16
 766:	f9 83       	std	Y+1, r31	; 0x01
 768:	e8 83       	st	Y, r30
 76a:	06 c0       	rjmp	.+12     	; 0x778 <fputc+0x3c>
 76c:	e8 85       	ldd	r30, Y+8	; 0x08
 76e:	f9 85       	ldd	r31, Y+9	; 0x09
 770:	80 2f       	mov	r24, r16
 772:	09 95       	icall
 774:	89 2b       	or	r24, r25
 776:	31 f4       	brne	.+12     	; 0x784 <fputc+0x48>
 778:	8e 81       	ldd	r24, Y+6	; 0x06
 77a:	9f 81       	ldd	r25, Y+7	; 0x07
 77c:	01 96       	adiw	r24, 0x01	; 1
 77e:	9f 83       	std	Y+7, r25	; 0x07
 780:	8e 83       	std	Y+6, r24	; 0x06
 782:	02 c0       	rjmp	.+4      	; 0x788 <fputc+0x4c>
 784:	0f ef       	ldi	r16, 0xFF	; 255
 786:	1f ef       	ldi	r17, 0xFF	; 255
 788:	c8 01       	movw	r24, r16
 78a:	df 91       	pop	r29
 78c:	cf 91       	pop	r28
 78e:	1f 91       	pop	r17
 790:	0f 91       	pop	r16
 792:	08 95       	ret

00000794 <__ultoa_invert>:
 794:	fa 01       	movw	r30, r20
 796:	aa 27       	eor	r26, r26
 798:	28 30       	cpi	r18, 0x08	; 8
 79a:	51 f1       	breq	.+84     	; 0x7f0 <__ultoa_invert+0x5c>
 79c:	20 31       	cpi	r18, 0x10	; 16
 79e:	81 f1       	breq	.+96     	; 0x800 <__ultoa_invert+0x6c>
 7a0:	e8 94       	clt
 7a2:	6f 93       	push	r22
 7a4:	6e 7f       	andi	r22, 0xFE	; 254
 7a6:	6e 5f       	subi	r22, 0xFE	; 254
 7a8:	7f 4f       	sbci	r23, 0xFF	; 255
 7aa:	8f 4f       	sbci	r24, 0xFF	; 255
 7ac:	9f 4f       	sbci	r25, 0xFF	; 255
 7ae:	af 4f       	sbci	r26, 0xFF	; 255
 7b0:	b1 e0       	ldi	r27, 0x01	; 1
 7b2:	3e d0       	rcall	.+124    	; 0x830 <__ultoa_invert+0x9c>
 7b4:	b4 e0       	ldi	r27, 0x04	; 4
 7b6:	3c d0       	rcall	.+120    	; 0x830 <__ultoa_invert+0x9c>
 7b8:	67 0f       	add	r22, r23
 7ba:	78 1f       	adc	r23, r24
 7bc:	89 1f       	adc	r24, r25
 7be:	9a 1f       	adc	r25, r26
 7c0:	a1 1d       	adc	r26, r1
 7c2:	68 0f       	add	r22, r24
 7c4:	79 1f       	adc	r23, r25
 7c6:	8a 1f       	adc	r24, r26
 7c8:	91 1d       	adc	r25, r1
 7ca:	a1 1d       	adc	r26, r1
 7cc:	6a 0f       	add	r22, r26
 7ce:	71 1d       	adc	r23, r1
 7d0:	81 1d       	adc	r24, r1
 7d2:	91 1d       	adc	r25, r1
 7d4:	a1 1d       	adc	r26, r1
 7d6:	20 d0       	rcall	.+64     	; 0x818 <__ultoa_invert+0x84>
 7d8:	09 f4       	brne	.+2      	; 0x7dc <__ultoa_invert+0x48>
 7da:	68 94       	set
 7dc:	3f 91       	pop	r19
 7de:	2a e0       	ldi	r18, 0x0A	; 10
 7e0:	26 9f       	mul	r18, r22
 7e2:	11 24       	eor	r1, r1
 7e4:	30 19       	sub	r19, r0
 7e6:	30 5d       	subi	r19, 0xD0	; 208
 7e8:	31 93       	st	Z+, r19
 7ea:	de f6       	brtc	.-74     	; 0x7a2 <__ultoa_invert+0xe>
 7ec:	cf 01       	movw	r24, r30
 7ee:	08 95       	ret
 7f0:	46 2f       	mov	r20, r22
 7f2:	47 70       	andi	r20, 0x07	; 7
 7f4:	40 5d       	subi	r20, 0xD0	; 208
 7f6:	41 93       	st	Z+, r20
 7f8:	b3 e0       	ldi	r27, 0x03	; 3
 7fa:	0f d0       	rcall	.+30     	; 0x81a <__ultoa_invert+0x86>
 7fc:	c9 f7       	brne	.-14     	; 0x7f0 <__ultoa_invert+0x5c>
 7fe:	f6 cf       	rjmp	.-20     	; 0x7ec <__ultoa_invert+0x58>
 800:	46 2f       	mov	r20, r22
 802:	4f 70       	andi	r20, 0x0F	; 15
 804:	40 5d       	subi	r20, 0xD0	; 208
 806:	4a 33       	cpi	r20, 0x3A	; 58
 808:	18 f0       	brcs	.+6      	; 0x810 <__ultoa_invert+0x7c>
 80a:	49 5d       	subi	r20, 0xD9	; 217
 80c:	31 fd       	sbrc	r19, 1
 80e:	40 52       	subi	r20, 0x20	; 32
 810:	41 93       	st	Z+, r20
 812:	02 d0       	rcall	.+4      	; 0x818 <__ultoa_invert+0x84>
 814:	a9 f7       	brne	.-22     	; 0x800 <__ultoa_invert+0x6c>
 816:	ea cf       	rjmp	.-44     	; 0x7ec <__ultoa_invert+0x58>
 818:	b4 e0       	ldi	r27, 0x04	; 4
 81a:	a6 95       	lsr	r26
 81c:	97 95       	ror	r25
 81e:	87 95       	ror	r24
 820:	77 95       	ror	r23
 822:	67 95       	ror	r22
 824:	ba 95       	dec	r27
 826:	c9 f7       	brne	.-14     	; 0x81a <__ultoa_invert+0x86>
 828:	00 97       	sbiw	r24, 0x00	; 0
 82a:	61 05       	cpc	r22, r1
 82c:	71 05       	cpc	r23, r1
 82e:	08 95       	ret
 830:	9b 01       	movw	r18, r22
 832:	ac 01       	movw	r20, r24
 834:	0a 2e       	mov	r0, r26
 836:	06 94       	lsr	r0
 838:	57 95       	ror	r21
 83a:	47 95       	ror	r20
 83c:	37 95       	ror	r19
 83e:	27 95       	ror	r18
 840:	ba 95       	dec	r27
 842:	c9 f7       	brne	.-14     	; 0x836 <__ultoa_invert+0xa2>
 844:	62 0f       	add	r22, r18
 846:	73 1f       	adc	r23, r19
 848:	84 1f       	adc	r24, r20
 84a:	95 1f       	adc	r25, r21
 84c:	a0 1d       	adc	r26, r0
 84e:	08 95       	ret

00000850 <__udivmodhi4>:
 850:	aa 1b       	sub	r26, r26
 852:	bb 1b       	sub	r27, r27
 854:	51 e1       	ldi	r21, 0x11	; 17
 856:	07 c0       	rjmp	.+14     	; 0x866 <__udivmodhi4_ep>

00000858 <__udivmodhi4_loop>:
 858:	aa 1f       	adc	r26, r26
 85a:	bb 1f       	adc	r27, r27
 85c:	a6 17       	cp	r26, r22
 85e:	b7 07       	cpc	r27, r23
 860:	10 f0       	brcs	.+4      	; 0x866 <__udivmodhi4_ep>
 862:	a6 1b       	sub	r26, r22
 864:	b7 0b       	sbc	r27, r23

00000866 <__udivmodhi4_ep>:
 866:	88 1f       	adc	r24, r24
 868:	99 1f       	adc	r25, r25
 86a:	5a 95       	dec	r21
 86c:	a9 f7       	brne	.-22     	; 0x858 <__udivmodhi4_loop>
 86e:	80 95       	com	r24
 870:	90 95       	com	r25
 872:	bc 01       	movw	r22, r24
 874:	cd 01       	movw	r24, r26
 876:	08 95       	ret

00000878 <__udivmodsi4>:
 878:	a1 e2       	ldi	r26, 0x21	; 33
 87a:	1a 2e       	mov	r1, r26
 87c:	aa 1b       	sub	r26, r26
 87e:	bb 1b       	sub	r27, r27
 880:	fd 01       	movw	r30, r26
 882:	0d c0       	rjmp	.+26     	; 0x89e <__udivmodsi4_ep>

00000884 <__udivmodsi4_loop>:
 884:	aa 1f       	adc	r26, r26
 886:	bb 1f       	adc	r27, r27
 888:	ee 1f       	adc	r30, r30
 88a:	ff 1f       	adc	r31, r31
 88c:	a2 17       	cp	r26, r18
 88e:	b3 07       	cpc	r27, r19
 890:	e4 07       	cpc	r30, r20
 892:	f5 07       	cpc	r31, r21
 894:	20 f0       	brcs	.+8      	; 0x89e <__udivmodsi4_ep>
 896:	a2 1b       	sub	r26, r18
 898:	b3 0b       	sbc	r27, r19
 89a:	e4 0b       	sbc	r30, r20
 89c:	f5 0b       	sbc	r31, r21

0000089e <__udivmodsi4_ep>:
 89e:	66 1f       	adc	r22, r22
 8a0:	77 1f       	adc	r23, r23
 8a2:	88 1f       	adc	r24, r24
 8a4:	99 1f       	adc	r25, r25
 8a6:	1a 94       	dec	r1
 8a8:	69 f7       	brne	.-38     	; 0x884 <__udivmodsi4_loop>
 8aa:	60 95       	com	r22
 8ac:	70 95       	com	r23
 8ae:	80 95       	com	r24
 8b0:	90 95       	com	r25
 8b2:	9b 01       	movw	r18, r22
 8b4:	ac 01       	movw	r20, r24
 8b6:	bd 01       	movw	r22, r26
 8b8:	cf 01       	movw	r24, r30
 8ba:	08 95       	ret

000008bc <__prologue_saves__>:
 8bc:	2f 92       	push	r2
 8be:	3f 92       	push	r3
 8c0:	4f 92       	push	r4
 8c2:	5f 92       	push	r5
 8c4:	6f 92       	push	r6
 8c6:	7f 92       	push	r7
 8c8:	8f 92       	push	r8
 8ca:	9f 92       	push	r9
 8cc:	af 92       	push	r10
 8ce:	bf 92       	push	r11
 8d0:	cf 92       	push	r12
 8d2:	df 92       	push	r13
 8d4:	ef 92       	push	r14
 8d6:	ff 92       	push	r15
 8d8:	0f 93       	push	r16
 8da:	1f 93       	push	r17
 8dc:	cf 93       	push	r28
 8de:	df 93       	push	r29
 8e0:	cd b7       	in	r28, 0x3d	; 61
 8e2:	de b7       	in	r29, 0x3e	; 62
 8e4:	ca 1b       	sub	r28, r26
 8e6:	db 0b       	sbc	r29, r27
 8e8:	0f b6       	in	r0, 0x3f	; 63
 8ea:	f8 94       	cli
 8ec:	de bf       	out	0x3e, r29	; 62
 8ee:	0f be       	out	0x3f, r0	; 63
 8f0:	cd bf       	out	0x3d, r28	; 61
 8f2:	09 94       	ijmp

000008f4 <__epilogue_restores__>:
 8f4:	2a 88       	ldd	r2, Y+18	; 0x12
 8f6:	39 88       	ldd	r3, Y+17	; 0x11
 8f8:	48 88       	ldd	r4, Y+16	; 0x10
 8fa:	5f 84       	ldd	r5, Y+15	; 0x0f
 8fc:	6e 84       	ldd	r6, Y+14	; 0x0e
 8fe:	7d 84       	ldd	r7, Y+13	; 0x0d
 900:	8c 84       	ldd	r8, Y+12	; 0x0c
 902:	9b 84       	ldd	r9, Y+11	; 0x0b
 904:	aa 84       	ldd	r10, Y+10	; 0x0a
 906:	b9 84       	ldd	r11, Y+9	; 0x09
 908:	c8 84       	ldd	r12, Y+8	; 0x08
 90a:	df 80       	ldd	r13, Y+7	; 0x07
 90c:	ee 80       	ldd	r14, Y+6	; 0x06
 90e:	fd 80       	ldd	r15, Y+5	; 0x05
 910:	0c 81       	ldd	r16, Y+4	; 0x04
 912:	1b 81       	ldd	r17, Y+3	; 0x03
 914:	aa 81       	ldd	r26, Y+2	; 0x02
 916:	b9 81       	ldd	r27, Y+1	; 0x01
 918:	ce 0f       	add	r28, r30
 91a:	d1 1d       	adc	r29, r1
 91c:	0f b6       	in	r0, 0x3f	; 63
 91e:	f8 94       	cli
 920:	de bf       	out	0x3e, r29	; 62
 922:	0f be       	out	0x3f, r0	; 63
 924:	cd bf       	out	0x3d, r28	; 61
 926:	ed 01       	movw	r28, r26
 928:	08 95       	ret

0000092a <_exit>:
 92a:	f8 94       	cli

0000092c <__stop_program>:
 92c:	ff cf       	rjmp	.-2      	; 0x92c <__stop_program>
