
ChaserLights.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001da  00800100  000019cc  00001a60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000019cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  008002da  008002da  00001c3a  2**0
                  ALLOC
  3 .debug_aranges 00000080  00000000  00000000  00001c3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000002e8  00000000  00000000  00001cba  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000cc3  00000000  00000000  00001fa2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000455  00000000  00000000  00002c65  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000bea  00000000  00000000  000030ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000270  00000000  00000000  00003ca4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a2  00000000  00000000  00003f14  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003dc  00000000  00000000  000042b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00004692  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 aa 00 	jmp	0x154	; 0x154 <__ctors_end>
       4:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
       8:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
       c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      10:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      14:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      18:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      1c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      20:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      24:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      28:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      2c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      30:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      34:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      38:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      3c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      40:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      44:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      48:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      4c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      50:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      54:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      58:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>

0000005c <PROGRAM>:
      5c:	43 68 61 73 65 72 4c 69 67 68 74 73 20 2d 20 00     ChaserLights - .

0000006c <VERSION>:
      6c:	31 2e 33 30 20 0d 00                                1.30 ..

00000073 <DEVICE_NAME>:
      73:	42 75 74 74 65 72 66 6c 79 20 00                    Butterfly .

0000007e <__c.1709>:
      7e:	65 72 72 6f 72 5f 65 79 65 73 2e 0d 00              error_eyes...

0000008b <__c.1698>:
      8b:	72 61 6e 64 6f 6d 5f 65 79 65 73 2e 0d 00           random_eyes...

00000099 <__c.1693>:
      99:	62 6c 69 6e 6b 69 6e 5f 65 79 65 73 2e 0d 00        blinkin_eyes...

000000a8 <__c.1688>:
      a8:	76 69 62 72 6f 5f 65 79 65 73 32 2e 0d 00           vibro_eyes2...

000000b6 <__c.1683>:
      b6:	76 69 62 72 6f 5f 65 79 65 73 31 2e 0d 00           vibro_eyes1...

000000c4 <__c.1677>:
      c4:	61 6e 74 5f 65 79 65 73 32 2e 0d 00                 ant_eyes2...

000000d0 <__c.1671>:
      d0:	61 6e 74 5f 65 79 65 73 31 2e 0d 00                 ant_eyes1...

000000dc <__c.1665>:
      dc:	73 61 77 5f 65 79 65 73 32 2e 0d 00                 saw_eyes2...

000000e8 <__c.1659>:
      e8:	73 61 77 5f 65 79 65 73 31 2e 0d 00                 saw_eyes1...

000000f4 <__c.1653>:
      f4:	77 61 6c 6c 5f 65 79 65 73 32 2e 0d 00              wall_eyes2...

00000101 <__c.1647>:
     101:	77 61 6c 6c 5f 65 79 65 73 31 2e 0d 00              wall_eyes1...

0000010e <__c.1641>:
     10e:	63 79 6c 6f 6e 5f 65 79 65 73 34 2e 0d 00           cylon_eyes4...

0000011c <__c.1635>:
     11c:	63 79 6c 6f 6e 5f 65 79 65 73 34 2e 0d 00           cylon_eyes4...

0000012a <__c.1629>:
     12a:	63 79 6c 6f 6e 5f 65 79 65 73 33 2e 0d 00           cylon_eyes3...

00000138 <__c.1623>:
     138:	63 79 6c 6f 6e 5f 65 79 65 73 32 2e 0d 00           cylon_eyes2...

00000146 <__c.1617>:
     146:	63 79 6c 6f 6e 5f 65 79 65 73 2e 0d 00 00           cylon_eyes....

00000154 <__ctors_end>:
     154:	11 24       	eor	r1, r1
     156:	1f be       	out	0x3f, r1	; 63
     158:	cf ef       	ldi	r28, 0xFF	; 255
     15a:	d4 e0       	ldi	r29, 0x04	; 4
     15c:	de bf       	out	0x3e, r29	; 62
     15e:	cd bf       	out	0x3d, r28	; 61

00000160 <__do_copy_data>:
     160:	12 e0       	ldi	r17, 0x02	; 2
     162:	a0 e0       	ldi	r26, 0x00	; 0
     164:	b1 e0       	ldi	r27, 0x01	; 1
     166:	ec ec       	ldi	r30, 0xCC	; 204
     168:	f9 e1       	ldi	r31, 0x19	; 25
     16a:	02 c0       	rjmp	.+4      	; 0x170 <.do_copy_data_start>

0000016c <.do_copy_data_loop>:
     16c:	05 90       	lpm	r0, Z+
     16e:	0d 92       	st	X+, r0

00000170 <.do_copy_data_start>:
     170:	aa 3d       	cpi	r26, 0xDA	; 218
     172:	b1 07       	cpc	r27, r17
     174:	d9 f7       	brne	.-10     	; 0x16c <.do_copy_data_loop>

00000176 <__do_clear_bss>:
     176:	12 e0       	ldi	r17, 0x02	; 2
     178:	aa ed       	ldi	r26, 0xDA	; 218
     17a:	b2 e0       	ldi	r27, 0x02	; 2
     17c:	01 c0       	rjmp	.+2      	; 0x180 <.do_clear_bss_start>

0000017e <.do_clear_bss_loop>:
     17e:	1d 92       	st	X+, r1

00000180 <.do_clear_bss_start>:
     180:	ae 3d       	cpi	r26, 0xDE	; 222
     182:	b1 07       	cpc	r27, r17
     184:	e1 f7       	brne	.-8      	; 0x17e <.do_clear_bss_loop>
     186:	0e 94 55 04 	call	0x8aa	; 0x8aa <main>
     18a:	0c 94 e4 0c 	jmp	0x19c8	; 0x19c8 <_exit>

0000018e <__bad_interrupt>:
     18e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000192 <parse_dip_switch>:

void parse_dip_switch()
{
	uint8_t temp0, temp1, temp2;

	temp0 = temp1 = temp2 = (uint8_t) dip_switch;
     192:	80 91 dc 02 	lds	r24, 0x02DC
     196:	90 91 dd 02 	lds	r25, 0x02DD

	sweep_pattern = mask_bits(temp0,SELECTMASK);
     19a:	28 2f       	mov	r18, r24
     19c:	2f 70       	andi	r18, 0x0F	; 15
     19e:	20 93 db 02 	sts	0x02DB, r18
	polarity = mask_bits(temp1,POLARITYMASK);
     1a2:	28 2f       	mov	r18, r24
     1a4:	20 78       	andi	r18, 0x80	; 128
     1a6:	20 93 00 01 	sts	0x0100, r18
	sweep_speed = 10 + ((mask_bits(temp2,SPEEDMASK)>>4)*25);	
     1aa:	90 e0       	ldi	r25, 0x00	; 0
     1ac:	88 77       	andi	r24, 0x78	; 120
     1ae:	90 70       	andi	r25, 0x00	; 0
     1b0:	24 e0       	ldi	r18, 0x04	; 4
     1b2:	95 95       	asr	r25
     1b4:	87 95       	ror	r24
     1b6:	2a 95       	dec	r18
     1b8:	e1 f7       	brne	.-8      	; 0x1b2 <parse_dip_switch+0x20>
     1ba:	29 e1       	ldi	r18, 0x19	; 25
     1bc:	30 e0       	ldi	r19, 0x00	; 0
     1be:	ac 01       	movw	r20, r24
     1c0:	42 9f       	mul	r20, r18
     1c2:	c0 01       	movw	r24, r0
     1c4:	43 9f       	mul	r20, r19
     1c6:	90 0d       	add	r25, r0
     1c8:	52 9f       	mul	r21, r18
     1ca:	90 0d       	add	r25, r0
     1cc:	11 24       	eor	r1, r1
     1ce:	86 5f       	subi	r24, 0xF6	; 246
     1d0:	80 93 da 02 	sts	0x02DA, r24
}
     1d4:	08 95       	ret

000001d6 <identify>:
******************************************************/
// Send program name, device, and revision
// out on the UART
void identify()
{
	uart_send_stringP(PROGRAM);
     1d6:	8c e5       	ldi	r24, 0x5C	; 92
     1d8:	90 e0       	ldi	r25, 0x00	; 0
     1da:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <uart_send_stringP>
	uart_send_stringP(DEVICE_NAME);
     1de:	83 e7       	ldi	r24, 0x73	; 115
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <uart_send_stringP>
	uart_send_stringP(VERSION);
     1e6:	8c e6       	ldi	r24, 0x6C	; 108
     1e8:	90 e0       	ldi	r25, 0x00	; 0
     1ea:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <uart_send_stringP>
}
     1ee:	08 95       	ret

000001f0 <cylon_eyes_init>:
	Initialization
******************************************************/

void cylon_eyes_init()
{
	uart_init();
     1f0:	0e 94 5c 05 	call	0xab8	; 0xab8 <uart_init>
#if defined(Butterfly)
	butterfly_init();
     1f4:	0e 94 34 05 	call	0xa68	; 0xa68 <butterfly_init>
#endif
}
     1f8:	08 95       	ret

000001fa <sweep_left>:
  	}
}

// The back swing eliminates the two ends
void sweep_left(uint16_t ce[], uint8_t num)
{
     1fa:	6f 92       	push	r6
     1fc:	7f 92       	push	r7
     1fe:	8f 92       	push	r8
     200:	9f 92       	push	r9
     202:	af 92       	push	r10
     204:	bf 92       	push	r11
     206:	cf 92       	push	r12
     208:	df 92       	push	r13
     20a:	ef 92       	push	r14
     20c:	ff 92       	push	r15
     20e:	0f 93       	push	r16
     210:	1f 93       	push	r17
     212:	cf 93       	push	r28
     214:	df 93       	push	r29
  	for (int j=num-1; j>=0; j--)
     216:	c6 2f       	mov	r28, r22
     218:	d0 e0       	ldi	r29, 0x00	; 0
     21a:	21 97       	sbiw	r28, 0x01	; 1
     21c:	4e 01       	movw	r8, r28
     21e:	88 0c       	add	r8, r8
     220:	99 1c       	adc	r9, r9
     222:	88 0e       	add	r8, r24
     224:	99 1e       	adc	r9, r25
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     226:	39 e1       	ldi	r19, 0x19	; 25
     228:	63 2e       	mov	r6, r19
     22a:	71 2c       	mov	r7, r1
     22c:	58 c0       	rjmp	.+176    	; 0x2de <sweep_left+0xe4>
  	{
		if(polarity) dip_switch = spi_master_rw16(ce[j]);
     22e:	80 91 00 01 	lds	r24, 0x0100
     232:	f4 01       	movw	r30, r8
     234:	20 81       	ld	r18, Z
     236:	31 81       	ldd	r19, Z+1	; 0x01
     238:	88 23       	and	r24, r24
     23a:	11 f0       	breq	.+4      	; 0x240 <sweep_left+0x46>
     23c:	c9 01       	movw	r24, r18
     23e:	03 c0       	rjmp	.+6      	; 0x246 <sweep_left+0x4c>
		else dip_switch = spi_master_rw16(~ce[j]);
     240:	c9 01       	movw	r24, r18
     242:	80 95       	com	r24
     244:	90 95       	com	r25
     246:	0e 94 bc 05 	call	0xb78	; 0xb78 <spi_master_rw16>
     24a:	90 93 dd 02 	sts	0x02DD, r25
     24e:	80 93 dc 02 	sts	0x02DC, r24

  		// Wait a while
  		_delay_ms(sweep_speed);
     252:	60 91 da 02 	lds	r22, 0x02DA
     256:	70 e0       	ldi	r23, 0x00	; 0
     258:	80 e0       	ldi	r24, 0x00	; 0
     25a:	90 e0       	ldi	r25, 0x00	; 0
     25c:	0e 94 82 09 	call	0x1304	; 0x1304 <__floatunsisf>
     260:	5b 01       	movw	r10, r22
     262:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     264:	20 e0       	ldi	r18, 0x00	; 0
     266:	30 e0       	ldi	r19, 0x00	; 0
     268:	4a e7       	ldi	r20, 0x7A	; 122
     26a:	53 e4       	ldi	r21, 0x43	; 67
     26c:	0e 94 a4 07 	call	0xf48	; 0xf48 <__mulsf3>
     270:	7b 01       	movw	r14, r22
     272:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     274:	20 e0       	ldi	r18, 0x00	; 0
     276:	30 e0       	ldi	r19, 0x00	; 0
     278:	40 e8       	ldi	r20, 0x80	; 128
     27a:	5f e3       	ldi	r21, 0x3F	; 63
     27c:	0e 94 fe 08 	call	0x11fc	; 0x11fc <__ltsf2>
     280:	88 23       	and	r24, r24
     282:	1c f4       	brge	.+6      	; 0x28a <sweep_left+0x90>
     284:	61 e0       	ldi	r22, 0x01	; 1
     286:	70 e0       	ldi	r23, 0x00	; 0
     288:	22 c0       	rjmp	.+68     	; 0x2ce <sweep_left+0xd4>
		__ticks = 1;
	else if (__tmp > 65535)
     28a:	c8 01       	movw	r24, r16
     28c:	b7 01       	movw	r22, r14
     28e:	20 e0       	ldi	r18, 0x00	; 0
     290:	3f ef       	ldi	r19, 0xFF	; 255
     292:	4f e7       	ldi	r20, 0x7F	; 127
     294:	57 e4       	ldi	r21, 0x47	; 71
     296:	0e 94 9e 08 	call	0x113c	; 0x113c <__gtsf2>
     29a:	18 16       	cp	r1, r24
     29c:	a4 f4       	brge	.+40     	; 0x2c6 <sweep_left+0xcc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     29e:	c6 01       	movw	r24, r12
     2a0:	b5 01       	movw	r22, r10
     2a2:	20 e0       	ldi	r18, 0x00	; 0
     2a4:	30 e0       	ldi	r19, 0x00	; 0
     2a6:	40 e2       	ldi	r20, 0x20	; 32
     2a8:	51 e4       	ldi	r21, 0x41	; 65
     2aa:	0e 94 a4 07 	call	0xf48	; 0xf48 <__mulsf3>
     2ae:	0e 94 ce 05 	call	0xb9c	; 0xb9c <__fixunssfsi>
     2b2:	05 c0       	rjmp	.+10     	; 0x2be <sweep_left+0xc4>
     2b4:	c3 01       	movw	r24, r6
     2b6:	01 97       	sbiw	r24, 0x01	; 1
     2b8:	f1 f7       	brne	.-4      	; 0x2b6 <sweep_left+0xbc>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     2ba:	61 50       	subi	r22, 0x01	; 1
     2bc:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     2be:	61 15       	cp	r22, r1
     2c0:	71 05       	cpc	r23, r1
     2c2:	c1 f7       	brne	.-16     	; 0x2b4 <sweep_left+0xba>
     2c4:	07 c0       	rjmp	.+14     	; 0x2d4 <sweep_left+0xda>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     2c6:	c8 01       	movw	r24, r16
     2c8:	b7 01       	movw	r22, r14
     2ca:	0e 94 ce 05 	call	0xb9c	; 0xb9c <__fixunssfsi>
     2ce:	cb 01       	movw	r24, r22
     2d0:	01 97       	sbiw	r24, 0x01	; 1
     2d2:	f1 f7       	brne	.-4      	; 0x2d0 <sweep_left+0xd6>
}

// The back swing eliminates the two ends
void sweep_left(uint16_t ce[], uint8_t num)
{
  	for (int j=num-1; j>=0; j--)
     2d4:	21 97       	sbiw	r28, 0x01	; 1
     2d6:	8e ef       	ldi	r24, 0xFE	; 254
     2d8:	9f ef       	ldi	r25, 0xFF	; 255
     2da:	88 0e       	add	r8, r24
     2dc:	99 1e       	adc	r9, r25
     2de:	9f ef       	ldi	r25, 0xFF	; 255
     2e0:	cf 3f       	cpi	r28, 0xFF	; 255
     2e2:	d9 07       	cpc	r29, r25
     2e4:	09 f0       	breq	.+2      	; 0x2e8 <sweep_left+0xee>
     2e6:	a3 cf       	rjmp	.-186    	; 0x22e <sweep_left+0x34>
		else dip_switch = spi_master_rw16(~ce[j]);

  		// Wait a while
  		_delay_ms(sweep_speed);
  	}
}
     2e8:	df 91       	pop	r29
     2ea:	cf 91       	pop	r28
     2ec:	1f 91       	pop	r17
     2ee:	0f 91       	pop	r16
     2f0:	ff 90       	pop	r15
     2f2:	ef 90       	pop	r14
     2f4:	df 90       	pop	r13
     2f6:	cf 90       	pop	r12
     2f8:	bf 90       	pop	r11
     2fa:	af 90       	pop	r10
     2fc:	9f 90       	pop	r9
     2fe:	8f 90       	pop	r8
     300:	7f 90       	pop	r7
     302:	6f 90       	pop	r6
     304:	08 95       	ret

00000306 <ant_eyes1>:
0100 1001 0010 0100 == 0x4924
*/
// ae1 array has 3 elements

void ant_eyes1()
{
     306:	df 93       	push	r29
     308:	cf 93       	push	r28
     30a:	00 d0       	rcall	.+0      	; 0x30c <ant_eyes1+0x6>
     30c:	00 d0       	rcall	.+0      	; 0x30e <ant_eyes1+0x8>
     30e:	00 d0       	rcall	.+0      	; 0x310 <ant_eyes1+0xa>
     310:	cd b7       	in	r28, 0x3d	; 61
     312:	de b7       	in	r29, 0x3e	; 62
	uart_send_stringP(PSTR("ant_eyes1.\r"));
     314:	80 ed       	ldi	r24, 0xD0	; 208
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <uart_send_stringP>
	//_delay_ms(1000);

	uint16_t ae1[] = { 0x9249, 0x2492, 0x4924 };//, 0x9249, 0x2492, 0x4924 };
     31c:	de 01       	movw	r26, r28
     31e:	11 96       	adiw	r26, 0x01	; 1
     320:	e7 e0       	ldi	r30, 0x07	; 7
     322:	f1 e0       	ldi	r31, 0x01	; 1
     324:	86 e0       	ldi	r24, 0x06	; 6
     326:	01 90       	ld	r0, Z+
     328:	0d 92       	st	X+, r0
     32a:	81 50       	subi	r24, 0x01	; 1
     32c:	e1 f7       	brne	.-8      	; 0x326 <ant_eyes1+0x20>
	sweep_left(ae1, 3);
     32e:	ce 01       	movw	r24, r28
     330:	01 96       	adiw	r24, 0x01	; 1
     332:	63 e0       	ldi	r22, 0x03	; 3
     334:	0e 94 fd 00 	call	0x1fa	; 0x1fa <sweep_left>
}
     338:	26 96       	adiw	r28, 0x06	; 6
     33a:	0f b6       	in	r0, 0x3f	; 63
     33c:	f8 94       	cli
     33e:	de bf       	out	0x3e, r29	; 62
     340:	0f be       	out	0x3f, r0	; 63
     342:	cd bf       	out	0x3d, r28	; 61
     344:	cf 91       	pop	r28
     346:	df 91       	pop	r29
     348:	08 95       	ret

0000034a <sweep_right>:
	sweep_right(ce, num);
	sweep_left(ce, num);
}

void sweep_right(uint16_t ce[], uint8_t num)
{
     34a:	4f 92       	push	r4
     34c:	5f 92       	push	r5
     34e:	6f 92       	push	r6
     350:	7f 92       	push	r7
     352:	8f 92       	push	r8
     354:	9f 92       	push	r9
     356:	af 92       	push	r10
     358:	bf 92       	push	r11
     35a:	cf 92       	push	r12
     35c:	df 92       	push	r13
     35e:	ef 92       	push	r14
     360:	ff 92       	push	r15
     362:	0f 93       	push	r16
     364:	1f 93       	push	r17
     366:	cf 93       	push	r28
     368:	df 93       	push	r29
     36a:	4c 01       	movw	r8, r24
     36c:	c0 e0       	ldi	r28, 0x00	; 0
     36e:	d0 e0       	ldi	r29, 0x00	; 0
  	for (int j=0; j<=num-1; j++)
     370:	66 2e       	mov	r6, r22
     372:	77 24       	eor	r7, r7
     374:	59 e1       	ldi	r21, 0x19	; 25
     376:	45 2e       	mov	r4, r21
     378:	51 2c       	mov	r5, r1
     37a:	58 c0       	rjmp	.+176    	; 0x42c <sweep_right+0xe2>
  	{	
		if(polarity) dip_switch = spi_master_rw16(ce[j]);
     37c:	80 91 00 01 	lds	r24, 0x0100
     380:	f4 01       	movw	r30, r8
     382:	20 81       	ld	r18, Z
     384:	31 81       	ldd	r19, Z+1	; 0x01
     386:	88 23       	and	r24, r24
     388:	11 f0       	breq	.+4      	; 0x38e <sweep_right+0x44>
     38a:	c9 01       	movw	r24, r18
     38c:	03 c0       	rjmp	.+6      	; 0x394 <sweep_right+0x4a>
		else dip_switch = spi_master_rw16(~ce[j]);
     38e:	c9 01       	movw	r24, r18
     390:	80 95       	com	r24
     392:	90 95       	com	r25
     394:	0e 94 bc 05 	call	0xb78	; 0xb78 <spi_master_rw16>
     398:	90 93 dd 02 	sts	0x02DD, r25
     39c:	80 93 dc 02 	sts	0x02DC, r24

  		// Wait a while
  		_delay_ms(sweep_speed);	
     3a0:	60 91 da 02 	lds	r22, 0x02DA
     3a4:	70 e0       	ldi	r23, 0x00	; 0
     3a6:	80 e0       	ldi	r24, 0x00	; 0
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	0e 94 82 09 	call	0x1304	; 0x1304 <__floatunsisf>
     3ae:	5b 01       	movw	r10, r22
     3b0:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     3b2:	20 e0       	ldi	r18, 0x00	; 0
     3b4:	30 e0       	ldi	r19, 0x00	; 0
     3b6:	4a e7       	ldi	r20, 0x7A	; 122
     3b8:	53 e4       	ldi	r21, 0x43	; 67
     3ba:	0e 94 a4 07 	call	0xf48	; 0xf48 <__mulsf3>
     3be:	7b 01       	movw	r14, r22
     3c0:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     3c2:	20 e0       	ldi	r18, 0x00	; 0
     3c4:	30 e0       	ldi	r19, 0x00	; 0
     3c6:	40 e8       	ldi	r20, 0x80	; 128
     3c8:	5f e3       	ldi	r21, 0x3F	; 63
     3ca:	0e 94 fe 08 	call	0x11fc	; 0x11fc <__ltsf2>
     3ce:	88 23       	and	r24, r24
     3d0:	1c f4       	brge	.+6      	; 0x3d8 <sweep_right+0x8e>
     3d2:	61 e0       	ldi	r22, 0x01	; 1
     3d4:	70 e0       	ldi	r23, 0x00	; 0
     3d6:	22 c0       	rjmp	.+68     	; 0x41c <sweep_right+0xd2>
		__ticks = 1;
	else if (__tmp > 65535)
     3d8:	c8 01       	movw	r24, r16
     3da:	b7 01       	movw	r22, r14
     3dc:	20 e0       	ldi	r18, 0x00	; 0
     3de:	3f ef       	ldi	r19, 0xFF	; 255
     3e0:	4f e7       	ldi	r20, 0x7F	; 127
     3e2:	57 e4       	ldi	r21, 0x47	; 71
     3e4:	0e 94 9e 08 	call	0x113c	; 0x113c <__gtsf2>
     3e8:	18 16       	cp	r1, r24
     3ea:	a4 f4       	brge	.+40     	; 0x414 <sweep_right+0xca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     3ec:	c6 01       	movw	r24, r12
     3ee:	b5 01       	movw	r22, r10
     3f0:	20 e0       	ldi	r18, 0x00	; 0
     3f2:	30 e0       	ldi	r19, 0x00	; 0
     3f4:	40 e2       	ldi	r20, 0x20	; 32
     3f6:	51 e4       	ldi	r21, 0x41	; 65
     3f8:	0e 94 a4 07 	call	0xf48	; 0xf48 <__mulsf3>
     3fc:	0e 94 ce 05 	call	0xb9c	; 0xb9c <__fixunssfsi>
     400:	05 c0       	rjmp	.+10     	; 0x40c <sweep_right+0xc2>
     402:	c2 01       	movw	r24, r4
     404:	01 97       	sbiw	r24, 0x01	; 1
     406:	f1 f7       	brne	.-4      	; 0x404 <sweep_right+0xba>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     408:	61 50       	subi	r22, 0x01	; 1
     40a:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     40c:	61 15       	cp	r22, r1
     40e:	71 05       	cpc	r23, r1
     410:	c1 f7       	brne	.-16     	; 0x402 <sweep_right+0xb8>
     412:	07 c0       	rjmp	.+14     	; 0x422 <sweep_right+0xd8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     414:	c8 01       	movw	r24, r16
     416:	b7 01       	movw	r22, r14
     418:	0e 94 ce 05 	call	0xb9c	; 0xb9c <__fixunssfsi>
     41c:	cb 01       	movw	r24, r22
     41e:	01 97       	sbiw	r24, 0x01	; 1
     420:	f1 f7       	brne	.-4      	; 0x41e <sweep_right+0xd4>
	sweep_left(ce, num);
}

void sweep_right(uint16_t ce[], uint8_t num)
{
  	for (int j=0; j<=num-1; j++)
     422:	21 96       	adiw	r28, 0x01	; 1
     424:	82 e0       	ldi	r24, 0x02	; 2
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	88 0e       	add	r8, r24
     42a:	99 1e       	adc	r9, r25
     42c:	c6 15       	cp	r28, r6
     42e:	d7 05       	cpc	r29, r7
     430:	0c f4       	brge	.+2      	; 0x434 <sweep_right+0xea>
     432:	a4 cf       	rjmp	.-184    	; 0x37c <sweep_right+0x32>
		else dip_switch = spi_master_rw16(~ce[j]);

  		// Wait a while
  		_delay_ms(sweep_speed);	
  	}
}
     434:	df 91       	pop	r29
     436:	cf 91       	pop	r28
     438:	1f 91       	pop	r17
     43a:	0f 91       	pop	r16
     43c:	ff 90       	pop	r15
     43e:	ef 90       	pop	r14
     440:	df 90       	pop	r13
     442:	cf 90       	pop	r12
     444:	bf 90       	pop	r11
     446:	af 90       	pop	r10
     448:	9f 90       	pop	r9
     44a:	8f 90       	pop	r8
     44c:	7f 90       	pop	r7
     44e:	6f 90       	pop	r6
     450:	5f 90       	pop	r5
     452:	4f 90       	pop	r4
     454:	08 95       	ret

00000456 <ant_eyes2>:
0100 1001 0010 0100 == 0x4924
*/
// ae2 array has 3 elements

void ant_eyes2()
{
     456:	df 93       	push	r29
     458:	cf 93       	push	r28
     45a:	00 d0       	rcall	.+0      	; 0x45c <ant_eyes2+0x6>
     45c:	00 d0       	rcall	.+0      	; 0x45e <ant_eyes2+0x8>
     45e:	00 d0       	rcall	.+0      	; 0x460 <ant_eyes2+0xa>
     460:	cd b7       	in	r28, 0x3d	; 61
     462:	de b7       	in	r29, 0x3e	; 62
	uart_send_stringP(PSTR("ant_eyes2.\r"));
     464:	84 ec       	ldi	r24, 0xC4	; 196
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <uart_send_stringP>
	//_delay_ms(1000);

	uint16_t ae2[] = { 0x9249, 0x2492, 0x4924 };//, 0x9249, 0x2492, 0x4924 };
     46c:	de 01       	movw	r26, r28
     46e:	11 96       	adiw	r26, 0x01	; 1
     470:	e1 e0       	ldi	r30, 0x01	; 1
     472:	f1 e0       	ldi	r31, 0x01	; 1
     474:	86 e0       	ldi	r24, 0x06	; 6
     476:	01 90       	ld	r0, Z+
     478:	0d 92       	st	X+, r0
     47a:	81 50       	subi	r24, 0x01	; 1
     47c:	e1 f7       	brne	.-8      	; 0x476 <ant_eyes2+0x20>
	sweep_right(ae2, 3);
     47e:	ce 01       	movw	r24, r28
     480:	01 96       	adiw	r24, 0x01	; 1
     482:	63 e0       	ldi	r22, 0x03	; 3
     484:	0e 94 a5 01 	call	0x34a	; 0x34a <sweep_right>
}
     488:	26 96       	adiw	r28, 0x06	; 6
     48a:	0f b6       	in	r0, 0x3f	; 63
     48c:	f8 94       	cli
     48e:	de bf       	out	0x3e, r29	; 62
     490:	0f be       	out	0x3f, r0	; 63
     492:	cd bf       	out	0x3d, r28	; 61
     494:	cf 91       	pop	r28
     496:	df 91       	pop	r29
     498:	08 95       	ret

0000049a <sweep>:

/*****************************************************
	Output the LED pattern to the two '595 ICs 
******************************************************/
void sweep(uint16_t ce[], uint8_t num)
{	
     49a:	ff 92       	push	r15
     49c:	0f 93       	push	r16
     49e:	1f 93       	push	r17
     4a0:	8c 01       	movw	r16, r24
     4a2:	f6 2e       	mov	r15, r22
	sweep_right(ce, num);
     4a4:	0e 94 a5 01 	call	0x34a	; 0x34a <sweep_right>
	sweep_left(ce, num);
     4a8:	c8 01       	movw	r24, r16
     4aa:	6f 2d       	mov	r22, r15
     4ac:	0e 94 fd 00 	call	0x1fa	; 0x1fa <sweep_left>
}
     4b0:	1f 91       	pop	r17
     4b2:	0f 91       	pop	r16
     4b4:	ff 90       	pop	r15
     4b6:	08 95       	ret

000004b8 <error_eyes>:
ErrorEyes
00011 1100 0011 1100 == 0x3C3C
00000 0000 0000 0000 == 0x0000
*/
void error_eyes()
{
     4b8:	df 93       	push	r29
     4ba:	cf 93       	push	r28
     4bc:	00 d0       	rcall	.+0      	; 0x4be <error_eyes+0x6>
     4be:	00 d0       	rcall	.+0      	; 0x4c0 <error_eyes+0x8>
     4c0:	cd b7       	in	r28, 0x3d	; 61
     4c2:	de b7       	in	r29, 0x3e	; 62
	uart_send_stringP(PSTR("error_eyes.\r"));
     4c4:	8e e7       	ldi	r24, 0x7E	; 126
     4c6:	90 e0       	ldi	r25, 0x00	; 0
     4c8:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <uart_send_stringP>
	//_delay_ms(1000);

	uint16_t ee[] = { 0x3C3C, 0x0000 };
     4cc:	8c e3       	ldi	r24, 0x3C	; 60
     4ce:	9c e3       	ldi	r25, 0x3C	; 60
     4d0:	9a 83       	std	Y+2, r25	; 0x02
     4d2:	89 83       	std	Y+1, r24	; 0x01
     4d4:	1c 82       	std	Y+4, r1	; 0x04
     4d6:	1b 82       	std	Y+3, r1	; 0x03
	sweep(ee, 0);
     4d8:	ce 01       	movw	r24, r28
     4da:	01 96       	adiw	r24, 0x01	; 1
     4dc:	60 e0       	ldi	r22, 0x00	; 0
     4de:	0e 94 4d 02 	call	0x49a	; 0x49a <sweep>
}
     4e2:	0f 90       	pop	r0
     4e4:	0f 90       	pop	r0
     4e6:	0f 90       	pop	r0
     4e8:	0f 90       	pop	r0
     4ea:	cf 91       	pop	r28
     4ec:	df 91       	pop	r29
     4ee:	08 95       	ret

000004f0 <random_eyes>:

}


void random_eyes()
{
     4f0:	df 93       	push	r29
     4f2:	cf 93       	push	r28
     4f4:	00 d0       	rcall	.+0      	; 0x4f6 <random_eyes+0x6>
     4f6:	00 d0       	rcall	.+0      	; 0x4f8 <random_eyes+0x8>
     4f8:	cd b7       	in	r28, 0x3d	; 61
     4fa:	de b7       	in	r29, 0x3e	; 62
	uart_send_stringP(PSTR("random_eyes.\r"));
     4fc:	8b e8       	ldi	r24, 0x8B	; 139
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <uart_send_stringP>

	uint16_t re[2];
	re[0] = rand();
     504:	0e 94 41 0c 	call	0x1882	; 0x1882 <rand>
     508:	9a 83       	std	Y+2, r25	; 0x02
     50a:	89 83       	std	Y+1, r24	; 0x01
	re[1] = rand();
     50c:	0e 94 41 0c 	call	0x1882	; 0x1882 <rand>
     510:	9c 83       	std	Y+4, r25	; 0x04
     512:	8b 83       	std	Y+3, r24	; 0x03

	sweep(re, 2);
     514:	ce 01       	movw	r24, r28
     516:	01 96       	adiw	r24, 0x01	; 1
     518:	62 e0       	ldi	r22, 0x02	; 2
     51a:	0e 94 4d 02 	call	0x49a	; 0x49a <sweep>
}
     51e:	0f 90       	pop	r0
     520:	0f 90       	pop	r0
     522:	0f 90       	pop	r0
     524:	0f 90       	pop	r0
     526:	cf 91       	pop	r28
     528:	df 91       	pop	r29
     52a:	08 95       	ret

0000052c <blinkin_eyes>:
BlinkinEyes
0000 0000 0000 0000 == 0x0000
1111 1111 1111 1111 == 0xFFFF
*/
void blinkin_eyes()
{
     52c:	df 93       	push	r29
     52e:	cf 93       	push	r28
     530:	00 d0       	rcall	.+0      	; 0x532 <blinkin_eyes+0x6>
     532:	00 d0       	rcall	.+0      	; 0x534 <blinkin_eyes+0x8>
     534:	cd b7       	in	r28, 0x3d	; 61
     536:	de b7       	in	r29, 0x3e	; 62
	uart_send_stringP(PSTR("blinkin_eyes.\r"));
     538:	89 e9       	ldi	r24, 0x99	; 153
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <uart_send_stringP>
	//_delay_ms(1000);

	uint16_t be[] = { 0x0000, 0xFFFF };
     540:	1a 82       	std	Y+2, r1	; 0x02
     542:	19 82       	std	Y+1, r1	; 0x01
     544:	8f ef       	ldi	r24, 0xFF	; 255
     546:	9f ef       	ldi	r25, 0xFF	; 255
     548:	9c 83       	std	Y+4, r25	; 0x04
     54a:	8b 83       	std	Y+3, r24	; 0x03
	sweep(be, 2);
     54c:	ce 01       	movw	r24, r28
     54e:	01 96       	adiw	r24, 0x01	; 1
     550:	62 e0       	ldi	r22, 0x02	; 2
     552:	0e 94 4d 02 	call	0x49a	; 0x49a <sweep>

}
     556:	0f 90       	pop	r0
     558:	0f 90       	pop	r0
     55a:	0f 90       	pop	r0
     55c:	0f 90       	pop	r0
     55e:	cf 91       	pop	r28
     560:	df 91       	pop	r29
     562:	08 95       	ret

00000564 <vibro_eyes2>:
1100 1100 1100 1100 == 0xCCCC
0011 0011 0011 0011 == 0x3333
*/

void vibro_eyes2()
{
     564:	df 93       	push	r29
     566:	cf 93       	push	r28
     568:	00 d0       	rcall	.+0      	; 0x56a <vibro_eyes2+0x6>
     56a:	00 d0       	rcall	.+0      	; 0x56c <vibro_eyes2+0x8>
     56c:	cd b7       	in	r28, 0x3d	; 61
     56e:	de b7       	in	r29, 0x3e	; 62
	uart_send_stringP(PSTR("vibro_eyes2.\r"));
     570:	88 ea       	ldi	r24, 0xA8	; 168
     572:	90 e0       	ldi	r25, 0x00	; 0
     574:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <uart_send_stringP>
	//_delay_ms(1000);

	uint16_t ve2[] = { 0xCCCC, 0x3333 };
     578:	8c ec       	ldi	r24, 0xCC	; 204
     57a:	9c ec       	ldi	r25, 0xCC	; 204
     57c:	9a 83       	std	Y+2, r25	; 0x02
     57e:	89 83       	std	Y+1, r24	; 0x01
     580:	83 e3       	ldi	r24, 0x33	; 51
     582:	93 e3       	ldi	r25, 0x33	; 51
     584:	9c 83       	std	Y+4, r25	; 0x04
     586:	8b 83       	std	Y+3, r24	; 0x03
	sweep(ve2, 2);
     588:	ce 01       	movw	r24, r28
     58a:	01 96       	adiw	r24, 0x01	; 1
     58c:	62 e0       	ldi	r22, 0x02	; 2
     58e:	0e 94 4d 02 	call	0x49a	; 0x49a <sweep>
}
     592:	0f 90       	pop	r0
     594:	0f 90       	pop	r0
     596:	0f 90       	pop	r0
     598:	0f 90       	pop	r0
     59a:	cf 91       	pop	r28
     59c:	df 91       	pop	r29
     59e:	08 95       	ret

000005a0 <vibro_eyes1>:
1010 1010 1010 1010 == 0xAAAA
0101 0101 0101 0101	== 0x5555
*/

void vibro_eyes1()
{
     5a0:	df 93       	push	r29
     5a2:	cf 93       	push	r28
     5a4:	00 d0       	rcall	.+0      	; 0x5a6 <vibro_eyes1+0x6>
     5a6:	00 d0       	rcall	.+0      	; 0x5a8 <vibro_eyes1+0x8>
     5a8:	cd b7       	in	r28, 0x3d	; 61
     5aa:	de b7       	in	r29, 0x3e	; 62
	uart_send_stringP(PSTR("vibro_eyes1.\r"));
     5ac:	86 eb       	ldi	r24, 0xB6	; 182
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <uart_send_stringP>
	//_delay_ms(1000);

	uint16_t ve1[] = { 0xAAAA, 0x5555 };
     5b4:	8a ea       	ldi	r24, 0xAA	; 170
     5b6:	9a ea       	ldi	r25, 0xAA	; 170
     5b8:	9a 83       	std	Y+2, r25	; 0x02
     5ba:	89 83       	std	Y+1, r24	; 0x01
     5bc:	85 e5       	ldi	r24, 0x55	; 85
     5be:	95 e5       	ldi	r25, 0x55	; 85
     5c0:	9c 83       	std	Y+4, r25	; 0x04
     5c2:	8b 83       	std	Y+3, r24	; 0x03
	sweep(ve1, 2);
     5c4:	ce 01       	movw	r24, r28
     5c6:	01 96       	adiw	r24, 0x01	; 1
     5c8:	62 e0       	ldi	r22, 0x02	; 2
     5ca:	0e 94 4d 02 	call	0x49a	; 0x49a <sweep>
}
     5ce:	0f 90       	pop	r0
     5d0:	0f 90       	pop	r0
     5d2:	0f 90       	pop	r0
     5d4:	0f 90       	pop	r0
     5d6:	cf 91       	pop	r28
     5d8:	df 91       	pop	r29
     5da:	08 95       	ret

000005dc <saw_eyes2>:
0110 1101 1011 0110 == 0x6DB6
*/
// se2 array has 3 elements

void saw_eyes2()
{
     5dc:	df 93       	push	r29
     5de:	cf 93       	push	r28
     5e0:	00 d0       	rcall	.+0      	; 0x5e2 <saw_eyes2+0x6>
     5e2:	00 d0       	rcall	.+0      	; 0x5e4 <saw_eyes2+0x8>
     5e4:	00 d0       	rcall	.+0      	; 0x5e6 <saw_eyes2+0xa>
     5e6:	cd b7       	in	r28, 0x3d	; 61
     5e8:	de b7       	in	r29, 0x3e	; 62
	uart_send_stringP(PSTR("saw_eyes2.\r"));
     5ea:	8c ed       	ldi	r24, 0xDC	; 220
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <uart_send_stringP>
	//_delay_ms(1000);

	uint16_t se2[] = { 0xDB6D, 0xB6DB, 0x6DB6 };
     5f2:	de 01       	movw	r26, r28
     5f4:	11 96       	adiw	r26, 0x01	; 1
     5f6:	ed e0       	ldi	r30, 0x0D	; 13
     5f8:	f1 e0       	ldi	r31, 0x01	; 1
     5fa:	86 e0       	ldi	r24, 0x06	; 6
     5fc:	01 90       	ld	r0, Z+
     5fe:	0d 92       	st	X+, r0
     600:	81 50       	subi	r24, 0x01	; 1
     602:	e1 f7       	brne	.-8      	; 0x5fc <saw_eyes2+0x20>
	sweep(se2, 3);
     604:	ce 01       	movw	r24, r28
     606:	01 96       	adiw	r24, 0x01	; 1
     608:	63 e0       	ldi	r22, 0x03	; 3
     60a:	0e 94 4d 02 	call	0x49a	; 0x49a <sweep>

}
     60e:	26 96       	adiw	r28, 0x06	; 6
     610:	0f b6       	in	r0, 0x3f	; 63
     612:	f8 94       	cli
     614:	de bf       	out	0x3e, r29	; 62
     616:	0f be       	out	0x3f, r0	; 63
     618:	cd bf       	out	0x3d, r28	; 61
     61a:	cf 91       	pop	r28
     61c:	df 91       	pop	r29
     61e:	08 95       	ret

00000620 <saw_eyes1>:
1001 0010 0100 1001 == 0x9249
*/
// se1 array has 3 elements

void saw_eyes1()
{
     620:	df 93       	push	r29
     622:	cf 93       	push	r28
     624:	cd b7       	in	r28, 0x3d	; 61
     626:	de b7       	in	r29, 0x3e	; 62
     628:	2c 97       	sbiw	r28, 0x0c	; 12
     62a:	0f b6       	in	r0, 0x3f	; 63
     62c:	f8 94       	cli
     62e:	de bf       	out	0x3e, r29	; 62
     630:	0f be       	out	0x3f, r0	; 63
     632:	cd bf       	out	0x3d, r28	; 61
	uart_send_stringP(PSTR("saw_eyes1.\r"));
     634:	88 ee       	ldi	r24, 0xE8	; 232
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <uart_send_stringP>
	//_delay_ms(1000);

	uint16_t se1[] = { 0x9249, 0x2492, 0x4924, 0x9249, 0x2492, 0x4924 };
     63c:	de 01       	movw	r26, r28
     63e:	11 96       	adiw	r26, 0x01	; 1
     640:	e3 e1       	ldi	r30, 0x13	; 19
     642:	f1 e0       	ldi	r31, 0x01	; 1
     644:	8c e0       	ldi	r24, 0x0C	; 12
     646:	01 90       	ld	r0, Z+
     648:	0d 92       	st	X+, r0
     64a:	81 50       	subi	r24, 0x01	; 1
     64c:	e1 f7       	brne	.-8      	; 0x646 <saw_eyes1+0x26>
	sweep(se1, 3);
     64e:	ce 01       	movw	r24, r28
     650:	01 96       	adiw	r24, 0x01	; 1
     652:	63 e0       	ldi	r22, 0x03	; 3
     654:	0e 94 4d 02 	call	0x49a	; 0x49a <sweep>
}
     658:	2c 96       	adiw	r28, 0x0c	; 12
     65a:	0f b6       	in	r0, 0x3f	; 63
     65c:	f8 94       	cli
     65e:	de bf       	out	0x3e, r29	; 62
     660:	0f be       	out	0x3f, r0	; 63
     662:	cd bf       	out	0x3d, r28	; 61
     664:	cf 91       	pop	r28
     666:	df 91       	pop	r29
     668:	08 95       	ret

0000066a <wall_eyes2>:
1000 0000 0000 0001 == 0x8001
*/
// we2 array has 9 elements

void wall_eyes2()
{
     66a:	df 93       	push	r29
     66c:	cf 93       	push	r28
     66e:	cd b7       	in	r28, 0x3d	; 61
     670:	de b7       	in	r29, 0x3e	; 62
     672:	62 97       	sbiw	r28, 0x12	; 18
     674:	0f b6       	in	r0, 0x3f	; 63
     676:	f8 94       	cli
     678:	de bf       	out	0x3e, r29	; 62
     67a:	0f be       	out	0x3f, r0	; 63
     67c:	cd bf       	out	0x3d, r28	; 61
	uart_send_stringP(PSTR("wall_eyes2.\r"));
     67e:	84 ef       	ldi	r24, 0xF4	; 244
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <uart_send_stringP>
	//_delay_ms(1000);
	uint16_t we2[] = { 0x0180, 0x02C0, 0x0660, 0x0C20, 0x1818, 0x200C, 0x6006, 0xC002, 0x8001 };
     686:	de 01       	movw	r26, r28
     688:	11 96       	adiw	r26, 0x01	; 1
     68a:	ef e1       	ldi	r30, 0x1F	; 31
     68c:	f1 e0       	ldi	r31, 0x01	; 1
     68e:	82 e1       	ldi	r24, 0x12	; 18
     690:	01 90       	ld	r0, Z+
     692:	0d 92       	st	X+, r0
     694:	81 50       	subi	r24, 0x01	; 1
     696:	e1 f7       	brne	.-8      	; 0x690 <wall_eyes2+0x26>
	sweep(we2, 9);
     698:	ce 01       	movw	r24, r28
     69a:	01 96       	adiw	r24, 0x01	; 1
     69c:	69 e0       	ldi	r22, 0x09	; 9
     69e:	0e 94 4d 02 	call	0x49a	; 0x49a <sweep>
}
     6a2:	62 96       	adiw	r28, 0x12	; 18
     6a4:	0f b6       	in	r0, 0x3f	; 63
     6a6:	f8 94       	cli
     6a8:	de bf       	out	0x3e, r29	; 62
     6aa:	0f be       	out	0x3f, r0	; 63
     6ac:	cd bf       	out	0x3d, r28	; 61
     6ae:	cf 91       	pop	r28
     6b0:	df 91       	pop	r29
     6b2:	08 95       	ret

000006b4 <wall_eyes1>:
1000 0000 0000 0001 == 0x8001
*/
// we1 array has 8 elements

void wall_eyes1()
{
     6b4:	df 93       	push	r29
     6b6:	cf 93       	push	r28
     6b8:	cd b7       	in	r28, 0x3d	; 61
     6ba:	de b7       	in	r29, 0x3e	; 62
     6bc:	60 97       	sbiw	r28, 0x10	; 16
     6be:	0f b6       	in	r0, 0x3f	; 63
     6c0:	f8 94       	cli
     6c2:	de bf       	out	0x3e, r29	; 62
     6c4:	0f be       	out	0x3f, r0	; 63
     6c6:	cd bf       	out	0x3d, r28	; 61
	uart_send_stringP(PSTR("wall_eyes1.\r"));
     6c8:	81 e0       	ldi	r24, 0x01	; 1
     6ca:	91 e0       	ldi	r25, 0x01	; 1
     6cc:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <uart_send_stringP>
	//_delay_ms(1000);
	uint16_t we1[] = { 0x0180, 0x0240, 0x0420, 0x0810, 0x1008, 0x2004, 0x4002, 0x8001 };
     6d0:	de 01       	movw	r26, r28
     6d2:	11 96       	adiw	r26, 0x01	; 1
     6d4:	e1 e3       	ldi	r30, 0x31	; 49
     6d6:	f1 e0       	ldi	r31, 0x01	; 1
     6d8:	80 e1       	ldi	r24, 0x10	; 16
     6da:	01 90       	ld	r0, Z+
     6dc:	0d 92       	st	X+, r0
     6de:	81 50       	subi	r24, 0x01	; 1
     6e0:	e1 f7       	brne	.-8      	; 0x6da <wall_eyes1+0x26>
	sweep(we1, 8);
     6e2:	ce 01       	movw	r24, r28
     6e4:	01 96       	adiw	r24, 0x01	; 1
     6e6:	68 e0       	ldi	r22, 0x08	; 8
     6e8:	0e 94 4d 02 	call	0x49a	; 0x49a <sweep>
}
     6ec:	60 96       	adiw	r28, 0x10	; 16
     6ee:	0f b6       	in	r0, 0x3f	; 63
     6f0:	f8 94       	cli
     6f2:	de bf       	out	0x3e, r29	; 62
     6f4:	0f be       	out	0x3f, r0	; 63
     6f6:	cd bf       	out	0x3d, r28	; 61
     6f8:	cf 91       	pop	r28
     6fa:	df 91       	pop	r29
     6fc:	08 95       	ret

000006fe <cylon_eyes5>:
1111 1000 0000 0000 == 0xF800
*/
// ce5 has 12 elements

void cylon_eyes5()
{
     6fe:	df 93       	push	r29
     700:	cf 93       	push	r28
     702:	cd b7       	in	r28, 0x3d	; 61
     704:	de b7       	in	r29, 0x3e	; 62
     706:	68 97       	sbiw	r28, 0x18	; 24
     708:	0f b6       	in	r0, 0x3f	; 63
     70a:	f8 94       	cli
     70c:	de bf       	out	0x3e, r29	; 62
     70e:	0f be       	out	0x3f, r0	; 63
     710:	cd bf       	out	0x3d, r28	; 61
	uart_send_stringP(PSTR("cylon_eyes4.\r"));
     712:	8e e0       	ldi	r24, 0x0E	; 14
     714:	91 e0       	ldi	r25, 0x01	; 1
     716:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <uart_send_stringP>
	//_delay_ms(1000);
	
	uint16_t ce5[] = { 0x001F, 0x002E, 0x007C, 0x00F8, 0x01F0, 0x02E0, 0x07C0, 0x0F80, 0x1F00, 0x2E00, 0x7C00, 0xF800 };
     71a:	de 01       	movw	r26, r28
     71c:	11 96       	adiw	r26, 0x01	; 1
     71e:	e1 e4       	ldi	r30, 0x41	; 65
     720:	f1 e0       	ldi	r31, 0x01	; 1
     722:	88 e1       	ldi	r24, 0x18	; 24
     724:	01 90       	ld	r0, Z+
     726:	0d 92       	st	X+, r0
     728:	81 50       	subi	r24, 0x01	; 1
     72a:	e1 f7       	brne	.-8      	; 0x724 <cylon_eyes5+0x26>
	sweep(ce5, 12);
     72c:	ce 01       	movw	r24, r28
     72e:	01 96       	adiw	r24, 0x01	; 1
     730:	6c e0       	ldi	r22, 0x0C	; 12
     732:	0e 94 4d 02 	call	0x49a	; 0x49a <sweep>
}
     736:	68 96       	adiw	r28, 0x18	; 24
     738:	0f b6       	in	r0, 0x3f	; 63
     73a:	f8 94       	cli
     73c:	de bf       	out	0x3e, r29	; 62
     73e:	0f be       	out	0x3f, r0	; 63
     740:	cd bf       	out	0x3d, r28	; 61
     742:	cf 91       	pop	r28
     744:	df 91       	pop	r29
     746:	08 95       	ret

00000748 <cylon_eyes4>:
1111 0000 0000 0000 == 0xF000
*/
// ce4 has 13 elements

void cylon_eyes4()
{
     748:	df 93       	push	r29
     74a:	cf 93       	push	r28
     74c:	cd b7       	in	r28, 0x3d	; 61
     74e:	de b7       	in	r29, 0x3e	; 62
     750:	6a 97       	sbiw	r28, 0x1a	; 26
     752:	0f b6       	in	r0, 0x3f	; 63
     754:	f8 94       	cli
     756:	de bf       	out	0x3e, r29	; 62
     758:	0f be       	out	0x3f, r0	; 63
     75a:	cd bf       	out	0x3d, r28	; 61
	uart_send_stringP(PSTR("cylon_eyes4.\r"));
     75c:	8c e1       	ldi	r24, 0x1C	; 28
     75e:	91 e0       	ldi	r25, 0x01	; 1
     760:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <uart_send_stringP>
	//_delay_ms(1000);
	
	uint16_t ce4[] = { 0x000F, 0x001E, 0x002C, 0x0078, 0x00F0, 0x01E0, 0x02C0, 0x0780, 0x0F00, 0x1E00, 0x2C00, 0x7800, 0xF000 };
     764:	de 01       	movw	r26, r28
     766:	11 96       	adiw	r26, 0x01	; 1
     768:	e9 e5       	ldi	r30, 0x59	; 89
     76a:	f1 e0       	ldi	r31, 0x01	; 1
     76c:	8a e1       	ldi	r24, 0x1A	; 26
     76e:	01 90       	ld	r0, Z+
     770:	0d 92       	st	X+, r0
     772:	81 50       	subi	r24, 0x01	; 1
     774:	e1 f7       	brne	.-8      	; 0x76e <cylon_eyes4+0x26>
	sweep(ce4, 14);
     776:	ce 01       	movw	r24, r28
     778:	01 96       	adiw	r24, 0x01	; 1
     77a:	6e e0       	ldi	r22, 0x0E	; 14
     77c:	0e 94 4d 02 	call	0x49a	; 0x49a <sweep>
}
     780:	6a 96       	adiw	r28, 0x1a	; 26
     782:	0f b6       	in	r0, 0x3f	; 63
     784:	f8 94       	cli
     786:	de bf       	out	0x3e, r29	; 62
     788:	0f be       	out	0x3f, r0	; 63
     78a:	cd bf       	out	0x3d, r28	; 61
     78c:	cf 91       	pop	r28
     78e:	df 91       	pop	r29
     790:	08 95       	ret

00000792 <cylon_eyes3>:
1110 0000 0000 0000 == 0xE000
*/
// ce3 has 14 elements

void cylon_eyes3()
{
     792:	df 93       	push	r29
     794:	cf 93       	push	r28
     796:	cd b7       	in	r28, 0x3d	; 61
     798:	de b7       	in	r29, 0x3e	; 62
     79a:	6c 97       	sbiw	r28, 0x1c	; 28
     79c:	0f b6       	in	r0, 0x3f	; 63
     79e:	f8 94       	cli
     7a0:	de bf       	out	0x3e, r29	; 62
     7a2:	0f be       	out	0x3f, r0	; 63
     7a4:	cd bf       	out	0x3d, r28	; 61
	uart_send_stringP(PSTR("cylon_eyes3.\r"));
     7a6:	8a e2       	ldi	r24, 0x2A	; 42
     7a8:	91 e0       	ldi	r25, 0x01	; 1
     7aa:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <uart_send_stringP>
	//_delay_ms(1000);
	
	uint16_t ce3[] = { 0x0007, 0x000E, 0x001C, 0x0038, 0x0070, 0x00E0, 0x01C0, 0x0380, 0x0700, 0x0E00, 0x1C00, 0x3800, 0x7000, 0xE000 };
     7ae:	de 01       	movw	r26, r28
     7b0:	11 96       	adiw	r26, 0x01	; 1
     7b2:	e3 e7       	ldi	r30, 0x73	; 115
     7b4:	f1 e0       	ldi	r31, 0x01	; 1
     7b6:	8c e1       	ldi	r24, 0x1C	; 28
     7b8:	01 90       	ld	r0, Z+
     7ba:	0d 92       	st	X+, r0
     7bc:	81 50       	subi	r24, 0x01	; 1
     7be:	e1 f7       	brne	.-8      	; 0x7b8 <cylon_eyes3+0x26>
	sweep(ce3, 13);
     7c0:	ce 01       	movw	r24, r28
     7c2:	01 96       	adiw	r24, 0x01	; 1
     7c4:	6d e0       	ldi	r22, 0x0D	; 13
     7c6:	0e 94 4d 02 	call	0x49a	; 0x49a <sweep>
}
     7ca:	6c 96       	adiw	r28, 0x1c	; 28
     7cc:	0f b6       	in	r0, 0x3f	; 63
     7ce:	f8 94       	cli
     7d0:	de bf       	out	0x3e, r29	; 62
     7d2:	0f be       	out	0x3f, r0	; 63
     7d4:	cd bf       	out	0x3d, r28	; 61
     7d6:	cf 91       	pop	r28
     7d8:	df 91       	pop	r29
     7da:	08 95       	ret

000007dc <cylon_eyes2>:
1100 0000 0000 0000 == 0xC000
*/
// ce2 has 15 elements

void cylon_eyes2()
{
     7dc:	df 93       	push	r29
     7de:	cf 93       	push	r28
     7e0:	cd b7       	in	r28, 0x3d	; 61
     7e2:	de b7       	in	r29, 0x3e	; 62
     7e4:	6e 97       	sbiw	r28, 0x1e	; 30
     7e6:	0f b6       	in	r0, 0x3f	; 63
     7e8:	f8 94       	cli
     7ea:	de bf       	out	0x3e, r29	; 62
     7ec:	0f be       	out	0x3f, r0	; 63
     7ee:	cd bf       	out	0x3d, r28	; 61
	uart_send_stringP(PSTR("cylon_eyes2.\r"));
     7f0:	88 e3       	ldi	r24, 0x38	; 56
     7f2:	91 e0       	ldi	r25, 0x01	; 1
     7f4:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <uart_send_stringP>
	//_delay_ms(1000);
	
	uint16_t ce2[] = { 0x0003, 0x0006, 0x000C, 0x0018, 0x0030, 0x0060, 0x00C0, 0x0180, 0x0300, 0x0600, 0x0C00, 0x1800, 0x3000, 0x6000, 0xC000 };
     7f8:	de 01       	movw	r26, r28
     7fa:	11 96       	adiw	r26, 0x01	; 1
     7fc:	ef e8       	ldi	r30, 0x8F	; 143
     7fe:	f1 e0       	ldi	r31, 0x01	; 1
     800:	8e e1       	ldi	r24, 0x1E	; 30
     802:	01 90       	ld	r0, Z+
     804:	0d 92       	st	X+, r0
     806:	81 50       	subi	r24, 0x01	; 1
     808:	e1 f7       	brne	.-8      	; 0x802 <cylon_eyes2+0x26>
	sweep(ce2, 15);
     80a:	ce 01       	movw	r24, r28
     80c:	01 96       	adiw	r24, 0x01	; 1
     80e:	6f e0       	ldi	r22, 0x0F	; 15
     810:	0e 94 4d 02 	call	0x49a	; 0x49a <sweep>
}
     814:	6e 96       	adiw	r28, 0x1e	; 30
     816:	0f b6       	in	r0, 0x3f	; 63
     818:	f8 94       	cli
     81a:	de bf       	out	0x3e, r29	; 62
     81c:	0f be       	out	0x3f, r0	; 63
     81e:	cd bf       	out	0x3d, r28	; 61
     820:	cf 91       	pop	r28
     822:	df 91       	pop	r29
     824:	08 95       	ret

00000826 <cylon_eyes1>:
0100 0000 0000 0000 == 0x4000
1000 0000 0000 0000 == 0x8000
*/
// ce1 has 16 elements
void cylon_eyes1()
{
     826:	df 93       	push	r29
     828:	cf 93       	push	r28
     82a:	cd b7       	in	r28, 0x3d	; 61
     82c:	de b7       	in	r29, 0x3e	; 62
     82e:	a0 97       	sbiw	r28, 0x20	; 32
     830:	0f b6       	in	r0, 0x3f	; 63
     832:	f8 94       	cli
     834:	de bf       	out	0x3e, r29	; 62
     836:	0f be       	out	0x3f, r0	; 63
     838:	cd bf       	out	0x3d, r28	; 61
	uart_send_stringP(PSTR("cylon_eyes.\r"));
     83a:	86 e4       	ldi	r24, 0x46	; 70
     83c:	91 e0       	ldi	r25, 0x01	; 1
     83e:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <uart_send_stringP>

	uint16_t ce1[] = { 0x0001, 0x0002, 0x0004, 0x0008, 0x0010, 0x0020, 0x0040, 0x0080, 0x0100, 0x0200, 0x0400, 0x0800, 0x1000, 0x2000, 0x4000, 0x8000 };
     842:	de 01       	movw	r26, r28
     844:	11 96       	adiw	r26, 0x01	; 1
     846:	ed ea       	ldi	r30, 0xAD	; 173
     848:	f1 e0       	ldi	r31, 0x01	; 1
     84a:	80 e2       	ldi	r24, 0x20	; 32
     84c:	01 90       	ld	r0, Z+
     84e:	0d 92       	st	X+, r0
     850:	81 50       	subi	r24, 0x01	; 1
     852:	e1 f7       	brne	.-8      	; 0x84c <cylon_eyes1+0x26>

	sweep(ce1, 16);	
     854:	ce 01       	movw	r24, r28
     856:	01 96       	adiw	r24, 0x01	; 1
     858:	60 e1       	ldi	r22, 0x10	; 16
     85a:	0e 94 4d 02 	call	0x49a	; 0x49a <sweep>
}
     85e:	a0 96       	adiw	r28, 0x20	; 32
     860:	0f b6       	in	r0, 0x3f	; 63
     862:	f8 94       	cli
     864:	de bf       	out	0x3e, r29	; 62
     866:	0f be       	out	0x3f, r0	; 63
     868:	cd bf       	out	0x3d, r28	; 61
     86a:	cf 91       	pop	r28
     86c:	df 91       	pop	r29
     86e:	08 95       	ret

00000870 <full_monty>:
}

// let it all hang out
void full_monty()
{
	cylon_eyes1();
     870:	0e 94 13 04 	call	0x826	; 0x826 <cylon_eyes1>
	cylon_eyes2();
     874:	0e 94 ee 03 	call	0x7dc	; 0x7dc <cylon_eyes2>
	cylon_eyes3();
     878:	0e 94 c9 03 	call	0x792	; 0x792 <cylon_eyes3>
	cylon_eyes4();
     87c:	0e 94 a4 03 	call	0x748	; 0x748 <cylon_eyes4>
	wall_eyes1();
     880:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <wall_eyes1>
	wall_eyes2();
     884:	0e 94 35 03 	call	0x66a	; 0x66a <wall_eyes2>
	saw_eyes1();
     888:	0e 94 10 03 	call	0x620	; 0x620 <saw_eyes1>
	saw_eyes2();
     88c:	0e 94 ee 02 	call	0x5dc	; 0x5dc <saw_eyes2>
	ant_eyes1();
     890:	0e 94 83 01 	call	0x306	; 0x306 <ant_eyes1>
	ant_eyes2();
     894:	0e 94 2b 02 	call	0x456	; 0x456 <ant_eyes2>
	vibro_eyes1();
     898:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <vibro_eyes1>
	vibro_eyes2();
     89c:	0e 94 b2 02 	call	0x564	; 0x564 <vibro_eyes2>
	blinkin_eyes();
     8a0:	0e 94 96 02 	call	0x52c	; 0x52c <blinkin_eyes>
	random_eyes();
     8a4:	0e 94 78 02 	call	0x4f0	; 0x4f0 <random_eyes>
}
     8a8:	08 95       	ret

000008aa <main>:


void parse_dip_switch(void);

int main(void)
{	 
     8aa:	cf 93       	push	r28
     8ac:	df 93       	push	r29
	cylon_eyes_init();
     8ae:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <cylon_eyes_init>

	identify();
     8b2:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <identify>

	spi_init_master();
     8b6:	0e 94 aa 05 	call	0xb54	; 0xb54 <spi_init_master>

	dip_switch = 0xC0;// Set to medium speed cylon_eye1
     8ba:	80 ec       	ldi	r24, 0xC0	; 192
     8bc:	90 e0       	ldi	r25, 0x00	; 0
     8be:	90 93 dd 02 	sts	0x02DD, r25
     8c2:	80 93 dc 02 	sts	0x02DC, r24

	temp0 = temp1 = temp2 = (uint8_t) dip_switch;

	sweep_pattern = mask_bits(temp0,SELECTMASK);
	polarity = mask_bits(temp1,POLARITYMASK);
	sweep_speed = 10 + ((mask_bits(temp2,SPEEDMASK)>>4)*25);	
     8c6:	c9 e1       	ldi	r28, 0x19	; 25
     8c8:	d0 e0       	ldi	r29, 0x00	; 0

void parse_dip_switch()
{
	uint8_t temp0, temp1, temp2;

	temp0 = temp1 = temp2 = (uint8_t) dip_switch;
     8ca:	80 91 dc 02 	lds	r24, 0x02DC
     8ce:	90 91 dd 02 	lds	r25, 0x02DD

	sweep_pattern = mask_bits(temp0,SELECTMASK);
     8d2:	28 2f       	mov	r18, r24
     8d4:	2f 70       	andi	r18, 0x0F	; 15
     8d6:	20 93 db 02 	sts	0x02DB, r18
	polarity = mask_bits(temp1,POLARITYMASK);
     8da:	28 2f       	mov	r18, r24
     8dc:	20 78       	andi	r18, 0x80	; 128
     8de:	20 93 00 01 	sts	0x0100, r18
	sweep_speed = 10 + ((mask_bits(temp2,SPEEDMASK)>>4)*25);	
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	88 77       	andi	r24, 0x78	; 120
     8e6:	90 70       	andi	r25, 0x00	; 0
     8e8:	64 e0       	ldi	r22, 0x04	; 4
     8ea:	95 95       	asr	r25
     8ec:	87 95       	ror	r24
     8ee:	6a 95       	dec	r22
     8f0:	e1 f7       	brne	.-8      	; 0x8ea <main+0x40>
     8f2:	9c 01       	movw	r18, r24
     8f4:	2c 9f       	mul	r18, r28
     8f6:	c0 01       	movw	r24, r0
     8f8:	2d 9f       	mul	r18, r29
     8fa:	90 0d       	add	r25, r0
     8fc:	3c 9f       	mul	r19, r28
     8fe:	90 0d       	add	r25, r0
     900:	11 24       	eor	r1, r1
     902:	86 5f       	subi	r24, 0xF6	; 246
     904:	80 93 da 02 	sts	0x02DA, r24
	{
		// Set pattern, polarity, and speed		
		parse_dip_switch();
		
		// Pick an LED pattern to run once
		switch (sweep_pattern)
     908:	80 91 db 02 	lds	r24, 0x02DB
     90c:	87 30       	cpi	r24, 0x07	; 7
     90e:	b9 f1       	breq	.+110    	; 0x97e <main+0xd4>
     910:	88 30       	cpi	r24, 0x08	; 8
     912:	70 f4       	brcc	.+28     	; 0x930 <main+0x86>
     914:	83 30       	cpi	r24, 0x03	; 3
     916:	39 f1       	breq	.+78     	; 0x966 <main+0xbc>
     918:	84 30       	cpi	r24, 0x04	; 4
     91a:	28 f4       	brcc	.+10     	; 0x926 <main+0x7c>
     91c:	81 30       	cpi	r24, 0x01	; 1
     91e:	e9 f0       	breq	.+58     	; 0x95a <main+0xb0>
     920:	82 30       	cpi	r24, 0x02	; 2
     922:	f0 f4       	brcc	.+60     	; 0x960 <main+0xb6>
     924:	17 c0       	rjmp	.+46     	; 0x954 <main+0xaa>
     926:	85 30       	cpi	r24, 0x05	; 5
     928:	21 f1       	breq	.+72     	; 0x972 <main+0xc8>
     92a:	86 30       	cpi	r24, 0x06	; 6
     92c:	28 f5       	brcc	.+74     	; 0x978 <main+0xce>
     92e:	1e c0       	rjmp	.+60     	; 0x96c <main+0xc2>
     930:	8b 30       	cpi	r24, 0x0B	; 11
     932:	89 f1       	breq	.+98     	; 0x996 <main+0xec>
     934:	8c 30       	cpi	r24, 0x0C	; 12
     936:	28 f4       	brcc	.+10     	; 0x942 <main+0x98>
     938:	89 30       	cpi	r24, 0x09	; 9
     93a:	39 f1       	breq	.+78     	; 0x98a <main+0xe0>
     93c:	8a 30       	cpi	r24, 0x0A	; 10
     93e:	40 f5       	brcc	.+80     	; 0x990 <main+0xe6>
     940:	21 c0       	rjmp	.+66     	; 0x984 <main+0xda>
     942:	8d 30       	cpi	r24, 0x0D	; 13
     944:	71 f1       	breq	.+92     	; 0x9a2 <main+0xf8>
     946:	8d 30       	cpi	r24, 0x0D	; 13
     948:	48 f1       	brcs	.+82     	; 0x99c <main+0xf2>
     94a:	8e 30       	cpi	r24, 0x0E	; 14
     94c:	69 f1       	breq	.+90     	; 0x9a8 <main+0xfe>
     94e:	8f 30       	cpi	r24, 0x0F	; 15
     950:	89 f5       	brne	.+98     	; 0x9b4 <main+0x10a>
     952:	2d c0       	rjmp	.+90     	; 0x9ae <main+0x104>
		{
			case CYLONEYES1:
				cylon_eyes1();
     954:	0e 94 13 04 	call	0x826	; 0x826 <cylon_eyes1>
     958:	b8 cf       	rjmp	.-144    	; 0x8ca <main+0x20>
				break;
			case CYLONEYES2:
				cylon_eyes2();
     95a:	0e 94 ee 03 	call	0x7dc	; 0x7dc <cylon_eyes2>
     95e:	b5 cf       	rjmp	.-150    	; 0x8ca <main+0x20>
				break;
			case CYLONEYES3:
				cylon_eyes3();
     960:	0e 94 c9 03 	call	0x792	; 0x792 <cylon_eyes3>
     964:	b2 cf       	rjmp	.-156    	; 0x8ca <main+0x20>
				break;
			case CYLONEYES4:
				cylon_eyes4();
     966:	0e 94 a4 03 	call	0x748	; 0x748 <cylon_eyes4>
     96a:	af cf       	rjmp	.-162    	; 0x8ca <main+0x20>
				break;
			case CYLONEYES5:
				cylon_eyes5();
     96c:	0e 94 7f 03 	call	0x6fe	; 0x6fe <cylon_eyes5>
     970:	ac cf       	rjmp	.-168    	; 0x8ca <main+0x20>
				break;
			case WALLEYES1:
				wall_eyes1();
     972:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <wall_eyes1>
     976:	a9 cf       	rjmp	.-174    	; 0x8ca <main+0x20>
				break;
			case WALLEYES2:
				wall_eyes2();
     978:	0e 94 35 03 	call	0x66a	; 0x66a <wall_eyes2>
     97c:	a6 cf       	rjmp	.-180    	; 0x8ca <main+0x20>
				break;
			case SAWEYES1:
				saw_eyes1();				
     97e:	0e 94 10 03 	call	0x620	; 0x620 <saw_eyes1>
     982:	a3 cf       	rjmp	.-186    	; 0x8ca <main+0x20>
				break;
			case SAWEYES2:
				saw_eyes2();				
     984:	0e 94 ee 02 	call	0x5dc	; 0x5dc <saw_eyes2>
     988:	a0 cf       	rjmp	.-192    	; 0x8ca <main+0x20>
				break;
			case ANTEYES1:
				ant_eyes1();				
     98a:	0e 94 83 01 	call	0x306	; 0x306 <ant_eyes1>
     98e:	9d cf       	rjmp	.-198    	; 0x8ca <main+0x20>
				break;
			case ANTEYES2:
				ant_eyes2();				
     990:	0e 94 2b 02 	call	0x456	; 0x456 <ant_eyes2>
     994:	9a cf       	rjmp	.-204    	; 0x8ca <main+0x20>
				break;
			case VIBROEYES1:
				vibro_eyes1();
     996:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <vibro_eyes1>
     99a:	97 cf       	rjmp	.-210    	; 0x8ca <main+0x20>
				break;
			case VIBROEYES2:
				vibro_eyes2();
     99c:	0e 94 b2 02 	call	0x564	; 0x564 <vibro_eyes2>
     9a0:	94 cf       	rjmp	.-216    	; 0x8ca <main+0x20>
				break;
			case BLINKEYES:
				blinkin_eyes();
     9a2:	0e 94 96 02 	call	0x52c	; 0x52c <blinkin_eyes>
     9a6:	91 cf       	rjmp	.-222    	; 0x8ca <main+0x20>
				break;			
			case RANDOMEYES:
				random_eyes();
     9a8:	0e 94 78 02 	call	0x4f0	; 0x4f0 <random_eyes>
     9ac:	8e cf       	rjmp	.-228    	; 0x8ca <main+0x20>
				break;				
			case FULLMONTY:
				full_monty();
     9ae:	0e 94 38 04 	call	0x870	; 0x870 <full_monty>
     9b2:	8b cf       	rjmp	.-234    	; 0x8ca <main+0x20>
				break;			
			default:
				error_eyes();
     9b4:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <error_eyes>
     9b8:	88 cf       	rjmp	.-240    	; 0x8ca <main+0x20>

000009ba <OSCCAL_calibration>:
{
    unsigned char calibrate = 0;//FALSE;
    int temp;
    unsigned char tempL;

    CLKPR = (1<<CLKPCE);        // set Clock Prescaler Change Enable
     9ba:	80 e8       	ldi	r24, 0x80	; 128
     9bc:	80 93 61 00 	sts	0x0061, r24
    // set prescaler = 8, Inter RC 8Mhz / 8 = 1Mhz
    CLKPR = (1<<CLKPS1) | (1<<CLKPS0);
     9c0:	83 e0       	ldi	r24, 0x03	; 3
     9c2:	80 93 61 00 	sts	0x0061, r24
    
    TIMSK2 = 0;             //disable OCIE2A and TOIE2
     9c6:	10 92 70 00 	sts	0x0070, r1

    ASSR = (1<<AS2);        //select asynchronous operation of timer2 (32,768kHz)
     9ca:	88 e0       	ldi	r24, 0x08	; 8
     9cc:	80 93 b6 00 	sts	0x00B6, r24
    
    OCR2A = 200;            // set timer2 compare value 
     9d0:	88 ec       	ldi	r24, 0xC8	; 200
     9d2:	80 93 b3 00 	sts	0x00B3, r24

    TIMSK0 = 0;             // delete any interrupt sources
     9d6:	10 92 6e 00 	sts	0x006E, r1
        
    TCCR1B = (1<<CS10);     // start timer1 with no prescaling
     9da:	81 e0       	ldi	r24, 0x01	; 1
     9dc:	80 93 81 00 	sts	0x0081, r24
    TCCR2A = (1<<CS20);     // start timer2 with no prescaling
     9e0:	80 93 b0 00 	sts	0x00B0, r24

    while((ASSR & 0x01) | (ASSR & 0x04));       //wait for TCN2UB and TCR2UB to be cleared
     9e4:	20 91 b6 00 	lds	r18, 0x00B6
     9e8:	80 91 b6 00 	lds	r24, 0x00B6
     9ec:	90 e0       	ldi	r25, 0x00	; 0
     9ee:	84 70       	andi	r24, 0x04	; 4
     9f0:	90 70       	andi	r25, 0x00	; 0
     9f2:	30 e0       	ldi	r19, 0x00	; 0
     9f4:	21 70       	andi	r18, 0x01	; 1
     9f6:	30 70       	andi	r19, 0x00	; 0
     9f8:	82 2b       	or	r24, r18
     9fa:	93 2b       	or	r25, r19
     9fc:	89 2b       	or	r24, r25
     9fe:	91 f7       	brne	.-28     	; 0x9e4 <OSCCAL_calibration+0x2a>
    
    while(!calibrate)
    {
        cli(); // mt __disable_interrupt();  // disable global interrupt
        
        TIFR1 = 0xFF;   // delete TIFR1 flags
     a00:	4f ef       	ldi	r20, 0xFF	; 255
    
        if (temp > 6250)
        {
            OSCCAL--;   // the internRC oscillator runs to fast, decrease the OSCCAL
        }
        else if (temp < 6120)
     a02:	51 e0       	ldi	r21, 0x01	; 1

    Delay(1000);    // wait for external crystal to stabilise
    
    while(!calibrate)
    {
        cli(); // mt __disable_interrupt();  // disable global interrupt
     a04:	f8 94       	cli
        
        TIFR1 = 0xFF;   // delete TIFR1 flags
     a06:	46 bb       	out	0x16, r20	; 22
        TIFR2 = 0xFF;   // delete TIFR2 flags
     a08:	47 bb       	out	0x17, r20	; 23
        
        TCNT1H = 0;     // clear timer1 counter
     a0a:	10 92 85 00 	sts	0x0085, r1
        TCNT1L = 0;
     a0e:	10 92 84 00 	sts	0x0084, r1
        TCNT2 = 0;      // clear timer2 counter
     a12:	10 92 b2 00 	sts	0x00B2, r1
           
	while ( !(TIFR2 & (1<<OCF2A)) ); // while ( !(TIFR2 && (1<<OCF2A)) );   // wait for timer2 compareflag
     a16:	b9 9b       	sbis	0x17, 1	; 23
     a18:	fe cf       	rjmp	.-4      	; 0xa16 <OSCCAL_calibration+0x5c>
    
        TCCR1B = 0; // stop timer1
     a1a:	10 92 81 00 	sts	0x0081, r1

        sei(); // __enable_interrupt();  // enable global interrupt
     a1e:	78 94       	sei
    
        if ( (TIFR1 & (1<<TOV1)) ) // if ( (TIFR1 && (1<<TOV1)) )
     a20:	b0 99       	sbic	0x16, 0	; 22
     a22:	17 c0       	rjmp	.+46     	; 0xa52 <OSCCAL_calibration+0x98>
        {
            temp = 0xFFFF;      // if timer1 overflows, set the temp to 0xFFFF
        }
        else
        {   // read out the timer1 counter value
            tempL = TCNT1L;
     a24:	90 91 84 00 	lds	r25, 0x0084
            temp = TCNT1H;
     a28:	80 91 85 00 	lds	r24, 0x0085
            temp = (temp << 8);
     a2c:	38 2f       	mov	r19, r24
     a2e:	20 e0       	ldi	r18, 0x00	; 0
            temp += tempL;
     a30:	b9 01       	movw	r22, r18
     a32:	69 0f       	add	r22, r25
     a34:	71 1d       	adc	r23, r1
     a36:	cb 01       	movw	r24, r22
        }
    
        if (temp > 6250)
     a38:	78 e1       	ldi	r23, 0x18	; 24
     a3a:	8b 36       	cpi	r24, 0x6B	; 107
     a3c:	97 07       	cpc	r25, r23
     a3e:	24 f0       	brlt	.+8      	; 0xa48 <OSCCAL_calibration+0x8e>
        {
            OSCCAL--;   // the internRC oscillator runs to fast, decrease the OSCCAL
     a40:	80 91 66 00 	lds	r24, 0x0066
     a44:	81 50       	subi	r24, 0x01	; 1
     a46:	08 c0       	rjmp	.+16     	; 0xa58 <OSCCAL_calibration+0x9e>
        }
        else if (temp < 6120)
     a48:	88 5e       	subi	r24, 0xE8	; 232
     a4a:	97 41       	sbci	r25, 0x17	; 23
     a4c:	14 f0       	brlt	.+4      	; 0xa52 <OSCCAL_calibration+0x98>
     a4e:	81 e0       	ldi	r24, 0x01	; 1
     a50:	06 c0       	rjmp	.+12     	; 0xa5e <OSCCAL_calibration+0xa4>
        {
            OSCCAL++;   // the internRC oscillator runs to slow, increase the OSCCAL
     a52:	80 91 66 00 	lds	r24, 0x0066
     a56:	8f 5f       	subi	r24, 0xFF	; 255
     a58:	80 93 66 00 	sts	0x0066, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
        }
        else
            calibrate = 1;//TRUE;   // the interRC is correct
    
        TCCR1B = (1<<CS10); // start timer1
     a5e:	50 93 81 00 	sts	0x0081, r21

    while((ASSR & 0x01) | (ASSR & 0x04));       //wait for TCN2UB and TCR2UB to be cleared

    Delay(1000);    // wait for external crystal to stabilise
    
    while(!calibrate)
     a62:	88 23       	and	r24, r24
     a64:	79 f2       	breq	.-98     	; 0xa04 <OSCCAL_calibration+0x4a>
        else
            calibrate = 1;//TRUE;   // the interRC is correct
    
        TCCR1B = (1<<CS10); // start timer1
    }
}
     a66:	08 95       	ret

00000a68 <butterfly_init>:
{
// NOTE this all copied directly from the original Butterfly source code
// so it uses a different method for naming registers than the rest of the code
// updated register names to fit new io headers - why do they keep changing this?

    OSCCAL_calibration();   // Calibrate the OSCCAL byte
     a68:	0e 94 dd 04 	call	0x9ba	; 0x9ba <OSCCAL_calibration>

    ACSR = (1<<ACD);
     a6c:	90 e8       	ldi	r25, 0x80	; 128
     a6e:	90 bf       	out	0x30, r25	; 48

    // Disable Digital input on PF0-2 (power save)
    DIDR1 = (7<<ADC0D);
     a70:	87 e0       	ldi	r24, 0x07	; 7
     a72:	80 93 7f 00 	sts	0x007F, r24

    PORTB = 0xFF;       // Enable pullups on Ports B and E
     a76:	8f ef       	ldi	r24, 0xFF	; 255
     a78:	85 b9       	out	0x05, r24	; 5
    PORTE = 0xFF;
     a7a:	8e b9       	out	0x0e, r24	; 14
    
    // boost IntRC to 2Mhz to achieve 19200 baudrate
    CLKPR = (1<<CLKPCE);        // set Clock Prescaler Change Enable
     a7c:	e1 e6       	ldi	r30, 0x61	; 97
     a7e:	f0 e0       	ldi	r31, 0x00	; 0
     a80:	90 83       	st	Z, r25
    // set prescaler = 4, Inter RC 8Mhz / 4 = 2Mhz
    CLKPR = (1<<CLKPS1);    
     a82:	92 e0       	ldi	r25, 0x02	; 2
     a84:	90 83       	st	Z, r25

    UBRRH = 0;//(unsigned char)(baudrate>>8);
     a86:	10 92 c5 00 	sts	0x00C5, r1
    UBRRL = 12;//(unsigned char)baudrate;
     a8a:	8c e0       	ldi	r24, 0x0C	; 12
     a8c:	80 93 c4 00 	sts	0x00C4, r24

    // Enable 2x speed
    UCSRA = (1<<U2X);
     a90:	90 93 c0 00 	sts	0x00C0, r25

    // Enable receiver and transmitter
    UCSRB = (1<<RXEN)|(1<<TXEN)|(0<<RXCIE)|(0<<UDRIE);
     a94:	88 e1       	ldi	r24, 0x18	; 24
     a96:	80 93 c1 00 	sts	0x00C1, r24

    // Async. mode, 8N1
    UCSRC = (0<<UMSEL)|(0<<UPM1)|(0<<USBS)|(3<<UCSZ0)|(0<<UCPOL);
     a9a:	86 e0       	ldi	r24, 0x06	; 6
     a9c:	80 93 c2 00 	sts	0x00C2, r24
        
    MCUCR = (1<<IVCE);       
     aa0:	81 e0       	ldi	r24, 0x01	; 1
     aa2:	85 bf       	out	0x35, r24	; 53
    MCUCR = (1<<IVSEL);             //move interruptvectors to the Boot sector    
     aa4:	95 bf       	out	0x35, r25	; 53

    sei(); // mt __enable_interrupt();
     aa6:	78 94       	sei
    
    // mt PCMSK1 = (1<<PORTB6) | (1<<PORTB4);
	PCMSK1 = (1<<PINB6) | (1<<PINB4);       // set pin-change interrupt mask
     aa8:	80 e5       	ldi	r24, 0x50	; 80
     aaa:	80 93 6c 00 	sts	0x006C, r24
  	EIFR   = (1<<PCIF1);                    // clear external intterupt flag 1
     aae:	80 e8       	ldi	r24, 0x80	; 128
     ab0:	8c bb       	out	0x1c, r24	; 28
	EIMSK  = (1<<PCIE1);  
     ab2:	8d bb       	out	0x1d, r24	; 29
}
     ab4:	08 95       	ret

00000ab6 <Delay>:
{
    unsigned char i; // mt int i;
    
    while (millisec--)
        for (i=0; i<125; i++);
}
     ab6:	08 95       	ret

00000ab8 <uart_init>:
	USART Functions
******************************************************/
void uart_init()
{
	// Set Baud registers with values from <util\setbaud.h> in SmileyUSART.h
	USART_BAUD_RATE_HIGH = (F_CPU/(BAUD*16L)-1) >> 8;
     ab8:	10 92 c5 00 	sts	0x00C5, r1
	USART_BAUD_RATE_LOW = (uint8_t)(F_CPU/(BAUD*16L)-1);
     abc:	82 e0       	ldi	r24, 0x02	; 2
     abe:	80 93 c4 00 	sts	0x00C4, r24

	// Enable receiver and transmitter
	USART_CONTROL_STATUS_REG_B = (1 << USART_ENABLE_RECEIVER) | (1 << USART_ENABLE_TRANSMITTER);
     ac2:	88 e1       	ldi	r24, 0x18	; 24
     ac4:	80 93 c1 00 	sts	0x00C1, r24
#elif defined(Butterfly)
	// for the Butterfly reuse the Atmel code for the USART in the intialization process
#else
   #error "No USART definition for MCU in USARTInit"
#endif 
}
     ac8:	08 95       	ret

00000aca <uart_send_byte>:
	// Get and return received data from buffer 
	return USART_DATA_REG;
}*/

void uart_send_byte( uint8_t data )
{
     aca:	98 2f       	mov	r25, r24
	wdt_reset(); // reset the watchdog timer, if it is set
     acc:	a8 95       	wdr
	// Wait for empty transmit buffer 
	while ( !( USART_CONTROL_STATUS_REG_A & (1<<USART_READY_TO_TRANSMIT)) );
     ace:	80 91 c0 00 	lds	r24, 0x00C0
     ad2:	85 ff       	sbrs	r24, 5
     ad4:	fc cf       	rjmp	.-8      	; 0xace <uart_send_byte+0x4>
	// Put data into buffer, sends the data
	USART_DATA_REG = data;
     ad6:	90 93 c6 00 	sts	0x00C6, r25
}
     ada:	08 95       	ret

00000adc <uart_send_bit>:

void uart_send_bit( uint8_t data )
{
     adc:	98 2f       	mov	r25, r24
	wdt_reset(); // reset the watchdog timer, if it is set
     ade:	a8 95       	wdr
	// Wait for empty transmit buffer 
	while ( !( USART_CONTROL_STATUS_REG_A & (1<<USART_READY_TO_TRANSMIT)) );
     ae0:	80 91 c0 00 	lds	r24, 0x00C0
     ae4:	85 ff       	sbrs	r24, 5
     ae6:	fc cf       	rjmp	.-8      	; 0xae0 <uart_send_bit+0x4>
	
	if(data == 1)
     ae8:	91 30       	cpi	r25, 0x01	; 1
     aea:	11 f4       	brne	.+4      	; 0xaf0 <uart_send_bit+0x14>
	{
		USART_DATA_REG = '1';
     aec:	81 e3       	ldi	r24, 0x31	; 49
     aee:	01 c0       	rjmp	.+2      	; 0xaf2 <uart_send_bit+0x16>
	}
	else 
	{
		USART_DATA_REG = '0';
     af0:	80 e3       	ldi	r24, 0x30	; 48
     af2:	80 93 c6 00 	sts	0x00C6, r24
     af6:	08 95       	ret

00000af8 <uart_send_stringP>:
	}
}

void uart_send_stringP(const char *FlashString)
{
     af8:	bc 01       	movw	r22, r24
     afa:	20 e0       	ldi	r18, 0x00	; 0
     afc:	30 e0       	ldi	r19, 0x00	; 0
     afe:	09 c0       	rjmp	.+18     	; 0xb12 <uart_send_stringP+0x1a>
	return USART_DATA_REG;
}*/

void uart_send_byte( uint8_t data )
{
	wdt_reset(); // reset the watchdog timer, if it is set
     b00:	a8 95       	wdr
	// Wait for empty transmit buffer 
	while ( !( USART_CONTROL_STATUS_REG_A & (1<<USART_READY_TO_TRANSMIT)) );
     b02:	80 91 c0 00 	lds	r24, 0x00C0
     b06:	85 ff       	sbrs	r24, 5
     b08:	fc cf       	rjmp	.-8      	; 0xb02 <uart_send_stringP+0xa>
	// Put data into buffer, sends the data
	USART_DATA_REG = data;
     b0a:	40 93 c6 00 	sts	0x00C6, r20

	// The 'for' logic terminates if the byte is '\0' or if i = 80.
	// '\0' is 'null' and terminates C strings
	// The 80 prevents too much overrun if we get a bad pointer
	// and it limits the string size	
	for( i = 0 ; pgm_read_byte(&FlashString[i]) && i < 80; i++) 
     b0e:	2f 5f       	subi	r18, 0xFF	; 255
     b10:	3f 4f       	sbci	r19, 0xFF	; 255
     b12:	fb 01       	movw	r30, r22
     b14:	e2 0f       	add	r30, r18
     b16:	f3 1f       	adc	r31, r19
     b18:	44 91       	lpm	r20, Z+
     b1a:	44 23       	and	r20, r20
     b1c:	19 f0       	breq	.+6      	; 0xb24 <uart_send_stringP+0x2c>
     b1e:	20 35       	cpi	r18, 0x50	; 80
     b20:	31 05       	cpc	r19, r1
     b22:	71 f7       	brne	.-36     	; 0xb00 <uart_send_stringP+0x8>
     b24:	08 95       	ret

00000b26 <uart_send_string>:
			uart_send_byte(pgm_read_byte(&FlashString[i]));
	}
}

void uart_send_string(const char *String)
{
     b26:	ac 01       	movw	r20, r24
     b28:	20 e0       	ldi	r18, 0x00	; 0
     b2a:	30 e0       	ldi	r19, 0x00	; 0
     b2c:	09 c0       	rjmp	.+18     	; 0xb40 <uart_send_string+0x1a>
	return USART_DATA_REG;
}*/

void uart_send_byte( uint8_t data )
{
	wdt_reset(); // reset the watchdog timer, if it is set
     b2e:	a8 95       	wdr
	// Wait for empty transmit buffer 
	while ( !( USART_CONTROL_STATUS_REG_A & (1<<USART_READY_TO_TRANSMIT)) );
     b30:	80 91 c0 00 	lds	r24, 0x00C0
     b34:	85 ff       	sbrs	r24, 5
     b36:	fc cf       	rjmp	.-8      	; 0xb30 <uart_send_string+0xa>
	// Put data into buffer, sends the data
	USART_DATA_REG = data;
     b38:	e0 93 c6 00 	sts	0x00C6, r30

void uart_send_string(const char *String)
{
	int i = 0;

	for( i = 0 ; String[i] && i < 80; i++) 
     b3c:	2f 5f       	subi	r18, 0xFF	; 255
     b3e:	3f 4f       	sbci	r19, 0xFF	; 255
     b40:	fa 01       	movw	r30, r20
     b42:	e2 0f       	add	r30, r18
     b44:	f3 1f       	adc	r31, r19
     b46:	e0 81       	ld	r30, Z
     b48:	ee 23       	and	r30, r30
     b4a:	19 f0       	breq	.+6      	; 0xb52 <uart_send_string+0x2c>
     b4c:	20 35       	cpi	r18, 0x50	; 80
     b4e:	31 05       	cpc	r19, r1
     b50:	71 f7       	brne	.-36     	; 0xb2e <uart_send_string+0x8>
     b52:	08 95       	ret

00000b54 <spi_init_master>:
	Hardware SPI
******************************************************/

void spi_init_master(void)
{
	PORTB |= (1<< MISO_HARDWARE_PIN) \
     b54:	85 b1       	in	r24, 0x05	; 5
     b56:	8f 60       	ori	r24, 0x0F	; 15
     b58:	85 b9       	out	0x05, r24	; 5
 			| (1<< MOSI_HARDWARE_PIN) \
 			| (1<< SCLK_HARDWARE_PIN) \
 			| (1<< SS_HARDWARE_PIN);

	//Set MOSI, SCK AND SS to outputs
	DDRB |= (1<< MOSI_HARDWARE_DDR) \
     b5a:	84 b1       	in	r24, 0x04	; 4
     b5c:	87 60       	ori	r24, 0x07	; 7
     b5e:	84 b9       	out	0x04, r24	; 4
			| (1<< SCLK_HARDWARE_DDR) \
			| (1<< SS_HARDWARE_DDR);

	// Set Miso to input
	DDRB &= ~(1<< MISO_HARDWARE_DDR);
     b60:	23 98       	cbi	0x04, 3	; 4

    SPCR = ( 1 << SPE ) | ( 1 << MSTR ) | ( 1 << SPR0 ); 
     b62:	81 e5       	ldi	r24, 0x51	; 81
     b64:	8c bd       	out	0x2c, r24	; 44
}
     b66:	08 95       	ret

00000b68 <spi_master_rw8>:
uint8_t spi_master_rw8(uint8_t to_slave)
{
	uint8_t from_slave;

	// select slave
	spi_set_ss();
     b68:	28 9a       	sbi	0x05, 0	; 5

	// Put byte in SPI data register
	SPDR = to_slave;	
     b6a:	8e bd       	out	0x2e, r24	; 46

	// Poll SPIF-flag until transfer complete				
	while(!(SPSR & (1<<SPIF)));					
     b6c:	0d b4       	in	r0, 0x2d	; 45
     b6e:	07 fe       	sbrs	r0, 7
     b70:	fd cf       	rjmp	.-6      	; 0xb6c <spi_master_rw8+0x4>

	// Get the SPI data reg.
	from_slave = SPDR;	
     b72:	8e b5       	in	r24, 0x2e	; 46

	// deselect slave
	spi_clear_ss();
     b74:	28 98       	cbi	0x05, 0	; 5
						
	//return it
	return from_slave;
							
}
     b76:	08 95       	ret

00000b78 <spi_master_rw16>:
	uint8_t to_slave_high = (uint8_t) (to_slave >> 8);
	uint8_t from_slave_high = 0;
	uint8_t from_slave_low = 0;

	// select slave
	spi_set_ss();
     b78:	28 9a       	sbi	0x05, 0	; 5

	// Put byte in SPI data register
	SPDR = to_slave_high;	
     b7a:	9e bd       	out	0x2e, r25	; 46

	// Poll SPIF-flag until transfer complete				
	while(!(SPSR & (1<<SPIF)));
     b7c:	0d b4       	in	r0, 0x2d	; 45
     b7e:	07 fe       	sbrs	r0, 7
     b80:	fd cf       	rjmp	.-6      	; 0xb7c <spi_master_rw16+0x4>

	// Get the SPI data reg.
	from_slave_low = SPDR;
     b82:	9e b5       	in	r25, 0x2e	; 46

	// Put byte in SPI data register
	SPDR = to_slave_low;	
     b84:	8e bd       	out	0x2e, r24	; 46

	// Poll SPIF-flag until transfer complete				
	while(!(SPSR & (1<<SPIF)));
     b86:	0d b4       	in	r0, 0x2d	; 45
     b88:	07 fe       	sbrs	r0, 7
     b8a:	fd cf       	rjmp	.-6      	; 0xb86 <spi_master_rw16+0xe>

	// Get the SPI data reg.
	from_slave_high = SPDR;
     b8c:	8e b5       	in	r24, 0x2e	; 46
		
	// deselect slave
	spi_clear_ss();
     b8e:	28 98       	cbi	0x05, 0	; 5
     b90:	38 2f       	mov	r19, r24
     b92:	20 e0       	ldi	r18, 0x00	; 0
     b94:	29 0f       	add	r18, r25
     b96:	31 1d       	adc	r19, r1

	return ( (uint16_t)(from_slave_high << 8) + (uint16_t)from_slave_low );						
}
     b98:	c9 01       	movw	r24, r18
     b9a:	08 95       	ret

00000b9c <__fixunssfsi>:
     b9c:	ef 92       	push	r14
     b9e:	ff 92       	push	r15
     ba0:	0f 93       	push	r16
     ba2:	1f 93       	push	r17
     ba4:	7b 01       	movw	r14, r22
     ba6:	8c 01       	movw	r16, r24
     ba8:	20 e0       	ldi	r18, 0x00	; 0
     baa:	30 e0       	ldi	r19, 0x00	; 0
     bac:	40 e0       	ldi	r20, 0x00	; 0
     bae:	5f e4       	ldi	r21, 0x4F	; 79
     bb0:	0e 94 ce 08 	call	0x119c	; 0x119c <__gesf2>
     bb4:	88 23       	and	r24, r24
     bb6:	8c f0       	brlt	.+34     	; 0xbda <__fixunssfsi+0x3e>
     bb8:	c8 01       	movw	r24, r16
     bba:	b7 01       	movw	r22, r14
     bbc:	20 e0       	ldi	r18, 0x00	; 0
     bbe:	30 e0       	ldi	r19, 0x00	; 0
     bc0:	40 e0       	ldi	r20, 0x00	; 0
     bc2:	5f e4       	ldi	r21, 0x4F	; 79
     bc4:	0e 94 46 07 	call	0xe8c	; 0xe8c <__subsf3>
     bc8:	0e 94 2e 09 	call	0x125c	; 0x125c <__fixsfsi>
     bcc:	9b 01       	movw	r18, r22
     bce:	ac 01       	movw	r20, r24
     bd0:	20 50       	subi	r18, 0x00	; 0
     bd2:	30 40       	sbci	r19, 0x00	; 0
     bd4:	40 40       	sbci	r20, 0x00	; 0
     bd6:	50 48       	sbci	r21, 0x80	; 128
     bd8:	06 c0       	rjmp	.+12     	; 0xbe6 <__fixunssfsi+0x4a>
     bda:	c8 01       	movw	r24, r16
     bdc:	b7 01       	movw	r22, r14
     bde:	0e 94 2e 09 	call	0x125c	; 0x125c <__fixsfsi>
     be2:	9b 01       	movw	r18, r22
     be4:	ac 01       	movw	r20, r24
     be6:	b9 01       	movw	r22, r18
     be8:	ca 01       	movw	r24, r20
     bea:	1f 91       	pop	r17
     bec:	0f 91       	pop	r16
     bee:	ff 90       	pop	r15
     bf0:	ef 90       	pop	r14
     bf2:	08 95       	ret

00000bf4 <_fpadd_parts>:
     bf4:	a0 e0       	ldi	r26, 0x00	; 0
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	e0 e0       	ldi	r30, 0x00	; 0
     bfa:	f6 e0       	ldi	r31, 0x06	; 6
     bfc:	0c 94 51 0c 	jmp	0x18a2	; 0x18a2 <__prologue_saves__>
     c00:	dc 01       	movw	r26, r24
     c02:	2b 01       	movw	r4, r22
     c04:	fa 01       	movw	r30, r20
     c06:	9c 91       	ld	r25, X
     c08:	92 30       	cpi	r25, 0x02	; 2
     c0a:	08 f4       	brcc	.+2      	; 0xc0e <_fpadd_parts+0x1a>
     c0c:	39 c1       	rjmp	.+626    	; 0xe80 <_fpadd_parts+0x28c>
     c0e:	eb 01       	movw	r28, r22
     c10:	88 81       	ld	r24, Y
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	08 f4       	brcc	.+2      	; 0xc18 <_fpadd_parts+0x24>
     c16:	33 c1       	rjmp	.+614    	; 0xe7e <_fpadd_parts+0x28a>
     c18:	94 30       	cpi	r25, 0x04	; 4
     c1a:	69 f4       	brne	.+26     	; 0xc36 <_fpadd_parts+0x42>
     c1c:	84 30       	cpi	r24, 0x04	; 4
     c1e:	09 f0       	breq	.+2      	; 0xc22 <_fpadd_parts+0x2e>
     c20:	2f c1       	rjmp	.+606    	; 0xe80 <_fpadd_parts+0x28c>
     c22:	11 96       	adiw	r26, 0x01	; 1
     c24:	9c 91       	ld	r25, X
     c26:	11 97       	sbiw	r26, 0x01	; 1
     c28:	89 81       	ldd	r24, Y+1	; 0x01
     c2a:	98 17       	cp	r25, r24
     c2c:	09 f4       	brne	.+2      	; 0xc30 <_fpadd_parts+0x3c>
     c2e:	28 c1       	rjmp	.+592    	; 0xe80 <_fpadd_parts+0x28c>
     c30:	ad ec       	ldi	r26, 0xCD	; 205
     c32:	b1 e0       	ldi	r27, 0x01	; 1
     c34:	25 c1       	rjmp	.+586    	; 0xe80 <_fpadd_parts+0x28c>
     c36:	84 30       	cpi	r24, 0x04	; 4
     c38:	09 f4       	brne	.+2      	; 0xc3c <_fpadd_parts+0x48>
     c3a:	21 c1       	rjmp	.+578    	; 0xe7e <_fpadd_parts+0x28a>
     c3c:	82 30       	cpi	r24, 0x02	; 2
     c3e:	a9 f4       	brne	.+42     	; 0xc6a <_fpadd_parts+0x76>
     c40:	92 30       	cpi	r25, 0x02	; 2
     c42:	09 f0       	breq	.+2      	; 0xc46 <_fpadd_parts+0x52>
     c44:	1d c1       	rjmp	.+570    	; 0xe80 <_fpadd_parts+0x28c>
     c46:	9a 01       	movw	r18, r20
     c48:	ad 01       	movw	r20, r26
     c4a:	88 e0       	ldi	r24, 0x08	; 8
     c4c:	ea 01       	movw	r28, r20
     c4e:	09 90       	ld	r0, Y+
     c50:	ae 01       	movw	r20, r28
     c52:	e9 01       	movw	r28, r18
     c54:	09 92       	st	Y+, r0
     c56:	9e 01       	movw	r18, r28
     c58:	81 50       	subi	r24, 0x01	; 1
     c5a:	c1 f7       	brne	.-16     	; 0xc4c <_fpadd_parts+0x58>
     c5c:	e2 01       	movw	r28, r4
     c5e:	89 81       	ldd	r24, Y+1	; 0x01
     c60:	11 96       	adiw	r26, 0x01	; 1
     c62:	9c 91       	ld	r25, X
     c64:	89 23       	and	r24, r25
     c66:	81 83       	std	Z+1, r24	; 0x01
     c68:	08 c1       	rjmp	.+528    	; 0xe7a <_fpadd_parts+0x286>
     c6a:	92 30       	cpi	r25, 0x02	; 2
     c6c:	09 f4       	brne	.+2      	; 0xc70 <_fpadd_parts+0x7c>
     c6e:	07 c1       	rjmp	.+526    	; 0xe7e <_fpadd_parts+0x28a>
     c70:	12 96       	adiw	r26, 0x02	; 2
     c72:	2d 90       	ld	r2, X+
     c74:	3c 90       	ld	r3, X
     c76:	13 97       	sbiw	r26, 0x03	; 3
     c78:	eb 01       	movw	r28, r22
     c7a:	8a 81       	ldd	r24, Y+2	; 0x02
     c7c:	9b 81       	ldd	r25, Y+3	; 0x03
     c7e:	14 96       	adiw	r26, 0x04	; 4
     c80:	ad 90       	ld	r10, X+
     c82:	bd 90       	ld	r11, X+
     c84:	cd 90       	ld	r12, X+
     c86:	dc 90       	ld	r13, X
     c88:	17 97       	sbiw	r26, 0x07	; 7
     c8a:	ec 80       	ldd	r14, Y+4	; 0x04
     c8c:	fd 80       	ldd	r15, Y+5	; 0x05
     c8e:	0e 81       	ldd	r16, Y+6	; 0x06
     c90:	1f 81       	ldd	r17, Y+7	; 0x07
     c92:	91 01       	movw	r18, r2
     c94:	28 1b       	sub	r18, r24
     c96:	39 0b       	sbc	r19, r25
     c98:	b9 01       	movw	r22, r18
     c9a:	37 ff       	sbrs	r19, 7
     c9c:	04 c0       	rjmp	.+8      	; 0xca6 <_fpadd_parts+0xb2>
     c9e:	66 27       	eor	r22, r22
     ca0:	77 27       	eor	r23, r23
     ca2:	62 1b       	sub	r22, r18
     ca4:	73 0b       	sbc	r23, r19
     ca6:	60 32       	cpi	r22, 0x20	; 32
     ca8:	71 05       	cpc	r23, r1
     caa:	0c f0       	brlt	.+2      	; 0xcae <_fpadd_parts+0xba>
     cac:	61 c0       	rjmp	.+194    	; 0xd70 <_fpadd_parts+0x17c>
     cae:	12 16       	cp	r1, r18
     cb0:	13 06       	cpc	r1, r19
     cb2:	6c f5       	brge	.+90     	; 0xd0e <_fpadd_parts+0x11a>
     cb4:	37 01       	movw	r6, r14
     cb6:	48 01       	movw	r8, r16
     cb8:	06 2e       	mov	r0, r22
     cba:	04 c0       	rjmp	.+8      	; 0xcc4 <_fpadd_parts+0xd0>
     cbc:	96 94       	lsr	r9
     cbe:	87 94       	ror	r8
     cc0:	77 94       	ror	r7
     cc2:	67 94       	ror	r6
     cc4:	0a 94       	dec	r0
     cc6:	d2 f7       	brpl	.-12     	; 0xcbc <_fpadd_parts+0xc8>
     cc8:	21 e0       	ldi	r18, 0x01	; 1
     cca:	30 e0       	ldi	r19, 0x00	; 0
     ccc:	40 e0       	ldi	r20, 0x00	; 0
     cce:	50 e0       	ldi	r21, 0x00	; 0
     cd0:	04 c0       	rjmp	.+8      	; 0xcda <_fpadd_parts+0xe6>
     cd2:	22 0f       	add	r18, r18
     cd4:	33 1f       	adc	r19, r19
     cd6:	44 1f       	adc	r20, r20
     cd8:	55 1f       	adc	r21, r21
     cda:	6a 95       	dec	r22
     cdc:	d2 f7       	brpl	.-12     	; 0xcd2 <_fpadd_parts+0xde>
     cde:	21 50       	subi	r18, 0x01	; 1
     ce0:	30 40       	sbci	r19, 0x00	; 0
     ce2:	40 40       	sbci	r20, 0x00	; 0
     ce4:	50 40       	sbci	r21, 0x00	; 0
     ce6:	2e 21       	and	r18, r14
     ce8:	3f 21       	and	r19, r15
     cea:	40 23       	and	r20, r16
     cec:	51 23       	and	r21, r17
     cee:	21 15       	cp	r18, r1
     cf0:	31 05       	cpc	r19, r1
     cf2:	41 05       	cpc	r20, r1
     cf4:	51 05       	cpc	r21, r1
     cf6:	21 f0       	breq	.+8      	; 0xd00 <_fpadd_parts+0x10c>
     cf8:	21 e0       	ldi	r18, 0x01	; 1
     cfa:	30 e0       	ldi	r19, 0x00	; 0
     cfc:	40 e0       	ldi	r20, 0x00	; 0
     cfe:	50 e0       	ldi	r21, 0x00	; 0
     d00:	79 01       	movw	r14, r18
     d02:	8a 01       	movw	r16, r20
     d04:	e6 28       	or	r14, r6
     d06:	f7 28       	or	r15, r7
     d08:	08 29       	or	r16, r8
     d0a:	19 29       	or	r17, r9
     d0c:	3c c0       	rjmp	.+120    	; 0xd86 <_fpadd_parts+0x192>
     d0e:	23 2b       	or	r18, r19
     d10:	d1 f1       	breq	.+116    	; 0xd86 <_fpadd_parts+0x192>
     d12:	26 0e       	add	r2, r22
     d14:	37 1e       	adc	r3, r23
     d16:	35 01       	movw	r6, r10
     d18:	46 01       	movw	r8, r12
     d1a:	06 2e       	mov	r0, r22
     d1c:	04 c0       	rjmp	.+8      	; 0xd26 <_fpadd_parts+0x132>
     d1e:	96 94       	lsr	r9
     d20:	87 94       	ror	r8
     d22:	77 94       	ror	r7
     d24:	67 94       	ror	r6
     d26:	0a 94       	dec	r0
     d28:	d2 f7       	brpl	.-12     	; 0xd1e <_fpadd_parts+0x12a>
     d2a:	21 e0       	ldi	r18, 0x01	; 1
     d2c:	30 e0       	ldi	r19, 0x00	; 0
     d2e:	40 e0       	ldi	r20, 0x00	; 0
     d30:	50 e0       	ldi	r21, 0x00	; 0
     d32:	04 c0       	rjmp	.+8      	; 0xd3c <_fpadd_parts+0x148>
     d34:	22 0f       	add	r18, r18
     d36:	33 1f       	adc	r19, r19
     d38:	44 1f       	adc	r20, r20
     d3a:	55 1f       	adc	r21, r21
     d3c:	6a 95       	dec	r22
     d3e:	d2 f7       	brpl	.-12     	; 0xd34 <_fpadd_parts+0x140>
     d40:	21 50       	subi	r18, 0x01	; 1
     d42:	30 40       	sbci	r19, 0x00	; 0
     d44:	40 40       	sbci	r20, 0x00	; 0
     d46:	50 40       	sbci	r21, 0x00	; 0
     d48:	2a 21       	and	r18, r10
     d4a:	3b 21       	and	r19, r11
     d4c:	4c 21       	and	r20, r12
     d4e:	5d 21       	and	r21, r13
     d50:	21 15       	cp	r18, r1
     d52:	31 05       	cpc	r19, r1
     d54:	41 05       	cpc	r20, r1
     d56:	51 05       	cpc	r21, r1
     d58:	21 f0       	breq	.+8      	; 0xd62 <_fpadd_parts+0x16e>
     d5a:	21 e0       	ldi	r18, 0x01	; 1
     d5c:	30 e0       	ldi	r19, 0x00	; 0
     d5e:	40 e0       	ldi	r20, 0x00	; 0
     d60:	50 e0       	ldi	r21, 0x00	; 0
     d62:	59 01       	movw	r10, r18
     d64:	6a 01       	movw	r12, r20
     d66:	a6 28       	or	r10, r6
     d68:	b7 28       	or	r11, r7
     d6a:	c8 28       	or	r12, r8
     d6c:	d9 28       	or	r13, r9
     d6e:	0b c0       	rjmp	.+22     	; 0xd86 <_fpadd_parts+0x192>
     d70:	82 15       	cp	r24, r2
     d72:	93 05       	cpc	r25, r3
     d74:	2c f0       	brlt	.+10     	; 0xd80 <_fpadd_parts+0x18c>
     d76:	1c 01       	movw	r2, r24
     d78:	aa 24       	eor	r10, r10
     d7a:	bb 24       	eor	r11, r11
     d7c:	65 01       	movw	r12, r10
     d7e:	03 c0       	rjmp	.+6      	; 0xd86 <_fpadd_parts+0x192>
     d80:	ee 24       	eor	r14, r14
     d82:	ff 24       	eor	r15, r15
     d84:	87 01       	movw	r16, r14
     d86:	11 96       	adiw	r26, 0x01	; 1
     d88:	9c 91       	ld	r25, X
     d8a:	d2 01       	movw	r26, r4
     d8c:	11 96       	adiw	r26, 0x01	; 1
     d8e:	8c 91       	ld	r24, X
     d90:	98 17       	cp	r25, r24
     d92:	09 f4       	brne	.+2      	; 0xd96 <_fpadd_parts+0x1a2>
     d94:	45 c0       	rjmp	.+138    	; 0xe20 <_fpadd_parts+0x22c>
     d96:	99 23       	and	r25, r25
     d98:	39 f0       	breq	.+14     	; 0xda8 <_fpadd_parts+0x1b4>
     d9a:	a8 01       	movw	r20, r16
     d9c:	97 01       	movw	r18, r14
     d9e:	2a 19       	sub	r18, r10
     da0:	3b 09       	sbc	r19, r11
     da2:	4c 09       	sbc	r20, r12
     da4:	5d 09       	sbc	r21, r13
     da6:	06 c0       	rjmp	.+12     	; 0xdb4 <_fpadd_parts+0x1c0>
     da8:	a6 01       	movw	r20, r12
     daa:	95 01       	movw	r18, r10
     dac:	2e 19       	sub	r18, r14
     dae:	3f 09       	sbc	r19, r15
     db0:	40 0b       	sbc	r20, r16
     db2:	51 0b       	sbc	r21, r17
     db4:	57 fd       	sbrc	r21, 7
     db6:	08 c0       	rjmp	.+16     	; 0xdc8 <_fpadd_parts+0x1d4>
     db8:	11 82       	std	Z+1, r1	; 0x01
     dba:	33 82       	std	Z+3, r3	; 0x03
     dbc:	22 82       	std	Z+2, r2	; 0x02
     dbe:	24 83       	std	Z+4, r18	; 0x04
     dc0:	35 83       	std	Z+5, r19	; 0x05
     dc2:	46 83       	std	Z+6, r20	; 0x06
     dc4:	57 83       	std	Z+7, r21	; 0x07
     dc6:	1d c0       	rjmp	.+58     	; 0xe02 <_fpadd_parts+0x20e>
     dc8:	81 e0       	ldi	r24, 0x01	; 1
     dca:	81 83       	std	Z+1, r24	; 0x01
     dcc:	33 82       	std	Z+3, r3	; 0x03
     dce:	22 82       	std	Z+2, r2	; 0x02
     dd0:	88 27       	eor	r24, r24
     dd2:	99 27       	eor	r25, r25
     dd4:	dc 01       	movw	r26, r24
     dd6:	82 1b       	sub	r24, r18
     dd8:	93 0b       	sbc	r25, r19
     dda:	a4 0b       	sbc	r26, r20
     ddc:	b5 0b       	sbc	r27, r21
     dde:	84 83       	std	Z+4, r24	; 0x04
     de0:	95 83       	std	Z+5, r25	; 0x05
     de2:	a6 83       	std	Z+6, r26	; 0x06
     de4:	b7 83       	std	Z+7, r27	; 0x07
     de6:	0d c0       	rjmp	.+26     	; 0xe02 <_fpadd_parts+0x20e>
     de8:	22 0f       	add	r18, r18
     dea:	33 1f       	adc	r19, r19
     dec:	44 1f       	adc	r20, r20
     dee:	55 1f       	adc	r21, r21
     df0:	24 83       	std	Z+4, r18	; 0x04
     df2:	35 83       	std	Z+5, r19	; 0x05
     df4:	46 83       	std	Z+6, r20	; 0x06
     df6:	57 83       	std	Z+7, r21	; 0x07
     df8:	82 81       	ldd	r24, Z+2	; 0x02
     dfa:	93 81       	ldd	r25, Z+3	; 0x03
     dfc:	01 97       	sbiw	r24, 0x01	; 1
     dfe:	93 83       	std	Z+3, r25	; 0x03
     e00:	82 83       	std	Z+2, r24	; 0x02
     e02:	24 81       	ldd	r18, Z+4	; 0x04
     e04:	35 81       	ldd	r19, Z+5	; 0x05
     e06:	46 81       	ldd	r20, Z+6	; 0x06
     e08:	57 81       	ldd	r21, Z+7	; 0x07
     e0a:	da 01       	movw	r26, r20
     e0c:	c9 01       	movw	r24, r18
     e0e:	01 97       	sbiw	r24, 0x01	; 1
     e10:	a1 09       	sbc	r26, r1
     e12:	b1 09       	sbc	r27, r1
     e14:	8f 5f       	subi	r24, 0xFF	; 255
     e16:	9f 4f       	sbci	r25, 0xFF	; 255
     e18:	af 4f       	sbci	r26, 0xFF	; 255
     e1a:	bf 43       	sbci	r27, 0x3F	; 63
     e1c:	28 f3       	brcs	.-54     	; 0xde8 <_fpadd_parts+0x1f4>
     e1e:	0b c0       	rjmp	.+22     	; 0xe36 <_fpadd_parts+0x242>
     e20:	91 83       	std	Z+1, r25	; 0x01
     e22:	33 82       	std	Z+3, r3	; 0x03
     e24:	22 82       	std	Z+2, r2	; 0x02
     e26:	ea 0c       	add	r14, r10
     e28:	fb 1c       	adc	r15, r11
     e2a:	0c 1d       	adc	r16, r12
     e2c:	1d 1d       	adc	r17, r13
     e2e:	e4 82       	std	Z+4, r14	; 0x04
     e30:	f5 82       	std	Z+5, r15	; 0x05
     e32:	06 83       	std	Z+6, r16	; 0x06
     e34:	17 83       	std	Z+7, r17	; 0x07
     e36:	83 e0       	ldi	r24, 0x03	; 3
     e38:	80 83       	st	Z, r24
     e3a:	24 81       	ldd	r18, Z+4	; 0x04
     e3c:	35 81       	ldd	r19, Z+5	; 0x05
     e3e:	46 81       	ldd	r20, Z+6	; 0x06
     e40:	57 81       	ldd	r21, Z+7	; 0x07
     e42:	57 ff       	sbrs	r21, 7
     e44:	1a c0       	rjmp	.+52     	; 0xe7a <_fpadd_parts+0x286>
     e46:	c9 01       	movw	r24, r18
     e48:	aa 27       	eor	r26, r26
     e4a:	97 fd       	sbrc	r25, 7
     e4c:	a0 95       	com	r26
     e4e:	ba 2f       	mov	r27, r26
     e50:	81 70       	andi	r24, 0x01	; 1
     e52:	90 70       	andi	r25, 0x00	; 0
     e54:	a0 70       	andi	r26, 0x00	; 0
     e56:	b0 70       	andi	r27, 0x00	; 0
     e58:	56 95       	lsr	r21
     e5a:	47 95       	ror	r20
     e5c:	37 95       	ror	r19
     e5e:	27 95       	ror	r18
     e60:	82 2b       	or	r24, r18
     e62:	93 2b       	or	r25, r19
     e64:	a4 2b       	or	r26, r20
     e66:	b5 2b       	or	r27, r21
     e68:	84 83       	std	Z+4, r24	; 0x04
     e6a:	95 83       	std	Z+5, r25	; 0x05
     e6c:	a6 83       	std	Z+6, r26	; 0x06
     e6e:	b7 83       	std	Z+7, r27	; 0x07
     e70:	82 81       	ldd	r24, Z+2	; 0x02
     e72:	93 81       	ldd	r25, Z+3	; 0x03
     e74:	01 96       	adiw	r24, 0x01	; 1
     e76:	93 83       	std	Z+3, r25	; 0x03
     e78:	82 83       	std	Z+2, r24	; 0x02
     e7a:	df 01       	movw	r26, r30
     e7c:	01 c0       	rjmp	.+2      	; 0xe80 <_fpadd_parts+0x28c>
     e7e:	d2 01       	movw	r26, r4
     e80:	cd 01       	movw	r24, r26
     e82:	cd b7       	in	r28, 0x3d	; 61
     e84:	de b7       	in	r29, 0x3e	; 62
     e86:	e2 e1       	ldi	r30, 0x12	; 18
     e88:	0c 94 6d 0c 	jmp	0x18da	; 0x18da <__epilogue_restores__>

00000e8c <__subsf3>:
     e8c:	a0 e2       	ldi	r26, 0x20	; 32
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	ec e4       	ldi	r30, 0x4C	; 76
     e92:	f7 e0       	ldi	r31, 0x07	; 7
     e94:	0c 94 5d 0c 	jmp	0x18ba	; 0x18ba <__prologue_saves__+0x18>
     e98:	69 83       	std	Y+1, r22	; 0x01
     e9a:	7a 83       	std	Y+2, r23	; 0x02
     e9c:	8b 83       	std	Y+3, r24	; 0x03
     e9e:	9c 83       	std	Y+4, r25	; 0x04
     ea0:	2d 83       	std	Y+5, r18	; 0x05
     ea2:	3e 83       	std	Y+6, r19	; 0x06
     ea4:	4f 83       	std	Y+7, r20	; 0x07
     ea6:	58 87       	std	Y+8, r21	; 0x08
     ea8:	e9 e0       	ldi	r30, 0x09	; 9
     eaa:	ee 2e       	mov	r14, r30
     eac:	f1 2c       	mov	r15, r1
     eae:	ec 0e       	add	r14, r28
     eb0:	fd 1e       	adc	r15, r29
     eb2:	ce 01       	movw	r24, r28
     eb4:	01 96       	adiw	r24, 0x01	; 1
     eb6:	b7 01       	movw	r22, r14
     eb8:	0e 94 1f 0b 	call	0x163e	; 0x163e <__unpack_f>
     ebc:	8e 01       	movw	r16, r28
     ebe:	0f 5e       	subi	r16, 0xEF	; 239
     ec0:	1f 4f       	sbci	r17, 0xFF	; 255
     ec2:	ce 01       	movw	r24, r28
     ec4:	05 96       	adiw	r24, 0x05	; 5
     ec6:	b8 01       	movw	r22, r16
     ec8:	0e 94 1f 0b 	call	0x163e	; 0x163e <__unpack_f>
     ecc:	8a 89       	ldd	r24, Y+18	; 0x12
     ece:	91 e0       	ldi	r25, 0x01	; 1
     ed0:	89 27       	eor	r24, r25
     ed2:	8a 8b       	std	Y+18, r24	; 0x12
     ed4:	c7 01       	movw	r24, r14
     ed6:	b8 01       	movw	r22, r16
     ed8:	ae 01       	movw	r20, r28
     eda:	47 5e       	subi	r20, 0xE7	; 231
     edc:	5f 4f       	sbci	r21, 0xFF	; 255
     ede:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <_fpadd_parts>
     ee2:	0e 94 4a 0a 	call	0x1494	; 0x1494 <__pack_f>
     ee6:	a0 96       	adiw	r28, 0x20	; 32
     ee8:	e6 e0       	ldi	r30, 0x06	; 6
     eea:	0c 94 79 0c 	jmp	0x18f2	; 0x18f2 <__epilogue_restores__+0x18>

00000eee <__addsf3>:
     eee:	a0 e2       	ldi	r26, 0x20	; 32
     ef0:	b0 e0       	ldi	r27, 0x00	; 0
     ef2:	ed e7       	ldi	r30, 0x7D	; 125
     ef4:	f7 e0       	ldi	r31, 0x07	; 7
     ef6:	0c 94 5d 0c 	jmp	0x18ba	; 0x18ba <__prologue_saves__+0x18>
     efa:	69 83       	std	Y+1, r22	; 0x01
     efc:	7a 83       	std	Y+2, r23	; 0x02
     efe:	8b 83       	std	Y+3, r24	; 0x03
     f00:	9c 83       	std	Y+4, r25	; 0x04
     f02:	2d 83       	std	Y+5, r18	; 0x05
     f04:	3e 83       	std	Y+6, r19	; 0x06
     f06:	4f 83       	std	Y+7, r20	; 0x07
     f08:	58 87       	std	Y+8, r21	; 0x08
     f0a:	f9 e0       	ldi	r31, 0x09	; 9
     f0c:	ef 2e       	mov	r14, r31
     f0e:	f1 2c       	mov	r15, r1
     f10:	ec 0e       	add	r14, r28
     f12:	fd 1e       	adc	r15, r29
     f14:	ce 01       	movw	r24, r28
     f16:	01 96       	adiw	r24, 0x01	; 1
     f18:	b7 01       	movw	r22, r14
     f1a:	0e 94 1f 0b 	call	0x163e	; 0x163e <__unpack_f>
     f1e:	8e 01       	movw	r16, r28
     f20:	0f 5e       	subi	r16, 0xEF	; 239
     f22:	1f 4f       	sbci	r17, 0xFF	; 255
     f24:	ce 01       	movw	r24, r28
     f26:	05 96       	adiw	r24, 0x05	; 5
     f28:	b8 01       	movw	r22, r16
     f2a:	0e 94 1f 0b 	call	0x163e	; 0x163e <__unpack_f>
     f2e:	c7 01       	movw	r24, r14
     f30:	b8 01       	movw	r22, r16
     f32:	ae 01       	movw	r20, r28
     f34:	47 5e       	subi	r20, 0xE7	; 231
     f36:	5f 4f       	sbci	r21, 0xFF	; 255
     f38:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <_fpadd_parts>
     f3c:	0e 94 4a 0a 	call	0x1494	; 0x1494 <__pack_f>
     f40:	a0 96       	adiw	r28, 0x20	; 32
     f42:	e6 e0       	ldi	r30, 0x06	; 6
     f44:	0c 94 79 0c 	jmp	0x18f2	; 0x18f2 <__epilogue_restores__+0x18>

00000f48 <__mulsf3>:
     f48:	a0 e2       	ldi	r26, 0x20	; 32
     f4a:	b0 e0       	ldi	r27, 0x00	; 0
     f4c:	ea ea       	ldi	r30, 0xAA	; 170
     f4e:	f7 e0       	ldi	r31, 0x07	; 7
     f50:	0c 94 51 0c 	jmp	0x18a2	; 0x18a2 <__prologue_saves__>
     f54:	69 83       	std	Y+1, r22	; 0x01
     f56:	7a 83       	std	Y+2, r23	; 0x02
     f58:	8b 83       	std	Y+3, r24	; 0x03
     f5a:	9c 83       	std	Y+4, r25	; 0x04
     f5c:	2d 83       	std	Y+5, r18	; 0x05
     f5e:	3e 83       	std	Y+6, r19	; 0x06
     f60:	4f 83       	std	Y+7, r20	; 0x07
     f62:	58 87       	std	Y+8, r21	; 0x08
     f64:	ce 01       	movw	r24, r28
     f66:	01 96       	adiw	r24, 0x01	; 1
     f68:	be 01       	movw	r22, r28
     f6a:	67 5f       	subi	r22, 0xF7	; 247
     f6c:	7f 4f       	sbci	r23, 0xFF	; 255
     f6e:	0e 94 1f 0b 	call	0x163e	; 0x163e <__unpack_f>
     f72:	ce 01       	movw	r24, r28
     f74:	05 96       	adiw	r24, 0x05	; 5
     f76:	be 01       	movw	r22, r28
     f78:	6f 5e       	subi	r22, 0xEF	; 239
     f7a:	7f 4f       	sbci	r23, 0xFF	; 255
     f7c:	0e 94 1f 0b 	call	0x163e	; 0x163e <__unpack_f>
     f80:	99 85       	ldd	r25, Y+9	; 0x09
     f82:	92 30       	cpi	r25, 0x02	; 2
     f84:	88 f0       	brcs	.+34     	; 0xfa8 <__mulsf3+0x60>
     f86:	89 89       	ldd	r24, Y+17	; 0x11
     f88:	82 30       	cpi	r24, 0x02	; 2
     f8a:	c8 f0       	brcs	.+50     	; 0xfbe <__mulsf3+0x76>
     f8c:	94 30       	cpi	r25, 0x04	; 4
     f8e:	19 f4       	brne	.+6      	; 0xf96 <__mulsf3+0x4e>
     f90:	82 30       	cpi	r24, 0x02	; 2
     f92:	51 f4       	brne	.+20     	; 0xfa8 <__mulsf3+0x60>
     f94:	04 c0       	rjmp	.+8      	; 0xf9e <__mulsf3+0x56>
     f96:	84 30       	cpi	r24, 0x04	; 4
     f98:	29 f4       	brne	.+10     	; 0xfa4 <__mulsf3+0x5c>
     f9a:	92 30       	cpi	r25, 0x02	; 2
     f9c:	81 f4       	brne	.+32     	; 0xfbe <__mulsf3+0x76>
     f9e:	8d ec       	ldi	r24, 0xCD	; 205
     fa0:	91 e0       	ldi	r25, 0x01	; 1
     fa2:	c6 c0       	rjmp	.+396    	; 0x1130 <__mulsf3+0x1e8>
     fa4:	92 30       	cpi	r25, 0x02	; 2
     fa6:	49 f4       	brne	.+18     	; 0xfba <__mulsf3+0x72>
     fa8:	20 e0       	ldi	r18, 0x00	; 0
     faa:	9a 85       	ldd	r25, Y+10	; 0x0a
     fac:	8a 89       	ldd	r24, Y+18	; 0x12
     fae:	98 13       	cpse	r25, r24
     fb0:	21 e0       	ldi	r18, 0x01	; 1
     fb2:	2a 87       	std	Y+10, r18	; 0x0a
     fb4:	ce 01       	movw	r24, r28
     fb6:	09 96       	adiw	r24, 0x09	; 9
     fb8:	bb c0       	rjmp	.+374    	; 0x1130 <__mulsf3+0x1e8>
     fba:	82 30       	cpi	r24, 0x02	; 2
     fbc:	49 f4       	brne	.+18     	; 0xfd0 <__mulsf3+0x88>
     fbe:	20 e0       	ldi	r18, 0x00	; 0
     fc0:	9a 85       	ldd	r25, Y+10	; 0x0a
     fc2:	8a 89       	ldd	r24, Y+18	; 0x12
     fc4:	98 13       	cpse	r25, r24
     fc6:	21 e0       	ldi	r18, 0x01	; 1
     fc8:	2a 8b       	std	Y+18, r18	; 0x12
     fca:	ce 01       	movw	r24, r28
     fcc:	41 96       	adiw	r24, 0x11	; 17
     fce:	b0 c0       	rjmp	.+352    	; 0x1130 <__mulsf3+0x1e8>
     fd0:	2d 84       	ldd	r2, Y+13	; 0x0d
     fd2:	3e 84       	ldd	r3, Y+14	; 0x0e
     fd4:	4f 84       	ldd	r4, Y+15	; 0x0f
     fd6:	58 88       	ldd	r5, Y+16	; 0x10
     fd8:	6d 88       	ldd	r6, Y+21	; 0x15
     fda:	7e 88       	ldd	r7, Y+22	; 0x16
     fdc:	8f 88       	ldd	r8, Y+23	; 0x17
     fde:	98 8c       	ldd	r9, Y+24	; 0x18
     fe0:	ee 24       	eor	r14, r14
     fe2:	ff 24       	eor	r15, r15
     fe4:	87 01       	movw	r16, r14
     fe6:	aa 24       	eor	r10, r10
     fe8:	bb 24       	eor	r11, r11
     fea:	65 01       	movw	r12, r10
     fec:	40 e0       	ldi	r20, 0x00	; 0
     fee:	50 e0       	ldi	r21, 0x00	; 0
     ff0:	60 e0       	ldi	r22, 0x00	; 0
     ff2:	70 e0       	ldi	r23, 0x00	; 0
     ff4:	e0 e0       	ldi	r30, 0x00	; 0
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	c1 01       	movw	r24, r2
     ffa:	81 70       	andi	r24, 0x01	; 1
     ffc:	90 70       	andi	r25, 0x00	; 0
     ffe:	89 2b       	or	r24, r25
    1000:	e9 f0       	breq	.+58     	; 0x103c <__mulsf3+0xf4>
    1002:	e6 0c       	add	r14, r6
    1004:	f7 1c       	adc	r15, r7
    1006:	08 1d       	adc	r16, r8
    1008:	19 1d       	adc	r17, r9
    100a:	9a 01       	movw	r18, r20
    100c:	ab 01       	movw	r20, r22
    100e:	2a 0d       	add	r18, r10
    1010:	3b 1d       	adc	r19, r11
    1012:	4c 1d       	adc	r20, r12
    1014:	5d 1d       	adc	r21, r13
    1016:	80 e0       	ldi	r24, 0x00	; 0
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	a0 e0       	ldi	r26, 0x00	; 0
    101c:	b0 e0       	ldi	r27, 0x00	; 0
    101e:	e6 14       	cp	r14, r6
    1020:	f7 04       	cpc	r15, r7
    1022:	08 05       	cpc	r16, r8
    1024:	19 05       	cpc	r17, r9
    1026:	20 f4       	brcc	.+8      	; 0x1030 <__mulsf3+0xe8>
    1028:	81 e0       	ldi	r24, 0x01	; 1
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	a0 e0       	ldi	r26, 0x00	; 0
    102e:	b0 e0       	ldi	r27, 0x00	; 0
    1030:	ba 01       	movw	r22, r20
    1032:	a9 01       	movw	r20, r18
    1034:	48 0f       	add	r20, r24
    1036:	59 1f       	adc	r21, r25
    1038:	6a 1f       	adc	r22, r26
    103a:	7b 1f       	adc	r23, r27
    103c:	aa 0c       	add	r10, r10
    103e:	bb 1c       	adc	r11, r11
    1040:	cc 1c       	adc	r12, r12
    1042:	dd 1c       	adc	r13, r13
    1044:	97 fe       	sbrs	r9, 7
    1046:	08 c0       	rjmp	.+16     	; 0x1058 <__mulsf3+0x110>
    1048:	81 e0       	ldi	r24, 0x01	; 1
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	a0 e0       	ldi	r26, 0x00	; 0
    104e:	b0 e0       	ldi	r27, 0x00	; 0
    1050:	a8 2a       	or	r10, r24
    1052:	b9 2a       	or	r11, r25
    1054:	ca 2a       	or	r12, r26
    1056:	db 2a       	or	r13, r27
    1058:	31 96       	adiw	r30, 0x01	; 1
    105a:	e0 32       	cpi	r30, 0x20	; 32
    105c:	f1 05       	cpc	r31, r1
    105e:	49 f0       	breq	.+18     	; 0x1072 <__mulsf3+0x12a>
    1060:	66 0c       	add	r6, r6
    1062:	77 1c       	adc	r7, r7
    1064:	88 1c       	adc	r8, r8
    1066:	99 1c       	adc	r9, r9
    1068:	56 94       	lsr	r5
    106a:	47 94       	ror	r4
    106c:	37 94       	ror	r3
    106e:	27 94       	ror	r2
    1070:	c3 cf       	rjmp	.-122    	; 0xff8 <__mulsf3+0xb0>
    1072:	fa 85       	ldd	r31, Y+10	; 0x0a
    1074:	ea 89       	ldd	r30, Y+18	; 0x12
    1076:	2b 89       	ldd	r18, Y+19	; 0x13
    1078:	3c 89       	ldd	r19, Y+20	; 0x14
    107a:	8b 85       	ldd	r24, Y+11	; 0x0b
    107c:	9c 85       	ldd	r25, Y+12	; 0x0c
    107e:	28 0f       	add	r18, r24
    1080:	39 1f       	adc	r19, r25
    1082:	2e 5f       	subi	r18, 0xFE	; 254
    1084:	3f 4f       	sbci	r19, 0xFF	; 255
    1086:	17 c0       	rjmp	.+46     	; 0x10b6 <__mulsf3+0x16e>
    1088:	ca 01       	movw	r24, r20
    108a:	81 70       	andi	r24, 0x01	; 1
    108c:	90 70       	andi	r25, 0x00	; 0
    108e:	89 2b       	or	r24, r25
    1090:	61 f0       	breq	.+24     	; 0x10aa <__mulsf3+0x162>
    1092:	16 95       	lsr	r17
    1094:	07 95       	ror	r16
    1096:	f7 94       	ror	r15
    1098:	e7 94       	ror	r14
    109a:	80 e0       	ldi	r24, 0x00	; 0
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	a0 e0       	ldi	r26, 0x00	; 0
    10a0:	b0 e8       	ldi	r27, 0x80	; 128
    10a2:	e8 2a       	or	r14, r24
    10a4:	f9 2a       	or	r15, r25
    10a6:	0a 2b       	or	r16, r26
    10a8:	1b 2b       	or	r17, r27
    10aa:	76 95       	lsr	r23
    10ac:	67 95       	ror	r22
    10ae:	57 95       	ror	r21
    10b0:	47 95       	ror	r20
    10b2:	2f 5f       	subi	r18, 0xFF	; 255
    10b4:	3f 4f       	sbci	r19, 0xFF	; 255
    10b6:	77 fd       	sbrc	r23, 7
    10b8:	e7 cf       	rjmp	.-50     	; 0x1088 <__mulsf3+0x140>
    10ba:	0c c0       	rjmp	.+24     	; 0x10d4 <__mulsf3+0x18c>
    10bc:	44 0f       	add	r20, r20
    10be:	55 1f       	adc	r21, r21
    10c0:	66 1f       	adc	r22, r22
    10c2:	77 1f       	adc	r23, r23
    10c4:	17 fd       	sbrc	r17, 7
    10c6:	41 60       	ori	r20, 0x01	; 1
    10c8:	ee 0c       	add	r14, r14
    10ca:	ff 1c       	adc	r15, r15
    10cc:	00 1f       	adc	r16, r16
    10ce:	11 1f       	adc	r17, r17
    10d0:	21 50       	subi	r18, 0x01	; 1
    10d2:	30 40       	sbci	r19, 0x00	; 0
    10d4:	40 30       	cpi	r20, 0x00	; 0
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	59 07       	cpc	r21, r25
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	69 07       	cpc	r22, r25
    10de:	90 e4       	ldi	r25, 0x40	; 64
    10e0:	79 07       	cpc	r23, r25
    10e2:	60 f3       	brcs	.-40     	; 0x10bc <__mulsf3+0x174>
    10e4:	2b 8f       	std	Y+27, r18	; 0x1b
    10e6:	3c 8f       	std	Y+28, r19	; 0x1c
    10e8:	db 01       	movw	r26, r22
    10ea:	ca 01       	movw	r24, r20
    10ec:	8f 77       	andi	r24, 0x7F	; 127
    10ee:	90 70       	andi	r25, 0x00	; 0
    10f0:	a0 70       	andi	r26, 0x00	; 0
    10f2:	b0 70       	andi	r27, 0x00	; 0
    10f4:	80 34       	cpi	r24, 0x40	; 64
    10f6:	91 05       	cpc	r25, r1
    10f8:	a1 05       	cpc	r26, r1
    10fa:	b1 05       	cpc	r27, r1
    10fc:	61 f4       	brne	.+24     	; 0x1116 <__mulsf3+0x1ce>
    10fe:	47 fd       	sbrc	r20, 7
    1100:	0a c0       	rjmp	.+20     	; 0x1116 <__mulsf3+0x1ce>
    1102:	e1 14       	cp	r14, r1
    1104:	f1 04       	cpc	r15, r1
    1106:	01 05       	cpc	r16, r1
    1108:	11 05       	cpc	r17, r1
    110a:	29 f0       	breq	.+10     	; 0x1116 <__mulsf3+0x1ce>
    110c:	40 5c       	subi	r20, 0xC0	; 192
    110e:	5f 4f       	sbci	r21, 0xFF	; 255
    1110:	6f 4f       	sbci	r22, 0xFF	; 255
    1112:	7f 4f       	sbci	r23, 0xFF	; 255
    1114:	40 78       	andi	r20, 0x80	; 128
    1116:	1a 8e       	std	Y+26, r1	; 0x1a
    1118:	fe 17       	cp	r31, r30
    111a:	11 f0       	breq	.+4      	; 0x1120 <__mulsf3+0x1d8>
    111c:	81 e0       	ldi	r24, 0x01	; 1
    111e:	8a 8f       	std	Y+26, r24	; 0x1a
    1120:	4d 8f       	std	Y+29, r20	; 0x1d
    1122:	5e 8f       	std	Y+30, r21	; 0x1e
    1124:	6f 8f       	std	Y+31, r22	; 0x1f
    1126:	78 a3       	std	Y+32, r23	; 0x20
    1128:	83 e0       	ldi	r24, 0x03	; 3
    112a:	89 8f       	std	Y+25, r24	; 0x19
    112c:	ce 01       	movw	r24, r28
    112e:	49 96       	adiw	r24, 0x19	; 25
    1130:	0e 94 4a 0a 	call	0x1494	; 0x1494 <__pack_f>
    1134:	a0 96       	adiw	r28, 0x20	; 32
    1136:	e2 e1       	ldi	r30, 0x12	; 18
    1138:	0c 94 6d 0c 	jmp	0x18da	; 0x18da <__epilogue_restores__>

0000113c <__gtsf2>:
    113c:	a8 e1       	ldi	r26, 0x18	; 24
    113e:	b0 e0       	ldi	r27, 0x00	; 0
    1140:	e4 ea       	ldi	r30, 0xA4	; 164
    1142:	f8 e0       	ldi	r31, 0x08	; 8
    1144:	0c 94 5d 0c 	jmp	0x18ba	; 0x18ba <__prologue_saves__+0x18>
    1148:	69 83       	std	Y+1, r22	; 0x01
    114a:	7a 83       	std	Y+2, r23	; 0x02
    114c:	8b 83       	std	Y+3, r24	; 0x03
    114e:	9c 83       	std	Y+4, r25	; 0x04
    1150:	2d 83       	std	Y+5, r18	; 0x05
    1152:	3e 83       	std	Y+6, r19	; 0x06
    1154:	4f 83       	std	Y+7, r20	; 0x07
    1156:	58 87       	std	Y+8, r21	; 0x08
    1158:	89 e0       	ldi	r24, 0x09	; 9
    115a:	e8 2e       	mov	r14, r24
    115c:	f1 2c       	mov	r15, r1
    115e:	ec 0e       	add	r14, r28
    1160:	fd 1e       	adc	r15, r29
    1162:	ce 01       	movw	r24, r28
    1164:	01 96       	adiw	r24, 0x01	; 1
    1166:	b7 01       	movw	r22, r14
    1168:	0e 94 1f 0b 	call	0x163e	; 0x163e <__unpack_f>
    116c:	8e 01       	movw	r16, r28
    116e:	0f 5e       	subi	r16, 0xEF	; 239
    1170:	1f 4f       	sbci	r17, 0xFF	; 255
    1172:	ce 01       	movw	r24, r28
    1174:	05 96       	adiw	r24, 0x05	; 5
    1176:	b8 01       	movw	r22, r16
    1178:	0e 94 1f 0b 	call	0x163e	; 0x163e <__unpack_f>
    117c:	89 85       	ldd	r24, Y+9	; 0x09
    117e:	82 30       	cpi	r24, 0x02	; 2
    1180:	40 f0       	brcs	.+16     	; 0x1192 <__gtsf2+0x56>
    1182:	89 89       	ldd	r24, Y+17	; 0x11
    1184:	82 30       	cpi	r24, 0x02	; 2
    1186:	28 f0       	brcs	.+10     	; 0x1192 <__gtsf2+0x56>
    1188:	c7 01       	movw	r24, r14
    118a:	b8 01       	movw	r22, r16
    118c:	0e 94 97 0b 	call	0x172e	; 0x172e <__fpcmp_parts_f>
    1190:	01 c0       	rjmp	.+2      	; 0x1194 <__gtsf2+0x58>
    1192:	8f ef       	ldi	r24, 0xFF	; 255
    1194:	68 96       	adiw	r28, 0x18	; 24
    1196:	e6 e0       	ldi	r30, 0x06	; 6
    1198:	0c 94 79 0c 	jmp	0x18f2	; 0x18f2 <__epilogue_restores__+0x18>

0000119c <__gesf2>:
    119c:	a8 e1       	ldi	r26, 0x18	; 24
    119e:	b0 e0       	ldi	r27, 0x00	; 0
    11a0:	e4 ed       	ldi	r30, 0xD4	; 212
    11a2:	f8 e0       	ldi	r31, 0x08	; 8
    11a4:	0c 94 5d 0c 	jmp	0x18ba	; 0x18ba <__prologue_saves__+0x18>
    11a8:	69 83       	std	Y+1, r22	; 0x01
    11aa:	7a 83       	std	Y+2, r23	; 0x02
    11ac:	8b 83       	std	Y+3, r24	; 0x03
    11ae:	9c 83       	std	Y+4, r25	; 0x04
    11b0:	2d 83       	std	Y+5, r18	; 0x05
    11b2:	3e 83       	std	Y+6, r19	; 0x06
    11b4:	4f 83       	std	Y+7, r20	; 0x07
    11b6:	58 87       	std	Y+8, r21	; 0x08
    11b8:	89 e0       	ldi	r24, 0x09	; 9
    11ba:	e8 2e       	mov	r14, r24
    11bc:	f1 2c       	mov	r15, r1
    11be:	ec 0e       	add	r14, r28
    11c0:	fd 1e       	adc	r15, r29
    11c2:	ce 01       	movw	r24, r28
    11c4:	01 96       	adiw	r24, 0x01	; 1
    11c6:	b7 01       	movw	r22, r14
    11c8:	0e 94 1f 0b 	call	0x163e	; 0x163e <__unpack_f>
    11cc:	8e 01       	movw	r16, r28
    11ce:	0f 5e       	subi	r16, 0xEF	; 239
    11d0:	1f 4f       	sbci	r17, 0xFF	; 255
    11d2:	ce 01       	movw	r24, r28
    11d4:	05 96       	adiw	r24, 0x05	; 5
    11d6:	b8 01       	movw	r22, r16
    11d8:	0e 94 1f 0b 	call	0x163e	; 0x163e <__unpack_f>
    11dc:	89 85       	ldd	r24, Y+9	; 0x09
    11de:	82 30       	cpi	r24, 0x02	; 2
    11e0:	40 f0       	brcs	.+16     	; 0x11f2 <__gesf2+0x56>
    11e2:	89 89       	ldd	r24, Y+17	; 0x11
    11e4:	82 30       	cpi	r24, 0x02	; 2
    11e6:	28 f0       	brcs	.+10     	; 0x11f2 <__gesf2+0x56>
    11e8:	c7 01       	movw	r24, r14
    11ea:	b8 01       	movw	r22, r16
    11ec:	0e 94 97 0b 	call	0x172e	; 0x172e <__fpcmp_parts_f>
    11f0:	01 c0       	rjmp	.+2      	; 0x11f4 <__gesf2+0x58>
    11f2:	8f ef       	ldi	r24, 0xFF	; 255
    11f4:	68 96       	adiw	r28, 0x18	; 24
    11f6:	e6 e0       	ldi	r30, 0x06	; 6
    11f8:	0c 94 79 0c 	jmp	0x18f2	; 0x18f2 <__epilogue_restores__+0x18>

000011fc <__ltsf2>:
    11fc:	a8 e1       	ldi	r26, 0x18	; 24
    11fe:	b0 e0       	ldi	r27, 0x00	; 0
    1200:	e4 e0       	ldi	r30, 0x04	; 4
    1202:	f9 e0       	ldi	r31, 0x09	; 9
    1204:	0c 94 5d 0c 	jmp	0x18ba	; 0x18ba <__prologue_saves__+0x18>
    1208:	69 83       	std	Y+1, r22	; 0x01
    120a:	7a 83       	std	Y+2, r23	; 0x02
    120c:	8b 83       	std	Y+3, r24	; 0x03
    120e:	9c 83       	std	Y+4, r25	; 0x04
    1210:	2d 83       	std	Y+5, r18	; 0x05
    1212:	3e 83       	std	Y+6, r19	; 0x06
    1214:	4f 83       	std	Y+7, r20	; 0x07
    1216:	58 87       	std	Y+8, r21	; 0x08
    1218:	89 e0       	ldi	r24, 0x09	; 9
    121a:	e8 2e       	mov	r14, r24
    121c:	f1 2c       	mov	r15, r1
    121e:	ec 0e       	add	r14, r28
    1220:	fd 1e       	adc	r15, r29
    1222:	ce 01       	movw	r24, r28
    1224:	01 96       	adiw	r24, 0x01	; 1
    1226:	b7 01       	movw	r22, r14
    1228:	0e 94 1f 0b 	call	0x163e	; 0x163e <__unpack_f>
    122c:	8e 01       	movw	r16, r28
    122e:	0f 5e       	subi	r16, 0xEF	; 239
    1230:	1f 4f       	sbci	r17, 0xFF	; 255
    1232:	ce 01       	movw	r24, r28
    1234:	05 96       	adiw	r24, 0x05	; 5
    1236:	b8 01       	movw	r22, r16
    1238:	0e 94 1f 0b 	call	0x163e	; 0x163e <__unpack_f>
    123c:	89 85       	ldd	r24, Y+9	; 0x09
    123e:	82 30       	cpi	r24, 0x02	; 2
    1240:	40 f0       	brcs	.+16     	; 0x1252 <__ltsf2+0x56>
    1242:	89 89       	ldd	r24, Y+17	; 0x11
    1244:	82 30       	cpi	r24, 0x02	; 2
    1246:	28 f0       	brcs	.+10     	; 0x1252 <__ltsf2+0x56>
    1248:	c7 01       	movw	r24, r14
    124a:	b8 01       	movw	r22, r16
    124c:	0e 94 97 0b 	call	0x172e	; 0x172e <__fpcmp_parts_f>
    1250:	01 c0       	rjmp	.+2      	; 0x1254 <__ltsf2+0x58>
    1252:	81 e0       	ldi	r24, 0x01	; 1
    1254:	68 96       	adiw	r28, 0x18	; 24
    1256:	e6 e0       	ldi	r30, 0x06	; 6
    1258:	0c 94 79 0c 	jmp	0x18f2	; 0x18f2 <__epilogue_restores__+0x18>

0000125c <__fixsfsi>:
    125c:	ac e0       	ldi	r26, 0x0C	; 12
    125e:	b0 e0       	ldi	r27, 0x00	; 0
    1260:	e4 e3       	ldi	r30, 0x34	; 52
    1262:	f9 e0       	ldi	r31, 0x09	; 9
    1264:	0c 94 61 0c 	jmp	0x18c2	; 0x18c2 <__prologue_saves__+0x20>
    1268:	69 83       	std	Y+1, r22	; 0x01
    126a:	7a 83       	std	Y+2, r23	; 0x02
    126c:	8b 83       	std	Y+3, r24	; 0x03
    126e:	9c 83       	std	Y+4, r25	; 0x04
    1270:	ce 01       	movw	r24, r28
    1272:	01 96       	adiw	r24, 0x01	; 1
    1274:	be 01       	movw	r22, r28
    1276:	6b 5f       	subi	r22, 0xFB	; 251
    1278:	7f 4f       	sbci	r23, 0xFF	; 255
    127a:	0e 94 1f 0b 	call	0x163e	; 0x163e <__unpack_f>
    127e:	8d 81       	ldd	r24, Y+5	; 0x05
    1280:	82 30       	cpi	r24, 0x02	; 2
    1282:	61 f1       	breq	.+88     	; 0x12dc <__fixsfsi+0x80>
    1284:	82 30       	cpi	r24, 0x02	; 2
    1286:	50 f1       	brcs	.+84     	; 0x12dc <__fixsfsi+0x80>
    1288:	84 30       	cpi	r24, 0x04	; 4
    128a:	21 f4       	brne	.+8      	; 0x1294 <__fixsfsi+0x38>
    128c:	8e 81       	ldd	r24, Y+6	; 0x06
    128e:	88 23       	and	r24, r24
    1290:	51 f1       	breq	.+84     	; 0x12e6 <__fixsfsi+0x8a>
    1292:	2e c0       	rjmp	.+92     	; 0x12f0 <__fixsfsi+0x94>
    1294:	2f 81       	ldd	r18, Y+7	; 0x07
    1296:	38 85       	ldd	r19, Y+8	; 0x08
    1298:	37 fd       	sbrc	r19, 7
    129a:	20 c0       	rjmp	.+64     	; 0x12dc <__fixsfsi+0x80>
    129c:	6e 81       	ldd	r22, Y+6	; 0x06
    129e:	2f 31       	cpi	r18, 0x1F	; 31
    12a0:	31 05       	cpc	r19, r1
    12a2:	1c f0       	brlt	.+6      	; 0x12aa <__fixsfsi+0x4e>
    12a4:	66 23       	and	r22, r22
    12a6:	f9 f0       	breq	.+62     	; 0x12e6 <__fixsfsi+0x8a>
    12a8:	23 c0       	rjmp	.+70     	; 0x12f0 <__fixsfsi+0x94>
    12aa:	8e e1       	ldi	r24, 0x1E	; 30
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	82 1b       	sub	r24, r18
    12b0:	93 0b       	sbc	r25, r19
    12b2:	29 85       	ldd	r18, Y+9	; 0x09
    12b4:	3a 85       	ldd	r19, Y+10	; 0x0a
    12b6:	4b 85       	ldd	r20, Y+11	; 0x0b
    12b8:	5c 85       	ldd	r21, Y+12	; 0x0c
    12ba:	04 c0       	rjmp	.+8      	; 0x12c4 <__fixsfsi+0x68>
    12bc:	56 95       	lsr	r21
    12be:	47 95       	ror	r20
    12c0:	37 95       	ror	r19
    12c2:	27 95       	ror	r18
    12c4:	8a 95       	dec	r24
    12c6:	d2 f7       	brpl	.-12     	; 0x12bc <__fixsfsi+0x60>
    12c8:	66 23       	and	r22, r22
    12ca:	b1 f0       	breq	.+44     	; 0x12f8 <__fixsfsi+0x9c>
    12cc:	50 95       	com	r21
    12ce:	40 95       	com	r20
    12d0:	30 95       	com	r19
    12d2:	21 95       	neg	r18
    12d4:	3f 4f       	sbci	r19, 0xFF	; 255
    12d6:	4f 4f       	sbci	r20, 0xFF	; 255
    12d8:	5f 4f       	sbci	r21, 0xFF	; 255
    12da:	0e c0       	rjmp	.+28     	; 0x12f8 <__fixsfsi+0x9c>
    12dc:	20 e0       	ldi	r18, 0x00	; 0
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	40 e0       	ldi	r20, 0x00	; 0
    12e2:	50 e0       	ldi	r21, 0x00	; 0
    12e4:	09 c0       	rjmp	.+18     	; 0x12f8 <__fixsfsi+0x9c>
    12e6:	2f ef       	ldi	r18, 0xFF	; 255
    12e8:	3f ef       	ldi	r19, 0xFF	; 255
    12ea:	4f ef       	ldi	r20, 0xFF	; 255
    12ec:	5f e7       	ldi	r21, 0x7F	; 127
    12ee:	04 c0       	rjmp	.+8      	; 0x12f8 <__fixsfsi+0x9c>
    12f0:	20 e0       	ldi	r18, 0x00	; 0
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	40 e0       	ldi	r20, 0x00	; 0
    12f6:	50 e8       	ldi	r21, 0x80	; 128
    12f8:	b9 01       	movw	r22, r18
    12fa:	ca 01       	movw	r24, r20
    12fc:	2c 96       	adiw	r28, 0x0c	; 12
    12fe:	e2 e0       	ldi	r30, 0x02	; 2
    1300:	0c 94 7d 0c 	jmp	0x18fa	; 0x18fa <__epilogue_restores__+0x20>

00001304 <__floatunsisf>:
    1304:	a8 e0       	ldi	r26, 0x08	; 8
    1306:	b0 e0       	ldi	r27, 0x00	; 0
    1308:	e8 e8       	ldi	r30, 0x88	; 136
    130a:	f9 e0       	ldi	r31, 0x09	; 9
    130c:	0c 94 59 0c 	jmp	0x18b2	; 0x18b2 <__prologue_saves__+0x10>
    1310:	7b 01       	movw	r14, r22
    1312:	8c 01       	movw	r16, r24
    1314:	61 15       	cp	r22, r1
    1316:	71 05       	cpc	r23, r1
    1318:	81 05       	cpc	r24, r1
    131a:	91 05       	cpc	r25, r1
    131c:	19 f4       	brne	.+6      	; 0x1324 <__floatunsisf+0x20>
    131e:	82 e0       	ldi	r24, 0x02	; 2
    1320:	89 83       	std	Y+1, r24	; 0x01
    1322:	60 c0       	rjmp	.+192    	; 0x13e4 <__floatunsisf+0xe0>
    1324:	83 e0       	ldi	r24, 0x03	; 3
    1326:	89 83       	std	Y+1, r24	; 0x01
    1328:	8e e1       	ldi	r24, 0x1E	; 30
    132a:	c8 2e       	mov	r12, r24
    132c:	d1 2c       	mov	r13, r1
    132e:	dc 82       	std	Y+4, r13	; 0x04
    1330:	cb 82       	std	Y+3, r12	; 0x03
    1332:	ed 82       	std	Y+5, r14	; 0x05
    1334:	fe 82       	std	Y+6, r15	; 0x06
    1336:	0f 83       	std	Y+7, r16	; 0x07
    1338:	18 87       	std	Y+8, r17	; 0x08
    133a:	c8 01       	movw	r24, r16
    133c:	b7 01       	movw	r22, r14
    133e:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <__clzsi2>
    1342:	fc 01       	movw	r30, r24
    1344:	31 97       	sbiw	r30, 0x01	; 1
    1346:	f7 ff       	sbrs	r31, 7
    1348:	3b c0       	rjmp	.+118    	; 0x13c0 <__floatunsisf+0xbc>
    134a:	22 27       	eor	r18, r18
    134c:	33 27       	eor	r19, r19
    134e:	2e 1b       	sub	r18, r30
    1350:	3f 0b       	sbc	r19, r31
    1352:	57 01       	movw	r10, r14
    1354:	68 01       	movw	r12, r16
    1356:	02 2e       	mov	r0, r18
    1358:	04 c0       	rjmp	.+8      	; 0x1362 <__floatunsisf+0x5e>
    135a:	d6 94       	lsr	r13
    135c:	c7 94       	ror	r12
    135e:	b7 94       	ror	r11
    1360:	a7 94       	ror	r10
    1362:	0a 94       	dec	r0
    1364:	d2 f7       	brpl	.-12     	; 0x135a <__floatunsisf+0x56>
    1366:	40 e0       	ldi	r20, 0x00	; 0
    1368:	50 e0       	ldi	r21, 0x00	; 0
    136a:	60 e0       	ldi	r22, 0x00	; 0
    136c:	70 e0       	ldi	r23, 0x00	; 0
    136e:	81 e0       	ldi	r24, 0x01	; 1
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	a0 e0       	ldi	r26, 0x00	; 0
    1374:	b0 e0       	ldi	r27, 0x00	; 0
    1376:	04 c0       	rjmp	.+8      	; 0x1380 <__floatunsisf+0x7c>
    1378:	88 0f       	add	r24, r24
    137a:	99 1f       	adc	r25, r25
    137c:	aa 1f       	adc	r26, r26
    137e:	bb 1f       	adc	r27, r27
    1380:	2a 95       	dec	r18
    1382:	d2 f7       	brpl	.-12     	; 0x1378 <__floatunsisf+0x74>
    1384:	01 97       	sbiw	r24, 0x01	; 1
    1386:	a1 09       	sbc	r26, r1
    1388:	b1 09       	sbc	r27, r1
    138a:	8e 21       	and	r24, r14
    138c:	9f 21       	and	r25, r15
    138e:	a0 23       	and	r26, r16
    1390:	b1 23       	and	r27, r17
    1392:	00 97       	sbiw	r24, 0x00	; 0
    1394:	a1 05       	cpc	r26, r1
    1396:	b1 05       	cpc	r27, r1
    1398:	21 f0       	breq	.+8      	; 0x13a2 <__floatunsisf+0x9e>
    139a:	41 e0       	ldi	r20, 0x01	; 1
    139c:	50 e0       	ldi	r21, 0x00	; 0
    139e:	60 e0       	ldi	r22, 0x00	; 0
    13a0:	70 e0       	ldi	r23, 0x00	; 0
    13a2:	4a 29       	or	r20, r10
    13a4:	5b 29       	or	r21, r11
    13a6:	6c 29       	or	r22, r12
    13a8:	7d 29       	or	r23, r13
    13aa:	4d 83       	std	Y+5, r20	; 0x05
    13ac:	5e 83       	std	Y+6, r21	; 0x06
    13ae:	6f 83       	std	Y+7, r22	; 0x07
    13b0:	78 87       	std	Y+8, r23	; 0x08
    13b2:	8e e1       	ldi	r24, 0x1E	; 30
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	8e 1b       	sub	r24, r30
    13b8:	9f 0b       	sbc	r25, r31
    13ba:	9c 83       	std	Y+4, r25	; 0x04
    13bc:	8b 83       	std	Y+3, r24	; 0x03
    13be:	12 c0       	rjmp	.+36     	; 0x13e4 <__floatunsisf+0xe0>
    13c0:	30 97       	sbiw	r30, 0x00	; 0
    13c2:	81 f0       	breq	.+32     	; 0x13e4 <__floatunsisf+0xe0>
    13c4:	0e 2e       	mov	r0, r30
    13c6:	04 c0       	rjmp	.+8      	; 0x13d0 <__floatunsisf+0xcc>
    13c8:	ee 0c       	add	r14, r14
    13ca:	ff 1c       	adc	r15, r15
    13cc:	00 1f       	adc	r16, r16
    13ce:	11 1f       	adc	r17, r17
    13d0:	0a 94       	dec	r0
    13d2:	d2 f7       	brpl	.-12     	; 0x13c8 <__floatunsisf+0xc4>
    13d4:	ed 82       	std	Y+5, r14	; 0x05
    13d6:	fe 82       	std	Y+6, r15	; 0x06
    13d8:	0f 83       	std	Y+7, r16	; 0x07
    13da:	18 87       	std	Y+8, r17	; 0x08
    13dc:	ce 1a       	sub	r12, r30
    13de:	df 0a       	sbc	r13, r31
    13e0:	dc 82       	std	Y+4, r13	; 0x04
    13e2:	cb 82       	std	Y+3, r12	; 0x03
    13e4:	1a 82       	std	Y+2, r1	; 0x02
    13e6:	ce 01       	movw	r24, r28
    13e8:	01 96       	adiw	r24, 0x01	; 1
    13ea:	0e 94 4a 0a 	call	0x1494	; 0x1494 <__pack_f>
    13ee:	28 96       	adiw	r28, 0x08	; 8
    13f0:	ea e0       	ldi	r30, 0x0A	; 10
    13f2:	0c 94 75 0c 	jmp	0x18ea	; 0x18ea <__epilogue_restores__+0x10>

000013f6 <__clzsi2>:
    13f6:	ef 92       	push	r14
    13f8:	ff 92       	push	r15
    13fa:	0f 93       	push	r16
    13fc:	1f 93       	push	r17
    13fe:	7b 01       	movw	r14, r22
    1400:	8c 01       	movw	r16, r24
    1402:	80 e0       	ldi	r24, 0x00	; 0
    1404:	e8 16       	cp	r14, r24
    1406:	80 e0       	ldi	r24, 0x00	; 0
    1408:	f8 06       	cpc	r15, r24
    140a:	81 e0       	ldi	r24, 0x01	; 1
    140c:	08 07       	cpc	r16, r24
    140e:	80 e0       	ldi	r24, 0x00	; 0
    1410:	18 07       	cpc	r17, r24
    1412:	88 f4       	brcc	.+34     	; 0x1436 <__clzsi2+0x40>
    1414:	8f ef       	ldi	r24, 0xFF	; 255
    1416:	e8 16       	cp	r14, r24
    1418:	f1 04       	cpc	r15, r1
    141a:	01 05       	cpc	r16, r1
    141c:	11 05       	cpc	r17, r1
    141e:	31 f0       	breq	.+12     	; 0x142c <__clzsi2+0x36>
    1420:	28 f0       	brcs	.+10     	; 0x142c <__clzsi2+0x36>
    1422:	88 e0       	ldi	r24, 0x08	; 8
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	a0 e0       	ldi	r26, 0x00	; 0
    1428:	b0 e0       	ldi	r27, 0x00	; 0
    142a:	17 c0       	rjmp	.+46     	; 0x145a <__clzsi2+0x64>
    142c:	80 e0       	ldi	r24, 0x00	; 0
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	a0 e0       	ldi	r26, 0x00	; 0
    1432:	b0 e0       	ldi	r27, 0x00	; 0
    1434:	12 c0       	rjmp	.+36     	; 0x145a <__clzsi2+0x64>
    1436:	80 e0       	ldi	r24, 0x00	; 0
    1438:	e8 16       	cp	r14, r24
    143a:	80 e0       	ldi	r24, 0x00	; 0
    143c:	f8 06       	cpc	r15, r24
    143e:	80 e0       	ldi	r24, 0x00	; 0
    1440:	08 07       	cpc	r16, r24
    1442:	81 e0       	ldi	r24, 0x01	; 1
    1444:	18 07       	cpc	r17, r24
    1446:	28 f0       	brcs	.+10     	; 0x1452 <__clzsi2+0x5c>
    1448:	88 e1       	ldi	r24, 0x18	; 24
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	a0 e0       	ldi	r26, 0x00	; 0
    144e:	b0 e0       	ldi	r27, 0x00	; 0
    1450:	04 c0       	rjmp	.+8      	; 0x145a <__clzsi2+0x64>
    1452:	80 e1       	ldi	r24, 0x10	; 16
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	a0 e0       	ldi	r26, 0x00	; 0
    1458:	b0 e0       	ldi	r27, 0x00	; 0
    145a:	20 e2       	ldi	r18, 0x20	; 32
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	40 e0       	ldi	r20, 0x00	; 0
    1460:	50 e0       	ldi	r21, 0x00	; 0
    1462:	28 1b       	sub	r18, r24
    1464:	39 0b       	sbc	r19, r25
    1466:	4a 0b       	sbc	r20, r26
    1468:	5b 0b       	sbc	r21, r27
    146a:	04 c0       	rjmp	.+8      	; 0x1474 <__clzsi2+0x7e>
    146c:	16 95       	lsr	r17
    146e:	07 95       	ror	r16
    1470:	f7 94       	ror	r15
    1472:	e7 94       	ror	r14
    1474:	8a 95       	dec	r24
    1476:	d2 f7       	brpl	.-12     	; 0x146c <__clzsi2+0x76>
    1478:	f7 01       	movw	r30, r14
    147a:	eb 52       	subi	r30, 0x2B	; 43
    147c:	fe 4f       	sbci	r31, 0xFE	; 254
    147e:	80 81       	ld	r24, Z
    1480:	28 1b       	sub	r18, r24
    1482:	31 09       	sbc	r19, r1
    1484:	41 09       	sbc	r20, r1
    1486:	51 09       	sbc	r21, r1
    1488:	c9 01       	movw	r24, r18
    148a:	1f 91       	pop	r17
    148c:	0f 91       	pop	r16
    148e:	ff 90       	pop	r15
    1490:	ef 90       	pop	r14
    1492:	08 95       	ret

00001494 <__pack_f>:
    1494:	df 92       	push	r13
    1496:	ef 92       	push	r14
    1498:	ff 92       	push	r15
    149a:	0f 93       	push	r16
    149c:	1f 93       	push	r17
    149e:	fc 01       	movw	r30, r24
    14a0:	e4 80       	ldd	r14, Z+4	; 0x04
    14a2:	f5 80       	ldd	r15, Z+5	; 0x05
    14a4:	06 81       	ldd	r16, Z+6	; 0x06
    14a6:	17 81       	ldd	r17, Z+7	; 0x07
    14a8:	d1 80       	ldd	r13, Z+1	; 0x01
    14aa:	80 81       	ld	r24, Z
    14ac:	82 30       	cpi	r24, 0x02	; 2
    14ae:	48 f4       	brcc	.+18     	; 0x14c2 <__pack_f+0x2e>
    14b0:	80 e0       	ldi	r24, 0x00	; 0
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	a0 e1       	ldi	r26, 0x10	; 16
    14b6:	b0 e0       	ldi	r27, 0x00	; 0
    14b8:	e8 2a       	or	r14, r24
    14ba:	f9 2a       	or	r15, r25
    14bc:	0a 2b       	or	r16, r26
    14be:	1b 2b       	or	r17, r27
    14c0:	a5 c0       	rjmp	.+330    	; 0x160c <__pack_f+0x178>
    14c2:	84 30       	cpi	r24, 0x04	; 4
    14c4:	09 f4       	brne	.+2      	; 0x14c8 <__pack_f+0x34>
    14c6:	9f c0       	rjmp	.+318    	; 0x1606 <__pack_f+0x172>
    14c8:	82 30       	cpi	r24, 0x02	; 2
    14ca:	21 f4       	brne	.+8      	; 0x14d4 <__pack_f+0x40>
    14cc:	ee 24       	eor	r14, r14
    14ce:	ff 24       	eor	r15, r15
    14d0:	87 01       	movw	r16, r14
    14d2:	05 c0       	rjmp	.+10     	; 0x14de <__pack_f+0x4a>
    14d4:	e1 14       	cp	r14, r1
    14d6:	f1 04       	cpc	r15, r1
    14d8:	01 05       	cpc	r16, r1
    14da:	11 05       	cpc	r17, r1
    14dc:	19 f4       	brne	.+6      	; 0x14e4 <__pack_f+0x50>
    14de:	e0 e0       	ldi	r30, 0x00	; 0
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	96 c0       	rjmp	.+300    	; 0x1610 <__pack_f+0x17c>
    14e4:	62 81       	ldd	r22, Z+2	; 0x02
    14e6:	73 81       	ldd	r23, Z+3	; 0x03
    14e8:	9f ef       	ldi	r25, 0xFF	; 255
    14ea:	62 38       	cpi	r22, 0x82	; 130
    14ec:	79 07       	cpc	r23, r25
    14ee:	0c f0       	brlt	.+2      	; 0x14f2 <__pack_f+0x5e>
    14f0:	5b c0       	rjmp	.+182    	; 0x15a8 <__pack_f+0x114>
    14f2:	22 e8       	ldi	r18, 0x82	; 130
    14f4:	3f ef       	ldi	r19, 0xFF	; 255
    14f6:	26 1b       	sub	r18, r22
    14f8:	37 0b       	sbc	r19, r23
    14fa:	2a 31       	cpi	r18, 0x1A	; 26
    14fc:	31 05       	cpc	r19, r1
    14fe:	2c f0       	brlt	.+10     	; 0x150a <__pack_f+0x76>
    1500:	20 e0       	ldi	r18, 0x00	; 0
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	40 e0       	ldi	r20, 0x00	; 0
    1506:	50 e0       	ldi	r21, 0x00	; 0
    1508:	2a c0       	rjmp	.+84     	; 0x155e <__pack_f+0xca>
    150a:	b8 01       	movw	r22, r16
    150c:	a7 01       	movw	r20, r14
    150e:	02 2e       	mov	r0, r18
    1510:	04 c0       	rjmp	.+8      	; 0x151a <__pack_f+0x86>
    1512:	76 95       	lsr	r23
    1514:	67 95       	ror	r22
    1516:	57 95       	ror	r21
    1518:	47 95       	ror	r20
    151a:	0a 94       	dec	r0
    151c:	d2 f7       	brpl	.-12     	; 0x1512 <__pack_f+0x7e>
    151e:	81 e0       	ldi	r24, 0x01	; 1
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	a0 e0       	ldi	r26, 0x00	; 0
    1524:	b0 e0       	ldi	r27, 0x00	; 0
    1526:	04 c0       	rjmp	.+8      	; 0x1530 <__pack_f+0x9c>
    1528:	88 0f       	add	r24, r24
    152a:	99 1f       	adc	r25, r25
    152c:	aa 1f       	adc	r26, r26
    152e:	bb 1f       	adc	r27, r27
    1530:	2a 95       	dec	r18
    1532:	d2 f7       	brpl	.-12     	; 0x1528 <__pack_f+0x94>
    1534:	01 97       	sbiw	r24, 0x01	; 1
    1536:	a1 09       	sbc	r26, r1
    1538:	b1 09       	sbc	r27, r1
    153a:	8e 21       	and	r24, r14
    153c:	9f 21       	and	r25, r15
    153e:	a0 23       	and	r26, r16
    1540:	b1 23       	and	r27, r17
    1542:	00 97       	sbiw	r24, 0x00	; 0
    1544:	a1 05       	cpc	r26, r1
    1546:	b1 05       	cpc	r27, r1
    1548:	21 f0       	breq	.+8      	; 0x1552 <__pack_f+0xbe>
    154a:	81 e0       	ldi	r24, 0x01	; 1
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	a0 e0       	ldi	r26, 0x00	; 0
    1550:	b0 e0       	ldi	r27, 0x00	; 0
    1552:	9a 01       	movw	r18, r20
    1554:	ab 01       	movw	r20, r22
    1556:	28 2b       	or	r18, r24
    1558:	39 2b       	or	r19, r25
    155a:	4a 2b       	or	r20, r26
    155c:	5b 2b       	or	r21, r27
    155e:	da 01       	movw	r26, r20
    1560:	c9 01       	movw	r24, r18
    1562:	8f 77       	andi	r24, 0x7F	; 127
    1564:	90 70       	andi	r25, 0x00	; 0
    1566:	a0 70       	andi	r26, 0x00	; 0
    1568:	b0 70       	andi	r27, 0x00	; 0
    156a:	80 34       	cpi	r24, 0x40	; 64
    156c:	91 05       	cpc	r25, r1
    156e:	a1 05       	cpc	r26, r1
    1570:	b1 05       	cpc	r27, r1
    1572:	39 f4       	brne	.+14     	; 0x1582 <__pack_f+0xee>
    1574:	27 ff       	sbrs	r18, 7
    1576:	09 c0       	rjmp	.+18     	; 0x158a <__pack_f+0xf6>
    1578:	20 5c       	subi	r18, 0xC0	; 192
    157a:	3f 4f       	sbci	r19, 0xFF	; 255
    157c:	4f 4f       	sbci	r20, 0xFF	; 255
    157e:	5f 4f       	sbci	r21, 0xFF	; 255
    1580:	04 c0       	rjmp	.+8      	; 0x158a <__pack_f+0xf6>
    1582:	21 5c       	subi	r18, 0xC1	; 193
    1584:	3f 4f       	sbci	r19, 0xFF	; 255
    1586:	4f 4f       	sbci	r20, 0xFF	; 255
    1588:	5f 4f       	sbci	r21, 0xFF	; 255
    158a:	e0 e0       	ldi	r30, 0x00	; 0
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	20 30       	cpi	r18, 0x00	; 0
    1590:	a0 e0       	ldi	r26, 0x00	; 0
    1592:	3a 07       	cpc	r19, r26
    1594:	a0 e0       	ldi	r26, 0x00	; 0
    1596:	4a 07       	cpc	r20, r26
    1598:	a0 e4       	ldi	r26, 0x40	; 64
    159a:	5a 07       	cpc	r21, r26
    159c:	10 f0       	brcs	.+4      	; 0x15a2 <__pack_f+0x10e>
    159e:	e1 e0       	ldi	r30, 0x01	; 1
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	79 01       	movw	r14, r18
    15a4:	8a 01       	movw	r16, r20
    15a6:	27 c0       	rjmp	.+78     	; 0x15f6 <__pack_f+0x162>
    15a8:	60 38       	cpi	r22, 0x80	; 128
    15aa:	71 05       	cpc	r23, r1
    15ac:	64 f5       	brge	.+88     	; 0x1606 <__pack_f+0x172>
    15ae:	fb 01       	movw	r30, r22
    15b0:	e1 58       	subi	r30, 0x81	; 129
    15b2:	ff 4f       	sbci	r31, 0xFF	; 255
    15b4:	d8 01       	movw	r26, r16
    15b6:	c7 01       	movw	r24, r14
    15b8:	8f 77       	andi	r24, 0x7F	; 127
    15ba:	90 70       	andi	r25, 0x00	; 0
    15bc:	a0 70       	andi	r26, 0x00	; 0
    15be:	b0 70       	andi	r27, 0x00	; 0
    15c0:	80 34       	cpi	r24, 0x40	; 64
    15c2:	91 05       	cpc	r25, r1
    15c4:	a1 05       	cpc	r26, r1
    15c6:	b1 05       	cpc	r27, r1
    15c8:	39 f4       	brne	.+14     	; 0x15d8 <__pack_f+0x144>
    15ca:	e7 fe       	sbrs	r14, 7
    15cc:	0d c0       	rjmp	.+26     	; 0x15e8 <__pack_f+0x154>
    15ce:	80 e4       	ldi	r24, 0x40	; 64
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	a0 e0       	ldi	r26, 0x00	; 0
    15d4:	b0 e0       	ldi	r27, 0x00	; 0
    15d6:	04 c0       	rjmp	.+8      	; 0x15e0 <__pack_f+0x14c>
    15d8:	8f e3       	ldi	r24, 0x3F	; 63
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	a0 e0       	ldi	r26, 0x00	; 0
    15de:	b0 e0       	ldi	r27, 0x00	; 0
    15e0:	e8 0e       	add	r14, r24
    15e2:	f9 1e       	adc	r15, r25
    15e4:	0a 1f       	adc	r16, r26
    15e6:	1b 1f       	adc	r17, r27
    15e8:	17 ff       	sbrs	r17, 7
    15ea:	05 c0       	rjmp	.+10     	; 0x15f6 <__pack_f+0x162>
    15ec:	16 95       	lsr	r17
    15ee:	07 95       	ror	r16
    15f0:	f7 94       	ror	r15
    15f2:	e7 94       	ror	r14
    15f4:	31 96       	adiw	r30, 0x01	; 1
    15f6:	87 e0       	ldi	r24, 0x07	; 7
    15f8:	16 95       	lsr	r17
    15fa:	07 95       	ror	r16
    15fc:	f7 94       	ror	r15
    15fe:	e7 94       	ror	r14
    1600:	8a 95       	dec	r24
    1602:	d1 f7       	brne	.-12     	; 0x15f8 <__pack_f+0x164>
    1604:	05 c0       	rjmp	.+10     	; 0x1610 <__pack_f+0x17c>
    1606:	ee 24       	eor	r14, r14
    1608:	ff 24       	eor	r15, r15
    160a:	87 01       	movw	r16, r14
    160c:	ef ef       	ldi	r30, 0xFF	; 255
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	6e 2f       	mov	r22, r30
    1612:	67 95       	ror	r22
    1614:	66 27       	eor	r22, r22
    1616:	67 95       	ror	r22
    1618:	90 2f       	mov	r25, r16
    161a:	9f 77       	andi	r25, 0x7F	; 127
    161c:	d7 94       	ror	r13
    161e:	dd 24       	eor	r13, r13
    1620:	d7 94       	ror	r13
    1622:	8e 2f       	mov	r24, r30
    1624:	86 95       	lsr	r24
    1626:	49 2f       	mov	r20, r25
    1628:	46 2b       	or	r20, r22
    162a:	58 2f       	mov	r21, r24
    162c:	5d 29       	or	r21, r13
    162e:	b7 01       	movw	r22, r14
    1630:	ca 01       	movw	r24, r20
    1632:	1f 91       	pop	r17
    1634:	0f 91       	pop	r16
    1636:	ff 90       	pop	r15
    1638:	ef 90       	pop	r14
    163a:	df 90       	pop	r13
    163c:	08 95       	ret

0000163e <__unpack_f>:
    163e:	fc 01       	movw	r30, r24
    1640:	db 01       	movw	r26, r22
    1642:	40 81       	ld	r20, Z
    1644:	51 81       	ldd	r21, Z+1	; 0x01
    1646:	22 81       	ldd	r18, Z+2	; 0x02
    1648:	62 2f       	mov	r22, r18
    164a:	6f 77       	andi	r22, 0x7F	; 127
    164c:	70 e0       	ldi	r23, 0x00	; 0
    164e:	22 1f       	adc	r18, r18
    1650:	22 27       	eor	r18, r18
    1652:	22 1f       	adc	r18, r18
    1654:	93 81       	ldd	r25, Z+3	; 0x03
    1656:	89 2f       	mov	r24, r25
    1658:	88 0f       	add	r24, r24
    165a:	82 2b       	or	r24, r18
    165c:	28 2f       	mov	r18, r24
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	99 1f       	adc	r25, r25
    1662:	99 27       	eor	r25, r25
    1664:	99 1f       	adc	r25, r25
    1666:	11 96       	adiw	r26, 0x01	; 1
    1668:	9c 93       	st	X, r25
    166a:	11 97       	sbiw	r26, 0x01	; 1
    166c:	21 15       	cp	r18, r1
    166e:	31 05       	cpc	r19, r1
    1670:	a9 f5       	brne	.+106    	; 0x16dc <__unpack_f+0x9e>
    1672:	41 15       	cp	r20, r1
    1674:	51 05       	cpc	r21, r1
    1676:	61 05       	cpc	r22, r1
    1678:	71 05       	cpc	r23, r1
    167a:	11 f4       	brne	.+4      	; 0x1680 <__unpack_f+0x42>
    167c:	82 e0       	ldi	r24, 0x02	; 2
    167e:	37 c0       	rjmp	.+110    	; 0x16ee <__unpack_f+0xb0>
    1680:	82 e8       	ldi	r24, 0x82	; 130
    1682:	9f ef       	ldi	r25, 0xFF	; 255
    1684:	13 96       	adiw	r26, 0x03	; 3
    1686:	9c 93       	st	X, r25
    1688:	8e 93       	st	-X, r24
    168a:	12 97       	sbiw	r26, 0x02	; 2
    168c:	9a 01       	movw	r18, r20
    168e:	ab 01       	movw	r20, r22
    1690:	67 e0       	ldi	r22, 0x07	; 7
    1692:	22 0f       	add	r18, r18
    1694:	33 1f       	adc	r19, r19
    1696:	44 1f       	adc	r20, r20
    1698:	55 1f       	adc	r21, r21
    169a:	6a 95       	dec	r22
    169c:	d1 f7       	brne	.-12     	; 0x1692 <__unpack_f+0x54>
    169e:	83 e0       	ldi	r24, 0x03	; 3
    16a0:	8c 93       	st	X, r24
    16a2:	0d c0       	rjmp	.+26     	; 0x16be <__unpack_f+0x80>
    16a4:	22 0f       	add	r18, r18
    16a6:	33 1f       	adc	r19, r19
    16a8:	44 1f       	adc	r20, r20
    16aa:	55 1f       	adc	r21, r21
    16ac:	12 96       	adiw	r26, 0x02	; 2
    16ae:	8d 91       	ld	r24, X+
    16b0:	9c 91       	ld	r25, X
    16b2:	13 97       	sbiw	r26, 0x03	; 3
    16b4:	01 97       	sbiw	r24, 0x01	; 1
    16b6:	13 96       	adiw	r26, 0x03	; 3
    16b8:	9c 93       	st	X, r25
    16ba:	8e 93       	st	-X, r24
    16bc:	12 97       	sbiw	r26, 0x02	; 2
    16be:	20 30       	cpi	r18, 0x00	; 0
    16c0:	80 e0       	ldi	r24, 0x00	; 0
    16c2:	38 07       	cpc	r19, r24
    16c4:	80 e0       	ldi	r24, 0x00	; 0
    16c6:	48 07       	cpc	r20, r24
    16c8:	80 e4       	ldi	r24, 0x40	; 64
    16ca:	58 07       	cpc	r21, r24
    16cc:	58 f3       	brcs	.-42     	; 0x16a4 <__unpack_f+0x66>
    16ce:	14 96       	adiw	r26, 0x04	; 4
    16d0:	2d 93       	st	X+, r18
    16d2:	3d 93       	st	X+, r19
    16d4:	4d 93       	st	X+, r20
    16d6:	5c 93       	st	X, r21
    16d8:	17 97       	sbiw	r26, 0x07	; 7
    16da:	08 95       	ret
    16dc:	2f 3f       	cpi	r18, 0xFF	; 255
    16de:	31 05       	cpc	r19, r1
    16e0:	79 f4       	brne	.+30     	; 0x1700 <__unpack_f+0xc2>
    16e2:	41 15       	cp	r20, r1
    16e4:	51 05       	cpc	r21, r1
    16e6:	61 05       	cpc	r22, r1
    16e8:	71 05       	cpc	r23, r1
    16ea:	19 f4       	brne	.+6      	; 0x16f2 <__unpack_f+0xb4>
    16ec:	84 e0       	ldi	r24, 0x04	; 4
    16ee:	8c 93       	st	X, r24
    16f0:	08 95       	ret
    16f2:	64 ff       	sbrs	r22, 4
    16f4:	03 c0       	rjmp	.+6      	; 0x16fc <__unpack_f+0xbe>
    16f6:	81 e0       	ldi	r24, 0x01	; 1
    16f8:	8c 93       	st	X, r24
    16fa:	12 c0       	rjmp	.+36     	; 0x1720 <__unpack_f+0xe2>
    16fc:	1c 92       	st	X, r1
    16fe:	10 c0       	rjmp	.+32     	; 0x1720 <__unpack_f+0xe2>
    1700:	2f 57       	subi	r18, 0x7F	; 127
    1702:	30 40       	sbci	r19, 0x00	; 0
    1704:	13 96       	adiw	r26, 0x03	; 3
    1706:	3c 93       	st	X, r19
    1708:	2e 93       	st	-X, r18
    170a:	12 97       	sbiw	r26, 0x02	; 2
    170c:	83 e0       	ldi	r24, 0x03	; 3
    170e:	8c 93       	st	X, r24
    1710:	87 e0       	ldi	r24, 0x07	; 7
    1712:	44 0f       	add	r20, r20
    1714:	55 1f       	adc	r21, r21
    1716:	66 1f       	adc	r22, r22
    1718:	77 1f       	adc	r23, r23
    171a:	8a 95       	dec	r24
    171c:	d1 f7       	brne	.-12     	; 0x1712 <__unpack_f+0xd4>
    171e:	70 64       	ori	r23, 0x40	; 64
    1720:	14 96       	adiw	r26, 0x04	; 4
    1722:	4d 93       	st	X+, r20
    1724:	5d 93       	st	X+, r21
    1726:	6d 93       	st	X+, r22
    1728:	7c 93       	st	X, r23
    172a:	17 97       	sbiw	r26, 0x07	; 7
    172c:	08 95       	ret

0000172e <__fpcmp_parts_f>:
    172e:	1f 93       	push	r17
    1730:	dc 01       	movw	r26, r24
    1732:	fb 01       	movw	r30, r22
    1734:	9c 91       	ld	r25, X
    1736:	92 30       	cpi	r25, 0x02	; 2
    1738:	08 f4       	brcc	.+2      	; 0x173c <__fpcmp_parts_f+0xe>
    173a:	47 c0       	rjmp	.+142    	; 0x17ca <__fpcmp_parts_f+0x9c>
    173c:	80 81       	ld	r24, Z
    173e:	82 30       	cpi	r24, 0x02	; 2
    1740:	08 f4       	brcc	.+2      	; 0x1744 <__fpcmp_parts_f+0x16>
    1742:	43 c0       	rjmp	.+134    	; 0x17ca <__fpcmp_parts_f+0x9c>
    1744:	94 30       	cpi	r25, 0x04	; 4
    1746:	51 f4       	brne	.+20     	; 0x175c <__fpcmp_parts_f+0x2e>
    1748:	11 96       	adiw	r26, 0x01	; 1
    174a:	1c 91       	ld	r17, X
    174c:	84 30       	cpi	r24, 0x04	; 4
    174e:	99 f5       	brne	.+102    	; 0x17b6 <__fpcmp_parts_f+0x88>
    1750:	81 81       	ldd	r24, Z+1	; 0x01
    1752:	68 2f       	mov	r22, r24
    1754:	70 e0       	ldi	r23, 0x00	; 0
    1756:	61 1b       	sub	r22, r17
    1758:	71 09       	sbc	r23, r1
    175a:	3f c0       	rjmp	.+126    	; 0x17da <__fpcmp_parts_f+0xac>
    175c:	84 30       	cpi	r24, 0x04	; 4
    175e:	21 f0       	breq	.+8      	; 0x1768 <__fpcmp_parts_f+0x3a>
    1760:	92 30       	cpi	r25, 0x02	; 2
    1762:	31 f4       	brne	.+12     	; 0x1770 <__fpcmp_parts_f+0x42>
    1764:	82 30       	cpi	r24, 0x02	; 2
    1766:	b9 f1       	breq	.+110    	; 0x17d6 <__fpcmp_parts_f+0xa8>
    1768:	81 81       	ldd	r24, Z+1	; 0x01
    176a:	88 23       	and	r24, r24
    176c:	89 f1       	breq	.+98     	; 0x17d0 <__fpcmp_parts_f+0xa2>
    176e:	2d c0       	rjmp	.+90     	; 0x17ca <__fpcmp_parts_f+0x9c>
    1770:	11 96       	adiw	r26, 0x01	; 1
    1772:	1c 91       	ld	r17, X
    1774:	11 97       	sbiw	r26, 0x01	; 1
    1776:	82 30       	cpi	r24, 0x02	; 2
    1778:	f1 f0       	breq	.+60     	; 0x17b6 <__fpcmp_parts_f+0x88>
    177a:	81 81       	ldd	r24, Z+1	; 0x01
    177c:	18 17       	cp	r17, r24
    177e:	d9 f4       	brne	.+54     	; 0x17b6 <__fpcmp_parts_f+0x88>
    1780:	12 96       	adiw	r26, 0x02	; 2
    1782:	2d 91       	ld	r18, X+
    1784:	3c 91       	ld	r19, X
    1786:	13 97       	sbiw	r26, 0x03	; 3
    1788:	82 81       	ldd	r24, Z+2	; 0x02
    178a:	93 81       	ldd	r25, Z+3	; 0x03
    178c:	82 17       	cp	r24, r18
    178e:	93 07       	cpc	r25, r19
    1790:	94 f0       	brlt	.+36     	; 0x17b6 <__fpcmp_parts_f+0x88>
    1792:	28 17       	cp	r18, r24
    1794:	39 07       	cpc	r19, r25
    1796:	bc f0       	brlt	.+46     	; 0x17c6 <__fpcmp_parts_f+0x98>
    1798:	14 96       	adiw	r26, 0x04	; 4
    179a:	8d 91       	ld	r24, X+
    179c:	9d 91       	ld	r25, X+
    179e:	0d 90       	ld	r0, X+
    17a0:	bc 91       	ld	r27, X
    17a2:	a0 2d       	mov	r26, r0
    17a4:	24 81       	ldd	r18, Z+4	; 0x04
    17a6:	35 81       	ldd	r19, Z+5	; 0x05
    17a8:	46 81       	ldd	r20, Z+6	; 0x06
    17aa:	57 81       	ldd	r21, Z+7	; 0x07
    17ac:	28 17       	cp	r18, r24
    17ae:	39 07       	cpc	r19, r25
    17b0:	4a 07       	cpc	r20, r26
    17b2:	5b 07       	cpc	r21, r27
    17b4:	18 f4       	brcc	.+6      	; 0x17bc <__fpcmp_parts_f+0x8e>
    17b6:	11 23       	and	r17, r17
    17b8:	41 f0       	breq	.+16     	; 0x17ca <__fpcmp_parts_f+0x9c>
    17ba:	0a c0       	rjmp	.+20     	; 0x17d0 <__fpcmp_parts_f+0xa2>
    17bc:	82 17       	cp	r24, r18
    17be:	93 07       	cpc	r25, r19
    17c0:	a4 07       	cpc	r26, r20
    17c2:	b5 07       	cpc	r27, r21
    17c4:	40 f4       	brcc	.+16     	; 0x17d6 <__fpcmp_parts_f+0xa8>
    17c6:	11 23       	and	r17, r17
    17c8:	19 f0       	breq	.+6      	; 0x17d0 <__fpcmp_parts_f+0xa2>
    17ca:	61 e0       	ldi	r22, 0x01	; 1
    17cc:	70 e0       	ldi	r23, 0x00	; 0
    17ce:	05 c0       	rjmp	.+10     	; 0x17da <__fpcmp_parts_f+0xac>
    17d0:	6f ef       	ldi	r22, 0xFF	; 255
    17d2:	7f ef       	ldi	r23, 0xFF	; 255
    17d4:	02 c0       	rjmp	.+4      	; 0x17da <__fpcmp_parts_f+0xac>
    17d6:	60 e0       	ldi	r22, 0x00	; 0
    17d8:	70 e0       	ldi	r23, 0x00	; 0
    17da:	cb 01       	movw	r24, r22
    17dc:	1f 91       	pop	r17
    17de:	08 95       	ret

000017e0 <do_rand>:
    17e0:	a0 e0       	ldi	r26, 0x00	; 0
    17e2:	b0 e0       	ldi	r27, 0x00	; 0
    17e4:	e6 ef       	ldi	r30, 0xF6	; 246
    17e6:	fb e0       	ldi	r31, 0x0B	; 11
    17e8:	0c 94 59 0c 	jmp	0x18b2	; 0x18b2 <__prologue_saves__+0x10>
    17ec:	ec 01       	movw	r28, r24
    17ee:	a8 80       	ld	r10, Y
    17f0:	b9 80       	ldd	r11, Y+1	; 0x01
    17f2:	ca 80       	ldd	r12, Y+2	; 0x02
    17f4:	db 80       	ldd	r13, Y+3	; 0x03
    17f6:	a1 14       	cp	r10, r1
    17f8:	b1 04       	cpc	r11, r1
    17fa:	c1 04       	cpc	r12, r1
    17fc:	d1 04       	cpc	r13, r1
    17fe:	41 f4       	brne	.+16     	; 0x1810 <do_rand+0x30>
    1800:	84 e2       	ldi	r24, 0x24	; 36
    1802:	a8 2e       	mov	r10, r24
    1804:	89 ed       	ldi	r24, 0xD9	; 217
    1806:	b8 2e       	mov	r11, r24
    1808:	8b e5       	ldi	r24, 0x5B	; 91
    180a:	c8 2e       	mov	r12, r24
    180c:	87 e0       	ldi	r24, 0x07	; 7
    180e:	d8 2e       	mov	r13, r24
    1810:	c6 01       	movw	r24, r12
    1812:	b5 01       	movw	r22, r10
    1814:	2d e1       	ldi	r18, 0x1D	; 29
    1816:	33 ef       	ldi	r19, 0xF3	; 243
    1818:	41 e0       	ldi	r20, 0x01	; 1
    181a:	50 e0       	ldi	r21, 0x00	; 0
    181c:	0e 94 a7 0c 	call	0x194e	; 0x194e <__divmodsi4>
    1820:	27 ea       	ldi	r18, 0xA7	; 167
    1822:	31 e4       	ldi	r19, 0x41	; 65
    1824:	40 e0       	ldi	r20, 0x00	; 0
    1826:	50 e0       	ldi	r21, 0x00	; 0
    1828:	0e 94 88 0c 	call	0x1910	; 0x1910 <__mulsi3>
    182c:	7b 01       	movw	r14, r22
    182e:	8c 01       	movw	r16, r24
    1830:	c6 01       	movw	r24, r12
    1832:	b5 01       	movw	r22, r10
    1834:	2d e1       	ldi	r18, 0x1D	; 29
    1836:	33 ef       	ldi	r19, 0xF3	; 243
    1838:	41 e0       	ldi	r20, 0x01	; 1
    183a:	50 e0       	ldi	r21, 0x00	; 0
    183c:	0e 94 a7 0c 	call	0x194e	; 0x194e <__divmodsi4>
    1840:	ca 01       	movw	r24, r20
    1842:	b9 01       	movw	r22, r18
    1844:	2c ee       	ldi	r18, 0xEC	; 236
    1846:	34 ef       	ldi	r19, 0xF4	; 244
    1848:	4f ef       	ldi	r20, 0xFF	; 255
    184a:	5f ef       	ldi	r21, 0xFF	; 255
    184c:	0e 94 88 0c 	call	0x1910	; 0x1910 <__mulsi3>
    1850:	6e 0d       	add	r22, r14
    1852:	7f 1d       	adc	r23, r15
    1854:	80 1f       	adc	r24, r16
    1856:	91 1f       	adc	r25, r17
    1858:	97 ff       	sbrs	r25, 7
    185a:	04 c0       	rjmp	.+8      	; 0x1864 <do_rand+0x84>
    185c:	61 50       	subi	r22, 0x01	; 1
    185e:	70 40       	sbci	r23, 0x00	; 0
    1860:	80 40       	sbci	r24, 0x00	; 0
    1862:	90 48       	sbci	r25, 0x80	; 128
    1864:	68 83       	st	Y, r22
    1866:	79 83       	std	Y+1, r23	; 0x01
    1868:	8a 83       	std	Y+2, r24	; 0x02
    186a:	9b 83       	std	Y+3, r25	; 0x03
    186c:	9b 01       	movw	r18, r22
    186e:	3f 77       	andi	r19, 0x7F	; 127
    1870:	c9 01       	movw	r24, r18
    1872:	cd b7       	in	r28, 0x3d	; 61
    1874:	de b7       	in	r29, 0x3e	; 62
    1876:	ea e0       	ldi	r30, 0x0A	; 10
    1878:	0c 94 75 0c 	jmp	0x18ea	; 0x18ea <__epilogue_restores__+0x10>

0000187c <rand_r>:
    187c:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <do_rand>
    1880:	08 95       	ret

00001882 <rand>:
    1882:	85 ed       	ldi	r24, 0xD5	; 213
    1884:	92 e0       	ldi	r25, 0x02	; 2
    1886:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <do_rand>
    188a:	08 95       	ret

0000188c <srand>:
    188c:	a0 e0       	ldi	r26, 0x00	; 0
    188e:	b0 e0       	ldi	r27, 0x00	; 0
    1890:	80 93 d5 02 	sts	0x02D5, r24
    1894:	90 93 d6 02 	sts	0x02D6, r25
    1898:	a0 93 d7 02 	sts	0x02D7, r26
    189c:	b0 93 d8 02 	sts	0x02D8, r27
    18a0:	08 95       	ret

000018a2 <__prologue_saves__>:
    18a2:	2f 92       	push	r2
    18a4:	3f 92       	push	r3
    18a6:	4f 92       	push	r4
    18a8:	5f 92       	push	r5
    18aa:	6f 92       	push	r6
    18ac:	7f 92       	push	r7
    18ae:	8f 92       	push	r8
    18b0:	9f 92       	push	r9
    18b2:	af 92       	push	r10
    18b4:	bf 92       	push	r11
    18b6:	cf 92       	push	r12
    18b8:	df 92       	push	r13
    18ba:	ef 92       	push	r14
    18bc:	ff 92       	push	r15
    18be:	0f 93       	push	r16
    18c0:	1f 93       	push	r17
    18c2:	cf 93       	push	r28
    18c4:	df 93       	push	r29
    18c6:	cd b7       	in	r28, 0x3d	; 61
    18c8:	de b7       	in	r29, 0x3e	; 62
    18ca:	ca 1b       	sub	r28, r26
    18cc:	db 0b       	sbc	r29, r27
    18ce:	0f b6       	in	r0, 0x3f	; 63
    18d0:	f8 94       	cli
    18d2:	de bf       	out	0x3e, r29	; 62
    18d4:	0f be       	out	0x3f, r0	; 63
    18d6:	cd bf       	out	0x3d, r28	; 61
    18d8:	09 94       	ijmp

000018da <__epilogue_restores__>:
    18da:	2a 88       	ldd	r2, Y+18	; 0x12
    18dc:	39 88       	ldd	r3, Y+17	; 0x11
    18de:	48 88       	ldd	r4, Y+16	; 0x10
    18e0:	5f 84       	ldd	r5, Y+15	; 0x0f
    18e2:	6e 84       	ldd	r6, Y+14	; 0x0e
    18e4:	7d 84       	ldd	r7, Y+13	; 0x0d
    18e6:	8c 84       	ldd	r8, Y+12	; 0x0c
    18e8:	9b 84       	ldd	r9, Y+11	; 0x0b
    18ea:	aa 84       	ldd	r10, Y+10	; 0x0a
    18ec:	b9 84       	ldd	r11, Y+9	; 0x09
    18ee:	c8 84       	ldd	r12, Y+8	; 0x08
    18f0:	df 80       	ldd	r13, Y+7	; 0x07
    18f2:	ee 80       	ldd	r14, Y+6	; 0x06
    18f4:	fd 80       	ldd	r15, Y+5	; 0x05
    18f6:	0c 81       	ldd	r16, Y+4	; 0x04
    18f8:	1b 81       	ldd	r17, Y+3	; 0x03
    18fa:	aa 81       	ldd	r26, Y+2	; 0x02
    18fc:	b9 81       	ldd	r27, Y+1	; 0x01
    18fe:	ce 0f       	add	r28, r30
    1900:	d1 1d       	adc	r29, r1
    1902:	0f b6       	in	r0, 0x3f	; 63
    1904:	f8 94       	cli
    1906:	de bf       	out	0x3e, r29	; 62
    1908:	0f be       	out	0x3f, r0	; 63
    190a:	cd bf       	out	0x3d, r28	; 61
    190c:	ed 01       	movw	r28, r26
    190e:	08 95       	ret

00001910 <__mulsi3>:
    1910:	62 9f       	mul	r22, r18
    1912:	d0 01       	movw	r26, r0
    1914:	73 9f       	mul	r23, r19
    1916:	f0 01       	movw	r30, r0
    1918:	82 9f       	mul	r24, r18
    191a:	e0 0d       	add	r30, r0
    191c:	f1 1d       	adc	r31, r1
    191e:	64 9f       	mul	r22, r20
    1920:	e0 0d       	add	r30, r0
    1922:	f1 1d       	adc	r31, r1
    1924:	92 9f       	mul	r25, r18
    1926:	f0 0d       	add	r31, r0
    1928:	83 9f       	mul	r24, r19
    192a:	f0 0d       	add	r31, r0
    192c:	74 9f       	mul	r23, r20
    192e:	f0 0d       	add	r31, r0
    1930:	65 9f       	mul	r22, r21
    1932:	f0 0d       	add	r31, r0
    1934:	99 27       	eor	r25, r25
    1936:	72 9f       	mul	r23, r18
    1938:	b0 0d       	add	r27, r0
    193a:	e1 1d       	adc	r30, r1
    193c:	f9 1f       	adc	r31, r25
    193e:	63 9f       	mul	r22, r19
    1940:	b0 0d       	add	r27, r0
    1942:	e1 1d       	adc	r30, r1
    1944:	f9 1f       	adc	r31, r25
    1946:	bd 01       	movw	r22, r26
    1948:	cf 01       	movw	r24, r30
    194a:	11 24       	eor	r1, r1
    194c:	08 95       	ret

0000194e <__divmodsi4>:
    194e:	97 fb       	bst	r25, 7
    1950:	09 2e       	mov	r0, r25
    1952:	05 26       	eor	r0, r21
    1954:	0e d0       	rcall	.+28     	; 0x1972 <__divmodsi4_neg1>
    1956:	57 fd       	sbrc	r21, 7
    1958:	04 d0       	rcall	.+8      	; 0x1962 <__divmodsi4_neg2>
    195a:	14 d0       	rcall	.+40     	; 0x1984 <__udivmodsi4>
    195c:	0a d0       	rcall	.+20     	; 0x1972 <__divmodsi4_neg1>
    195e:	00 1c       	adc	r0, r0
    1960:	38 f4       	brcc	.+14     	; 0x1970 <__divmodsi4_exit>

00001962 <__divmodsi4_neg2>:
    1962:	50 95       	com	r21
    1964:	40 95       	com	r20
    1966:	30 95       	com	r19
    1968:	21 95       	neg	r18
    196a:	3f 4f       	sbci	r19, 0xFF	; 255
    196c:	4f 4f       	sbci	r20, 0xFF	; 255
    196e:	5f 4f       	sbci	r21, 0xFF	; 255

00001970 <__divmodsi4_exit>:
    1970:	08 95       	ret

00001972 <__divmodsi4_neg1>:
    1972:	f6 f7       	brtc	.-4      	; 0x1970 <__divmodsi4_exit>
    1974:	90 95       	com	r25
    1976:	80 95       	com	r24
    1978:	70 95       	com	r23
    197a:	61 95       	neg	r22
    197c:	7f 4f       	sbci	r23, 0xFF	; 255
    197e:	8f 4f       	sbci	r24, 0xFF	; 255
    1980:	9f 4f       	sbci	r25, 0xFF	; 255
    1982:	08 95       	ret

00001984 <__udivmodsi4>:
    1984:	a1 e2       	ldi	r26, 0x21	; 33
    1986:	1a 2e       	mov	r1, r26
    1988:	aa 1b       	sub	r26, r26
    198a:	bb 1b       	sub	r27, r27
    198c:	fd 01       	movw	r30, r26
    198e:	0d c0       	rjmp	.+26     	; 0x19aa <__udivmodsi4_ep>

00001990 <__udivmodsi4_loop>:
    1990:	aa 1f       	adc	r26, r26
    1992:	bb 1f       	adc	r27, r27
    1994:	ee 1f       	adc	r30, r30
    1996:	ff 1f       	adc	r31, r31
    1998:	a2 17       	cp	r26, r18
    199a:	b3 07       	cpc	r27, r19
    199c:	e4 07       	cpc	r30, r20
    199e:	f5 07       	cpc	r31, r21
    19a0:	20 f0       	brcs	.+8      	; 0x19aa <__udivmodsi4_ep>
    19a2:	a2 1b       	sub	r26, r18
    19a4:	b3 0b       	sbc	r27, r19
    19a6:	e4 0b       	sbc	r30, r20
    19a8:	f5 0b       	sbc	r31, r21

000019aa <__udivmodsi4_ep>:
    19aa:	66 1f       	adc	r22, r22
    19ac:	77 1f       	adc	r23, r23
    19ae:	88 1f       	adc	r24, r24
    19b0:	99 1f       	adc	r25, r25
    19b2:	1a 94       	dec	r1
    19b4:	69 f7       	brne	.-38     	; 0x1990 <__udivmodsi4_loop>
    19b6:	60 95       	com	r22
    19b8:	70 95       	com	r23
    19ba:	80 95       	com	r24
    19bc:	90 95       	com	r25
    19be:	9b 01       	movw	r18, r22
    19c0:	ac 01       	movw	r20, r24
    19c2:	bd 01       	movw	r22, r26
    19c4:	cf 01       	movw	r24, r30
    19c6:	08 95       	ret

000019c8 <_exit>:
    19c8:	f8 94       	cli

000019ca <__stop_program>:
    19ca:	ff cf       	rjmp	.-2      	; 0x19ca <__stop_program>
