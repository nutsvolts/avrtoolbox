
digitalio.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000034  00800100  00001304  00001398  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001304  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d8  00800134  00800134  000013cc  2**0
                  ALLOC
  3 .debug_aranges 000002c0  00000000  00000000  000013cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000e9c  00000000  00000000  0000168c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002b15  00000000  00000000  00002528  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000117d  00000000  00000000  0000503d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001c9f  00000000  00000000  000061ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000330  00000000  00000000  00007e5c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000869  00000000  00000000  0000818c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000690  00000000  00000000  000089f5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 aa 04 	jmp	0x954	; 0x954 <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 da 04 	jmp	0x9b4	; 0x9b4 <__vector_20>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e4 e0       	ldi	r30, 0x04	; 4
      7c:	f3 e1       	ldi	r31, 0x13	; 19
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	a4 33       	cpi	r26, 0x34	; 52
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	12 e0       	ldi	r17, 0x02	; 2
      8c:	a4 e3       	ldi	r26, 0x34	; 52
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ac 30       	cpi	r26, 0x0C	; 12
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
      9e:	0c 94 80 09 	jmp	0x1300	; 0x1300 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include "digitalio.h"

int main()
{
      a6:	2f 92       	push	r2
      a8:	3f 92       	push	r3
      aa:	5f 92       	push	r5
      ac:	6f 92       	push	r6
      ae:	7f 92       	push	r7
      b0:	8f 92       	push	r8
      b2:	9f 92       	push	r9
      b4:	af 92       	push	r10
      b6:	bf 92       	push	r11
      b8:	cf 92       	push	r12
      ba:	df 92       	push	r13
      bc:	ef 92       	push	r14
      be:	ff 92       	push	r15
      c0:	0f 93       	push	r16
      c2:	1f 93       	push	r17
      c4:	cf 93       	push	r28
      c6:	df 93       	push	r29
	pin_mode(7,OUTPUT);
	pin_mode(8,OUTPUT);
	pin_mode(9,OUTPUT);
*/
// WORKS
	port_pin_mode(PORTD,PD2,OUTPUT);
      c8:	8b b1       	in	r24, 0x0b	; 11
      ca:	62 e0       	ldi	r22, 0x02	; 2
      cc:	41 e0       	ldi	r20, 0x01	; 1
      ce:	0e 94 8d 02 	call	0x51a	; 0x51a <port_pin_mode>
	port_pin_mode(PORTD,PD3,OUTPUT);
      d2:	8b b1       	in	r24, 0x0b	; 11
      d4:	63 e0       	ldi	r22, 0x03	; 3
      d6:	41 e0       	ldi	r20, 0x01	; 1
      d8:	0e 94 8d 02 	call	0x51a	; 0x51a <port_pin_mode>
	port_pin_mode(PORTD,PD4,OUTPUT);
      dc:	8b b1       	in	r24, 0x0b	; 11
      de:	64 e0       	ldi	r22, 0x04	; 4
      e0:	41 e0       	ldi	r20, 0x01	; 1
      e2:	0e 94 8d 02 	call	0x51a	; 0x51a <port_pin_mode>
	port_pin_mode(PORTD,PD5,OUTPUT);
      e6:	8b b1       	in	r24, 0x0b	; 11
      e8:	65 e0       	ldi	r22, 0x05	; 5
      ea:	41 e0       	ldi	r20, 0x01	; 1
      ec:	0e 94 8d 02 	call	0x51a	; 0x51a <port_pin_mode>
	port_pin_mode(PORTD,PD6,OUTPUT);
      f0:	8b b1       	in	r24, 0x0b	; 11
      f2:	66 e0       	ldi	r22, 0x06	; 6
      f4:	41 e0       	ldi	r20, 0x01	; 1
      f6:	0e 94 8d 02 	call	0x51a	; 0x51a <port_pin_mode>
	port_pin_mode(PORTD,PD7,OUTPUT);
      fa:	8b b1       	in	r24, 0x0b	; 11
      fc:	67 e0       	ldi	r22, 0x07	; 7
      fe:	41 e0       	ldi	r20, 0x01	; 1
     100:	0e 94 8d 02 	call	0x51a	; 0x51a <port_pin_mode>
	port_pin_mode(PORTB,PB0,OUTPUT);
     104:	85 b1       	in	r24, 0x05	; 5
     106:	60 e0       	ldi	r22, 0x00	; 0
     108:	41 e0       	ldi	r20, 0x01	; 1
     10a:	0e 94 8d 02 	call	0x51a	; 0x51a <port_pin_mode>
	port_pin_mode(PORTB,PB1,OUTPUT);
     10e:	85 b1       	in	r24, 0x05	; 5
     110:	61 e0       	ldi	r22, 0x01	; 1
     112:	41 e0       	ldi	r20, 0x01	; 1
     114:	0e 94 8d 02 	call	0x51a	; 0x51a <port_pin_mode>
	pin_mode(16,INPUT);
	pin_mode(17,INPUT);
	pin_mode(18,INPUT);
*/
//WORKS
	port_pin_mode(PORTB,PB2,INPUT);
     118:	85 b1       	in	r24, 0x05	; 5
     11a:	62 e0       	ldi	r22, 0x02	; 2
     11c:	40 e0       	ldi	r20, 0x00	; 0
     11e:	0e 94 8d 02 	call	0x51a	; 0x51a <port_pin_mode>
	port_pin_mode(PORTB,PB3,INPUT);
     122:	85 b1       	in	r24, 0x05	; 5
     124:	63 e0       	ldi	r22, 0x03	; 3
     126:	40 e0       	ldi	r20, 0x00	; 0
     128:	0e 94 8d 02 	call	0x51a	; 0x51a <port_pin_mode>
	port_pin_mode(PORTB,PB4,INPUT);
     12c:	85 b1       	in	r24, 0x05	; 5
     12e:	64 e0       	ldi	r22, 0x04	; 4
     130:	40 e0       	ldi	r20, 0x00	; 0
     132:	0e 94 8d 02 	call	0x51a	; 0x51a <port_pin_mode>
	port_pin_mode(PORTC,PC0,INPUT);
     136:	88 b1       	in	r24, 0x08	; 8
     138:	60 e0       	ldi	r22, 0x00	; 0
     13a:	40 e0       	ldi	r20, 0x00	; 0
     13c:	0e 94 8d 02 	call	0x51a	; 0x51a <port_pin_mode>
	port_pin_mode(PORTC,PC1,INPUT);
     140:	88 b1       	in	r24, 0x08	; 8
     142:	61 e0       	ldi	r22, 0x01	; 1
     144:	40 e0       	ldi	r20, 0x00	; 0
     146:	0e 94 8d 02 	call	0x51a	; 0x51a <port_pin_mode>
	port_pin_mode(PORTC,PC2,INPUT);
     14a:	88 b1       	in	r24, 0x08	; 8
     14c:	62 e0       	ldi	r22, 0x02	; 2
     14e:	40 e0       	ldi	r20, 0x00	; 0
     150:	0e 94 8d 02 	call	0x51a	; 0x51a <port_pin_mode>
	port_pin_mode(PORTC,PC3,INPUT);
     154:	88 b1       	in	r24, 0x08	; 8
     156:	63 e0       	ldi	r22, 0x03	; 3
     158:	40 e0       	ldi	r20, 0x00	; 0
     15a:	0e 94 8d 02 	call	0x51a	; 0x51a <port_pin_mode>
	port_pin_mode(PORTC,PC4,INPUT);
     15e:	88 b1       	in	r24, 0x08	; 8
     160:	64 e0       	ldi	r22, 0x04	; 4
     162:	40 e0       	ldi	r20, 0x00	; 0
     164:	0e 94 8d 02 	call	0x51a	; 0x51a <port_pin_mode>
	digital_write(17,HIGH);
	digital_write(18,HIGH);
*/
// WORKS
	// set the pullups
	port_pin_activate_pullup(PORTB,PB2);
     168:	85 b1       	in	r24, 0x05	; 5
     16a:	62 e0       	ldi	r22, 0x02	; 2
     16c:	0e 94 67 03 	call	0x6ce	; 0x6ce <port_pin_activate_pullup>
	port_pin_activate_pullup(PORTB,PB3);
     170:	85 b1       	in	r24, 0x05	; 5
     172:	63 e0       	ldi	r22, 0x03	; 3
     174:	0e 94 67 03 	call	0x6ce	; 0x6ce <port_pin_activate_pullup>
	port_pin_activate_pullup(PORTB,PB4);
     178:	85 b1       	in	r24, 0x05	; 5
     17a:	64 e0       	ldi	r22, 0x04	; 4
     17c:	0e 94 67 03 	call	0x6ce	; 0x6ce <port_pin_activate_pullup>
	port_pin_activate_pullup(PORTC,PC0);
     180:	88 b1       	in	r24, 0x08	; 8
     182:	60 e0       	ldi	r22, 0x00	; 0
     184:	0e 94 67 03 	call	0x6ce	; 0x6ce <port_pin_activate_pullup>
	port_pin_activate_pullup(PORTC,PC1);
     188:	88 b1       	in	r24, 0x08	; 8
     18a:	61 e0       	ldi	r22, 0x01	; 1
     18c:	0e 94 67 03 	call	0x6ce	; 0x6ce <port_pin_activate_pullup>
	port_pin_activate_pullup(PORTC,PC2);
     190:	88 b1       	in	r24, 0x08	; 8
     192:	62 e0       	ldi	r22, 0x02	; 2
     194:	0e 94 67 03 	call	0x6ce	; 0x6ce <port_pin_activate_pullup>
	port_pin_activate_pullup(PORTC,PC3);
     198:	88 b1       	in	r24, 0x08	; 8
     19a:	63 e0       	ldi	r22, 0x03	; 3
     19c:	0e 94 67 03 	call	0x6ce	; 0x6ce <port_pin_activate_pullup>
	port_pin_activate_pullup(PORTC,PC4);
     1a0:	88 b1       	in	r24, 0x08	; 8
     1a2:	64 e0       	ldi	r22, 0x04	; 4
     1a4:	0e 94 67 03 	call	0x6ce	; 0x6ce <port_pin_activate_pullup>

	serial_begin(57600);
     1a8:	60 e0       	ldi	r22, 0x00	; 0
     1aa:	71 ee       	ldi	r23, 0xE1	; 225
     1ac:	80 e0       	ldi	r24, 0x00	; 0
     1ae:	90 e0       	ldi	r25, 0x00	; 0
     1b0:	0e 94 3d 04 	call	0x87a	; 0x87a <serial_begin>

	serial_out("Digitalio tester 062\n");
     1b4:	00 d0       	rcall	.+0      	; 0x1b6 <main+0x110>
     1b6:	80 e0       	ldi	r24, 0x00	; 0
     1b8:	91 e0       	ldi	r25, 0x01	; 1
     1ba:	ad b7       	in	r26, 0x3d	; 61
     1bc:	be b7       	in	r27, 0x3e	; 62
     1be:	12 96       	adiw	r26, 0x02	; 2
     1c0:	9c 93       	st	X, r25
     1c2:	8e 93       	st	-X, r24
     1c4:	11 97       	sbiw	r26, 0x01	; 1
     1c6:	0e 94 57 04 	call	0x8ae	; 0x8ae <serial_out>
     1ca:	22 24       	eor	r2, r2
     1cc:	33 24       	eor	r3, r3
     1ce:	0f 90       	pop	r0
     1d0:	0f 90       	pop	r0
		digital_write(6,digital_read(15));
		digital_write(7,digital_read(16));
		digital_write(8,digital_read(17));
		digital_write(9,digital_read(18));
*/
		port_pin_write(PORTD,PD2,port_pin_read(PORTB,PB2));
     1d2:	1b b1       	in	r17, 0x0b	; 11
     1d4:	85 b1       	in	r24, 0x05	; 5
     1d6:	62 e0       	ldi	r22, 0x02	; 2
     1d8:	0e 94 e6 02 	call	0x5cc	; 0x5cc <port_pin_read>
     1dc:	48 2f       	mov	r20, r24
     1de:	81 2f       	mov	r24, r17
     1e0:	62 e0       	ldi	r22, 0x02	; 2
     1e2:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <port_pin_write>
		port_pin_write(PORTD,PD3,port_pin_read(PORTB,PB3));
     1e6:	1b b1       	in	r17, 0x0b	; 11
     1e8:	85 b1       	in	r24, 0x05	; 5
     1ea:	63 e0       	ldi	r22, 0x03	; 3
     1ec:	0e 94 e6 02 	call	0x5cc	; 0x5cc <port_pin_read>
     1f0:	48 2f       	mov	r20, r24
     1f2:	81 2f       	mov	r24, r17
     1f4:	63 e0       	ldi	r22, 0x03	; 3
     1f6:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <port_pin_write>
		port_pin_write(PORTD,PD4,port_pin_read(PORTB,PB4));
     1fa:	1b b1       	in	r17, 0x0b	; 11
     1fc:	85 b1       	in	r24, 0x05	; 5
     1fe:	64 e0       	ldi	r22, 0x04	; 4
     200:	0e 94 e6 02 	call	0x5cc	; 0x5cc <port_pin_read>
     204:	48 2f       	mov	r20, r24
     206:	81 2f       	mov	r24, r17
     208:	64 e0       	ldi	r22, 0x04	; 4
     20a:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <port_pin_write>
		port_pin_write(PORTD,PD5,port_pin_read(PORTC,PC0));
     20e:	1b b1       	in	r17, 0x0b	; 11
     210:	88 b1       	in	r24, 0x08	; 8
     212:	60 e0       	ldi	r22, 0x00	; 0
     214:	0e 94 e6 02 	call	0x5cc	; 0x5cc <port_pin_read>
     218:	48 2f       	mov	r20, r24
     21a:	81 2f       	mov	r24, r17
     21c:	65 e0       	ldi	r22, 0x05	; 5
     21e:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <port_pin_write>
		port_pin_write(PORTD,PD6,port_pin_read(PORTC,PC1));
     222:	1b b1       	in	r17, 0x0b	; 11
     224:	88 b1       	in	r24, 0x08	; 8
     226:	61 e0       	ldi	r22, 0x01	; 1
     228:	0e 94 e6 02 	call	0x5cc	; 0x5cc <port_pin_read>
     22c:	48 2f       	mov	r20, r24
     22e:	81 2f       	mov	r24, r17
     230:	66 e0       	ldi	r22, 0x06	; 6
     232:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <port_pin_write>
		port_pin_write(PORTD,PD7,port_pin_read(PORTC,PC2));
     236:	1b b1       	in	r17, 0x0b	; 11
     238:	88 b1       	in	r24, 0x08	; 8
     23a:	62 e0       	ldi	r22, 0x02	; 2
     23c:	0e 94 e6 02 	call	0x5cc	; 0x5cc <port_pin_read>
     240:	48 2f       	mov	r20, r24
     242:	81 2f       	mov	r24, r17
     244:	67 e0       	ldi	r22, 0x07	; 7
     246:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <port_pin_write>
		port_pin_write(PORTB,PB0,port_pin_read(PORTC,PC3));
     24a:	15 b1       	in	r17, 0x05	; 5
     24c:	88 b1       	in	r24, 0x08	; 8
     24e:	63 e0       	ldi	r22, 0x03	; 3
     250:	0e 94 e6 02 	call	0x5cc	; 0x5cc <port_pin_read>
     254:	48 2f       	mov	r20, r24
     256:	81 2f       	mov	r24, r17
     258:	60 e0       	ldi	r22, 0x00	; 0
     25a:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <port_pin_write>
		port_pin_write(PORTB,PB1,port_pin_read(PORTC,PC4));
     25e:	15 b1       	in	r17, 0x05	; 5
     260:	88 b1       	in	r24, 0x08	; 8
     262:	64 e0       	ldi	r22, 0x04	; 4
     264:	0e 94 e6 02 	call	0x5cc	; 0x5cc <port_pin_read>
     268:	48 2f       	mov	r20, r24
     26a:	81 2f       	mov	r24, r17
     26c:	61 e0       	ldi	r22, 0x01	; 1
     26e:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <port_pin_write>





		newvalue = (digital_read(10)) + (digital_read(11) << 1) + (digital_read(12) << 2) + (digital_read(14) << 3) + (digital_read(15) << 4) + (digital_read(16) << 5) + (digital_read(17) << 6) + (digital_read(18) << 7);
     272:	8a e0       	ldi	r24, 0x0A	; 10
     274:	0e 94 11 02 	call	0x422	; 0x422 <digital_read>
     278:	68 2e       	mov	r6, r24
     27a:	8b e0       	ldi	r24, 0x0B	; 11
     27c:	0e 94 11 02 	call	0x422	; 0x422 <digital_read>
     280:	58 2e       	mov	r5, r24
     282:	8c e0       	ldi	r24, 0x0C	; 12
     284:	0e 94 11 02 	call	0x422	; 0x422 <digital_read>
     288:	08 2f       	mov	r16, r24
     28a:	8e e0       	ldi	r24, 0x0E	; 14
     28c:	0e 94 11 02 	call	0x422	; 0x422 <digital_read>
     290:	e8 2e       	mov	r14, r24
     292:	8f e0       	ldi	r24, 0x0F	; 15
     294:	0e 94 11 02 	call	0x422	; 0x422 <digital_read>
     298:	c8 2e       	mov	r12, r24
     29a:	80 e1       	ldi	r24, 0x10	; 16
     29c:	0e 94 11 02 	call	0x422	; 0x422 <digital_read>
     2a0:	a8 2e       	mov	r10, r24
     2a2:	81 e1       	ldi	r24, 0x11	; 17
     2a4:	0e 94 11 02 	call	0x422	; 0x422 <digital_read>
     2a8:	88 2e       	mov	r8, r24
     2aa:	82 e1       	ldi	r24, 0x12	; 18
     2ac:	0e 94 11 02 	call	0x422	; 0x422 <digital_read>
     2b0:	c5 2d       	mov	r28, r5
     2b2:	dd 27       	eor	r29, r29
     2b4:	c7 fd       	sbrc	r28, 7
     2b6:	d0 95       	com	r29
     2b8:	cc 0f       	add	r28, r28
     2ba:	dd 1f       	adc	r29, r29
     2bc:	11 27       	eor	r17, r17
     2be:	07 fd       	sbrc	r16, 7
     2c0:	10 95       	com	r17
     2c2:	00 0f       	add	r16, r16
     2c4:	11 1f       	adc	r17, r17
     2c6:	00 0f       	add	r16, r16
     2c8:	11 1f       	adc	r17, r17
     2ca:	c0 0f       	add	r28, r16
     2cc:	d1 1f       	adc	r29, r17
     2ce:	77 24       	eor	r7, r7
     2d0:	67 fc       	sbrc	r6, 7
     2d2:	70 94       	com	r7
     2d4:	c6 0d       	add	r28, r6
     2d6:	d7 1d       	adc	r29, r7
     2d8:	ff 24       	eor	r15, r15
     2da:	e7 fc       	sbrc	r14, 7
     2dc:	f0 94       	com	r15
     2de:	63 e0       	ldi	r22, 0x03	; 3
     2e0:	ee 0c       	add	r14, r14
     2e2:	ff 1c       	adc	r15, r15
     2e4:	6a 95       	dec	r22
     2e6:	e1 f7       	brne	.-8      	; 0x2e0 <main+0x23a>
     2e8:	ce 0d       	add	r28, r14
     2ea:	df 1d       	adc	r29, r15
     2ec:	dd 24       	eor	r13, r13
     2ee:	c7 fc       	sbrc	r12, 7
     2f0:	d0 94       	com	r13
     2f2:	54 e0       	ldi	r21, 0x04	; 4
     2f4:	cc 0c       	add	r12, r12
     2f6:	dd 1c       	adc	r13, r13
     2f8:	5a 95       	dec	r21
     2fa:	e1 f7       	brne	.-8      	; 0x2f4 <main+0x24e>
     2fc:	cc 0d       	add	r28, r12
     2fe:	dd 1d       	adc	r29, r13
     300:	bb 24       	eor	r11, r11
     302:	a7 fc       	sbrc	r10, 7
     304:	b0 94       	com	r11
     306:	45 e0       	ldi	r20, 0x05	; 5
     308:	aa 0c       	add	r10, r10
     30a:	bb 1c       	adc	r11, r11
     30c:	4a 95       	dec	r20
     30e:	e1 f7       	brne	.-8      	; 0x308 <main+0x262>
     310:	ca 0d       	add	r28, r10
     312:	db 1d       	adc	r29, r11
     314:	99 24       	eor	r9, r9
     316:	87 fc       	sbrc	r8, 7
     318:	90 94       	com	r9
     31a:	36 e0       	ldi	r19, 0x06	; 6
     31c:	88 0c       	add	r8, r8
     31e:	99 1c       	adc	r9, r9
     320:	3a 95       	dec	r19
     322:	e1 f7       	brne	.-8      	; 0x31c <main+0x276>
     324:	c8 0d       	add	r28, r8
     326:	d9 1d       	adc	r29, r9
     328:	99 27       	eor	r25, r25
     32a:	87 fd       	sbrc	r24, 7
     32c:	90 95       	com	r25
     32e:	96 95       	lsr	r25
     330:	98 2f       	mov	r25, r24
     332:	88 27       	eor	r24, r24
     334:	97 95       	ror	r25
     336:	87 95       	ror	r24
     338:	c8 0f       	add	r28, r24
     33a:	d9 1f       	adc	r29, r25
		if(newvalue != oldvalue)
     33c:	c2 15       	cp	r28, r2
     33e:	d3 05       	cpc	r29, r3
     340:	09 f4       	brne	.+2      	; 0x344 <main+0x29e>
     342:	47 cf       	rjmp	.-370    	; 0x1d2 <main+0x12c>
		{
			serial_out("DIP 8-bits: %x\n", newvalue);	
     344:	00 d0       	rcall	.+0      	; 0x346 <main+0x2a0>
     346:	00 d0       	rcall	.+0      	; 0x348 <main+0x2a2>
     348:	ed b7       	in	r30, 0x3d	; 61
     34a:	fe b7       	in	r31, 0x3e	; 62
     34c:	31 96       	adiw	r30, 0x01	; 1
     34e:	86 e1       	ldi	r24, 0x16	; 22
     350:	91 e0       	ldi	r25, 0x01	; 1
     352:	ad b7       	in	r26, 0x3d	; 61
     354:	be b7       	in	r27, 0x3e	; 62
     356:	12 96       	adiw	r26, 0x02	; 2
     358:	9c 93       	st	X, r25
     35a:	8e 93       	st	-X, r24
     35c:	11 97       	sbiw	r26, 0x01	; 1
     35e:	c2 83       	std	Z+2, r28	; 0x02
     360:	d3 83       	std	Z+3, r29	; 0x03
     362:	0e 94 57 04 	call	0x8ae	; 0x8ae <serial_out>
     366:	1e 01       	movw	r2, r28
     368:	0f 90       	pop	r0
     36a:	0f 90       	pop	r0
     36c:	0f 90       	pop	r0
     36e:	0f 90       	pop	r0
     370:	30 cf       	rjmp	.-416    	; 0x1d2 <main+0x12c>

00000372 <pin_mode>:
 // please contact me with details so that I may correct the situation. 

#include "digitalio.h"

int8_t pin_mode(uint8_t pin, uint8_t mode)
{
     372:	38 2f       	mov	r19, r24
	{
		return(-1); // return ERROR
	}
#elif defined (__AVR_ATmega328__) || defined (__AVR_ATmega328P__) 
	// Use Arduino numbering
	if( pin <= 7 ) // matches bit for PORTD 
     374:	88 30       	cpi	r24, 0x08	; 8
     376:	c8 f4       	brcc	.+50     	; 0x3aa <pin_mode+0x38>
	{
		if ( mode == INPUT ) // set DDRD bit to 0
     378:	66 23       	and	r22, r22
     37a:	61 f4       	brne	.+24     	; 0x394 <pin_mode+0x22>
		{
			bit_clear(DDRD,pin);
     37c:	2a b1       	in	r18, 0x0a	; 10
     37e:	81 e0       	ldi	r24, 0x01	; 1
     380:	90 e0       	ldi	r25, 0x00	; 0
     382:	02 c0       	rjmp	.+4      	; 0x388 <pin_mode+0x16>
     384:	88 0f       	add	r24, r24
     386:	99 1f       	adc	r25, r25
     388:	3a 95       	dec	r19
     38a:	e2 f7       	brpl	.-8      	; 0x384 <pin_mode+0x12>
     38c:	80 95       	com	r24
     38e:	82 23       	and	r24, r18
     390:	8a b9       	out	0x0a, r24	; 10
     392:	39 c0       	rjmp	.+114    	; 0x406 <pin_mode+0x94>
		}
		else // ( mode == OUTPUT ) // set DDRB bit to 1
		{
			bit_set(DDRD,pin);
     394:	2a b1       	in	r18, 0x0a	; 10
     396:	81 e0       	ldi	r24, 0x01	; 1
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	02 c0       	rjmp	.+4      	; 0x3a0 <pin_mode+0x2e>
     39c:	88 0f       	add	r24, r24
     39e:	99 1f       	adc	r25, r25
     3a0:	3a 95       	dec	r19
     3a2:	e2 f7       	brpl	.-8      	; 0x39c <pin_mode+0x2a>
     3a4:	28 2b       	or	r18, r24
     3a6:	2a b9       	out	0x0a, r18	; 10
     3a8:	2e c0       	rjmp	.+92     	; 0x406 <pin_mode+0x94>
		}
	}
	else if (pin <= 13) // matches bit# for PORTB 0 thru 5
     3aa:	8e 30       	cpi	r24, 0x0E	; 14
     3ac:	d0 f4       	brcc	.+52     	; 0x3e2 <pin_mode+0x70>
	{
		pin -= 8;
     3ae:	38 50       	subi	r19, 0x08	; 8
		if ( mode == INPUT ) // set DDRD bit to 0
     3b0:	66 23       	and	r22, r22
     3b2:	61 f4       	brne	.+24     	; 0x3cc <pin_mode+0x5a>
		{
			bit_clear(DDRB,pin);
     3b4:	24 b1       	in	r18, 0x04	; 4
     3b6:	81 e0       	ldi	r24, 0x01	; 1
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	02 c0       	rjmp	.+4      	; 0x3c0 <pin_mode+0x4e>
     3bc:	88 0f       	add	r24, r24
     3be:	99 1f       	adc	r25, r25
     3c0:	3a 95       	dec	r19
     3c2:	e2 f7       	brpl	.-8      	; 0x3bc <pin_mode+0x4a>
     3c4:	80 95       	com	r24
     3c6:	82 23       	and	r24, r18
     3c8:	84 b9       	out	0x04, r24	; 4
     3ca:	1d c0       	rjmp	.+58     	; 0x406 <pin_mode+0x94>
		}
		else // ( mode == OUTPUT ) // set DDRB bit to 1
		{
			bit_set(DDRB,pin);
     3cc:	24 b1       	in	r18, 0x04	; 4
     3ce:	81 e0       	ldi	r24, 0x01	; 1
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	02 c0       	rjmp	.+4      	; 0x3d8 <pin_mode+0x66>
     3d4:	88 0f       	add	r24, r24
     3d6:	99 1f       	adc	r25, r25
     3d8:	3a 95       	dec	r19
     3da:	e2 f7       	brpl	.-8      	; 0x3d4 <pin_mode+0x62>
     3dc:	28 2b       	or	r18, r24
     3de:	24 b9       	out	0x04, r18	; 4
     3e0:	12 c0       	rjmp	.+36     	; 0x406 <pin_mode+0x94>
		}			
	}
	else if (pin <= 19) // matches bit# for PORTC 0 thru 5
     3e2:	84 31       	cpi	r24, 0x14	; 20
     3e4:	10 f0       	brcs	.+4      	; 0x3ea <pin_mode+0x78>
     3e6:	8f ef       	ldi	r24, 0xFF	; 255
     3e8:	08 95       	ret
	{ // on the Arduino these are labeled analog 0 thru 5, but also work for digitalio
		pin -= 13;
     3ea:	3d 50       	subi	r19, 0x0D	; 13
		if ( mode == INPUT ) // set DDRD bit to 0
     3ec:	66 23       	and	r22, r22
     3ee:	69 f4       	brne	.+26     	; 0x40a <pin_mode+0x98>
		{
			bit_clear(DDRC,pin);
     3f0:	27 b1       	in	r18, 0x07	; 7
     3f2:	81 e0       	ldi	r24, 0x01	; 1
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	02 c0       	rjmp	.+4      	; 0x3fc <pin_mode+0x8a>
     3f8:	88 0f       	add	r24, r24
     3fa:	99 1f       	adc	r25, r25
     3fc:	3a 95       	dec	r19
     3fe:	e2 f7       	brpl	.-8      	; 0x3f8 <pin_mode+0x86>
     400:	80 95       	com	r24
     402:	82 23       	and	r24, r18
     404:	87 b9       	out	0x07, r24	; 7
     406:	81 e0       	ldi	r24, 0x01	; 1
     408:	08 95       	ret
		}
		else // ( mode == OUTPUT ) // set DDRB bit to 1
		{
			bit_set(DDRC,pin);
     40a:	27 b1       	in	r18, 0x07	; 7
     40c:	81 e0       	ldi	r24, 0x01	; 1
     40e:	90 e0       	ldi	r25, 0x00	; 0
     410:	02 c0       	rjmp	.+4      	; 0x416 <pin_mode+0xa4>
     412:	88 0f       	add	r24, r24
     414:	99 1f       	adc	r25, r25
     416:	3a 95       	dec	r19
     418:	e2 f7       	brpl	.-8      	; 0x412 <pin_mode+0xa0>
     41a:	28 2b       	or	r18, r24
     41c:	27 b9       	out	0x07, r18	; 7
     41e:	81 e0       	ldi	r24, 0x01	; 1
#else 
#    warning "device type not defined"
#endif
	return(1); // return OKAY

}
     420:	08 95       	ret

00000422 <digital_read>:

// Declared int for compatiblity with Arduino digitalRead
// However added return of ERROR as -1 since the Arduino way
// of returning LOW for NOT_A_PIN is doesn't inform on the error
int8_t digital_read(uint8_t pin)
{
     422:	28 2f       	mov	r18, r24
	{
		return(-1); // returen ERROR
	}
#elif defined (__AVR_ATmega328__) || defined (__AVR_ATmega328P__) 
	// Use Arduino numbering
	if( pin <= 7 ) // matches bit for PORTD 
     424:	88 30       	cpi	r24, 0x08	; 8
     426:	18 f4       	brcc	.+6      	; 0x42e <digital_read+0xc>
	{
		pin_read(PIND,pin);
     428:	89 b1       	in	r24, 0x09	; 9
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	05 c0       	rjmp	.+10     	; 0x438 <digital_read+0x16>
	}
	else if (pin <= 13) // matches bit# for PORTB 0 thru 5
     42e:	8e 30       	cpi	r24, 0x0E	; 14
     430:	50 f4       	brcc	.+20     	; 0x446 <digital_read+0x24>
	{
		pin -= 8;
		pin_read(PINB,pin);			
     432:	83 b1       	in	r24, 0x03	; 3
     434:	90 e0       	ldi	r25, 0x00	; 0
     436:	28 50       	subi	r18, 0x08	; 8
     438:	02 c0       	rjmp	.+4      	; 0x43e <digital_read+0x1c>
     43a:	95 95       	asr	r25
     43c:	87 95       	ror	r24
     43e:	2a 95       	dec	r18
     440:	e2 f7       	brpl	.-8      	; 0x43a <digital_read+0x18>
     442:	81 70       	andi	r24, 0x01	; 1
     444:	08 95       	ret
	}
	else if (pin <= 19) // matches bit# for PORTC 0 thru 5
     446:	84 31       	cpi	r24, 0x14	; 20
     448:	10 f0       	brcs	.+4      	; 0x44e <digital_read+0x2c>
     44a:	8f ef       	ldi	r24, 0xFF	; 255
     44c:	08 95       	ret
	{ // on the Arduino these are labeled analog 0 thru 5, but also work for digitalio
		pin -= 14;
		pin_read(PINC,pin);
     44e:	86 b1       	in	r24, 0x06	; 6
     450:	90 e0       	ldi	r25, 0x00	; 0
     452:	2e 50       	subi	r18, 0x0E	; 14
     454:	02 c0       	rjmp	.+4      	; 0x45a <digital_read+0x38>
     456:	95 95       	asr	r25
     458:	87 95       	ror	r24
     45a:	2a 95       	dec	r18
     45c:	e2 f7       	brpl	.-8      	; 0x456 <digital_read+0x34>
     45e:	81 70       	andi	r24, 0x01	; 1
	}
#else 
#    warning "device type not defined"
#endif

}
     460:	08 95       	ret

00000462 <digital_write>:
 // please contact me with details so that I may correct the situation. 

#include "digitalio.h"

int8_t digital_write(uint8_t pin, uint8_t value)
{
     462:	38 2f       	mov	r19, r24
	{
		return(-1); // return ERROR
	}
#elif defined (__AVR_ATmega328__) || defined (__AVR_ATmega328P__) 
	// Use Arduino numbering
	if( pin <= 7 ) // matches bit for PORTD 
     464:	88 30       	cpi	r24, 0x08	; 8
     466:	d0 f4       	brcc	.+52     	; 0x49c <digital_write+0x3a>
	{
		pin_write(PORTD,pin,value);
     468:	66 23       	and	r22, r22
     46a:	59 f0       	breq	.+22     	; 0x482 <digital_write+0x20>
     46c:	2b b1       	in	r18, 0x0b	; 11
     46e:	81 e0       	ldi	r24, 0x01	; 1
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	02 c0       	rjmp	.+4      	; 0x478 <digital_write+0x16>
     474:	88 0f       	add	r24, r24
     476:	99 1f       	adc	r25, r25
     478:	3a 95       	dec	r19
     47a:	e2 f7       	brpl	.-8      	; 0x474 <digital_write+0x12>
     47c:	28 2b       	or	r18, r24
     47e:	2b b9       	out	0x0b, r18	; 11
     480:	0b c0       	rjmp	.+22     	; 0x498 <digital_write+0x36>
     482:	2b b1       	in	r18, 0x0b	; 11
     484:	81 e0       	ldi	r24, 0x01	; 1
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	02 c0       	rjmp	.+4      	; 0x48e <digital_write+0x2c>
     48a:	88 0f       	add	r24, r24
     48c:	99 1f       	adc	r25, r25
     48e:	3a 95       	dec	r19
     490:	e2 f7       	brpl	.-8      	; 0x48a <digital_write+0x28>
     492:	80 95       	com	r24
     494:	82 23       	and	r24, r18
     496:	8b b9       	out	0x0b, r24	; 11
     498:	8b b1       	in	r24, 0x0b	; 11
     49a:	2f c0       	rjmp	.+94     	; 0x4fa <digital_write+0x98>
	}
	else if (pin <= 13) // matches bit# for PORTB 0 thru 5
     49c:	8e 30       	cpi	r24, 0x0E	; 14
     49e:	d8 f4       	brcc	.+54     	; 0x4d6 <digital_write+0x74>
	{
		pin -= 8;
     4a0:	38 50       	subi	r19, 0x08	; 8
		pin_write(PORTB,pin,value);
     4a2:	66 23       	and	r22, r22
     4a4:	59 f0       	breq	.+22     	; 0x4bc <digital_write+0x5a>
     4a6:	25 b1       	in	r18, 0x05	; 5
     4a8:	81 e0       	ldi	r24, 0x01	; 1
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <digital_write+0x50>
     4ae:	88 0f       	add	r24, r24
     4b0:	99 1f       	adc	r25, r25
     4b2:	3a 95       	dec	r19
     4b4:	e2 f7       	brpl	.-8      	; 0x4ae <digital_write+0x4c>
     4b6:	28 2b       	or	r18, r24
     4b8:	25 b9       	out	0x05, r18	; 5
     4ba:	0b c0       	rjmp	.+22     	; 0x4d2 <digital_write+0x70>
     4bc:	25 b1       	in	r18, 0x05	; 5
     4be:	81 e0       	ldi	r24, 0x01	; 1
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	02 c0       	rjmp	.+4      	; 0x4c8 <digital_write+0x66>
     4c4:	88 0f       	add	r24, r24
     4c6:	99 1f       	adc	r25, r25
     4c8:	3a 95       	dec	r19
     4ca:	e2 f7       	brpl	.-8      	; 0x4c4 <digital_write+0x62>
     4cc:	80 95       	com	r24
     4ce:	82 23       	and	r24, r18
     4d0:	85 b9       	out	0x05, r24	; 5
     4d2:	85 b1       	in	r24, 0x05	; 5
     4d4:	12 c0       	rjmp	.+36     	; 0x4fa <digital_write+0x98>
	}
	else if (pin <= 19) // matches bit# for PORTC 0 thru 5
     4d6:	84 31       	cpi	r24, 0x14	; 20
     4d8:	10 f0       	brcs	.+4      	; 0x4de <digital_write+0x7c>
     4da:	8f ef       	ldi	r24, 0xFF	; 255
     4dc:	08 95       	ret
	{ // on the Arduino these are labeled analog 0 thru 5, but also work for digitalio
		pin -= 14;
     4de:	3e 50       	subi	r19, 0x0E	; 14
		pin_write(PORTC,pin,value);
     4e0:	66 23       	and	r22, r22
     4e2:	69 f0       	breq	.+26     	; 0x4fe <digital_write+0x9c>
     4e4:	28 b1       	in	r18, 0x08	; 8
     4e6:	81 e0       	ldi	r24, 0x01	; 1
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <digital_write+0x8e>
     4ec:	88 0f       	add	r24, r24
     4ee:	99 1f       	adc	r25, r25
     4f0:	3a 95       	dec	r19
     4f2:	e2 f7       	brpl	.-8      	; 0x4ec <digital_write+0x8a>
     4f4:	28 2b       	or	r18, r24
     4f6:	28 b9       	out	0x08, r18	; 8
     4f8:	88 b1       	in	r24, 0x08	; 8
     4fa:	81 e0       	ldi	r24, 0x01	; 1
     4fc:	08 95       	ret
     4fe:	28 b1       	in	r18, 0x08	; 8
     500:	81 e0       	ldi	r24, 0x01	; 1
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	02 c0       	rjmp	.+4      	; 0x50a <digital_write+0xa8>
     506:	88 0f       	add	r24, r24
     508:	99 1f       	adc	r25, r25
     50a:	3a 95       	dec	r19
     50c:	e2 f7       	brpl	.-8      	; 0x506 <digital_write+0xa4>
     50e:	80 95       	com	r24
     510:	82 23       	and	r24, r18
     512:	88 b9       	out	0x08, r24	; 8
     514:	88 b1       	in	r24, 0x08	; 8
     516:	81 e0       	ldi	r24, 0x01	; 1
#else 
#    warning "device type not defined"
#endif
	return(1); // return OKAY

}
     518:	08 95       	ret

0000051a <port_pin_mode>:
 // please contact me with details so that I may correct the situation. 

#include "digitalio.h"

int8_t port_pin_mode(uint8_t portx, uint8_t pin, uint8_t mode)
{
     51a:	98 2f       	mov	r25, r24
	{
		return(-1); // return ERROR
	}
	// TODO: remaining accessible Butterfly ports
#elif defined (__AVR_ATmega328__) || defined (__AVR_ATmega328P__) 
	if( portx == PORTD ) // matches bit for PORTD 
     51c:	8b b1       	in	r24, 0x0b	; 11
     51e:	98 17       	cp	r25, r24
     520:	c9 f4       	brne	.+50     	; 0x554 <port_pin_mode+0x3a>
	{
		if ( mode == INPUT ) // set DDRD bit to 0
     522:	44 23       	and	r20, r20
     524:	61 f4       	brne	.+24     	; 0x53e <port_pin_mode+0x24>
		{
			bit_clear(DDRD,pin);
     526:	2a b1       	in	r18, 0x0a	; 10
     528:	81 e0       	ldi	r24, 0x01	; 1
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	02 c0       	rjmp	.+4      	; 0x532 <port_pin_mode+0x18>
     52e:	88 0f       	add	r24, r24
     530:	99 1f       	adc	r25, r25
     532:	6a 95       	dec	r22
     534:	e2 f7       	brpl	.-8      	; 0x52e <port_pin_mode+0x14>
     536:	80 95       	com	r24
     538:	82 23       	and	r24, r18
     53a:	8a b9       	out	0x0a, r24	; 10
     53c:	39 c0       	rjmp	.+114    	; 0x5b0 <port_pin_mode+0x96>
		}
		else // ( mode == OUTPUT ) // set DDRB bit to 1
		{
			bit_set(DDRD,pin);
     53e:	2a b1       	in	r18, 0x0a	; 10
     540:	81 e0       	ldi	r24, 0x01	; 1
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	02 c0       	rjmp	.+4      	; 0x54a <port_pin_mode+0x30>
     546:	88 0f       	add	r24, r24
     548:	99 1f       	adc	r25, r25
     54a:	6a 95       	dec	r22
     54c:	e2 f7       	brpl	.-8      	; 0x546 <port_pin_mode+0x2c>
     54e:	28 2b       	or	r18, r24
     550:	2a b9       	out	0x0a, r18	; 10
     552:	2e c0       	rjmp	.+92     	; 0x5b0 <port_pin_mode+0x96>
		}
	}
	else if (portx == PORTB) // matches bit# for PORTB 0 thru 5
     554:	85 b1       	in	r24, 0x05	; 5
     556:	98 17       	cp	r25, r24
     558:	c9 f4       	brne	.+50     	; 0x58c <port_pin_mode+0x72>
	{
		if ( mode == INPUT ) // set DDRD bit to 0
     55a:	44 23       	and	r20, r20
     55c:	61 f4       	brne	.+24     	; 0x576 <port_pin_mode+0x5c>
		{
			bit_clear(DDRB,pin);
     55e:	24 b1       	in	r18, 0x04	; 4
     560:	81 e0       	ldi	r24, 0x01	; 1
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	02 c0       	rjmp	.+4      	; 0x56a <port_pin_mode+0x50>
     566:	88 0f       	add	r24, r24
     568:	99 1f       	adc	r25, r25
     56a:	6a 95       	dec	r22
     56c:	e2 f7       	brpl	.-8      	; 0x566 <port_pin_mode+0x4c>
     56e:	80 95       	com	r24
     570:	82 23       	and	r24, r18
     572:	84 b9       	out	0x04, r24	; 4
     574:	1d c0       	rjmp	.+58     	; 0x5b0 <port_pin_mode+0x96>
		}
		else // ( mode == OUTPUT ) // set DDRB bit to 1
		{
			bit_set(DDRB,pin);
     576:	24 b1       	in	r18, 0x04	; 4
     578:	81 e0       	ldi	r24, 0x01	; 1
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	02 c0       	rjmp	.+4      	; 0x582 <port_pin_mode+0x68>
     57e:	88 0f       	add	r24, r24
     580:	99 1f       	adc	r25, r25
     582:	6a 95       	dec	r22
     584:	e2 f7       	brpl	.-8      	; 0x57e <port_pin_mode+0x64>
     586:	28 2b       	or	r18, r24
     588:	24 b9       	out	0x04, r18	; 4
     58a:	12 c0       	rjmp	.+36     	; 0x5b0 <port_pin_mode+0x96>
		}			
	}
	else if (portx == PORTC) // matches bit# for PORTC 0 thru 5
     58c:	88 b1       	in	r24, 0x08	; 8
     58e:	98 17       	cp	r25, r24
     590:	11 f0       	breq	.+4      	; 0x596 <port_pin_mode+0x7c>
     592:	8f ef       	ldi	r24, 0xFF	; 255
     594:	08 95       	ret
	{ // on the Arduino these are labeled analog 0 thru 5, but also work for digitalio
		if ( mode == INPUT ) // set DDRD bit to 0
     596:	44 23       	and	r20, r20
     598:	69 f4       	brne	.+26     	; 0x5b4 <port_pin_mode+0x9a>
		{
			bit_clear(DDRC,pin);
     59a:	27 b1       	in	r18, 0x07	; 7
     59c:	81 e0       	ldi	r24, 0x01	; 1
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	02 c0       	rjmp	.+4      	; 0x5a6 <port_pin_mode+0x8c>
     5a2:	88 0f       	add	r24, r24
     5a4:	99 1f       	adc	r25, r25
     5a6:	6a 95       	dec	r22
     5a8:	e2 f7       	brpl	.-8      	; 0x5a2 <port_pin_mode+0x88>
     5aa:	80 95       	com	r24
     5ac:	82 23       	and	r24, r18
     5ae:	87 b9       	out	0x07, r24	; 7
     5b0:	81 e0       	ldi	r24, 0x01	; 1
     5b2:	08 95       	ret
		}
		else // ( mode == OUTPUT ) // set DDRB bit to 1
		{
			bit_set(DDRC,pin);
     5b4:	27 b1       	in	r18, 0x07	; 7
     5b6:	81 e0       	ldi	r24, 0x01	; 1
     5b8:	90 e0       	ldi	r25, 0x00	; 0
     5ba:	02 c0       	rjmp	.+4      	; 0x5c0 <port_pin_mode+0xa6>
     5bc:	88 0f       	add	r24, r24
     5be:	99 1f       	adc	r25, r25
     5c0:	6a 95       	dec	r22
     5c2:	e2 f7       	brpl	.-8      	; 0x5bc <port_pin_mode+0xa2>
     5c4:	28 2b       	or	r18, r24
     5c6:	27 b9       	out	0x07, r18	; 7
     5c8:	81 e0       	ldi	r24, 0x01	; 1
#else 
#    warning "device type not defined"
#endif
	return(1); // return OKAY

}
     5ca:	08 95       	ret

000005cc <port_pin_read>:
// However added return of ERROR as -1 since the Arduino way
// of returning LOW for NOT_A_PIN is doesn't inform on the error
//uint16_t digital_read(uint8_t pin)
int8_t port_pin_read(uint8_t portx, uint8_t pin)

{
     5cc:	98 2f       	mov	r25, r24
	{
		return(-1); // return ERROR
	}
	// TODO: ADD ADDRESSIBLE BUTTERFLY PORT PINS
#elif defined (__AVR_ATmega328__) || defined (__AVR_ATmega328P__) 
	if(portx == PORTD) // matches bit for PORTD 
     5ce:	8b b1       	in	r24, 0x0b	; 11
     5d0:	98 17       	cp	r25, r24
     5d2:	11 f4       	brne	.+4      	; 0x5d8 <port_pin_read+0xc>
	{
		pin_read(PIND,pin);
     5d4:	89 b1       	in	r24, 0x09	; 9
     5d6:	04 c0       	rjmp	.+8      	; 0x5e0 <port_pin_read+0x14>
	}
	else if (portx == PORTB)
     5d8:	85 b1       	in	r24, 0x05	; 5
     5da:	98 17       	cp	r25, r24
     5dc:	49 f4       	brne	.+18     	; 0x5f0 <port_pin_read+0x24>
	{
		pin_read(PINB,pin);			
     5de:	83 b1       	in	r24, 0x03	; 3
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	02 c0       	rjmp	.+4      	; 0x5e8 <port_pin_read+0x1c>
     5e4:	95 95       	asr	r25
     5e6:	87 95       	ror	r24
     5e8:	6a 95       	dec	r22
     5ea:	e2 f7       	brpl	.-8      	; 0x5e4 <port_pin_read+0x18>
     5ec:	81 70       	andi	r24, 0x01	; 1
     5ee:	08 95       	ret
	}
	else if (portx == PORTC) // matches bit# for PORTC 0 thru 5
     5f0:	88 b1       	in	r24, 0x08	; 8
     5f2:	98 17       	cp	r25, r24
     5f4:	11 f0       	breq	.+4      	; 0x5fa <port_pin_read+0x2e>
     5f6:	8f ef       	ldi	r24, 0xFF	; 255
     5f8:	08 95       	ret
	{ 
		pin_read(PINC,pin);
     5fa:	86 b1       	in	r24, 0x06	; 6
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	02 c0       	rjmp	.+4      	; 0x604 <port_pin_read+0x38>
     600:	95 95       	asr	r25
     602:	87 95       	ror	r24
     604:	6a 95       	dec	r22
     606:	e2 f7       	brpl	.-8      	; 0x600 <port_pin_read+0x34>
     608:	81 70       	andi	r24, 0x01	; 1
#else 
#    warning "device type not defined"
#endif
	return(1); // return OKAY

}
     60a:	08 95       	ret

0000060c <port_pin_set>:
 // please contact me with details so that I may correct the situation. 

#include "digitalio.h"

int8_t port_pin_set(uint8_t portx, uint8_t pin)
{
     60c:	98 2f       	mov	r25, r24
	{
		return(-1); // return ERROR
	}
	// TODO fix for Butterfly ports
#elif defined (__AVR_ATmega328__) || defined (__AVR_ATmega328P__) 
	if(portx == PORTD ) // matches bit for PORTD 
     60e:	8b b1       	in	r24, 0x0b	; 11
     610:	98 17       	cp	r25, r24
     612:	59 f4       	brne	.+22     	; 0x62a <port_pin_set+0x1e>
	{
		pin_write(PORTD,pin,1);
     614:	2b b1       	in	r18, 0x0b	; 11
     616:	81 e0       	ldi	r24, 0x01	; 1
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	02 c0       	rjmp	.+4      	; 0x620 <port_pin_set+0x14>
     61c:	88 0f       	add	r24, r24
     61e:	99 1f       	adc	r25, r25
     620:	6a 95       	dec	r22
     622:	e2 f7       	brpl	.-8      	; 0x61c <port_pin_set+0x10>
     624:	28 2b       	or	r18, r24
     626:	2b b9       	out	0x0b, r18	; 11
     628:	0d c0       	rjmp	.+26     	; 0x644 <port_pin_set+0x38>
	}
	else if (portx == PORTB)
     62a:	85 b1       	in	r24, 0x05	; 5
     62c:	98 17       	cp	r25, r24
     62e:	61 f4       	brne	.+24     	; 0x648 <port_pin_set+0x3c>
	{
		pin_write(PORTB,pin,1);
     630:	25 b1       	in	r18, 0x05	; 5
     632:	81 e0       	ldi	r24, 0x01	; 1
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	02 c0       	rjmp	.+4      	; 0x63c <port_pin_set+0x30>
     638:	88 0f       	add	r24, r24
     63a:	99 1f       	adc	r25, r25
     63c:	6a 95       	dec	r22
     63e:	e2 f7       	brpl	.-8      	; 0x638 <port_pin_set+0x2c>
     640:	28 2b       	or	r18, r24
     642:	25 b9       	out	0x05, r18	; 5
     644:	81 e0       	ldi	r24, 0x01	; 1
     646:	08 95       	ret
	}
	else if (portx == PORTC)
     648:	88 b1       	in	r24, 0x08	; 8
     64a:	98 17       	cp	r25, r24
     64c:	11 f0       	breq	.+4      	; 0x652 <port_pin_set+0x46>
     64e:	8f ef       	ldi	r24, 0xFF	; 255
     650:	08 95       	ret
	{ 
			pin_write(PORTC,pin,1);
     652:	28 b1       	in	r18, 0x08	; 8
     654:	81 e0       	ldi	r24, 0x01	; 1
     656:	90 e0       	ldi	r25, 0x00	; 0
     658:	02 c0       	rjmp	.+4      	; 0x65e <port_pin_set+0x52>
     65a:	88 0f       	add	r24, r24
     65c:	99 1f       	adc	r25, r25
     65e:	6a 95       	dec	r22
     660:	e2 f7       	brpl	.-8      	; 0x65a <port_pin_set+0x4e>
     662:	28 2b       	or	r18, r24
     664:	28 b9       	out	0x08, r18	; 8
     666:	81 e0       	ldi	r24, 0x01	; 1
	// TODO catch invalid pin numbers
#else 
#    warning "device type not defined"
#endif
	return(1); // return OKAY
}
     668:	08 95       	ret

0000066a <port_pin_clear>:
 // please contact me with details so that I may correct the situation. 

#include "digitalio.h"

int8_t port_pin_clear(uint8_t portx, uint8_t pin)
{
     66a:	98 2f       	mov	r25, r24
	{
		return(-1); // returen ERROR
	}
	// TODO fix for Butterfly ports
#elif defined (__AVR_ATmega328__) || defined (__AVR_ATmega328P__) 
	if(portx == PORTD ) // matches bit for PORTD 
     66c:	8b b1       	in	r24, 0x0b	; 11
     66e:	98 17       	cp	r25, r24
     670:	61 f4       	brne	.+24     	; 0x68a <port_pin_clear+0x20>
	{
		pin_write(PORTD,pin,0);
     672:	2b b1       	in	r18, 0x0b	; 11
     674:	81 e0       	ldi	r24, 0x01	; 1
     676:	90 e0       	ldi	r25, 0x00	; 0
     678:	02 c0       	rjmp	.+4      	; 0x67e <port_pin_clear+0x14>
     67a:	88 0f       	add	r24, r24
     67c:	99 1f       	adc	r25, r25
     67e:	6a 95       	dec	r22
     680:	e2 f7       	brpl	.-8      	; 0x67a <port_pin_clear+0x10>
     682:	80 95       	com	r24
     684:	82 23       	and	r24, r18
     686:	8b b9       	out	0x0b, r24	; 11
     688:	0e c0       	rjmp	.+28     	; 0x6a6 <port_pin_clear+0x3c>
	}
	else if (portx == PORTB)
     68a:	85 b1       	in	r24, 0x05	; 5
     68c:	98 17       	cp	r25, r24
     68e:	69 f4       	brne	.+26     	; 0x6aa <port_pin_clear+0x40>
	{
		pin_write(PORTB,pin,0);
     690:	25 b1       	in	r18, 0x05	; 5
     692:	81 e0       	ldi	r24, 0x01	; 1
     694:	90 e0       	ldi	r25, 0x00	; 0
     696:	02 c0       	rjmp	.+4      	; 0x69c <port_pin_clear+0x32>
     698:	88 0f       	add	r24, r24
     69a:	99 1f       	adc	r25, r25
     69c:	6a 95       	dec	r22
     69e:	e2 f7       	brpl	.-8      	; 0x698 <port_pin_clear+0x2e>
     6a0:	80 95       	com	r24
     6a2:	82 23       	and	r24, r18
     6a4:	85 b9       	out	0x05, r24	; 5
     6a6:	81 e0       	ldi	r24, 0x01	; 1
     6a8:	08 95       	ret
	}
	else if (portx == PORTC)
     6aa:	88 b1       	in	r24, 0x08	; 8
     6ac:	98 17       	cp	r25, r24
     6ae:	11 f0       	breq	.+4      	; 0x6b4 <port_pin_clear+0x4a>
     6b0:	8f ef       	ldi	r24, 0xFF	; 255
     6b2:	08 95       	ret
	{ 
			pin_write(PORTC,pin,0);
     6b4:	28 b1       	in	r18, 0x08	; 8
     6b6:	81 e0       	ldi	r24, 0x01	; 1
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	02 c0       	rjmp	.+4      	; 0x6c0 <port_pin_clear+0x56>
     6bc:	88 0f       	add	r24, r24
     6be:	99 1f       	adc	r25, r25
     6c0:	6a 95       	dec	r22
     6c2:	e2 f7       	brpl	.-8      	; 0x6bc <port_pin_clear+0x52>
     6c4:	80 95       	com	r24
     6c6:	82 23       	and	r24, r18
     6c8:	88 b9       	out	0x08, r24	; 8
     6ca:	81 e0       	ldi	r24, 0x01	; 1
#else 
#    warning "device type not defined"
#endif
	return(1); // return OKAY

}
     6cc:	08 95       	ret

000006ce <port_pin_activate_pullup>:
 // If anyone has any reason to believe that any of this code violates other licenses
 // please contact me with details so that I may correct the situation. 

#include "digitalio.h"
int8_t port_pin_activate_pullup(uint8_t portx, uint8_t pin)
{
     6ce:	98 2f       	mov	r25, r24
	{
		return(-1); // return ERROR
	}
	// TODO: remaining accessible Butterfly ports
#elif defined (__AVR_ATmega328__) || defined (__AVR_ATmega328P__) 
	if( portx == PORTD ) 
     6d0:	8b b1       	in	r24, 0x0b	; 11
     6d2:	98 17       	cp	r25, r24
     6d4:	81 f4       	brne	.+32     	; 0x6f6 <port_pin_activate_pullup+0x28>
	{
		bit_clear(DDRD,pin); // Make sure it is an input
     6d6:	3a b1       	in	r19, 0x0a	; 10
     6d8:	81 e0       	ldi	r24, 0x01	; 1
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	02 c0       	rjmp	.+4      	; 0x6e2 <port_pin_activate_pullup+0x14>
     6de:	88 0f       	add	r24, r24
     6e0:	99 1f       	adc	r25, r25
     6e2:	6a 95       	dec	r22
     6e4:	e2 f7       	brpl	.-8      	; 0x6de <port_pin_activate_pullup+0x10>
     6e6:	28 2f       	mov	r18, r24
     6e8:	20 95       	com	r18
     6ea:	23 23       	and	r18, r19
     6ec:	2a b9       	out	0x0a, r18	; 10
		bit_set(PORTD,pin);  // Activate pullup
     6ee:	2b b1       	in	r18, 0x0b	; 11
     6f0:	82 2b       	or	r24, r18
     6f2:	8b b9       	out	0x0b, r24	; 11
     6f4:	12 c0       	rjmp	.+36     	; 0x71a <port_pin_activate_pullup+0x4c>
	}
	else if (portx == PORTB)
     6f6:	85 b1       	in	r24, 0x05	; 5
     6f8:	98 17       	cp	r25, r24
     6fa:	89 f4       	brne	.+34     	; 0x71e <port_pin_activate_pullup+0x50>
	{
		bit_clear(DDRB,pin); // Make sure it is an input
     6fc:	34 b1       	in	r19, 0x04	; 4
     6fe:	81 e0       	ldi	r24, 0x01	; 1
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	02 c0       	rjmp	.+4      	; 0x708 <port_pin_activate_pullup+0x3a>
     704:	88 0f       	add	r24, r24
     706:	99 1f       	adc	r25, r25
     708:	6a 95       	dec	r22
     70a:	e2 f7       	brpl	.-8      	; 0x704 <port_pin_activate_pullup+0x36>
     70c:	28 2f       	mov	r18, r24
     70e:	20 95       	com	r18
     710:	23 23       	and	r18, r19
     712:	24 b9       	out	0x04, r18	; 4
		bit_set(PORTB,pin);  // Activate pullup
     714:	25 b1       	in	r18, 0x05	; 5
     716:	82 2b       	or	r24, r18
     718:	85 b9       	out	0x05, r24	; 5
     71a:	81 e0       	ldi	r24, 0x01	; 1
     71c:	08 95       	ret
	}
	else if (portx == PORTC)
     71e:	88 b1       	in	r24, 0x08	; 8
     720:	98 17       	cp	r25, r24
     722:	11 f0       	breq	.+4      	; 0x728 <port_pin_activate_pullup+0x5a>
     724:	8f ef       	ldi	r24, 0xFF	; 255
     726:	08 95       	ret
	{ 		
		bit_clear(DDRC,pin); // Make sure it is an input
     728:	37 b1       	in	r19, 0x07	; 7
     72a:	81 e0       	ldi	r24, 0x01	; 1
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	02 c0       	rjmp	.+4      	; 0x734 <port_pin_activate_pullup+0x66>
     730:	88 0f       	add	r24, r24
     732:	99 1f       	adc	r25, r25
     734:	6a 95       	dec	r22
     736:	e2 f7       	brpl	.-8      	; 0x730 <port_pin_activate_pullup+0x62>
     738:	28 2f       	mov	r18, r24
     73a:	20 95       	com	r18
     73c:	23 23       	and	r18, r19
     73e:	27 b9       	out	0x07, r18	; 7
		bit_set(PORTC,pin);  // Activate pullup
     740:	28 b1       	in	r18, 0x08	; 8
     742:	82 2b       	or	r24, r18
     744:	88 b9       	out	0x08, r24	; 8
     746:	81 e0       	ldi	r24, 0x01	; 1
#else 
#    warning "device type not defined"
#endif
	return(1); // return OKAY

}
     748:	08 95       	ret

0000074a <port_pin_deactivate_pullup>:
 // If anyone has any reason to believe that any of this code violates other licenses
 // please contact me with details so that I may correct the situation. 

#include "digitalio.h"
int8_t port_pin_deactivate_pullup(uint8_t portx, uint8_t pin)
{
     74a:	98 2f       	mov	r25, r24
	{
		return(-1); // return ERROR
	}
	// TODO: remaining accessible Butterfly ports
#elif defined (__AVR_ATmega328__) || defined (__AVR_ATmega328P__) 
	if( portx == PORTD ) 
     74c:	8b b1       	in	r24, 0x0b	; 11
     74e:	98 17       	cp	r25, r24
     750:	79 f4       	brne	.+30     	; 0x770 <port_pin_deactivate_pullup+0x26>
	{
		bit_clear(DDRD,pin); // Make sure it is an input
     752:	8a b1       	in	r24, 0x0a	; 10
     754:	21 e0       	ldi	r18, 0x01	; 1
     756:	30 e0       	ldi	r19, 0x00	; 0
     758:	02 c0       	rjmp	.+4      	; 0x75e <port_pin_deactivate_pullup+0x14>
     75a:	22 0f       	add	r18, r18
     75c:	33 1f       	adc	r19, r19
     75e:	6a 95       	dec	r22
     760:	e2 f7       	brpl	.-8      	; 0x75a <port_pin_deactivate_pullup+0x10>
     762:	20 95       	com	r18
     764:	82 23       	and	r24, r18
     766:	8a b9       	out	0x0a, r24	; 10
		bit_clear(PORTD,pin);  // Deactivate pullup
     768:	8b b1       	in	r24, 0x0b	; 11
     76a:	28 23       	and	r18, r24
     76c:	2b b9       	out	0x0b, r18	; 11
     76e:	11 c0       	rjmp	.+34     	; 0x792 <port_pin_deactivate_pullup+0x48>
	}
	else if (portx == PORTB)
     770:	85 b1       	in	r24, 0x05	; 5
     772:	98 17       	cp	r25, r24
     774:	81 f4       	brne	.+32     	; 0x796 <port_pin_deactivate_pullup+0x4c>
	{
		bit_clear(DDRB,pin); // Make sure it is an input
     776:	84 b1       	in	r24, 0x04	; 4
     778:	21 e0       	ldi	r18, 0x01	; 1
     77a:	30 e0       	ldi	r19, 0x00	; 0
     77c:	02 c0       	rjmp	.+4      	; 0x782 <port_pin_deactivate_pullup+0x38>
     77e:	22 0f       	add	r18, r18
     780:	33 1f       	adc	r19, r19
     782:	6a 95       	dec	r22
     784:	e2 f7       	brpl	.-8      	; 0x77e <port_pin_deactivate_pullup+0x34>
     786:	20 95       	com	r18
     788:	82 23       	and	r24, r18
     78a:	84 b9       	out	0x04, r24	; 4
		bit_clear(PORTB,pin);  // Deactivate pullup
     78c:	85 b1       	in	r24, 0x05	; 5
     78e:	28 23       	and	r18, r24
     790:	25 b9       	out	0x05, r18	; 5
     792:	81 e0       	ldi	r24, 0x01	; 1
     794:	08 95       	ret
	}
	else if (portx == PORTC)
     796:	88 b1       	in	r24, 0x08	; 8
     798:	98 17       	cp	r25, r24
     79a:	11 f0       	breq	.+4      	; 0x7a0 <port_pin_deactivate_pullup+0x56>
     79c:	8f ef       	ldi	r24, 0xFF	; 255
     79e:	08 95       	ret
	{ 		
		bit_clear(DDRC,pin); // Make sure it is an input
     7a0:	87 b1       	in	r24, 0x07	; 7
     7a2:	21 e0       	ldi	r18, 0x01	; 1
     7a4:	30 e0       	ldi	r19, 0x00	; 0
     7a6:	02 c0       	rjmp	.+4      	; 0x7ac <port_pin_deactivate_pullup+0x62>
     7a8:	22 0f       	add	r18, r18
     7aa:	33 1f       	adc	r19, r19
     7ac:	6a 95       	dec	r22
     7ae:	e2 f7       	brpl	.-8      	; 0x7a8 <port_pin_deactivate_pullup+0x5e>
     7b0:	20 95       	com	r18
     7b2:	82 23       	and	r24, r18
     7b4:	87 b9       	out	0x07, r24	; 7
		bit_clear(PORTC,pin);  // Deactivate pullup
     7b6:	88 b1       	in	r24, 0x08	; 8
     7b8:	28 23       	and	r18, r24
     7ba:	28 b9       	out	0x08, r18	; 8
     7bc:	81 e0       	ldi	r24, 0x01	; 1
#else 
#    warning "device type not defined"
#endif
	return(1); // return OKAY

}
     7be:	08 95       	ret

000007c0 <port_pin_write>:
 // please contact me with details so that I may correct the situation. 

#include "digitalio.h"

int8_t port_pin_write(uint8_t portx, uint8_t pin, uint8_t state)
{
     7c0:	98 2f       	mov	r25, r24
	{
		return(-1); // return ERROR
	}
	// TODO fix for Butterfly ports
#elif defined (__AVR_ATmega328__) || defined (__AVR_ATmega328P__) 
	if(portx == PORTD ) // matches bit for PORTD 
     7c2:	8b b1       	in	r24, 0x0b	; 11
     7c4:	98 17       	cp	r25, r24
     7c6:	d1 f4       	brne	.+52     	; 0x7fc <port_pin_write+0x3c>
	{
		pin_write(PORTD,pin,state);
     7c8:	44 23       	and	r20, r20
     7ca:	59 f0       	breq	.+22     	; 0x7e2 <port_pin_write+0x22>
     7cc:	2b b1       	in	r18, 0x0b	; 11
     7ce:	81 e0       	ldi	r24, 0x01	; 1
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	02 c0       	rjmp	.+4      	; 0x7d8 <port_pin_write+0x18>
     7d4:	88 0f       	add	r24, r24
     7d6:	99 1f       	adc	r25, r25
     7d8:	6a 95       	dec	r22
     7da:	e2 f7       	brpl	.-8      	; 0x7d4 <port_pin_write+0x14>
     7dc:	28 2b       	or	r18, r24
     7de:	2b b9       	out	0x0b, r18	; 11
     7e0:	0b c0       	rjmp	.+22     	; 0x7f8 <port_pin_write+0x38>
     7e2:	2b b1       	in	r18, 0x0b	; 11
     7e4:	81 e0       	ldi	r24, 0x01	; 1
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	02 c0       	rjmp	.+4      	; 0x7ee <port_pin_write+0x2e>
     7ea:	88 0f       	add	r24, r24
     7ec:	99 1f       	adc	r25, r25
     7ee:	6a 95       	dec	r22
     7f0:	e2 f7       	brpl	.-8      	; 0x7ea <port_pin_write+0x2a>
     7f2:	80 95       	com	r24
     7f4:	82 23       	and	r24, r18
     7f6:	8b b9       	out	0x0b, r24	; 11
     7f8:	8b b1       	in	r24, 0x0b	; 11
     7fa:	2f c0       	rjmp	.+94     	; 0x85a <port_pin_write+0x9a>
	}
	else if (portx == PORTB)
     7fc:	85 b1       	in	r24, 0x05	; 5
     7fe:	98 17       	cp	r25, r24
     800:	d1 f4       	brne	.+52     	; 0x836 <port_pin_write+0x76>
	{
		pin_write(PORTB,pin,state);
     802:	44 23       	and	r20, r20
     804:	59 f0       	breq	.+22     	; 0x81c <port_pin_write+0x5c>
     806:	25 b1       	in	r18, 0x05	; 5
     808:	81 e0       	ldi	r24, 0x01	; 1
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	02 c0       	rjmp	.+4      	; 0x812 <port_pin_write+0x52>
     80e:	88 0f       	add	r24, r24
     810:	99 1f       	adc	r25, r25
     812:	6a 95       	dec	r22
     814:	e2 f7       	brpl	.-8      	; 0x80e <port_pin_write+0x4e>
     816:	28 2b       	or	r18, r24
     818:	25 b9       	out	0x05, r18	; 5
     81a:	0b c0       	rjmp	.+22     	; 0x832 <port_pin_write+0x72>
     81c:	25 b1       	in	r18, 0x05	; 5
     81e:	81 e0       	ldi	r24, 0x01	; 1
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	02 c0       	rjmp	.+4      	; 0x828 <port_pin_write+0x68>
     824:	88 0f       	add	r24, r24
     826:	99 1f       	adc	r25, r25
     828:	6a 95       	dec	r22
     82a:	e2 f7       	brpl	.-8      	; 0x824 <port_pin_write+0x64>
     82c:	80 95       	com	r24
     82e:	82 23       	and	r24, r18
     830:	85 b9       	out	0x05, r24	; 5
     832:	85 b1       	in	r24, 0x05	; 5
     834:	12 c0       	rjmp	.+36     	; 0x85a <port_pin_write+0x9a>
	}
	else if (portx == PORTC)
     836:	88 b1       	in	r24, 0x08	; 8
     838:	98 17       	cp	r25, r24
     83a:	11 f0       	breq	.+4      	; 0x840 <port_pin_write+0x80>
     83c:	8f ef       	ldi	r24, 0xFF	; 255
     83e:	08 95       	ret
	{ 
			pin_write(PORTC,pin,state);
     840:	44 23       	and	r20, r20
     842:	69 f0       	breq	.+26     	; 0x85e <port_pin_write+0x9e>
     844:	28 b1       	in	r18, 0x08	; 8
     846:	81 e0       	ldi	r24, 0x01	; 1
     848:	90 e0       	ldi	r25, 0x00	; 0
     84a:	02 c0       	rjmp	.+4      	; 0x850 <port_pin_write+0x90>
     84c:	88 0f       	add	r24, r24
     84e:	99 1f       	adc	r25, r25
     850:	6a 95       	dec	r22
     852:	e2 f7       	brpl	.-8      	; 0x84c <port_pin_write+0x8c>
     854:	28 2b       	or	r18, r24
     856:	28 b9       	out	0x08, r18	; 8
     858:	88 b1       	in	r24, 0x08	; 8
     85a:	81 e0       	ldi	r24, 0x01	; 1
     85c:	08 95       	ret
     85e:	28 b1       	in	r18, 0x08	; 8
     860:	81 e0       	ldi	r24, 0x01	; 1
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	02 c0       	rjmp	.+4      	; 0x86a <port_pin_write+0xaa>
     866:	88 0f       	add	r24, r24
     868:	99 1f       	adc	r25, r25
     86a:	6a 95       	dec	r22
     86c:	e2 f7       	brpl	.-8      	; 0x866 <port_pin_write+0xa6>
     86e:	80 95       	com	r24
     870:	82 23       	and	r24, r18
     872:	88 b9       	out	0x08, r24	; 8
     874:	88 b1       	in	r24, 0x08	; 8
     876:	81 e0       	ldi	r24, 0x01	; 1
	// TODO catch invalid pin numbers
#else 
#    warning "device type not defined"
#endif
	return(1); // return OKAY
}
     878:	08 95       	ret

0000087a <serial_begin>:
 // please contact me with details so that I may correct the situation. #include "serial.h"

#include "serial.h"

void serial_begin(uint32_t baud)
{
     87a:	8f 92       	push	r8
     87c:	af 92       	push	r10
     87e:	cf 92       	push	r12
     880:	ef 92       	push	r14
     882:	0f 93       	push	r16
	cli();
     884:	f8 94       	cli
	uint8_t databits = 8;
	uint8_t stopbits = 1;
	usart_parity_t parity = parity_none;
	usart_flow_control_t flow_control = flow_none;

	usart0_init(baud, F_CPU, mode,  databits, stopbits, parity, flow_control);
     886:	20 e0       	ldi	r18, 0x00	; 0
     888:	34 e2       	ldi	r19, 0x24	; 36
     88a:	44 ef       	ldi	r20, 0xF4	; 244
     88c:	50 e0       	ldi	r21, 0x00	; 0
     88e:	00 e0       	ldi	r16, 0x00	; 0
     890:	e8 e0       	ldi	r30, 0x08	; 8
     892:	ee 2e       	mov	r14, r30
     894:	cc 24       	eor	r12, r12
     896:	c3 94       	inc	r12
     898:	aa 24       	eor	r10, r10
     89a:	88 24       	eor	r8, r8
     89c:	0e 94 20 05 	call	0xa40	; 0xa40 <usart0_init>

	sei();
     8a0:	78 94       	sei

}
     8a2:	0f 91       	pop	r16
     8a4:	ef 90       	pop	r14
     8a6:	cf 90       	pop	r12
     8a8:	af 90       	pop	r10
     8aa:	8f 90       	pop	r8
     8ac:	08 95       	ret

000008ae <serial_out>:
#include <stdarg.h>

// The variadic (va_) stuff is magic 
//void serial_out(const char *fmt, ...)
void serial_out(const char *fmt, ...)
{
     8ae:	df 93       	push	r29
     8b0:	cf 93       	push	r28
     8b2:	cd b7       	in	r28, 0x3d	; 61
     8b4:	de b7       	in	r29, 0x3e	; 62
     8b6:	fe 01       	movw	r30, r28
     8b8:	35 96       	adiw	r30, 0x05	; 5
	va_list arg;
	va_start(arg, fmt);
	vprintf(fmt, arg);
     8ba:	81 91       	ld	r24, Z+
     8bc:	91 91       	ld	r25, Z+
     8be:	bf 01       	movw	r22, r30
     8c0:	0e 94 c2 06 	call	0xd84	; 0xd84 <vprintf>
	va_end(arg);
}
     8c4:	cf 91       	pop	r28
     8c6:	df 91       	pop	r29
     8c8:	08 95       	ret

000008ca <usart0_uninit>:
	setting = usart_baudrate_to_setting(freq_cpu,baudrate);
	
	// Write hi byte first as writing lo byte will trigger immediate update of baud prescaler.
	UART_BAUD_RATE_HIGH = hi_byte(setting);
	UART_BAUD_RATE_LOW= lo_byte(setting);
	
     8ca:	80 e2       	ldi	r24, 0x20	; 32
     8cc:	80 93 c0 00 	sts	0x00C0, r24
	return;
     8d0:	10 92 c1 00 	sts	0x00C1, r1
}
     8d4:	86 e0       	ldi	r24, 0x06	; 6
     8d6:	80 93 c2 00 	sts	0x00C2, r24

     8da:	08 95       	ret

000008dc <usart0_baud_set>:
		//if(usart0_transmit_ring.count)// Alternate technique
		if(usart0_transmit_buffer_inuse_count())// Is there data in the buffer?
		{
			// Send next byte in the buffer.
 	       UART_DATA_REG = ring_remove(&usart0_transmit_ring);
		}
     8dc:	ef 92       	push	r14
     8de:	ff 92       	push	r15
     8e0:	0f 93       	push	r16
     8e2:	1f 93       	push	r17
     8e4:	7b 01       	movw	r14, r22
     8e6:	8c 01       	movw	r16, r24
		else
		{
			// The buffer is empty
     8e8:	84 e0       	ldi	r24, 0x04	; 4
     8ea:	ee 0c       	add	r14, r14
     8ec:	ff 1c       	adc	r15, r15
     8ee:	00 1f       	adc	r16, r16
     8f0:	11 1f       	adc	r17, r17
     8f2:	8a 95       	dec	r24
     8f4:	d1 f7       	brne	.-12     	; 0x8ea <usart0_baud_set+0xe>
     8f6:	ca 01       	movw	r24, r20
     8f8:	b9 01       	movw	r22, r18
     8fa:	a8 01       	movw	r20, r16
     8fc:	97 01       	movw	r18, r14
     8fe:	0e 94 99 06 	call	0xd32	; 0xd32 <__udivmodsi4>
     902:	21 50       	subi	r18, 0x01	; 1
     904:	30 40       	sbci	r19, 0x00	; 0
			usart_buffered_tx_flag = false;
			// Set the ready flag
			usart_tx_ready_flag = true;
     906:	30 93 c5 00 	sts	0x00C5, r19
		}
     90a:	20 93 c4 00 	sts	0x00C4, r18
	}
	else // Not buffered so transmited single byte
	{
     90e:	1f 91       	pop	r17
     910:	0f 91       	pop	r16
     912:	ff 90       	pop	r15
     914:	ef 90       	pop	r14
     916:	08 95       	ret

00000918 <usart0_parity_set>:
		// Set transmit ready flag
		usart_tx_ready_flag = true;
	}
	
     918:	81 11       	cpse	r24, r1
    return;
}
     91a:	8f 5f       	subi	r24, 0xFF	; 255


     91c:	98 2f       	mov	r25, r24
     91e:	80 ff       	sbrs	r24, 0
     920:	04 c0       	rjmp	.+8      	; 0x92a <usart0_parity_set+0x12>
     922:	80 91 c2 00 	lds	r24, 0x00C2
     926:	80 61       	ori	r24, 0x10	; 16
     928:	03 c0       	rjmp	.+6      	; 0x930 <usart0_parity_set+0x18>
     92a:	80 91 c2 00 	lds	r24, 0x00C2
     92e:	8f 7e       	andi	r24, 0xEF	; 239
     930:	80 93 c2 00 	sts	0x00C2, r24
     934:	80 91 c2 00 	lds	r24, 0x00C2
// The interrupt service routines are included in the initialization .c file 
     938:	91 ff       	sbrs	r25, 1
     93a:	04 c0       	rjmp	.+8      	; 0x944 <usart0_parity_set+0x2c>
     93c:	80 91 c2 00 	lds	r24, 0x00C2
     940:	80 62       	ori	r24, 0x20	; 32
     942:	03 c0       	rjmp	.+6      	; 0x94a <usart0_parity_set+0x32>
     944:	80 91 c2 00 	lds	r24, 0x00C2
     948:	8f 7d       	andi	r24, 0xDF	; 223
     94a:	80 93 c2 00 	sts	0x00C2, r24
     94e:	80 91 c2 00 	lds	r24, 0x00C2
     952:	08 95       	ret

00000954 <__vector_18>:
     954:	1f 92       	push	r1
     956:	0f 92       	push	r0
     958:	0f b6       	in	r0, 0x3f	; 63
     95a:	0f 92       	push	r0
     95c:	11 24       	eor	r1, r1
     95e:	2f 93       	push	r18
     960:	3f 93       	push	r19
     962:	4f 93       	push	r20
     964:	5f 93       	push	r21
     966:	6f 93       	push	r22
     968:	7f 93       	push	r23
     96a:	8f 93       	push	r24
     96c:	9f 93       	push	r25
     96e:	af 93       	push	r26
     970:	bf 93       	push	r27
     972:	ef 93       	push	r30
     974:	ff 93       	push	r31
     976:	80 91 c0 00 	lds	r24, 0x00C0
     97a:	90 91 c0 00 	lds	r25, 0x00C0
     97e:	60 91 c6 00 	lds	r22, 0x00C6
     982:	84 fd       	sbrc	r24, 4
     984:	06 c0       	rjmp	.+12     	; 0x992 <__vector_18+0x3e>
     986:	92 fd       	sbrc	r25, 2
     988:	04 c0       	rjmp	.+8      	; 0x992 <__vector_18+0x3e>
     98a:	8c eb       	ldi	r24, 0xBC	; 188
     98c:	91 e0       	ldi	r25, 0x01	; 1
     98e:	0e 94 06 06 	call	0xc0c	; 0xc0c <ring_add>
     992:	ff 91       	pop	r31
     994:	ef 91       	pop	r30
     996:	bf 91       	pop	r27
     998:	af 91       	pop	r26
     99a:	9f 91       	pop	r25
     99c:	8f 91       	pop	r24
     99e:	7f 91       	pop	r23
     9a0:	6f 91       	pop	r22
     9a2:	5f 91       	pop	r21
     9a4:	4f 91       	pop	r20
     9a6:	3f 91       	pop	r19
     9a8:	2f 91       	pop	r18
     9aa:	0f 90       	pop	r0
     9ac:	0f be       	out	0x3f, r0	; 63
     9ae:	0f 90       	pop	r0
     9b0:	1f 90       	pop	r1
     9b2:	18 95       	reti

000009b4 <__vector_20>:
	register uint8_t data;
	register uint8_t parity_error = false;
	register uint8_t frame_error = false;

	// Get error conditions before getting the data.
	frame_error = usart0_frame_error();
     9b4:	1f 92       	push	r1
     9b6:	0f 92       	push	r0
     9b8:	0f b6       	in	r0, 0x3f	; 63
     9ba:	0f 92       	push	r0
     9bc:	11 24       	eor	r1, r1
     9be:	2f 93       	push	r18
     9c0:	3f 93       	push	r19
     9c2:	4f 93       	push	r20
     9c4:	5f 93       	push	r21
     9c6:	6f 93       	push	r22
     9c8:	7f 93       	push	r23
     9ca:	8f 93       	push	r24
     9cc:	9f 93       	push	r25
     9ce:	af 93       	push	r26
     9d0:	bf 93       	push	r27
     9d2:	ef 93       	push	r30
     9d4:	ff 93       	push	r31
	parity_error = usart0_parity_error();
	
	data = UART_DATA_REG;
     9d6:	80 91 04 02 	lds	r24, 0x0204
     9da:	88 23       	and	r24, r24
     9dc:	69 f0       	breq	.+26     	; 0x9f8 <__vector_20+0x44>
    
	if(!frame_error && !parity_error)
	{
     9de:	0e 94 01 06 	call	0xc02	; 0xc02 <usart0_transmit_buffer_inuse_count>
     9e2:	88 23       	and	r24, r24
     9e4:	39 f0       	breq	.+14     	; 0x9f4 <__vector_20+0x40>
		// Store data in ring buffer.
        ring_add(&usart0_receive_ring, data);
	}
     9e6:	84 eb       	ldi	r24, 0xB4	; 180
     9e8:	91 e0       	ldi	r25, 0x01	; 1
     9ea:	0e 94 58 06 	call	0xcb0	; 0xcb0 <ring_remove>
     9ee:	80 93 c6 00 	sts	0x00C6, r24
     9f2:	05 c0       	rjmp	.+10     	; 0x9fe <__vector_20+0x4a>

	return;
}


     9f4:	10 92 04 02 	sts	0x0204, r1
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	80 93 05 02 	sts	0x0205, r24
     9fe:	ff 91       	pop	r31
     a00:	ef 91       	pop	r30
     a02:	bf 91       	pop	r27
     a04:	af 91       	pop	r26
     a06:	9f 91       	pop	r25
     a08:	8f 91       	pop	r24
     a0a:	7f 91       	pop	r23
     a0c:	6f 91       	pop	r22
     a0e:	5f 91       	pop	r21
     a10:	4f 91       	pop	r20
     a12:	3f 91       	pop	r19
     a14:	2f 91       	pop	r18
     a16:	0f 90       	pop	r0
     a18:	0f be       	out	0x3f, r0	; 63
     a1a:	0f 90       	pop	r0
     a1c:	1f 90       	pop	r1
     a1e:	18 95       	reti

00000a20 <usart0_send>:
    bit_write(bit_read(parity, BIT(0)), UART_CONTROL_STATUS_REG_C, BIT(UART_PARITY_MODE_0));
    bit_write(bit_read(parity, BIT(1)), UART_CONTROL_STATUS_REG_C, BIT(UART_PARITY_MODE_1));
    return;
}

// JWP 6/16/11 rewrote transmit interrupt to use TX complete vector
     a20:	80 91 05 02 	lds	r24, 0x0205
     a24:	88 23       	and	r24, r24
     a26:	e1 f3       	breq	.-8      	; 0xa20 <usart0_send>
// rather than the Data Register Empty vector
// The interrupt service routines are included in the initialization .c file 
// since they must be associated with a .c file for the compiler
     a28:	81 e0       	ldi	r24, 0x01	; 1
     a2a:	80 93 04 02 	sts	0x0204, r24
usart0_transmit_interrupt_service_routine
{

     a2e:	84 eb       	ldi	r24, 0xB4	; 180
     a30:	91 e0       	ldi	r25, 0x01	; 1
     a32:	0e 94 58 06 	call	0xcb0	; 0xcb0 <ring_remove>
     a36:	80 93 c6 00 	sts	0x00C6, r24
	// Is buffered transmission enabled?
	if(usart_buffered_tx_flag)
	{		
     a3a:	10 92 05 02 	sts	0x0205, r1
		//if(usart0_transmit_ring.count)// Alternate technique
     a3e:	08 95       	ret

00000a40 <usart0_init>:
    //flow.flow_out = true;
    //flow.flow_in = true;

	// JWP 3/27/11 the following was already commented out in xxx code
    // Initialize hw flow control task.
    // flow_out_tcb.handler = usart0_flow_out_hw_task;
     a40:	2f 92       	push	r2
     a42:	3f 92       	push	r3
     a44:	4f 92       	push	r4
     a46:	5f 92       	push	r5
     a48:	6f 92       	push	r6
     a4a:	7f 92       	push	r7
     a4c:	8f 92       	push	r8
     a4e:	9f 92       	push	r9
     a50:	af 92       	push	r10
     a52:	cf 92       	push	r12
     a54:	ef 92       	push	r14
     a56:	0f 93       	push	r16
     a58:	1f 93       	push	r17
     a5a:	df 93       	push	r29
     a5c:	cf 93       	push	r28
     a5e:	cd b7       	in	r28, 0x3d	; 61
     a60:	de b7       	in	r29, 0x3e	; 62
     a62:	3b 01       	movw	r6, r22
     a64:	4c 01       	movw	r8, r24
     a66:	19 01       	movw	r2, r18
     a68:	2a 01       	movw	r4, r20
     a6a:	1e 2d       	mov	r17, r14
     a6c:	ec 2c       	mov	r14, r12
    // flow_out_tcb.absolute_timing = false;
    // flow_out_tcb.run_interval = 0;
     a6e:	f8 94       	cli
    // flow_out_tcb.enabled = false;
    // task_add(&flow_out_tcb);
     a70:	86 e2       	ldi	r24, 0x26	; 38
     a72:	91 e0       	ldi	r25, 0x01	; 1
     a74:	90 93 09 02 	sts	0x0209, r25
     a78:	80 93 08 02 	sts	0x0208, r24
//	usart0_mode(mode);
 	usart0_baud_set(baud, freq_cpu);
    usart0_data_bits_set(databits);
    usart0_stop_bits_set(stopbits);
    usart0_parity_set(parity);
 
     a7c:	80 91 c1 00 	lds	r24, 0x00C1
     a80:	87 7f       	andi	r24, 0xF7	; 247
     a82:	80 93 c1 00 	sts	0x00C1, r24
 	usart0_baud_set(baud, freq_cpu);
     a86:	80 91 c1 00 	lds	r24, 0x00C1
     a8a:	8f 7e       	andi	r24, 0xEF	; 239
     a8c:	80 93 c1 00 	sts	0x00C1, r24

     a90:	80 91 c1 00 	lds	r24, 0x00C1
     a94:	8f 7b       	andi	r24, 0xBF	; 191
     a96:	80 93 c1 00 	sts	0x00C1, r24
//JWP 6/16/11 The Butterfly requires special code for clock and baud
     a9a:	80 91 c1 00 	lds	r24, 0x00C1
     a9e:	8f 77       	andi	r24, 0x7F	; 127
     aa0:	80 93 c1 00 	sts	0x00C1, r24
#if defined(__AVR_ATmega169__) // Assume Butterfly
	butterfly_init();
#endif
     aa4:	80 91 c2 00 	lds	r24, 0x00C2
     aa8:	02 95       	swap	r16
     aaa:	00 0f       	add	r16, r16
     aac:	00 0f       	add	r16, r16
     aae:	00 7c       	andi	r16, 0xC0	; 192
     ab0:	8f 73       	andi	r24, 0x3F	; 63
     ab2:	80 2b       	or	r24, r16
     ab4:	80 93 c2 00 	sts	0x00C2, r24

     ab8:	c4 01       	movw	r24, r8
     aba:	b3 01       	movw	r22, r6
     abc:	0e 94 6e 04 	call	0x8dc	; 0x8dc <usart0_baud_set>

     ac0:	81 2f       	mov	r24, r17
     ac2:	85 50       	subi	r24, 0x05	; 5
     ac4:	84 30       	cpi	r24, 0x04	; 4
     ac6:	18 f5       	brcc	.+70     	; 0xb0e <usart0_init+0xce>
     ac8:	21 2f       	mov	r18, r17
     aca:	30 e0       	ldi	r19, 0x00	; 0
     acc:	25 50       	subi	r18, 0x05	; 5
     ace:	30 40       	sbci	r19, 0x00	; 0
     ad0:	20 ff       	sbrs	r18, 0
     ad2:	04 c0       	rjmp	.+8      	; 0xadc <usart0_init+0x9c>
     ad4:	80 91 c2 00 	lds	r24, 0x00C2
     ad8:	82 60       	ori	r24, 0x02	; 2
     ada:	03 c0       	rjmp	.+6      	; 0xae2 <usart0_init+0xa2>
     adc:	80 91 c2 00 	lds	r24, 0x00C2
     ae0:	8d 7f       	andi	r24, 0xFD	; 253
     ae2:	80 93 c2 00 	sts	0x00C2, r24
     ae6:	80 91 c2 00 	lds	r24, 0x00C2
     aea:	21 ff       	sbrs	r18, 1
     aec:	04 c0       	rjmp	.+8      	; 0xaf6 <usart0_init+0xb6>
     aee:	80 91 c2 00 	lds	r24, 0x00C2
     af2:	84 60       	ori	r24, 0x04	; 4
     af4:	03 c0       	rjmp	.+6      	; 0xafc <usart0_init+0xbc>
     af6:	80 91 c2 00 	lds	r24, 0x00C2
     afa:	8b 7f       	andi	r24, 0xFB	; 251
     afc:	80 93 c2 00 	sts	0x00C2, r24
     b00:	80 91 c2 00 	lds	r24, 0x00C2
     b04:	80 91 c1 00 	lds	r24, 0x00C1
     b08:	8b 7f       	andi	r24, 0xFB	; 251
     b0a:	80 93 c1 00 	sts	0x00C1, r24
     b0e:	19 30       	cpi	r17, 0x09	; 9
     b10:	79 f4       	brne	.+30     	; 0xb30 <usart0_init+0xf0>
     b12:	80 91 c2 00 	lds	r24, 0x00C2
     b16:	82 60       	ori	r24, 0x02	; 2
     b18:	80 93 c2 00 	sts	0x00C2, r24
     b1c:	80 91 c2 00 	lds	r24, 0x00C2
     b20:	84 60       	ori	r24, 0x04	; 4
     b22:	80 93 c2 00 	sts	0x00C2, r24
     b26:	80 91 c1 00 	lds	r24, 0x00C1
     b2a:	84 60       	ori	r24, 0x04	; 4
     b2c:	80 93 c1 00 	sts	0x00C1, r24
	ring_init(&usart0_receive_ring, usart0_receive_buffer, USART0_RECEIVE_BUFFER_LEN);
     b30:	8e 2d       	mov	r24, r14
     b32:	81 50       	subi	r24, 0x01	; 1
     b34:	82 30       	cpi	r24, 0x02	; 2
     b36:	70 f4       	brcc	.+28     	; 0xb54 <usart0_init+0x114>
     b38:	81 e0       	ldi	r24, 0x01	; 1
     b3a:	e8 16       	cp	r14, r24
     b3c:	21 f0       	breq	.+8      	; 0xb46 <usart0_init+0x106>
     b3e:	80 91 c2 00 	lds	r24, 0x00C2
     b42:	88 60       	ori	r24, 0x08	; 8
     b44:	03 c0       	rjmp	.+6      	; 0xb4c <usart0_init+0x10c>
     b46:	80 91 c2 00 	lds	r24, 0x00C2
     b4a:	87 7f       	andi	r24, 0xF7	; 247
     b4c:	80 93 c2 00 	sts	0x00C2, r24
     b50:	80 91 c2 00 	lds	r24, 0x00C2
    ring_init(&usart0_transmit_ring, usart0_transmit_buffer, USART0_TRANSMIT_BUFFER_LEN);
     b54:	8a 2d       	mov	r24, r10
     b56:	0e 94 8c 04 	call	0x918	; 0x918 <usart0_parity_set>

	// JWP 6/16/11 
     b5a:	c4 01       	movw	r24, r8
     b5c:	b3 01       	movw	r22, r6
     b5e:	a2 01       	movw	r20, r4
     b60:	91 01       	movw	r18, r2
     b62:	0e 94 6e 04 	call	0x8dc	; 0x8dc <usart0_baud_set>
// JWP 6/16/11 added to change transmission logic.
// this function waits until a pending transmission is complete
// then sends a byte. If the usart_buffered_TX_flag is set true
// then the ISR continues to send until the buffer is empty, otherwise
// the ISR just sends the byte. 
void usart0_send(void)
     b66:	8c eb       	ldi	r24, 0xBC	; 188
     b68:	91 e0       	ldi	r25, 0x01	; 1
     b6a:	64 ec       	ldi	r22, 0xC4	; 196
     b6c:	71 e0       	ldi	r23, 0x01	; 1
     b6e:	40 e4       	ldi	r20, 0x40	; 64
     b70:	0e 94 34 06 	call	0xc68	; 0xc68 <ring_init>
{
     b74:	84 eb       	ldi	r24, 0xB4	; 180
     b76:	91 e0       	ldi	r25, 0x01	; 1
     b78:	64 e3       	ldi	r22, 0x34	; 52
     b7a:	71 e0       	ldi	r23, 0x01	; 1
     b7c:	40 e8       	ldi	r20, 0x80	; 128
     b7e:	0e 94 34 06 	call	0xc68	; 0xc68 <ring_init>

	// Wait until the transmitter is ready
	while(!usart_tx_ready_flag);

	// Set flag for ISR
	usart_buffered_tx_flag = true;
     b82:	80 91 c1 00 	lds	r24, 0x00C1
     b86:	88 60       	ori	r24, 0x08	; 8
     b88:	80 93 c1 00 	sts	0x00C1, r24
	
     b8c:	80 91 c1 00 	lds	r24, 0x00C1
     b90:	80 61       	ori	r24, 0x10	; 16
     b92:	80 93 c1 00 	sts	0x00C1, r24
	// Send the byte
     b96:	80 91 c1 00 	lds	r24, 0x00C1
     b9a:	80 64       	ori	r24, 0x40	; 64
     b9c:	80 93 c1 00 	sts	0x00C1, r24
	UART_DATA_REG = ring_remove(&usart0_transmit_ring);
     ba0:	80 91 c1 00 	lds	r24, 0x00C1
     ba4:	80 68       	ori	r24, 0x80	; 128
     ba6:	80 93 c1 00 	sts	0x00C1, r24

	// Set the ready flag to false
	usart_tx_ready_flag = false;
}

     baa:	10 92 04 02 	sts	0x0204, r1

     bae:	81 e0       	ldi	r24, 0x01	; 1
     bb0:	80 93 05 02 	sts	0x0205, r24
// 3/18/11 JWP removed magic number for clock and added freq_cpu
void usart0_baud_set(uint32_t baudrate, uint32_t freq_cpu)
     bb4:	78 94       	sei
{
	uint16_t setting;
	
     bb6:	cf 91       	pop	r28
     bb8:	df 91       	pop	r29
     bba:	1f 91       	pop	r17
     bbc:	0f 91       	pop	r16
     bbe:	ef 90       	pop	r14
     bc0:	cf 90       	pop	r12
     bc2:	af 90       	pop	r10
     bc4:	9f 90       	pop	r9
     bc6:	8f 90       	pop	r8
     bc8:	7f 90       	pop	r7
     bca:	6f 90       	pop	r6
     bcc:	5f 90       	pop	r5
     bce:	4f 90       	pop	r4
     bd0:	3f 90       	pop	r3
     bd2:	2f 90       	pop	r2
     bd4:	08 95       	ret

00000bd6 <usart0_put_char_stream>:
   	return 0; 
} 

void usart0_init(uint32_t baud, uint32_t freq_cpu, usart_mode_t mode, usart_databits_t databits, usart_stopbits_t stopbits, usart_parity_t parity, usart_flow_control_t flow_control)
{

     bd6:	1f 93       	push	r17
     bd8:	18 2f       	mov	r17, r24
	cli();
     bda:	8a 30       	cpi	r24, 0x0A	; 10
     bdc:	19 f4       	brne	.+6      	; 0xbe4 <usart0_put_char_stream+0xe>
     bde:	8d e0       	ldi	r24, 0x0D	; 13
     be0:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <usart0_put_char_stream>

   	stdout = &mystdout;    //set the output stream 
     be4:	81 2f       	mov	r24, r17
     be6:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <usart0_transmit_buffer_insert>

    //flow.flow_control = flow_control;
     bea:	0e 94 10 05 	call	0xa20	; 0xa20 <usart0_send>
    //flow.flow_out = true;
    //flow.flow_in = true;

     bee:	80 e0       	ldi	r24, 0x00	; 0
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	1f 91       	pop	r17
     bf4:	08 95       	ret

00000bf6 <usart0_transmit_buffer_insert>:
 // please contact me with details so that I may correct the situation. 
 
#include "usart.h"

bool usart0_transmit_buffer_insert(uint8_t c)
{
     bf6:	68 2f       	mov	r22, r24
    register bool result;
    result = usart0_buffer_insert(&usart0_transmit_ring, c);
     bf8:	84 eb       	ldi	r24, 0xB4	; 180
     bfa:	91 e0       	ldi	r25, 0x01	; 1
     bfc:	0e 94 85 06 	call	0xd0a	; 0xd0a <usart0_buffer_insert>
	// JWP 6/14/11 don't automatically send. Use usart0_transmit_send when 
	// 		you have finished loading what you want to send in the buffer
	//if(result == true) usart0_transmit_check();

    return(result);
}
     c00:	08 95       	ret

00000c02 <usart0_transmit_buffer_inuse_count>:
 
#include "usart.h"

uint8_t usart0_transmit_buffer_inuse_count(void)
{
    return(usart0_buffer_inuse_count(&usart0_transmit_ring));
     c02:	84 eb       	ldi	r24, 0xB4	; 180
     c04:	91 e0       	ldi	r25, 0x01	; 1
     c06:	0e 94 93 06 	call	0xd26	; 0xd26 <usart0_buffer_inuse_count>
}
     c0a:	08 95       	ret

00000c0c <ring_add>:
#include <stdbool.h>
#include <stdint.h>
#include "ring.h"

bool ring_add(ring_t *r, uint8_t data)
{
     c0c:	dc 01       	movw	r26, r24
    // Get the next head index.
    ring_index_t temp_head = r->head_index + 1;
     c0e:	13 96       	adiw	r26, 0x03	; 3
     c10:	4d 91       	ld	r20, X+
     c12:	5c 91       	ld	r21, X
     c14:	14 97       	sbiw	r26, 0x04	; 4
    if(r->head_index >= r->size - 1)
     c16:	12 96       	adiw	r26, 0x02	; 2
     c18:	8c 91       	ld	r24, X
     c1a:	12 97       	sbiw	r26, 0x02	; 2
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	01 97       	sbiw	r24, 0x01	; 1
     c20:	48 17       	cp	r20, r24
     c22:	59 07       	cpc	r21, r25
     c24:	18 f0       	brcs	.+6      	; 0xc2c <ring_add+0x20>
     c26:	20 e0       	ldi	r18, 0x00	; 0
     c28:	30 e0       	ldi	r19, 0x00	; 0
     c2a:	03 c0       	rjmp	.+6      	; 0xc32 <ring_add+0x26>
#include "ring.h"

bool ring_add(ring_t *r, uint8_t data)
{
    // Get the next head index.
    ring_index_t temp_head = r->head_index + 1;
     c2c:	9a 01       	movw	r18, r20
     c2e:	2f 5f       	subi	r18, 0xFF	; 255
     c30:	3f 4f       	sbci	r19, 0xFF	; 255
    if(r->head_index >= r->size - 1)
    {
        temp_head = 0;
    }

    if(temp_head != r->tail_index)
     c32:	15 96       	adiw	r26, 0x05	; 5
     c34:	8d 91       	ld	r24, X+
     c36:	9c 91       	ld	r25, X
     c38:	16 97       	sbiw	r26, 0x06	; 6
     c3a:	28 17       	cp	r18, r24
     c3c:	39 07       	cpc	r19, r25
     c3e:	11 f4       	brne	.+4      	; 0xc44 <ring_add+0x38>
     c40:	80 e0       	ldi	r24, 0x00	; 0
     c42:	08 95       	ret
    {
        r->buffer[r->head_index] = data;    // Buffer receives data
     c44:	ed 91       	ld	r30, X+
     c46:	fc 91       	ld	r31, X
     c48:	11 97       	sbiw	r26, 0x01	; 1
     c4a:	e4 0f       	add	r30, r20
     c4c:	f5 1f       	adc	r31, r21
     c4e:	60 83       	st	Z, r22
        r->head_index = temp_head;
     c50:	14 96       	adiw	r26, 0x04	; 4
     c52:	3c 93       	st	X, r19
     c54:	2e 93       	st	-X, r18
     c56:	13 97       	sbiw	r26, 0x03	; 3
        r->count++;
     c58:	17 96       	adiw	r26, 0x07	; 7
     c5a:	8c 91       	ld	r24, X
     c5c:	17 97       	sbiw	r26, 0x07	; 7
     c5e:	8f 5f       	subi	r24, 0xFF	; 255
     c60:	17 96       	adiw	r26, 0x07	; 7
     c62:	8c 93       	st	X, r24
     c64:	81 e0       	ldi	r24, 0x01	; 1
        return(true);       // Return complete
    }

    return(false);          // Return incomplete
}
     c66:	08 95       	ret

00000c68 <ring_init>:
#include <stdbool.h>
#include <stdlib.h>
#include "ring.h"

bool ring_init(ring_t *r, ring_buffer_t buffer, ring_size_t size)
{
     c68:	fc 01       	movw	r30, r24
    bool success = false;
    bool clear;
    if (size >= 2 && r != NULL && buffer != NULL)
     c6a:	42 30       	cpi	r20, 0x02	; 2
     c6c:	58 f0       	brcs	.+22     	; 0xc84 <ring_init+0x1c>
     c6e:	00 97       	sbiw	r24, 0x00	; 0
     c70:	49 f0       	breq	.+18     	; 0xc84 <ring_init+0x1c>
     c72:	61 15       	cp	r22, r1
     c74:	71 05       	cpc	r23, r1
     c76:	31 f0       	breq	.+12     	; 0xc84 <ring_init+0x1c>
    {
        r->buffer = buffer;     // Set index pointers
     c78:	71 83       	std	Z+1, r23	; 0x01
     c7a:	60 83       	st	Z, r22
        r->size = size;
     c7c:	42 83       	std	Z+2, r20	; 0x02
        clear = ring_clear(r);  // Call ring_clear function
     c7e:	0e 94 44 06 	call	0xc88	; 0xc88 <ring_clear>
     c82:	08 95       	ret
     c84:	80 e0       	ldi	r24, 0x00	; 0
        {
                success = true;
        }
    }
    return(success);
}
     c86:	08 95       	ret

00000c88 <ring_clear>:
#include <stdlib.h>
#include <string.h>
#include "ring.h"

bool ring_clear(ring_t *r)
{
     c88:	fc 01       	movw	r30, r24
    bool success = false;
    if (r != NULL)
     c8a:	00 97       	sbiw	r24, 0x00	; 0
     c8c:	11 f4       	brne	.+4      	; 0xc92 <ring_clear+0xa>
     c8e:	80 e0       	ldi	r24, 0x00	; 0
     c90:	08 95       	ret
    {
        r->head_index = 0;
     c92:	14 82       	std	Z+4, r1	; 0x04
     c94:	13 82       	std	Z+3, r1	; 0x03
        r->tail_index = 0;          // Assign new values
     c96:	16 82       	std	Z+6, r1	; 0x06
     c98:	15 82       	std	Z+5, r1	; 0x05
        r->count = 0;
     c9a:	17 82       	std	Z+7, r1	; 0x07
        memset((void *)r->buffer, 0, r->size); // Clear out memory
     c9c:	42 81       	ldd	r20, Z+2	; 0x02
     c9e:	80 81       	ld	r24, Z
     ca0:	91 81       	ldd	r25, Z+1	; 0x01
     ca2:	60 e0       	ldi	r22, 0x00	; 0
     ca4:	70 e0       	ldi	r23, 0x00	; 0
     ca6:	50 e0       	ldi	r21, 0x00	; 0
     ca8:	0e 94 bb 06 	call	0xd76	; 0xd76 <memset>
     cac:	81 e0       	ldi	r24, 0x01	; 1
        success = true;
    }
    return(success);
}
     cae:	08 95       	ret

00000cb0 <ring_remove>:

#include <stdint.h>
#include "ring.h"

uint8_t ring_remove(ring_t *r)
{
     cb0:	dc 01       	movw	r26, r24
    uint8_t data = 0;

    // Compare the head index and the tail index
    if(r->head_index != r->tail_index)
     cb2:	15 96       	adiw	r26, 0x05	; 5
     cb4:	2d 91       	ld	r18, X+
     cb6:	3c 91       	ld	r19, X
     cb8:	16 97       	sbiw	r26, 0x06	; 6
     cba:	13 96       	adiw	r26, 0x03	; 3
     cbc:	8d 91       	ld	r24, X+
     cbe:	9c 91       	ld	r25, X
     cc0:	14 97       	sbiw	r26, 0x04	; 4
     cc2:	82 17       	cp	r24, r18
     cc4:	93 07       	cpc	r25, r19
     cc6:	11 f4       	brne	.+4      	; 0xccc <ring_remove+0x1c>
     cc8:	e0 e0       	ldi	r30, 0x00	; 0
     cca:	1d c0       	rjmp	.+58     	; 0xd06 <ring_remove+0x56>
    {
        // Get the Data from the buffer.
        data = r->buffer[r->tail_index];
     ccc:	ed 91       	ld	r30, X+
     cce:	fc 91       	ld	r31, X
     cd0:	11 97       	sbiw	r26, 0x01	; 1
     cd2:	e2 0f       	add	r30, r18
     cd4:	f3 1f       	adc	r31, r19
     cd6:	e0 81       	ld	r30, Z

        // Get the next tail index.
        ring_index_t next_tail = r->tail_index + 1;
        if(r->tail_index >= r->size - 1)
     cd8:	12 96       	adiw	r26, 0x02	; 2
     cda:	8c 91       	ld	r24, X
     cdc:	12 97       	sbiw	r26, 0x02	; 2
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	01 97       	sbiw	r24, 0x01	; 1
     ce2:	28 17       	cp	r18, r24
     ce4:	39 07       	cpc	r19, r25
     ce6:	18 f0       	brcs	.+6      	; 0xcee <ring_remove+0x3e>
     ce8:	80 e0       	ldi	r24, 0x00	; 0
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	02 c0       	rjmp	.+4      	; 0xcf2 <ring_remove+0x42>
    {
        // Get the Data from the buffer.
        data = r->buffer[r->tail_index];

        // Get the next tail index.
        ring_index_t next_tail = r->tail_index + 1;
     cee:	c9 01       	movw	r24, r18
     cf0:	01 96       	adiw	r24, 0x01	; 1
        if(r->tail_index >= r->size - 1)
        {
            next_tail = 0;
        }

        r->tail_index = next_tail;      // Move index
     cf2:	16 96       	adiw	r26, 0x06	; 6
     cf4:	9c 93       	st	X, r25
     cf6:	8e 93       	st	-X, r24
     cf8:	15 97       	sbiw	r26, 0x05	; 5
        r->count--;             // Decrement count
     cfa:	17 96       	adiw	r26, 0x07	; 7
     cfc:	8c 91       	ld	r24, X
     cfe:	17 97       	sbiw	r26, 0x07	; 7
     d00:	81 50       	subi	r24, 0x01	; 1
     d02:	17 96       	adiw	r26, 0x07	; 7
     d04:	8c 93       	st	X, r24
    }

    return(data);
}
     d06:	8e 2f       	mov	r24, r30
     d08:	08 95       	ret

00000d0a <usart0_buffer_insert>:
 // please contact me with details so that I may correct the situation. 
 
#include "usart.h"

bool usart0_buffer_insert(ring_t *ring, uint8_t c)
{
     d0a:	1f 93       	push	r17
     d0c:	9c 01       	movw	r18, r24
    register bool result;
    register uint8_t sreg;
   
   	// Do not load buffer while transmitting from buffer
	while(usart_buffered_tx_flag);
     d0e:	80 91 04 02 	lds	r24, 0x0204
     d12:	88 23       	and	r24, r24
     d14:	e1 f7       	brne	.-8      	; 0xd0e <usart0_buffer_insert+0x4>
    
    sreg = SREG;
     d16:	1f b7       	in	r17, 0x3f	; 63
    cli();
     d18:	f8 94       	cli
    result = ring_add(ring, c);
     d1a:	c9 01       	movw	r24, r18
     d1c:	0e 94 06 06 	call	0xc0c	; 0xc0c <ring_add>
    SREG = sreg;
     d20:	1f bf       	out	0x3f, r17	; 63
    return(result);
}
     d22:	1f 91       	pop	r17
     d24:	08 95       	ret

00000d26 <usart0_buffer_inuse_count>:
 // please contact me with details so that I may correct the situation. 
 
#include "usart.h"

uint8_t usart0_buffer_inuse_count(ring_t *ring)
{
     d26:	fc 01       	movw	r30, r24
    register uint8_t result;
    register uint8_t sreg;
    
    sreg = SREG;
     d28:	8f b7       	in	r24, 0x3f	; 63
    cli();
     d2a:	f8 94       	cli
    result = ring->count;
    SREG = sreg;
     d2c:	8f bf       	out	0x3f, r24	; 63
    return(result);
}
     d2e:	87 81       	ldd	r24, Z+7	; 0x07
     d30:	08 95       	ret

00000d32 <__udivmodsi4>:
     d32:	a1 e2       	ldi	r26, 0x21	; 33
     d34:	1a 2e       	mov	r1, r26
     d36:	aa 1b       	sub	r26, r26
     d38:	bb 1b       	sub	r27, r27
     d3a:	fd 01       	movw	r30, r26
     d3c:	0d c0       	rjmp	.+26     	; 0xd58 <__udivmodsi4_ep>

00000d3e <__udivmodsi4_loop>:
     d3e:	aa 1f       	adc	r26, r26
     d40:	bb 1f       	adc	r27, r27
     d42:	ee 1f       	adc	r30, r30
     d44:	ff 1f       	adc	r31, r31
     d46:	a2 17       	cp	r26, r18
     d48:	b3 07       	cpc	r27, r19
     d4a:	e4 07       	cpc	r30, r20
     d4c:	f5 07       	cpc	r31, r21
     d4e:	20 f0       	brcs	.+8      	; 0xd58 <__udivmodsi4_ep>
     d50:	a2 1b       	sub	r26, r18
     d52:	b3 0b       	sbc	r27, r19
     d54:	e4 0b       	sbc	r30, r20
     d56:	f5 0b       	sbc	r31, r21

00000d58 <__udivmodsi4_ep>:
     d58:	66 1f       	adc	r22, r22
     d5a:	77 1f       	adc	r23, r23
     d5c:	88 1f       	adc	r24, r24
     d5e:	99 1f       	adc	r25, r25
     d60:	1a 94       	dec	r1
     d62:	69 f7       	brne	.-38     	; 0xd3e <__udivmodsi4_loop>
     d64:	60 95       	com	r22
     d66:	70 95       	com	r23
     d68:	80 95       	com	r24
     d6a:	90 95       	com	r25
     d6c:	9b 01       	movw	r18, r22
     d6e:	ac 01       	movw	r20, r24
     d70:	bd 01       	movw	r22, r26
     d72:	cf 01       	movw	r24, r30
     d74:	08 95       	ret

00000d76 <memset>:
     d76:	dc 01       	movw	r26, r24
     d78:	01 c0       	rjmp	.+2      	; 0xd7c <memset+0x6>
     d7a:	6d 93       	st	X+, r22
     d7c:	41 50       	subi	r20, 0x01	; 1
     d7e:	50 40       	sbci	r21, 0x00	; 0
     d80:	e0 f7       	brcc	.-8      	; 0xd7a <memset+0x4>
     d82:	08 95       	ret

00000d84 <vprintf>:
     d84:	9c 01       	movw	r18, r24
     d86:	ab 01       	movw	r20, r22
     d88:	80 91 08 02 	lds	r24, 0x0208
     d8c:	90 91 09 02 	lds	r25, 0x0209
     d90:	b9 01       	movw	r22, r18
     d92:	0e 94 cc 06 	call	0xd98	; 0xd98 <vfprintf>
     d96:	08 95       	ret

00000d98 <vfprintf>:
     d98:	ab e0       	ldi	r26, 0x0B	; 11
     d9a:	b0 e0       	ldi	r27, 0x00	; 0
     d9c:	e2 ed       	ldi	r30, 0xD2	; 210
     d9e:	f6 e0       	ldi	r31, 0x06	; 6
     da0:	0c 94 49 09 	jmp	0x1292	; 0x1292 <__prologue_saves__>
     da4:	3c 01       	movw	r6, r24
     da6:	2b 01       	movw	r4, r22
     da8:	5a 01       	movw	r10, r20
     daa:	fc 01       	movw	r30, r24
     dac:	17 82       	std	Z+7, r1	; 0x07
     dae:	16 82       	std	Z+6, r1	; 0x06
     db0:	83 81       	ldd	r24, Z+3	; 0x03
     db2:	81 fd       	sbrc	r24, 1
     db4:	03 c0       	rjmp	.+6      	; 0xdbc <vfprintf+0x24>
     db6:	6f ef       	ldi	r22, 0xFF	; 255
     db8:	7f ef       	ldi	r23, 0xFF	; 255
     dba:	c6 c1       	rjmp	.+908    	; 0x1148 <vfprintf+0x3b0>
     dbc:	9a e0       	ldi	r25, 0x0A	; 10
     dbe:	89 2e       	mov	r8, r25
     dc0:	1e 01       	movw	r2, r28
     dc2:	08 94       	sec
     dc4:	21 1c       	adc	r2, r1
     dc6:	31 1c       	adc	r3, r1
     dc8:	f3 01       	movw	r30, r6
     dca:	23 81       	ldd	r18, Z+3	; 0x03
     dcc:	f2 01       	movw	r30, r4
     dce:	23 fd       	sbrc	r18, 3
     dd0:	85 91       	lpm	r24, Z+
     dd2:	23 ff       	sbrs	r18, 3
     dd4:	81 91       	ld	r24, Z+
     dd6:	2f 01       	movw	r4, r30
     dd8:	88 23       	and	r24, r24
     dda:	09 f4       	brne	.+2      	; 0xdde <vfprintf+0x46>
     ddc:	b2 c1       	rjmp	.+868    	; 0x1142 <vfprintf+0x3aa>
     dde:	85 32       	cpi	r24, 0x25	; 37
     de0:	39 f4       	brne	.+14     	; 0xdf0 <vfprintf+0x58>
     de2:	23 fd       	sbrc	r18, 3
     de4:	85 91       	lpm	r24, Z+
     de6:	23 ff       	sbrs	r18, 3
     de8:	81 91       	ld	r24, Z+
     dea:	2f 01       	movw	r4, r30
     dec:	85 32       	cpi	r24, 0x25	; 37
     dee:	29 f4       	brne	.+10     	; 0xdfa <vfprintf+0x62>
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	b3 01       	movw	r22, r6
     df4:	0e 94 bf 08 	call	0x117e	; 0x117e <fputc>
     df8:	e7 cf       	rjmp	.-50     	; 0xdc8 <vfprintf+0x30>
     dfa:	98 2f       	mov	r25, r24
     dfc:	ff 24       	eor	r15, r15
     dfe:	ee 24       	eor	r14, r14
     e00:	99 24       	eor	r9, r9
     e02:	ff e1       	ldi	r31, 0x1F	; 31
     e04:	ff 15       	cp	r31, r15
     e06:	d0 f0       	brcs	.+52     	; 0xe3c <vfprintf+0xa4>
     e08:	9b 32       	cpi	r25, 0x2B	; 43
     e0a:	69 f0       	breq	.+26     	; 0xe26 <vfprintf+0x8e>
     e0c:	9c 32       	cpi	r25, 0x2C	; 44
     e0e:	28 f4       	brcc	.+10     	; 0xe1a <vfprintf+0x82>
     e10:	90 32       	cpi	r25, 0x20	; 32
     e12:	59 f0       	breq	.+22     	; 0xe2a <vfprintf+0x92>
     e14:	93 32       	cpi	r25, 0x23	; 35
     e16:	91 f4       	brne	.+36     	; 0xe3c <vfprintf+0xa4>
     e18:	0e c0       	rjmp	.+28     	; 0xe36 <vfprintf+0x9e>
     e1a:	9d 32       	cpi	r25, 0x2D	; 45
     e1c:	49 f0       	breq	.+18     	; 0xe30 <vfprintf+0x98>
     e1e:	90 33       	cpi	r25, 0x30	; 48
     e20:	69 f4       	brne	.+26     	; 0xe3c <vfprintf+0xa4>
     e22:	41 e0       	ldi	r20, 0x01	; 1
     e24:	24 c0       	rjmp	.+72     	; 0xe6e <vfprintf+0xd6>
     e26:	52 e0       	ldi	r21, 0x02	; 2
     e28:	f5 2a       	or	r15, r21
     e2a:	84 e0       	ldi	r24, 0x04	; 4
     e2c:	f8 2a       	or	r15, r24
     e2e:	28 c0       	rjmp	.+80     	; 0xe80 <vfprintf+0xe8>
     e30:	98 e0       	ldi	r25, 0x08	; 8
     e32:	f9 2a       	or	r15, r25
     e34:	25 c0       	rjmp	.+74     	; 0xe80 <vfprintf+0xe8>
     e36:	e0 e1       	ldi	r30, 0x10	; 16
     e38:	fe 2a       	or	r15, r30
     e3a:	22 c0       	rjmp	.+68     	; 0xe80 <vfprintf+0xe8>
     e3c:	f7 fc       	sbrc	r15, 7
     e3e:	29 c0       	rjmp	.+82     	; 0xe92 <vfprintf+0xfa>
     e40:	89 2f       	mov	r24, r25
     e42:	80 53       	subi	r24, 0x30	; 48
     e44:	8a 30       	cpi	r24, 0x0A	; 10
     e46:	70 f4       	brcc	.+28     	; 0xe64 <vfprintf+0xcc>
     e48:	f6 fe       	sbrs	r15, 6
     e4a:	05 c0       	rjmp	.+10     	; 0xe56 <vfprintf+0xbe>
     e4c:	98 9c       	mul	r9, r8
     e4e:	90 2c       	mov	r9, r0
     e50:	11 24       	eor	r1, r1
     e52:	98 0e       	add	r9, r24
     e54:	15 c0       	rjmp	.+42     	; 0xe80 <vfprintf+0xe8>
     e56:	e8 9c       	mul	r14, r8
     e58:	e0 2c       	mov	r14, r0
     e5a:	11 24       	eor	r1, r1
     e5c:	e8 0e       	add	r14, r24
     e5e:	f0 e2       	ldi	r31, 0x20	; 32
     e60:	ff 2a       	or	r15, r31
     e62:	0e c0       	rjmp	.+28     	; 0xe80 <vfprintf+0xe8>
     e64:	9e 32       	cpi	r25, 0x2E	; 46
     e66:	29 f4       	brne	.+10     	; 0xe72 <vfprintf+0xda>
     e68:	f6 fc       	sbrc	r15, 6
     e6a:	6b c1       	rjmp	.+726    	; 0x1142 <vfprintf+0x3aa>
     e6c:	40 e4       	ldi	r20, 0x40	; 64
     e6e:	f4 2a       	or	r15, r20
     e70:	07 c0       	rjmp	.+14     	; 0xe80 <vfprintf+0xe8>
     e72:	9c 36       	cpi	r25, 0x6C	; 108
     e74:	19 f4       	brne	.+6      	; 0xe7c <vfprintf+0xe4>
     e76:	50 e8       	ldi	r21, 0x80	; 128
     e78:	f5 2a       	or	r15, r21
     e7a:	02 c0       	rjmp	.+4      	; 0xe80 <vfprintf+0xe8>
     e7c:	98 36       	cpi	r25, 0x68	; 104
     e7e:	49 f4       	brne	.+18     	; 0xe92 <vfprintf+0xfa>
     e80:	f2 01       	movw	r30, r4
     e82:	23 fd       	sbrc	r18, 3
     e84:	95 91       	lpm	r25, Z+
     e86:	23 ff       	sbrs	r18, 3
     e88:	91 91       	ld	r25, Z+
     e8a:	2f 01       	movw	r4, r30
     e8c:	99 23       	and	r25, r25
     e8e:	09 f0       	breq	.+2      	; 0xe92 <vfprintf+0xfa>
     e90:	b8 cf       	rjmp	.-144    	; 0xe02 <vfprintf+0x6a>
     e92:	89 2f       	mov	r24, r25
     e94:	85 54       	subi	r24, 0x45	; 69
     e96:	83 30       	cpi	r24, 0x03	; 3
     e98:	18 f0       	brcs	.+6      	; 0xea0 <vfprintf+0x108>
     e9a:	80 52       	subi	r24, 0x20	; 32
     e9c:	83 30       	cpi	r24, 0x03	; 3
     e9e:	38 f4       	brcc	.+14     	; 0xeae <vfprintf+0x116>
     ea0:	44 e0       	ldi	r20, 0x04	; 4
     ea2:	50 e0       	ldi	r21, 0x00	; 0
     ea4:	a4 0e       	add	r10, r20
     ea6:	b5 1e       	adc	r11, r21
     ea8:	5f e3       	ldi	r21, 0x3F	; 63
     eaa:	59 83       	std	Y+1, r21	; 0x01
     eac:	0f c0       	rjmp	.+30     	; 0xecc <vfprintf+0x134>
     eae:	93 36       	cpi	r25, 0x63	; 99
     eb0:	31 f0       	breq	.+12     	; 0xebe <vfprintf+0x126>
     eb2:	93 37       	cpi	r25, 0x73	; 115
     eb4:	79 f0       	breq	.+30     	; 0xed4 <vfprintf+0x13c>
     eb6:	93 35       	cpi	r25, 0x53	; 83
     eb8:	09 f0       	breq	.+2      	; 0xebc <vfprintf+0x124>
     eba:	56 c0       	rjmp	.+172    	; 0xf68 <vfprintf+0x1d0>
     ebc:	20 c0       	rjmp	.+64     	; 0xefe <vfprintf+0x166>
     ebe:	f5 01       	movw	r30, r10
     ec0:	80 81       	ld	r24, Z
     ec2:	89 83       	std	Y+1, r24	; 0x01
     ec4:	42 e0       	ldi	r20, 0x02	; 2
     ec6:	50 e0       	ldi	r21, 0x00	; 0
     ec8:	a4 0e       	add	r10, r20
     eca:	b5 1e       	adc	r11, r21
     ecc:	61 01       	movw	r12, r2
     ece:	01 e0       	ldi	r16, 0x01	; 1
     ed0:	10 e0       	ldi	r17, 0x00	; 0
     ed2:	12 c0       	rjmp	.+36     	; 0xef8 <vfprintf+0x160>
     ed4:	f5 01       	movw	r30, r10
     ed6:	c0 80       	ld	r12, Z
     ed8:	d1 80       	ldd	r13, Z+1	; 0x01
     eda:	f6 fc       	sbrc	r15, 6
     edc:	03 c0       	rjmp	.+6      	; 0xee4 <vfprintf+0x14c>
     ede:	6f ef       	ldi	r22, 0xFF	; 255
     ee0:	7f ef       	ldi	r23, 0xFF	; 255
     ee2:	02 c0       	rjmp	.+4      	; 0xee8 <vfprintf+0x150>
     ee4:	69 2d       	mov	r22, r9
     ee6:	70 e0       	ldi	r23, 0x00	; 0
     ee8:	42 e0       	ldi	r20, 0x02	; 2
     eea:	50 e0       	ldi	r21, 0x00	; 0
     eec:	a4 0e       	add	r10, r20
     eee:	b5 1e       	adc	r11, r21
     ef0:	c6 01       	movw	r24, r12
     ef2:	0e 94 b4 08 	call	0x1168	; 0x1168 <strnlen>
     ef6:	8c 01       	movw	r16, r24
     ef8:	5f e7       	ldi	r21, 0x7F	; 127
     efa:	f5 22       	and	r15, r21
     efc:	14 c0       	rjmp	.+40     	; 0xf26 <vfprintf+0x18e>
     efe:	f5 01       	movw	r30, r10
     f00:	c0 80       	ld	r12, Z
     f02:	d1 80       	ldd	r13, Z+1	; 0x01
     f04:	f6 fc       	sbrc	r15, 6
     f06:	03 c0       	rjmp	.+6      	; 0xf0e <vfprintf+0x176>
     f08:	6f ef       	ldi	r22, 0xFF	; 255
     f0a:	7f ef       	ldi	r23, 0xFF	; 255
     f0c:	02 c0       	rjmp	.+4      	; 0xf12 <vfprintf+0x17a>
     f0e:	69 2d       	mov	r22, r9
     f10:	70 e0       	ldi	r23, 0x00	; 0
     f12:	42 e0       	ldi	r20, 0x02	; 2
     f14:	50 e0       	ldi	r21, 0x00	; 0
     f16:	a4 0e       	add	r10, r20
     f18:	b5 1e       	adc	r11, r21
     f1a:	c6 01       	movw	r24, r12
     f1c:	0e 94 a9 08 	call	0x1152	; 0x1152 <strnlen_P>
     f20:	8c 01       	movw	r16, r24
     f22:	50 e8       	ldi	r21, 0x80	; 128
     f24:	f5 2a       	or	r15, r21
     f26:	f3 fe       	sbrs	r15, 3
     f28:	07 c0       	rjmp	.+14     	; 0xf38 <vfprintf+0x1a0>
     f2a:	1a c0       	rjmp	.+52     	; 0xf60 <vfprintf+0x1c8>
     f2c:	80 e2       	ldi	r24, 0x20	; 32
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	b3 01       	movw	r22, r6
     f32:	0e 94 bf 08 	call	0x117e	; 0x117e <fputc>
     f36:	ea 94       	dec	r14
     f38:	8e 2d       	mov	r24, r14
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	08 17       	cp	r16, r24
     f3e:	19 07       	cpc	r17, r25
     f40:	a8 f3       	brcs	.-22     	; 0xf2c <vfprintf+0x194>
     f42:	0e c0       	rjmp	.+28     	; 0xf60 <vfprintf+0x1c8>
     f44:	f6 01       	movw	r30, r12
     f46:	f7 fc       	sbrc	r15, 7
     f48:	85 91       	lpm	r24, Z+
     f4a:	f7 fe       	sbrs	r15, 7
     f4c:	81 91       	ld	r24, Z+
     f4e:	6f 01       	movw	r12, r30
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	b3 01       	movw	r22, r6
     f54:	0e 94 bf 08 	call	0x117e	; 0x117e <fputc>
     f58:	e1 10       	cpse	r14, r1
     f5a:	ea 94       	dec	r14
     f5c:	01 50       	subi	r16, 0x01	; 1
     f5e:	10 40       	sbci	r17, 0x00	; 0
     f60:	01 15       	cp	r16, r1
     f62:	11 05       	cpc	r17, r1
     f64:	79 f7       	brne	.-34     	; 0xf44 <vfprintf+0x1ac>
     f66:	ea c0       	rjmp	.+468    	; 0x113c <vfprintf+0x3a4>
     f68:	94 36       	cpi	r25, 0x64	; 100
     f6a:	11 f0       	breq	.+4      	; 0xf70 <vfprintf+0x1d8>
     f6c:	99 36       	cpi	r25, 0x69	; 105
     f6e:	69 f5       	brne	.+90     	; 0xfca <vfprintf+0x232>
     f70:	f7 fe       	sbrs	r15, 7
     f72:	08 c0       	rjmp	.+16     	; 0xf84 <vfprintf+0x1ec>
     f74:	f5 01       	movw	r30, r10
     f76:	20 81       	ld	r18, Z
     f78:	31 81       	ldd	r19, Z+1	; 0x01
     f7a:	42 81       	ldd	r20, Z+2	; 0x02
     f7c:	53 81       	ldd	r21, Z+3	; 0x03
     f7e:	84 e0       	ldi	r24, 0x04	; 4
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	0a c0       	rjmp	.+20     	; 0xf98 <vfprintf+0x200>
     f84:	f5 01       	movw	r30, r10
     f86:	80 81       	ld	r24, Z
     f88:	91 81       	ldd	r25, Z+1	; 0x01
     f8a:	9c 01       	movw	r18, r24
     f8c:	44 27       	eor	r20, r20
     f8e:	37 fd       	sbrc	r19, 7
     f90:	40 95       	com	r20
     f92:	54 2f       	mov	r21, r20
     f94:	82 e0       	ldi	r24, 0x02	; 2
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	a8 0e       	add	r10, r24
     f9a:	b9 1e       	adc	r11, r25
     f9c:	9f e6       	ldi	r25, 0x6F	; 111
     f9e:	f9 22       	and	r15, r25
     fa0:	57 ff       	sbrs	r21, 7
     fa2:	09 c0       	rjmp	.+18     	; 0xfb6 <vfprintf+0x21e>
     fa4:	50 95       	com	r21
     fa6:	40 95       	com	r20
     fa8:	30 95       	com	r19
     faa:	21 95       	neg	r18
     fac:	3f 4f       	sbci	r19, 0xFF	; 255
     fae:	4f 4f       	sbci	r20, 0xFF	; 255
     fb0:	5f 4f       	sbci	r21, 0xFF	; 255
     fb2:	e0 e8       	ldi	r30, 0x80	; 128
     fb4:	fe 2a       	or	r15, r30
     fb6:	ca 01       	movw	r24, r20
     fb8:	b9 01       	movw	r22, r18
     fba:	a1 01       	movw	r20, r2
     fbc:	2a e0       	ldi	r18, 0x0A	; 10
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <__ultoa_invert>
     fc4:	d8 2e       	mov	r13, r24
     fc6:	d2 18       	sub	r13, r2
     fc8:	40 c0       	rjmp	.+128    	; 0x104a <vfprintf+0x2b2>
     fca:	95 37       	cpi	r25, 0x75	; 117
     fcc:	29 f4       	brne	.+10     	; 0xfd8 <vfprintf+0x240>
     fce:	1f 2d       	mov	r17, r15
     fd0:	1f 7e       	andi	r17, 0xEF	; 239
     fd2:	2a e0       	ldi	r18, 0x0A	; 10
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	1d c0       	rjmp	.+58     	; 0x1012 <vfprintf+0x27a>
     fd8:	1f 2d       	mov	r17, r15
     fda:	19 7f       	andi	r17, 0xF9	; 249
     fdc:	9f 36       	cpi	r25, 0x6F	; 111
     fde:	61 f0       	breq	.+24     	; 0xff8 <vfprintf+0x260>
     fe0:	90 37       	cpi	r25, 0x70	; 112
     fe2:	20 f4       	brcc	.+8      	; 0xfec <vfprintf+0x254>
     fe4:	98 35       	cpi	r25, 0x58	; 88
     fe6:	09 f0       	breq	.+2      	; 0xfea <vfprintf+0x252>
     fe8:	ac c0       	rjmp	.+344    	; 0x1142 <vfprintf+0x3aa>
     fea:	0f c0       	rjmp	.+30     	; 0x100a <vfprintf+0x272>
     fec:	90 37       	cpi	r25, 0x70	; 112
     fee:	39 f0       	breq	.+14     	; 0xffe <vfprintf+0x266>
     ff0:	98 37       	cpi	r25, 0x78	; 120
     ff2:	09 f0       	breq	.+2      	; 0xff6 <vfprintf+0x25e>
     ff4:	a6 c0       	rjmp	.+332    	; 0x1142 <vfprintf+0x3aa>
     ff6:	04 c0       	rjmp	.+8      	; 0x1000 <vfprintf+0x268>
     ff8:	28 e0       	ldi	r18, 0x08	; 8
     ffa:	30 e0       	ldi	r19, 0x00	; 0
     ffc:	0a c0       	rjmp	.+20     	; 0x1012 <vfprintf+0x27a>
     ffe:	10 61       	ori	r17, 0x10	; 16
    1000:	14 fd       	sbrc	r17, 4
    1002:	14 60       	ori	r17, 0x04	; 4
    1004:	20 e1       	ldi	r18, 0x10	; 16
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	04 c0       	rjmp	.+8      	; 0x1012 <vfprintf+0x27a>
    100a:	14 fd       	sbrc	r17, 4
    100c:	16 60       	ori	r17, 0x06	; 6
    100e:	20 e1       	ldi	r18, 0x10	; 16
    1010:	32 e0       	ldi	r19, 0x02	; 2
    1012:	17 ff       	sbrs	r17, 7
    1014:	08 c0       	rjmp	.+16     	; 0x1026 <vfprintf+0x28e>
    1016:	f5 01       	movw	r30, r10
    1018:	60 81       	ld	r22, Z
    101a:	71 81       	ldd	r23, Z+1	; 0x01
    101c:	82 81       	ldd	r24, Z+2	; 0x02
    101e:	93 81       	ldd	r25, Z+3	; 0x03
    1020:	44 e0       	ldi	r20, 0x04	; 4
    1022:	50 e0       	ldi	r21, 0x00	; 0
    1024:	08 c0       	rjmp	.+16     	; 0x1036 <vfprintf+0x29e>
    1026:	f5 01       	movw	r30, r10
    1028:	80 81       	ld	r24, Z
    102a:	91 81       	ldd	r25, Z+1	; 0x01
    102c:	bc 01       	movw	r22, r24
    102e:	80 e0       	ldi	r24, 0x00	; 0
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	42 e0       	ldi	r20, 0x02	; 2
    1034:	50 e0       	ldi	r21, 0x00	; 0
    1036:	a4 0e       	add	r10, r20
    1038:	b5 1e       	adc	r11, r21
    103a:	a1 01       	movw	r20, r2
    103c:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <__ultoa_invert>
    1040:	d8 2e       	mov	r13, r24
    1042:	d2 18       	sub	r13, r2
    1044:	8f e7       	ldi	r24, 0x7F	; 127
    1046:	f8 2e       	mov	r15, r24
    1048:	f1 22       	and	r15, r17
    104a:	f6 fe       	sbrs	r15, 6
    104c:	0b c0       	rjmp	.+22     	; 0x1064 <vfprintf+0x2cc>
    104e:	5e ef       	ldi	r21, 0xFE	; 254
    1050:	f5 22       	and	r15, r21
    1052:	d9 14       	cp	r13, r9
    1054:	38 f4       	brcc	.+14     	; 0x1064 <vfprintf+0x2cc>
    1056:	f4 fe       	sbrs	r15, 4
    1058:	07 c0       	rjmp	.+14     	; 0x1068 <vfprintf+0x2d0>
    105a:	f2 fc       	sbrc	r15, 2
    105c:	05 c0       	rjmp	.+10     	; 0x1068 <vfprintf+0x2d0>
    105e:	8f ee       	ldi	r24, 0xEF	; 239
    1060:	f8 22       	and	r15, r24
    1062:	02 c0       	rjmp	.+4      	; 0x1068 <vfprintf+0x2d0>
    1064:	1d 2d       	mov	r17, r13
    1066:	01 c0       	rjmp	.+2      	; 0x106a <vfprintf+0x2d2>
    1068:	19 2d       	mov	r17, r9
    106a:	f4 fe       	sbrs	r15, 4
    106c:	0d c0       	rjmp	.+26     	; 0x1088 <vfprintf+0x2f0>
    106e:	fe 01       	movw	r30, r28
    1070:	ed 0d       	add	r30, r13
    1072:	f1 1d       	adc	r31, r1
    1074:	80 81       	ld	r24, Z
    1076:	80 33       	cpi	r24, 0x30	; 48
    1078:	19 f4       	brne	.+6      	; 0x1080 <vfprintf+0x2e8>
    107a:	99 ee       	ldi	r25, 0xE9	; 233
    107c:	f9 22       	and	r15, r25
    107e:	08 c0       	rjmp	.+16     	; 0x1090 <vfprintf+0x2f8>
    1080:	1f 5f       	subi	r17, 0xFF	; 255
    1082:	f2 fe       	sbrs	r15, 2
    1084:	05 c0       	rjmp	.+10     	; 0x1090 <vfprintf+0x2f8>
    1086:	03 c0       	rjmp	.+6      	; 0x108e <vfprintf+0x2f6>
    1088:	8f 2d       	mov	r24, r15
    108a:	86 78       	andi	r24, 0x86	; 134
    108c:	09 f0       	breq	.+2      	; 0x1090 <vfprintf+0x2f8>
    108e:	1f 5f       	subi	r17, 0xFF	; 255
    1090:	0f 2d       	mov	r16, r15
    1092:	f3 fc       	sbrc	r15, 3
    1094:	14 c0       	rjmp	.+40     	; 0x10be <vfprintf+0x326>
    1096:	f0 fe       	sbrs	r15, 0
    1098:	0f c0       	rjmp	.+30     	; 0x10b8 <vfprintf+0x320>
    109a:	1e 15       	cp	r17, r14
    109c:	10 f0       	brcs	.+4      	; 0x10a2 <vfprintf+0x30a>
    109e:	9d 2c       	mov	r9, r13
    10a0:	0b c0       	rjmp	.+22     	; 0x10b8 <vfprintf+0x320>
    10a2:	9d 2c       	mov	r9, r13
    10a4:	9e 0c       	add	r9, r14
    10a6:	91 1a       	sub	r9, r17
    10a8:	1e 2d       	mov	r17, r14
    10aa:	06 c0       	rjmp	.+12     	; 0x10b8 <vfprintf+0x320>
    10ac:	80 e2       	ldi	r24, 0x20	; 32
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	b3 01       	movw	r22, r6
    10b2:	0e 94 bf 08 	call	0x117e	; 0x117e <fputc>
    10b6:	1f 5f       	subi	r17, 0xFF	; 255
    10b8:	1e 15       	cp	r17, r14
    10ba:	c0 f3       	brcs	.-16     	; 0x10ac <vfprintf+0x314>
    10bc:	04 c0       	rjmp	.+8      	; 0x10c6 <vfprintf+0x32e>
    10be:	1e 15       	cp	r17, r14
    10c0:	10 f4       	brcc	.+4      	; 0x10c6 <vfprintf+0x32e>
    10c2:	e1 1a       	sub	r14, r17
    10c4:	01 c0       	rjmp	.+2      	; 0x10c8 <vfprintf+0x330>
    10c6:	ee 24       	eor	r14, r14
    10c8:	04 ff       	sbrs	r16, 4
    10ca:	0f c0       	rjmp	.+30     	; 0x10ea <vfprintf+0x352>
    10cc:	80 e3       	ldi	r24, 0x30	; 48
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	b3 01       	movw	r22, r6
    10d2:	0e 94 bf 08 	call	0x117e	; 0x117e <fputc>
    10d6:	02 ff       	sbrs	r16, 2
    10d8:	1d c0       	rjmp	.+58     	; 0x1114 <vfprintf+0x37c>
    10da:	01 fd       	sbrc	r16, 1
    10dc:	03 c0       	rjmp	.+6      	; 0x10e4 <vfprintf+0x34c>
    10de:	88 e7       	ldi	r24, 0x78	; 120
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	0e c0       	rjmp	.+28     	; 0x1100 <vfprintf+0x368>
    10e4:	88 e5       	ldi	r24, 0x58	; 88
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	0b c0       	rjmp	.+22     	; 0x1100 <vfprintf+0x368>
    10ea:	80 2f       	mov	r24, r16
    10ec:	86 78       	andi	r24, 0x86	; 134
    10ee:	91 f0       	breq	.+36     	; 0x1114 <vfprintf+0x37c>
    10f0:	01 ff       	sbrs	r16, 1
    10f2:	02 c0       	rjmp	.+4      	; 0x10f8 <vfprintf+0x360>
    10f4:	8b e2       	ldi	r24, 0x2B	; 43
    10f6:	01 c0       	rjmp	.+2      	; 0x10fa <vfprintf+0x362>
    10f8:	80 e2       	ldi	r24, 0x20	; 32
    10fa:	f7 fc       	sbrc	r15, 7
    10fc:	8d e2       	ldi	r24, 0x2D	; 45
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	b3 01       	movw	r22, r6
    1102:	0e 94 bf 08 	call	0x117e	; 0x117e <fputc>
    1106:	06 c0       	rjmp	.+12     	; 0x1114 <vfprintf+0x37c>
    1108:	80 e3       	ldi	r24, 0x30	; 48
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	b3 01       	movw	r22, r6
    110e:	0e 94 bf 08 	call	0x117e	; 0x117e <fputc>
    1112:	9a 94       	dec	r9
    1114:	d9 14       	cp	r13, r9
    1116:	c0 f3       	brcs	.-16     	; 0x1108 <vfprintf+0x370>
    1118:	da 94       	dec	r13
    111a:	f1 01       	movw	r30, r2
    111c:	ed 0d       	add	r30, r13
    111e:	f1 1d       	adc	r31, r1
    1120:	80 81       	ld	r24, Z
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	b3 01       	movw	r22, r6
    1126:	0e 94 bf 08 	call	0x117e	; 0x117e <fputc>
    112a:	dd 20       	and	r13, r13
    112c:	a9 f7       	brne	.-22     	; 0x1118 <vfprintf+0x380>
    112e:	06 c0       	rjmp	.+12     	; 0x113c <vfprintf+0x3a4>
    1130:	80 e2       	ldi	r24, 0x20	; 32
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	b3 01       	movw	r22, r6
    1136:	0e 94 bf 08 	call	0x117e	; 0x117e <fputc>
    113a:	ea 94       	dec	r14
    113c:	ee 20       	and	r14, r14
    113e:	c1 f7       	brne	.-16     	; 0x1130 <vfprintf+0x398>
    1140:	43 ce       	rjmp	.-890    	; 0xdc8 <vfprintf+0x30>
    1142:	f3 01       	movw	r30, r6
    1144:	66 81       	ldd	r22, Z+6	; 0x06
    1146:	77 81       	ldd	r23, Z+7	; 0x07
    1148:	cb 01       	movw	r24, r22
    114a:	2b 96       	adiw	r28, 0x0b	; 11
    114c:	e2 e1       	ldi	r30, 0x12	; 18
    114e:	0c 94 65 09 	jmp	0x12ca	; 0x12ca <__epilogue_restores__>

00001152 <strnlen_P>:
    1152:	fc 01       	movw	r30, r24
    1154:	05 90       	lpm	r0, Z+
    1156:	61 50       	subi	r22, 0x01	; 1
    1158:	70 40       	sbci	r23, 0x00	; 0
    115a:	01 10       	cpse	r0, r1
    115c:	d8 f7       	brcc	.-10     	; 0x1154 <strnlen_P+0x2>
    115e:	80 95       	com	r24
    1160:	90 95       	com	r25
    1162:	8e 0f       	add	r24, r30
    1164:	9f 1f       	adc	r25, r31
    1166:	08 95       	ret

00001168 <strnlen>:
    1168:	fc 01       	movw	r30, r24
    116a:	61 50       	subi	r22, 0x01	; 1
    116c:	70 40       	sbci	r23, 0x00	; 0
    116e:	01 90       	ld	r0, Z+
    1170:	01 10       	cpse	r0, r1
    1172:	d8 f7       	brcc	.-10     	; 0x116a <strnlen+0x2>
    1174:	80 95       	com	r24
    1176:	90 95       	com	r25
    1178:	8e 0f       	add	r24, r30
    117a:	9f 1f       	adc	r25, r31
    117c:	08 95       	ret

0000117e <fputc>:
    117e:	0f 93       	push	r16
    1180:	1f 93       	push	r17
    1182:	cf 93       	push	r28
    1184:	df 93       	push	r29
    1186:	8c 01       	movw	r16, r24
    1188:	eb 01       	movw	r28, r22
    118a:	8b 81       	ldd	r24, Y+3	; 0x03
    118c:	81 ff       	sbrs	r24, 1
    118e:	1b c0       	rjmp	.+54     	; 0x11c6 <fputc+0x48>
    1190:	82 ff       	sbrs	r24, 2
    1192:	0d c0       	rjmp	.+26     	; 0x11ae <fputc+0x30>
    1194:	2e 81       	ldd	r18, Y+6	; 0x06
    1196:	3f 81       	ldd	r19, Y+7	; 0x07
    1198:	8c 81       	ldd	r24, Y+4	; 0x04
    119a:	9d 81       	ldd	r25, Y+5	; 0x05
    119c:	28 17       	cp	r18, r24
    119e:	39 07       	cpc	r19, r25
    11a0:	64 f4       	brge	.+24     	; 0x11ba <fputc+0x3c>
    11a2:	e8 81       	ld	r30, Y
    11a4:	f9 81       	ldd	r31, Y+1	; 0x01
    11a6:	01 93       	st	Z+, r16
    11a8:	f9 83       	std	Y+1, r31	; 0x01
    11aa:	e8 83       	st	Y, r30
    11ac:	06 c0       	rjmp	.+12     	; 0x11ba <fputc+0x3c>
    11ae:	e8 85       	ldd	r30, Y+8	; 0x08
    11b0:	f9 85       	ldd	r31, Y+9	; 0x09
    11b2:	80 2f       	mov	r24, r16
    11b4:	09 95       	icall
    11b6:	89 2b       	or	r24, r25
    11b8:	31 f4       	brne	.+12     	; 0x11c6 <fputc+0x48>
    11ba:	8e 81       	ldd	r24, Y+6	; 0x06
    11bc:	9f 81       	ldd	r25, Y+7	; 0x07
    11be:	01 96       	adiw	r24, 0x01	; 1
    11c0:	9f 83       	std	Y+7, r25	; 0x07
    11c2:	8e 83       	std	Y+6, r24	; 0x06
    11c4:	02 c0       	rjmp	.+4      	; 0x11ca <fputc+0x4c>
    11c6:	0f ef       	ldi	r16, 0xFF	; 255
    11c8:	1f ef       	ldi	r17, 0xFF	; 255
    11ca:	c8 01       	movw	r24, r16
    11cc:	df 91       	pop	r29
    11ce:	cf 91       	pop	r28
    11d0:	1f 91       	pop	r17
    11d2:	0f 91       	pop	r16
    11d4:	08 95       	ret

000011d6 <__ultoa_invert>:
    11d6:	fa 01       	movw	r30, r20
    11d8:	aa 27       	eor	r26, r26
    11da:	28 30       	cpi	r18, 0x08	; 8
    11dc:	51 f1       	breq	.+84     	; 0x1232 <__ultoa_invert+0x5c>
    11de:	20 31       	cpi	r18, 0x10	; 16
    11e0:	81 f1       	breq	.+96     	; 0x1242 <__ultoa_invert+0x6c>
    11e2:	e8 94       	clt
    11e4:	6f 93       	push	r22
    11e6:	6e 7f       	andi	r22, 0xFE	; 254
    11e8:	6e 5f       	subi	r22, 0xFE	; 254
    11ea:	7f 4f       	sbci	r23, 0xFF	; 255
    11ec:	8f 4f       	sbci	r24, 0xFF	; 255
    11ee:	9f 4f       	sbci	r25, 0xFF	; 255
    11f0:	af 4f       	sbci	r26, 0xFF	; 255
    11f2:	b1 e0       	ldi	r27, 0x01	; 1
    11f4:	3e d0       	rcall	.+124    	; 0x1272 <__ultoa_invert+0x9c>
    11f6:	b4 e0       	ldi	r27, 0x04	; 4
    11f8:	3c d0       	rcall	.+120    	; 0x1272 <__ultoa_invert+0x9c>
    11fa:	67 0f       	add	r22, r23
    11fc:	78 1f       	adc	r23, r24
    11fe:	89 1f       	adc	r24, r25
    1200:	9a 1f       	adc	r25, r26
    1202:	a1 1d       	adc	r26, r1
    1204:	68 0f       	add	r22, r24
    1206:	79 1f       	adc	r23, r25
    1208:	8a 1f       	adc	r24, r26
    120a:	91 1d       	adc	r25, r1
    120c:	a1 1d       	adc	r26, r1
    120e:	6a 0f       	add	r22, r26
    1210:	71 1d       	adc	r23, r1
    1212:	81 1d       	adc	r24, r1
    1214:	91 1d       	adc	r25, r1
    1216:	a1 1d       	adc	r26, r1
    1218:	20 d0       	rcall	.+64     	; 0x125a <__ultoa_invert+0x84>
    121a:	09 f4       	brne	.+2      	; 0x121e <__ultoa_invert+0x48>
    121c:	68 94       	set
    121e:	3f 91       	pop	r19
    1220:	2a e0       	ldi	r18, 0x0A	; 10
    1222:	26 9f       	mul	r18, r22
    1224:	11 24       	eor	r1, r1
    1226:	30 19       	sub	r19, r0
    1228:	30 5d       	subi	r19, 0xD0	; 208
    122a:	31 93       	st	Z+, r19
    122c:	de f6       	brtc	.-74     	; 0x11e4 <__ultoa_invert+0xe>
    122e:	cf 01       	movw	r24, r30
    1230:	08 95       	ret
    1232:	46 2f       	mov	r20, r22
    1234:	47 70       	andi	r20, 0x07	; 7
    1236:	40 5d       	subi	r20, 0xD0	; 208
    1238:	41 93       	st	Z+, r20
    123a:	b3 e0       	ldi	r27, 0x03	; 3
    123c:	0f d0       	rcall	.+30     	; 0x125c <__ultoa_invert+0x86>
    123e:	c9 f7       	brne	.-14     	; 0x1232 <__ultoa_invert+0x5c>
    1240:	f6 cf       	rjmp	.-20     	; 0x122e <__ultoa_invert+0x58>
    1242:	46 2f       	mov	r20, r22
    1244:	4f 70       	andi	r20, 0x0F	; 15
    1246:	40 5d       	subi	r20, 0xD0	; 208
    1248:	4a 33       	cpi	r20, 0x3A	; 58
    124a:	18 f0       	brcs	.+6      	; 0x1252 <__ultoa_invert+0x7c>
    124c:	49 5d       	subi	r20, 0xD9	; 217
    124e:	31 fd       	sbrc	r19, 1
    1250:	40 52       	subi	r20, 0x20	; 32
    1252:	41 93       	st	Z+, r20
    1254:	02 d0       	rcall	.+4      	; 0x125a <__ultoa_invert+0x84>
    1256:	a9 f7       	brne	.-22     	; 0x1242 <__ultoa_invert+0x6c>
    1258:	ea cf       	rjmp	.-44     	; 0x122e <__ultoa_invert+0x58>
    125a:	b4 e0       	ldi	r27, 0x04	; 4
    125c:	a6 95       	lsr	r26
    125e:	97 95       	ror	r25
    1260:	87 95       	ror	r24
    1262:	77 95       	ror	r23
    1264:	67 95       	ror	r22
    1266:	ba 95       	dec	r27
    1268:	c9 f7       	brne	.-14     	; 0x125c <__ultoa_invert+0x86>
    126a:	00 97       	sbiw	r24, 0x00	; 0
    126c:	61 05       	cpc	r22, r1
    126e:	71 05       	cpc	r23, r1
    1270:	08 95       	ret
    1272:	9b 01       	movw	r18, r22
    1274:	ac 01       	movw	r20, r24
    1276:	0a 2e       	mov	r0, r26
    1278:	06 94       	lsr	r0
    127a:	57 95       	ror	r21
    127c:	47 95       	ror	r20
    127e:	37 95       	ror	r19
    1280:	27 95       	ror	r18
    1282:	ba 95       	dec	r27
    1284:	c9 f7       	brne	.-14     	; 0x1278 <__ultoa_invert+0xa2>
    1286:	62 0f       	add	r22, r18
    1288:	73 1f       	adc	r23, r19
    128a:	84 1f       	adc	r24, r20
    128c:	95 1f       	adc	r25, r21
    128e:	a0 1d       	adc	r26, r0
    1290:	08 95       	ret

00001292 <__prologue_saves__>:
    1292:	2f 92       	push	r2
    1294:	3f 92       	push	r3
    1296:	4f 92       	push	r4
    1298:	5f 92       	push	r5
    129a:	6f 92       	push	r6
    129c:	7f 92       	push	r7
    129e:	8f 92       	push	r8
    12a0:	9f 92       	push	r9
    12a2:	af 92       	push	r10
    12a4:	bf 92       	push	r11
    12a6:	cf 92       	push	r12
    12a8:	df 92       	push	r13
    12aa:	ef 92       	push	r14
    12ac:	ff 92       	push	r15
    12ae:	0f 93       	push	r16
    12b0:	1f 93       	push	r17
    12b2:	cf 93       	push	r28
    12b4:	df 93       	push	r29
    12b6:	cd b7       	in	r28, 0x3d	; 61
    12b8:	de b7       	in	r29, 0x3e	; 62
    12ba:	ca 1b       	sub	r28, r26
    12bc:	db 0b       	sbc	r29, r27
    12be:	0f b6       	in	r0, 0x3f	; 63
    12c0:	f8 94       	cli
    12c2:	de bf       	out	0x3e, r29	; 62
    12c4:	0f be       	out	0x3f, r0	; 63
    12c6:	cd bf       	out	0x3d, r28	; 61
    12c8:	09 94       	ijmp

000012ca <__epilogue_restores__>:
    12ca:	2a 88       	ldd	r2, Y+18	; 0x12
    12cc:	39 88       	ldd	r3, Y+17	; 0x11
    12ce:	48 88       	ldd	r4, Y+16	; 0x10
    12d0:	5f 84       	ldd	r5, Y+15	; 0x0f
    12d2:	6e 84       	ldd	r6, Y+14	; 0x0e
    12d4:	7d 84       	ldd	r7, Y+13	; 0x0d
    12d6:	8c 84       	ldd	r8, Y+12	; 0x0c
    12d8:	9b 84       	ldd	r9, Y+11	; 0x0b
    12da:	aa 84       	ldd	r10, Y+10	; 0x0a
    12dc:	b9 84       	ldd	r11, Y+9	; 0x09
    12de:	c8 84       	ldd	r12, Y+8	; 0x08
    12e0:	df 80       	ldd	r13, Y+7	; 0x07
    12e2:	ee 80       	ldd	r14, Y+6	; 0x06
    12e4:	fd 80       	ldd	r15, Y+5	; 0x05
    12e6:	0c 81       	ldd	r16, Y+4	; 0x04
    12e8:	1b 81       	ldd	r17, Y+3	; 0x03
    12ea:	aa 81       	ldd	r26, Y+2	; 0x02
    12ec:	b9 81       	ldd	r27, Y+1	; 0x01
    12ee:	ce 0f       	add	r28, r30
    12f0:	d1 1d       	adc	r29, r1
    12f2:	0f b6       	in	r0, 0x3f	; 63
    12f4:	f8 94       	cli
    12f6:	de bf       	out	0x3e, r29	; 62
    12f8:	0f be       	out	0x3f, r0	; 63
    12fa:	cd bf       	out	0x3d, r28	; 61
    12fc:	ed 01       	movw	r28, r26
    12fe:	08 95       	ret

00001300 <_exit>:
    1300:	f8 94       	cli

00001302 <__stop_program>:
    1302:	ff cf       	rjmp	.-2      	; 0x1302 <__stop_program>
