
digitalio.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000034  00800100  0000123c  000012d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000123c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d8  00800134  00800134  00001304  2**0
                  ALLOC
  3 .debug_aranges 000002c0  00000000  00000000  00001304  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000e9c  00000000  00000000  000015c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002b15  00000000  00000000  00002460  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000117d  00000000  00000000  00004f75  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001c17  00000000  00000000  000060f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000330  00000000  00000000  00007d0c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000869  00000000  00000000  0000803c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000064e  00000000  00000000  000088a5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 46 04 	jmp	0x88c	; 0x88c <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 76 04 	jmp	0x8ec	; 0x8ec <__vector_20>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ec e3       	ldi	r30, 0x3C	; 60
      7c:	f2 e1       	ldi	r31, 0x12	; 18
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	a4 33       	cpi	r26, 0x34	; 52
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	12 e0       	ldi	r17, 0x02	; 2
      8c:	a4 e3       	ldi	r26, 0x34	; 52
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ac 30       	cpi	r26, 0x0C	; 12
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
      9e:	0c 94 1c 09 	jmp	0x1238	; 0x1238 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#define DIP_PIN5 PC2
#define DIP_PIN6 PC3
#define DIP_PIN7 PC4

int main()
{
      a6:	2f 92       	push	r2
      a8:	3f 92       	push	r3
      aa:	5f 92       	push	r5
      ac:	6f 92       	push	r6
      ae:	7f 92       	push	r7
      b0:	8f 92       	push	r8
      b2:	9f 92       	push	r9
      b4:	af 92       	push	r10
      b6:	bf 92       	push	r11
      b8:	cf 92       	push	r12
      ba:	df 92       	push	r13
      bc:	ef 92       	push	r14
      be:	ff 92       	push	r15
      c0:	0f 93       	push	r16
      c2:	1f 93       	push	r17
      c4:	cf 93       	push	r28
      c6:	df 93       	push	r29
	port_pin_mode(PORTD,PD7,OUTPUT);
	port_pin_mode(PORTB,PB0,OUTPUT);
	port_pin_mode(PORTB,PB1,OUTPUT);
*/

	port_pin_mode(LED0_5_PORT,LED0_PIN,OUTPUT);
      c8:	8b b1       	in	r24, 0x0b	; 11
      ca:	62 e0       	ldi	r22, 0x02	; 2
      cc:	41 e0       	ldi	r20, 0x01	; 1
      ce:	0e 94 67 02 	call	0x4ce	; 0x4ce <port_pin_mode>
	port_pin_mode(LED0_5_PORT,LED1_PIN,OUTPUT);
      d2:	8b b1       	in	r24, 0x0b	; 11
      d4:	63 e0       	ldi	r22, 0x03	; 3
      d6:	41 e0       	ldi	r20, 0x01	; 1
      d8:	0e 94 67 02 	call	0x4ce	; 0x4ce <port_pin_mode>
	port_pin_mode(LED0_5_PORT,LED2_PIN,OUTPUT);
      dc:	8b b1       	in	r24, 0x0b	; 11
      de:	64 e0       	ldi	r22, 0x04	; 4
      e0:	41 e0       	ldi	r20, 0x01	; 1
      e2:	0e 94 67 02 	call	0x4ce	; 0x4ce <port_pin_mode>
	port_pin_mode(LED0_5_PORT,LED3_PIN,OUTPUT);
      e6:	8b b1       	in	r24, 0x0b	; 11
      e8:	65 e0       	ldi	r22, 0x05	; 5
      ea:	41 e0       	ldi	r20, 0x01	; 1
      ec:	0e 94 67 02 	call	0x4ce	; 0x4ce <port_pin_mode>
	port_pin_mode(LED0_5_PORT,LED4_PIN,OUTPUT);
      f0:	8b b1       	in	r24, 0x0b	; 11
      f2:	66 e0       	ldi	r22, 0x06	; 6
      f4:	41 e0       	ldi	r20, 0x01	; 1
      f6:	0e 94 67 02 	call	0x4ce	; 0x4ce <port_pin_mode>
	port_pin_mode(LED0_5_PORT,LED5_PIN,OUTPUT);
      fa:	8b b1       	in	r24, 0x0b	; 11
      fc:	67 e0       	ldi	r22, 0x07	; 7
      fe:	41 e0       	ldi	r20, 0x01	; 1
     100:	0e 94 67 02 	call	0x4ce	; 0x4ce <port_pin_mode>
	port_pin_mode(LED6_7_PORT,LED6_PIN,OUTPUT);
     104:	85 b1       	in	r24, 0x05	; 5
     106:	60 e0       	ldi	r22, 0x00	; 0
     108:	41 e0       	ldi	r20, 0x01	; 1
     10a:	0e 94 67 02 	call	0x4ce	; 0x4ce <port_pin_mode>
	port_pin_mode(LED6_7_PORT,LED7_PIN,OUTPUT);
     10e:	85 b1       	in	r24, 0x05	; 5
     110:	61 e0       	ldi	r22, 0x01	; 1
     112:	41 e0       	ldi	r20, 0x01	; 1
     114:	0e 94 67 02 	call	0x4ce	; 0x4ce <port_pin_mode>
	port_pin_mode(DIP3_7_PORT,DIP_PIN7,INPUT);
*/// BUT THIS IS PORTC - HOW IS PORTC MESSING UP THE OUTPUT ON PB0 AND PB1???
                                             
	// set the pullups
/**/	
	port_pin_activate_pullup(DIP0_2_PORT,DIP_PIN0);
     118:	85 b1       	in	r24, 0x05	; 5
     11a:	62 e0       	ldi	r22, 0x02	; 2
     11c:	0e 94 3c 03 	call	0x678	; 0x678 <port_pin_activate_pullup>
	port_pin_activate_pullup(DIP0_2_PORT,DIP_PIN1);
     120:	85 b1       	in	r24, 0x05	; 5
     122:	63 e0       	ldi	r22, 0x03	; 3
     124:	0e 94 3c 03 	call	0x678	; 0x678 <port_pin_activate_pullup>
	port_pin_activate_pullup(DIP0_2_PORT,DIP_PIN2);
     128:	85 b1       	in	r24, 0x05	; 5
     12a:	64 e0       	ldi	r22, 0x04	; 4
     12c:	0e 94 3c 03 	call	0x678	; 0x678 <port_pin_activate_pullup>
	port_pin_activate_pullup(DIP3_7_PORT,DIP_PIN3);
     130:	88 b1       	in	r24, 0x08	; 8
     132:	60 e0       	ldi	r22, 0x00	; 0
     134:	0e 94 3c 03 	call	0x678	; 0x678 <port_pin_activate_pullup>
	port_pin_activate_pullup(DIP3_7_PORT,DIP_PIN4);
     138:	88 b1       	in	r24, 0x08	; 8
     13a:	61 e0       	ldi	r22, 0x01	; 1
     13c:	0e 94 3c 03 	call	0x678	; 0x678 <port_pin_activate_pullup>
	port_pin_activate_pullup(DIP3_7_PORT,DIP_PIN5);
     140:	88 b1       	in	r24, 0x08	; 8
     142:	62 e0       	ldi	r22, 0x02	; 2
     144:	0e 94 3c 03 	call	0x678	; 0x678 <port_pin_activate_pullup>
	port_pin_activate_pullup(DIP3_7_PORT,DIP_PIN6);
     148:	88 b1       	in	r24, 0x08	; 8
     14a:	63 e0       	ldi	r22, 0x03	; 3
     14c:	0e 94 3c 03 	call	0x678	; 0x678 <port_pin_activate_pullup>
	port_pin_activate_pullup(DIP3_7_PORT,DIP_PIN7);
     150:	88 b1       	in	r24, 0x08	; 8
     152:	64 e0       	ldi	r22, 0x04	; 4
     154:	0e 94 3c 03 	call	0x678	; 0x678 <port_pin_activate_pullup>


	serial_begin(57600);
     158:	60 e0       	ldi	r22, 0x00	; 0
     15a:	71 ee       	ldi	r23, 0xE1	; 225
     15c:	80 e0       	ldi	r24, 0x00	; 0
     15e:	90 e0       	ldi	r25, 0x00	; 0
     160:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <serial_begin>

	serial_out("Digitalio tester 069\n");
     164:	00 d0       	rcall	.+0      	; 0x166 <main+0xc0>
     166:	80 e0       	ldi	r24, 0x00	; 0
     168:	91 e0       	ldi	r25, 0x01	; 1
     16a:	ad b7       	in	r26, 0x3d	; 61
     16c:	be b7       	in	r27, 0x3e	; 62
     16e:	12 96       	adiw	r26, 0x02	; 2
     170:	9c 93       	st	X, r25
     172:	8e 93       	st	-X, r24
     174:	11 97       	sbiw	r26, 0x01	; 1
     176:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <serial_out>
     17a:	22 24       	eor	r2, r2
     17c:	33 24       	eor	r3, r3
     17e:	0f 90       	pop	r0
     180:	0f 90       	pop	r0
delay(1000);
	
*/


		port_pin_write(LED0_5_PORT,LED0_PIN,port_pin_read(DIP0_2_PORT,DIP_PIN0));
     182:	1b b1       	in	r17, 0x0b	; 11
     184:	85 b1       	in	r24, 0x05	; 5
     186:	62 e0       	ldi	r22, 0x02	; 2
     188:	0e 94 c0 02 	call	0x580	; 0x580 <port_pin_read>
     18c:	48 2f       	mov	r20, r24
     18e:	81 2f       	mov	r24, r17
     190:	62 e0       	ldi	r22, 0x02	; 2
     192:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <port_pin_write>
		port_pin_write(LED0_5_PORT,LED1_PIN,port_pin_read(DIP0_2_PORT,DIP_PIN1));
     196:	1b b1       	in	r17, 0x0b	; 11
     198:	85 b1       	in	r24, 0x05	; 5
     19a:	63 e0       	ldi	r22, 0x03	; 3
     19c:	0e 94 c0 02 	call	0x580	; 0x580 <port_pin_read>
     1a0:	48 2f       	mov	r20, r24
     1a2:	81 2f       	mov	r24, r17
     1a4:	63 e0       	ldi	r22, 0x03	; 3
     1a6:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <port_pin_write>
		port_pin_write(LED0_5_PORT,LED2_PIN,port_pin_read(DIP0_2_PORT,DIP_PIN2));
     1aa:	1b b1       	in	r17, 0x0b	; 11
     1ac:	85 b1       	in	r24, 0x05	; 5
     1ae:	64 e0       	ldi	r22, 0x04	; 4
     1b0:	0e 94 c0 02 	call	0x580	; 0x580 <port_pin_read>
     1b4:	48 2f       	mov	r20, r24
     1b6:	81 2f       	mov	r24, r17
     1b8:	64 e0       	ldi	r22, 0x04	; 4
     1ba:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <port_pin_write>
		port_pin_write(LED0_5_PORT,LED3_PIN,port_pin_read(DIP3_7_PORT,DIP_PIN3));
     1be:	1b b1       	in	r17, 0x0b	; 11
     1c0:	88 b1       	in	r24, 0x08	; 8
     1c2:	60 e0       	ldi	r22, 0x00	; 0
     1c4:	0e 94 c0 02 	call	0x580	; 0x580 <port_pin_read>
     1c8:	48 2f       	mov	r20, r24
     1ca:	81 2f       	mov	r24, r17
     1cc:	65 e0       	ldi	r22, 0x05	; 5
     1ce:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <port_pin_write>
		port_pin_write(LED0_5_PORT,LED4_PIN,port_pin_read(DIP3_7_PORT,DIP_PIN4));
     1d2:	1b b1       	in	r17, 0x0b	; 11
     1d4:	88 b1       	in	r24, 0x08	; 8
     1d6:	61 e0       	ldi	r22, 0x01	; 1
     1d8:	0e 94 c0 02 	call	0x580	; 0x580 <port_pin_read>
     1dc:	48 2f       	mov	r20, r24
     1de:	81 2f       	mov	r24, r17
     1e0:	66 e0       	ldi	r22, 0x06	; 6
     1e2:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <port_pin_write>
		port_pin_write(LED0_5_PORT,LED5_PIN,port_pin_read(DIP3_7_PORT,DIP_PIN5));
     1e6:	1b b1       	in	r17, 0x0b	; 11
     1e8:	88 b1       	in	r24, 0x08	; 8
     1ea:	62 e0       	ldi	r22, 0x02	; 2
     1ec:	0e 94 c0 02 	call	0x580	; 0x580 <port_pin_read>
     1f0:	48 2f       	mov	r20, r24
     1f2:	81 2f       	mov	r24, r17
     1f4:	67 e0       	ldi	r22, 0x07	; 7
     1f6:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <port_pin_write>
		port_pin_write(LED6_7_PORT,LED6_PIN,port_pin_read(DIP3_7_PORT,DIP_PIN6));
     1fa:	15 b1       	in	r17, 0x05	; 5
     1fc:	88 b1       	in	r24, 0x08	; 8
     1fe:	63 e0       	ldi	r22, 0x03	; 3
     200:	0e 94 c0 02 	call	0x580	; 0x580 <port_pin_read>
     204:	48 2f       	mov	r20, r24
     206:	81 2f       	mov	r24, r17
     208:	60 e0       	ldi	r22, 0x00	; 0
     20a:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <port_pin_write>
		port_pin_write(LED6_7_PORT,LED7_PIN,port_pin_read(DIP3_7_PORT,DIP_PIN7));
     20e:	15 b1       	in	r17, 0x05	; 5
     210:	88 b1       	in	r24, 0x08	; 8
     212:	64 e0       	ldi	r22, 0x04	; 4
     214:	0e 94 c0 02 	call	0x580	; 0x580 <port_pin_read>
     218:	48 2f       	mov	r20, r24
     21a:	81 2f       	mov	r24, r17
     21c:	61 e0       	ldi	r22, 0x01	; 1
     21e:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <port_pin_write>

		newvalue = (port_pin_read(DIP0_2_PORT,DIP_PIN0)) \
     222:	85 b1       	in	r24, 0x05	; 5
     224:	62 e0       	ldi	r22, 0x02	; 2
     226:	0e 94 c0 02 	call	0x580	; 0x580 <port_pin_read>
     22a:	68 2e       	mov	r6, r24
     22c:	85 b1       	in	r24, 0x05	; 5
     22e:	63 e0       	ldi	r22, 0x03	; 3
     230:	0e 94 c0 02 	call	0x580	; 0x580 <port_pin_read>
     234:	58 2e       	mov	r5, r24
     236:	85 b1       	in	r24, 0x05	; 5
     238:	64 e0       	ldi	r22, 0x04	; 4
     23a:	0e 94 c0 02 	call	0x580	; 0x580 <port_pin_read>
     23e:	a8 2e       	mov	r10, r24
     240:	88 b1       	in	r24, 0x08	; 8
     242:	60 e0       	ldi	r22, 0x00	; 0
     244:	0e 94 c0 02 	call	0x580	; 0x580 <port_pin_read>
     248:	88 2e       	mov	r8, r24
     24a:	88 b1       	in	r24, 0x08	; 8
     24c:	61 e0       	ldi	r22, 0x01	; 1
     24e:	0e 94 c0 02 	call	0x580	; 0x580 <port_pin_read>
     252:	c8 2e       	mov	r12, r24
     254:	88 b1       	in	r24, 0x08	; 8
     256:	62 e0       	ldi	r22, 0x02	; 2
     258:	0e 94 c0 02 	call	0x580	; 0x580 <port_pin_read>
     25c:	e8 2e       	mov	r14, r24
     25e:	88 b1       	in	r24, 0x08	; 8
     260:	63 e0       	ldi	r22, 0x03	; 3
     262:	0e 94 c0 02 	call	0x580	; 0x580 <port_pin_read>
     266:	08 2f       	mov	r16, r24
     268:	88 b1       	in	r24, 0x08	; 8
     26a:	64 e0       	ldi	r22, 0x04	; 4
     26c:	0e 94 c0 02 	call	0x580	; 0x580 <port_pin_read>
     270:	c5 2d       	mov	r28, r5
     272:	dd 27       	eor	r29, r29
     274:	c7 fd       	sbrc	r28, 7
     276:	d0 95       	com	r29
     278:	cc 0f       	add	r28, r28
     27a:	dd 1f       	adc	r29, r29
     27c:	bb 24       	eor	r11, r11
     27e:	a7 fc       	sbrc	r10, 7
     280:	b0 94       	com	r11
     282:	aa 0c       	add	r10, r10
     284:	bb 1c       	adc	r11, r11
     286:	aa 0c       	add	r10, r10
     288:	bb 1c       	adc	r11, r11
     28a:	ca 0d       	add	r28, r10
     28c:	db 1d       	adc	r29, r11
     28e:	77 24       	eor	r7, r7
     290:	67 fc       	sbrc	r6, 7
     292:	70 94       	com	r7
     294:	c6 0d       	add	r28, r6
     296:	d7 1d       	adc	r29, r7
     298:	99 24       	eor	r9, r9
     29a:	87 fc       	sbrc	r8, 7
     29c:	90 94       	com	r9
     29e:	63 e0       	ldi	r22, 0x03	; 3
     2a0:	88 0c       	add	r8, r8
     2a2:	99 1c       	adc	r9, r9
     2a4:	6a 95       	dec	r22
     2a6:	e1 f7       	brne	.-8      	; 0x2a0 <main+0x1fa>
     2a8:	c8 0d       	add	r28, r8
     2aa:	d9 1d       	adc	r29, r9
     2ac:	dd 24       	eor	r13, r13
     2ae:	c7 fc       	sbrc	r12, 7
     2b0:	d0 94       	com	r13
     2b2:	54 e0       	ldi	r21, 0x04	; 4
     2b4:	cc 0c       	add	r12, r12
     2b6:	dd 1c       	adc	r13, r13
     2b8:	5a 95       	dec	r21
     2ba:	e1 f7       	brne	.-8      	; 0x2b4 <main+0x20e>
     2bc:	cc 0d       	add	r28, r12
     2be:	dd 1d       	adc	r29, r13
     2c0:	ff 24       	eor	r15, r15
     2c2:	e7 fc       	sbrc	r14, 7
     2c4:	f0 94       	com	r15
     2c6:	45 e0       	ldi	r20, 0x05	; 5
     2c8:	ee 0c       	add	r14, r14
     2ca:	ff 1c       	adc	r15, r15
     2cc:	4a 95       	dec	r20
     2ce:	e1 f7       	brne	.-8      	; 0x2c8 <main+0x222>
     2d0:	ce 0d       	add	r28, r14
     2d2:	df 1d       	adc	r29, r15
     2d4:	11 27       	eor	r17, r17
     2d6:	07 fd       	sbrc	r16, 7
     2d8:	10 95       	com	r17
     2da:	36 e0       	ldi	r19, 0x06	; 6
     2dc:	00 0f       	add	r16, r16
     2de:	11 1f       	adc	r17, r17
     2e0:	3a 95       	dec	r19
     2e2:	e1 f7       	brne	.-8      	; 0x2dc <main+0x236>
     2e4:	c0 0f       	add	r28, r16
     2e6:	d1 1f       	adc	r29, r17
     2e8:	99 27       	eor	r25, r25
     2ea:	87 fd       	sbrc	r24, 7
     2ec:	90 95       	com	r25
     2ee:	96 95       	lsr	r25
     2f0:	98 2f       	mov	r25, r24
     2f2:	88 27       	eor	r24, r24
     2f4:	97 95       	ror	r25
     2f6:	87 95       	ror	r24
     2f8:	c8 0f       	add	r28, r24
     2fa:	d9 1f       	adc	r29, r25
				 + (port_pin_read(DIP3_7_PORT,DIP_PIN3) << 3) \
				 + (port_pin_read(DIP3_7_PORT,DIP_PIN4) << 4) \
				 + (port_pin_read(DIP3_7_PORT,DIP_PIN5) << 5) \
				 + (port_pin_read(DIP3_7_PORT,DIP_PIN6) << 6) \
				 + (port_pin_read(DIP3_7_PORT,DIP_PIN7) << 7);
		if(newvalue != oldvalue)
     2fc:	c2 15       	cp	r28, r2
     2fe:	d3 05       	cpc	r29, r3
     300:	09 f4       	brne	.+2      	; 0x304 <main+0x25e>
     302:	3f cf       	rjmp	.-386    	; 0x182 <main+0xdc>
		{
			serial_out("DIP 8-bits: %x\n", newvalue);	
     304:	00 d0       	rcall	.+0      	; 0x306 <main+0x260>
     306:	00 d0       	rcall	.+0      	; 0x308 <main+0x262>
     308:	ed b7       	in	r30, 0x3d	; 61
     30a:	fe b7       	in	r31, 0x3e	; 62
     30c:	31 96       	adiw	r30, 0x01	; 1
     30e:	86 e1       	ldi	r24, 0x16	; 22
     310:	91 e0       	ldi	r25, 0x01	; 1
     312:	ad b7       	in	r26, 0x3d	; 61
     314:	be b7       	in	r27, 0x3e	; 62
     316:	12 96       	adiw	r26, 0x02	; 2
     318:	9c 93       	st	X, r25
     31a:	8e 93       	st	-X, r24
     31c:	11 97       	sbiw	r26, 0x01	; 1
     31e:	c2 83       	std	Z+2, r28	; 0x02
     320:	d3 83       	std	Z+3, r29	; 0x03
     322:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <serial_out>
     326:	1e 01       	movw	r2, r28
     328:	0f 90       	pop	r0
     32a:	0f 90       	pop	r0
     32c:	0f 90       	pop	r0
     32e:	0f 90       	pop	r0
     330:	28 cf       	rjmp	.-432    	; 0x182 <main+0xdc>

00000332 <pin_mode>:
 // please contact me with details so that I may correct the situation. 

#include "digitalio.h"

int8_t pin_mode(uint8_t pin, uint8_t mode)
{
     332:	38 2f       	mov	r19, r24
	{
		return(-1); // return ERROR
	}
#elif defined (__AVR_ATmega328__) || defined (__AVR_ATmega328P__) 
	// Use Arduino numbering
	if( pin <= 7 ) // matches bit for PORTD 
     334:	88 30       	cpi	r24, 0x08	; 8
     336:	c8 f4       	brcc	.+50     	; 0x36a <pin_mode+0x38>
	{
		if ( mode == INPUT ) // set DDRD bit to 0
     338:	66 23       	and	r22, r22
     33a:	61 f4       	brne	.+24     	; 0x354 <pin_mode+0x22>
		{
			//bit_clear(DDRD,pin);
			DDRD &= ~(1<<pin);
     33c:	2a b1       	in	r18, 0x0a	; 10
     33e:	81 e0       	ldi	r24, 0x01	; 1
     340:	90 e0       	ldi	r25, 0x00	; 0
     342:	02 c0       	rjmp	.+4      	; 0x348 <pin_mode+0x16>
     344:	88 0f       	add	r24, r24
     346:	99 1f       	adc	r25, r25
     348:	3a 95       	dec	r19
     34a:	e2 f7       	brpl	.-8      	; 0x344 <pin_mode+0x12>
     34c:	80 95       	com	r24
     34e:	82 23       	and	r24, r18
     350:	8a b9       	out	0x0a, r24	; 10
     352:	39 c0       	rjmp	.+114    	; 0x3c6 <pin_mode+0x94>
		}
		else // ( mode == OUTPUT ) // set DDRB bit to 1
		{
			//bit_set(DDRD,pin);
			DDRD |= (1<<pin);
     354:	2a b1       	in	r18, 0x0a	; 10
     356:	81 e0       	ldi	r24, 0x01	; 1
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	02 c0       	rjmp	.+4      	; 0x360 <pin_mode+0x2e>
     35c:	88 0f       	add	r24, r24
     35e:	99 1f       	adc	r25, r25
     360:	3a 95       	dec	r19
     362:	e2 f7       	brpl	.-8      	; 0x35c <pin_mode+0x2a>
     364:	28 2b       	or	r18, r24
     366:	2a b9       	out	0x0a, r18	; 10
     368:	2e c0       	rjmp	.+92     	; 0x3c6 <pin_mode+0x94>
		}
	}
	else if (pin <= 13) // matches bit# for PORTB 0 thru 5
     36a:	8e 30       	cpi	r24, 0x0E	; 14
     36c:	d0 f4       	brcc	.+52     	; 0x3a2 <pin_mode+0x70>
	{
		pin -= 8;
     36e:	38 50       	subi	r19, 0x08	; 8
		if ( mode == INPUT ) // set DDRD bit to 0
     370:	66 23       	and	r22, r22
     372:	61 f4       	brne	.+24     	; 0x38c <pin_mode+0x5a>
		{
			//bit_clear(DDRB,pin);
			DDRB &= ~(1<<pin);
     374:	24 b1       	in	r18, 0x04	; 4
     376:	81 e0       	ldi	r24, 0x01	; 1
     378:	90 e0       	ldi	r25, 0x00	; 0
     37a:	02 c0       	rjmp	.+4      	; 0x380 <pin_mode+0x4e>
     37c:	88 0f       	add	r24, r24
     37e:	99 1f       	adc	r25, r25
     380:	3a 95       	dec	r19
     382:	e2 f7       	brpl	.-8      	; 0x37c <pin_mode+0x4a>
     384:	80 95       	com	r24
     386:	82 23       	and	r24, r18
     388:	84 b9       	out	0x04, r24	; 4
     38a:	1d c0       	rjmp	.+58     	; 0x3c6 <pin_mode+0x94>
		}
		else // ( mode == OUTPUT ) // set DDRB bit to 1
		{
			//bit_set(DDRB,pin);
			DDRB |= (1<<pin);
     38c:	24 b1       	in	r18, 0x04	; 4
     38e:	81 e0       	ldi	r24, 0x01	; 1
     390:	90 e0       	ldi	r25, 0x00	; 0
     392:	02 c0       	rjmp	.+4      	; 0x398 <pin_mode+0x66>
     394:	88 0f       	add	r24, r24
     396:	99 1f       	adc	r25, r25
     398:	3a 95       	dec	r19
     39a:	e2 f7       	brpl	.-8      	; 0x394 <pin_mode+0x62>
     39c:	28 2b       	or	r18, r24
     39e:	24 b9       	out	0x04, r18	; 4
     3a0:	12 c0       	rjmp	.+36     	; 0x3c6 <pin_mode+0x94>
		}			
	}
	else if (pin <= 19) // matches bit# for PORTC 0 thru 5
     3a2:	84 31       	cpi	r24, 0x14	; 20
     3a4:	10 f0       	brcs	.+4      	; 0x3aa <pin_mode+0x78>
     3a6:	8f ef       	ldi	r24, 0xFF	; 255
     3a8:	08 95       	ret
	{ // on the Arduino these are labeled analog 0 thru 5, but also work for digitalio
		pin -= 13;
     3aa:	3d 50       	subi	r19, 0x0D	; 13
		if ( mode == INPUT ) // set DDRD bit to 0
     3ac:	66 23       	and	r22, r22
     3ae:	69 f4       	brne	.+26     	; 0x3ca <pin_mode+0x98>
		{
			//bit_clear(DDRC,pin);
			DDRC &= ~(1<<pin);
     3b0:	27 b1       	in	r18, 0x07	; 7
     3b2:	81 e0       	ldi	r24, 0x01	; 1
     3b4:	90 e0       	ldi	r25, 0x00	; 0
     3b6:	02 c0       	rjmp	.+4      	; 0x3bc <pin_mode+0x8a>
     3b8:	88 0f       	add	r24, r24
     3ba:	99 1f       	adc	r25, r25
     3bc:	3a 95       	dec	r19
     3be:	e2 f7       	brpl	.-8      	; 0x3b8 <pin_mode+0x86>
     3c0:	80 95       	com	r24
     3c2:	82 23       	and	r24, r18
     3c4:	87 b9       	out	0x07, r24	; 7
     3c6:	81 e0       	ldi	r24, 0x01	; 1
     3c8:	08 95       	ret
		}
		else // ( mode == OUTPUT ) // set DDRB bit to 1
		{
			//bit_set(DDRC,pin);
			DDRC |= (1<<pin);
     3ca:	27 b1       	in	r18, 0x07	; 7
     3cc:	81 e0       	ldi	r24, 0x01	; 1
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <pin_mode+0xa4>
     3d2:	88 0f       	add	r24, r24
     3d4:	99 1f       	adc	r25, r25
     3d6:	3a 95       	dec	r19
     3d8:	e2 f7       	brpl	.-8      	; 0x3d2 <pin_mode+0xa0>
     3da:	28 2b       	or	r18, r24
     3dc:	27 b9       	out	0x07, r18	; 7
     3de:	81 e0       	ldi	r24, 0x01	; 1
#else 
#    warning "device type not defined"
#endif
	return(1); // return OKAY

}
     3e0:	08 95       	ret

000003e2 <digital_read>:

// Declared int for compatiblity with Arduino digitalRead
// However added return of ERROR as -1 since the Arduino way
// of returning LOW for NOT_A_PIN is doesn't inform on the error
int8_t digital_read(uint8_t pin)
{
     3e2:	28 2f       	mov	r18, r24
	{
		return(-1); // returen ERROR
	}
#elif defined (__AVR_ATmega328__) || defined (__AVR_ATmega328P__) 
	// Use Arduino numbering
	if( pin <= 7 ) // matches bit for PORTD 
     3e4:	88 30       	cpi	r24, 0x08	; 8
     3e6:	10 f4       	brcc	.+4      	; 0x3ec <digital_read+0xa>
	{
		return(pin_read(PIND,pin));
     3e8:	39 b1       	in	r19, 0x09	; 9
     3ea:	0b c0       	rjmp	.+22     	; 0x402 <digital_read+0x20>
	}
	else if (pin <= 13) // matches bit# for PORTB 0 thru 5
     3ec:	8e 30       	cpi	r24, 0x0E	; 14
     3ee:	18 f4       	brcc	.+6      	; 0x3f6 <digital_read+0x14>
	{
		pin -= 8;
		return(pin_read(PINB,pin));			
     3f0:	33 b1       	in	r19, 0x03	; 3
     3f2:	28 50       	subi	r18, 0x08	; 8
     3f4:	06 c0       	rjmp	.+12     	; 0x402 <digital_read+0x20>
	}
	else if (pin <= 19) // matches bit# for PORTC 0 thru 5
     3f6:	84 31       	cpi	r24, 0x14	; 20
     3f8:	10 f0       	brcs	.+4      	; 0x3fe <digital_read+0x1c>
     3fa:	3f ef       	ldi	r19, 0xFF	; 255
     3fc:	0a c0       	rjmp	.+20     	; 0x412 <digital_read+0x30>
	{ // on the Arduino these are labeled analog 0 thru 5, but also work for digitalio
		pin -= 14;
		return(pin_read(PINC,pin));
     3fe:	36 b1       	in	r19, 0x06	; 6
     400:	2e 50       	subi	r18, 0x0E	; 14
     402:	81 e0       	ldi	r24, 0x01	; 1
     404:	90 e0       	ldi	r25, 0x00	; 0
     406:	02 c0       	rjmp	.+4      	; 0x40c <digital_read+0x2a>
     408:	88 0f       	add	r24, r24
     40a:	99 1f       	adc	r25, r25
     40c:	2a 95       	dec	r18
     40e:	e2 f7       	brpl	.-8      	; 0x408 <digital_read+0x26>
     410:	38 23       	and	r19, r24
	}
#else 
#    warning "device type not defined"
#endif

}
     412:	83 2f       	mov	r24, r19
     414:	08 95       	ret

00000416 <digital_write>:
 // please contact me with details so that I may correct the situation. 

#include "digitalio.h"

int8_t digital_write(uint8_t pin, uint8_t value)
{
     416:	38 2f       	mov	r19, r24
	{
		return(-1); // return ERROR
	}
#elif defined (__AVR_ATmega328__) || defined (__AVR_ATmega328P__) 
	// Use Arduino numbering
	if( pin <= 7 ) // matches bit for PORTD 
     418:	88 30       	cpi	r24, 0x08	; 8
     41a:	d0 f4       	brcc	.+52     	; 0x450 <digital_write+0x3a>
	{
		pin_write(PORTD,pin,value);
     41c:	66 23       	and	r22, r22
     41e:	59 f0       	breq	.+22     	; 0x436 <digital_write+0x20>
     420:	2b b1       	in	r18, 0x0b	; 11
     422:	81 e0       	ldi	r24, 0x01	; 1
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	02 c0       	rjmp	.+4      	; 0x42c <digital_write+0x16>
     428:	88 0f       	add	r24, r24
     42a:	99 1f       	adc	r25, r25
     42c:	3a 95       	dec	r19
     42e:	e2 f7       	brpl	.-8      	; 0x428 <digital_write+0x12>
     430:	28 2b       	or	r18, r24
     432:	2b b9       	out	0x0b, r18	; 11
     434:	0b c0       	rjmp	.+22     	; 0x44c <digital_write+0x36>
     436:	2b b1       	in	r18, 0x0b	; 11
     438:	81 e0       	ldi	r24, 0x01	; 1
     43a:	90 e0       	ldi	r25, 0x00	; 0
     43c:	02 c0       	rjmp	.+4      	; 0x442 <digital_write+0x2c>
     43e:	88 0f       	add	r24, r24
     440:	99 1f       	adc	r25, r25
     442:	3a 95       	dec	r19
     444:	e2 f7       	brpl	.-8      	; 0x43e <digital_write+0x28>
     446:	80 95       	com	r24
     448:	82 23       	and	r24, r18
     44a:	8b b9       	out	0x0b, r24	; 11
     44c:	8b b1       	in	r24, 0x0b	; 11
     44e:	2f c0       	rjmp	.+94     	; 0x4ae <digital_write+0x98>
	}
	else if (pin <= 13) // matches bit# for PORTB 0 thru 5
     450:	8e 30       	cpi	r24, 0x0E	; 14
     452:	d8 f4       	brcc	.+54     	; 0x48a <digital_write+0x74>
	{
		pin -= 8;
     454:	38 50       	subi	r19, 0x08	; 8
		pin_write(PORTB,pin,value);
     456:	66 23       	and	r22, r22
     458:	59 f0       	breq	.+22     	; 0x470 <digital_write+0x5a>
     45a:	25 b1       	in	r18, 0x05	; 5
     45c:	81 e0       	ldi	r24, 0x01	; 1
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	02 c0       	rjmp	.+4      	; 0x466 <digital_write+0x50>
     462:	88 0f       	add	r24, r24
     464:	99 1f       	adc	r25, r25
     466:	3a 95       	dec	r19
     468:	e2 f7       	brpl	.-8      	; 0x462 <digital_write+0x4c>
     46a:	28 2b       	or	r18, r24
     46c:	25 b9       	out	0x05, r18	; 5
     46e:	0b c0       	rjmp	.+22     	; 0x486 <digital_write+0x70>
     470:	25 b1       	in	r18, 0x05	; 5
     472:	81 e0       	ldi	r24, 0x01	; 1
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	02 c0       	rjmp	.+4      	; 0x47c <digital_write+0x66>
     478:	88 0f       	add	r24, r24
     47a:	99 1f       	adc	r25, r25
     47c:	3a 95       	dec	r19
     47e:	e2 f7       	brpl	.-8      	; 0x478 <digital_write+0x62>
     480:	80 95       	com	r24
     482:	82 23       	and	r24, r18
     484:	85 b9       	out	0x05, r24	; 5
     486:	85 b1       	in	r24, 0x05	; 5
     488:	12 c0       	rjmp	.+36     	; 0x4ae <digital_write+0x98>
	}
	else if (pin <= 19) // matches bit# for PORTC 0 thru 5
     48a:	84 31       	cpi	r24, 0x14	; 20
     48c:	10 f0       	brcs	.+4      	; 0x492 <digital_write+0x7c>
     48e:	8f ef       	ldi	r24, 0xFF	; 255
     490:	08 95       	ret
	{ // on the Arduino these are labeled analog 0 thru 5, but also work for digitalio
		pin -= 14;
     492:	3e 50       	subi	r19, 0x0E	; 14
		pin_write(PORTC,pin,value);
     494:	66 23       	and	r22, r22
     496:	69 f0       	breq	.+26     	; 0x4b2 <digital_write+0x9c>
     498:	28 b1       	in	r18, 0x08	; 8
     49a:	81 e0       	ldi	r24, 0x01	; 1
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	02 c0       	rjmp	.+4      	; 0x4a4 <digital_write+0x8e>
     4a0:	88 0f       	add	r24, r24
     4a2:	99 1f       	adc	r25, r25
     4a4:	3a 95       	dec	r19
     4a6:	e2 f7       	brpl	.-8      	; 0x4a0 <digital_write+0x8a>
     4a8:	28 2b       	or	r18, r24
     4aa:	28 b9       	out	0x08, r18	; 8
     4ac:	88 b1       	in	r24, 0x08	; 8
     4ae:	81 e0       	ldi	r24, 0x01	; 1
     4b0:	08 95       	ret
     4b2:	28 b1       	in	r18, 0x08	; 8
     4b4:	81 e0       	ldi	r24, 0x01	; 1
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	02 c0       	rjmp	.+4      	; 0x4be <digital_write+0xa8>
     4ba:	88 0f       	add	r24, r24
     4bc:	99 1f       	adc	r25, r25
     4be:	3a 95       	dec	r19
     4c0:	e2 f7       	brpl	.-8      	; 0x4ba <digital_write+0xa4>
     4c2:	80 95       	com	r24
     4c4:	82 23       	and	r24, r18
     4c6:	88 b9       	out	0x08, r24	; 8
     4c8:	88 b1       	in	r24, 0x08	; 8
     4ca:	81 e0       	ldi	r24, 0x01	; 1
#else 
#    warning "device type not defined"
#endif
	return(1); // return OKAY

}
     4cc:	08 95       	ret

000004ce <port_pin_mode>:
 // please contact me with details so that I may correct the situation. 

#include "digitalio.h"

int8_t port_pin_mode(uint8_t portx, uint8_t pin, uint8_t mode)
{
     4ce:	98 2f       	mov	r25, r24
	{
		return(-1); // return ERROR
	}
	// TODO: remaining accessible Butterfly ports
#elif defined (__AVR_ATmega328__) || defined (__AVR_ATmega328P__) 
	if( portx == PORTD ) // matches bit for PORTD 
     4d0:	8b b1       	in	r24, 0x0b	; 11
     4d2:	98 17       	cp	r25, r24
     4d4:	c9 f4       	brne	.+50     	; 0x508 <port_pin_mode+0x3a>
	{
		if ( mode == INPUT ) // set DDRD bit to 0
     4d6:	44 23       	and	r20, r20
     4d8:	61 f4       	brne	.+24     	; 0x4f2 <port_pin_mode+0x24>
		{
			//bit_clear(DDRD,pin);
			DDRD &= ~(1<<pin);
     4da:	2a b1       	in	r18, 0x0a	; 10
     4dc:	81 e0       	ldi	r24, 0x01	; 1
     4de:	90 e0       	ldi	r25, 0x00	; 0
     4e0:	02 c0       	rjmp	.+4      	; 0x4e6 <port_pin_mode+0x18>
     4e2:	88 0f       	add	r24, r24
     4e4:	99 1f       	adc	r25, r25
     4e6:	6a 95       	dec	r22
     4e8:	e2 f7       	brpl	.-8      	; 0x4e2 <port_pin_mode+0x14>
     4ea:	80 95       	com	r24
     4ec:	82 23       	and	r24, r18
     4ee:	8a b9       	out	0x0a, r24	; 10
     4f0:	39 c0       	rjmp	.+114    	; 0x564 <port_pin_mode+0x96>
		}
		else // ( mode == OUTPUT ) // set DDRB bit to 1
		{
			//bit_set(DDRD,pin);
			DDRD |= (1<<pin);
     4f2:	2a b1       	in	r18, 0x0a	; 10
     4f4:	81 e0       	ldi	r24, 0x01	; 1
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	02 c0       	rjmp	.+4      	; 0x4fe <port_pin_mode+0x30>
     4fa:	88 0f       	add	r24, r24
     4fc:	99 1f       	adc	r25, r25
     4fe:	6a 95       	dec	r22
     500:	e2 f7       	brpl	.-8      	; 0x4fa <port_pin_mode+0x2c>
     502:	28 2b       	or	r18, r24
     504:	2a b9       	out	0x0a, r18	; 10
     506:	2e c0       	rjmp	.+92     	; 0x564 <port_pin_mode+0x96>
		}
	}
	else if (portx == PORTB) // matches bit# for PORTB 0 thru 5
     508:	85 b1       	in	r24, 0x05	; 5
     50a:	98 17       	cp	r25, r24
     50c:	c9 f4       	brne	.+50     	; 0x540 <port_pin_mode+0x72>
	{
		if ( mode == INPUT ) // set DDRD bit to 0
     50e:	44 23       	and	r20, r20
     510:	61 f4       	brne	.+24     	; 0x52a <port_pin_mode+0x5c>
		{
			//bit_clear(DDRB,pin);
			DDRB &= ~(1<<pin);
     512:	24 b1       	in	r18, 0x04	; 4
     514:	81 e0       	ldi	r24, 0x01	; 1
     516:	90 e0       	ldi	r25, 0x00	; 0
     518:	02 c0       	rjmp	.+4      	; 0x51e <port_pin_mode+0x50>
     51a:	88 0f       	add	r24, r24
     51c:	99 1f       	adc	r25, r25
     51e:	6a 95       	dec	r22
     520:	e2 f7       	brpl	.-8      	; 0x51a <port_pin_mode+0x4c>
     522:	80 95       	com	r24
     524:	82 23       	and	r24, r18
     526:	84 b9       	out	0x04, r24	; 4
     528:	1d c0       	rjmp	.+58     	; 0x564 <port_pin_mode+0x96>
		}
		else // ( mode == OUTPUT ) // set DDRB bit to 1
		{
			//bit_set(DDRB,pin);
			DDRB |= (1<<pin);
     52a:	24 b1       	in	r18, 0x04	; 4
     52c:	81 e0       	ldi	r24, 0x01	; 1
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	02 c0       	rjmp	.+4      	; 0x536 <port_pin_mode+0x68>
     532:	88 0f       	add	r24, r24
     534:	99 1f       	adc	r25, r25
     536:	6a 95       	dec	r22
     538:	e2 f7       	brpl	.-8      	; 0x532 <port_pin_mode+0x64>
     53a:	28 2b       	or	r18, r24
     53c:	24 b9       	out	0x04, r18	; 4
     53e:	12 c0       	rjmp	.+36     	; 0x564 <port_pin_mode+0x96>
		}
			
	}
	else if (portx == PORTC) // matches bit# for PORTC 0 thru 5
     540:	88 b1       	in	r24, 0x08	; 8
     542:	98 17       	cp	r25, r24
     544:	11 f0       	breq	.+4      	; 0x54a <port_pin_mode+0x7c>
     546:	8f ef       	ldi	r24, 0xFF	; 255
     548:	08 95       	ret
	{ // on the Arduino these are labeled analog 0 thru 5, but also work for digitalio
		if ( mode == INPUT ) // set DDRD bit to 0
     54a:	44 23       	and	r20, r20
     54c:	69 f4       	brne	.+26     	; 0x568 <port_pin_mode+0x9a>
		{
			//bit_clear(DDRC,pin);
			DDRC &= ~(1<<pin);
     54e:	27 b1       	in	r18, 0x07	; 7
     550:	81 e0       	ldi	r24, 0x01	; 1
     552:	90 e0       	ldi	r25, 0x00	; 0
     554:	02 c0       	rjmp	.+4      	; 0x55a <port_pin_mode+0x8c>
     556:	88 0f       	add	r24, r24
     558:	99 1f       	adc	r25, r25
     55a:	6a 95       	dec	r22
     55c:	e2 f7       	brpl	.-8      	; 0x556 <port_pin_mode+0x88>
     55e:	80 95       	com	r24
     560:	82 23       	and	r24, r18
     562:	87 b9       	out	0x07, r24	; 7
     564:	81 e0       	ldi	r24, 0x01	; 1
     566:	08 95       	ret
		}
		else // ( mode == OUTPUT ) // set DDRB bit to 1
		{
			//bit_set(DDRC,pin);
			DDRB |= (1<<pin);
     568:	24 b1       	in	r18, 0x04	; 4
     56a:	81 e0       	ldi	r24, 0x01	; 1
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	02 c0       	rjmp	.+4      	; 0x574 <port_pin_mode+0xa6>
     570:	88 0f       	add	r24, r24
     572:	99 1f       	adc	r25, r25
     574:	6a 95       	dec	r22
     576:	e2 f7       	brpl	.-8      	; 0x570 <port_pin_mode+0xa2>
     578:	28 2b       	or	r18, r24
     57a:	24 b9       	out	0x04, r18	; 4
     57c:	81 e0       	ldi	r24, 0x01	; 1
#else 
#    warning "device type not defined"
#endif
	return(1); // return OKAY

}
     57e:	08 95       	ret

00000580 <port_pin_read>:
// However added return of ERROR as -1 since the Arduino way
// of returning LOW for NOT_A_PIN is doesn't inform on the error
//uint16_t digital_read(uint8_t pin)
int8_t port_pin_read(uint8_t portx, uint8_t pin)

{
     580:	98 2f       	mov	r25, r24
	{
		return(-1); // return ERROR
	}
	// TODO: ADD ADDRESSIBLE BUTTERFLY PORT PINS
#elif defined (__AVR_ATmega328__) || defined (__AVR_ATmega328P__) 
	if(portx == PORTD) // matches bit for PORTD 
     582:	8b b1       	in	r24, 0x0b	; 11
     584:	98 17       	cp	r25, r24
     586:	11 f4       	brne	.+4      	; 0x58c <port_pin_read+0xc>
	{
		return(pin_read(PIND,pin));
     588:	29 b1       	in	r18, 0x09	; 9
     58a:	0b c0       	rjmp	.+22     	; 0x5a2 <port_pin_read+0x22>
	}
	else if (portx == PORTB)
     58c:	85 b1       	in	r24, 0x05	; 5
     58e:	98 17       	cp	r25, r24
     590:	11 f4       	brne	.+4      	; 0x596 <port_pin_read+0x16>
	{
		return(pin_read(PINB,pin));			
     592:	23 b1       	in	r18, 0x03	; 3
     594:	06 c0       	rjmp	.+12     	; 0x5a2 <port_pin_read+0x22>
	}
	else if (portx == PORTC) // matches bit# for PORTC 0 thru 5
     596:	88 b1       	in	r24, 0x08	; 8
     598:	98 17       	cp	r25, r24
     59a:	11 f0       	breq	.+4      	; 0x5a0 <port_pin_read+0x20>
     59c:	2f ef       	ldi	r18, 0xFF	; 255
     59e:	09 c0       	rjmp	.+18     	; 0x5b2 <port_pin_read+0x32>
	{ 
		return(pin_read(PINC,pin));
     5a0:	26 b1       	in	r18, 0x06	; 6
     5a2:	81 e0       	ldi	r24, 0x01	; 1
     5a4:	90 e0       	ldi	r25, 0x00	; 0
     5a6:	02 c0       	rjmp	.+4      	; 0x5ac <port_pin_read+0x2c>
     5a8:	88 0f       	add	r24, r24
     5aa:	99 1f       	adc	r25, r25
     5ac:	6a 95       	dec	r22
     5ae:	e2 f7       	brpl	.-8      	; 0x5a8 <port_pin_read+0x28>
     5b0:	28 23       	and	r18, r24
#else 
#    warning "device type not defined"
#endif
	return(1); // return OKAY

}
     5b2:	82 2f       	mov	r24, r18
     5b4:	08 95       	ret

000005b6 <port_pin_set>:
 // please contact me with details so that I may correct the situation. 

#include "digitalio.h"

int8_t port_pin_set(uint8_t portx, uint8_t pin)
{
     5b6:	98 2f       	mov	r25, r24
	{
		return(-1); // return ERROR
	}
	// TODO fix for Butterfly ports
#elif defined (__AVR_ATmega328__) || defined (__AVR_ATmega328P__) 
	if(portx == PORTD ) // matches bit for PORTD 
     5b8:	8b b1       	in	r24, 0x0b	; 11
     5ba:	98 17       	cp	r25, r24
     5bc:	59 f4       	brne	.+22     	; 0x5d4 <port_pin_set+0x1e>
	{
		pin_write(PORTD,pin,1);
     5be:	2b b1       	in	r18, 0x0b	; 11
     5c0:	81 e0       	ldi	r24, 0x01	; 1
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	02 c0       	rjmp	.+4      	; 0x5ca <port_pin_set+0x14>
     5c6:	88 0f       	add	r24, r24
     5c8:	99 1f       	adc	r25, r25
     5ca:	6a 95       	dec	r22
     5cc:	e2 f7       	brpl	.-8      	; 0x5c6 <port_pin_set+0x10>
     5ce:	28 2b       	or	r18, r24
     5d0:	2b b9       	out	0x0b, r18	; 11
     5d2:	0d c0       	rjmp	.+26     	; 0x5ee <port_pin_set+0x38>
	}
	else if (portx == PORTB)
     5d4:	85 b1       	in	r24, 0x05	; 5
     5d6:	98 17       	cp	r25, r24
     5d8:	61 f4       	brne	.+24     	; 0x5f2 <port_pin_set+0x3c>
	{
		pin_write(PORTB,pin,1);
     5da:	25 b1       	in	r18, 0x05	; 5
     5dc:	81 e0       	ldi	r24, 0x01	; 1
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	02 c0       	rjmp	.+4      	; 0x5e6 <port_pin_set+0x30>
     5e2:	88 0f       	add	r24, r24
     5e4:	99 1f       	adc	r25, r25
     5e6:	6a 95       	dec	r22
     5e8:	e2 f7       	brpl	.-8      	; 0x5e2 <port_pin_set+0x2c>
     5ea:	28 2b       	or	r18, r24
     5ec:	25 b9       	out	0x05, r18	; 5
     5ee:	81 e0       	ldi	r24, 0x01	; 1
     5f0:	08 95       	ret
	}
	else if (portx == PORTC)
     5f2:	88 b1       	in	r24, 0x08	; 8
     5f4:	98 17       	cp	r25, r24
     5f6:	11 f0       	breq	.+4      	; 0x5fc <port_pin_set+0x46>
     5f8:	8f ef       	ldi	r24, 0xFF	; 255
     5fa:	08 95       	ret
	{ 
			pin_write(PORTC,pin,1);
     5fc:	28 b1       	in	r18, 0x08	; 8
     5fe:	81 e0       	ldi	r24, 0x01	; 1
     600:	90 e0       	ldi	r25, 0x00	; 0
     602:	02 c0       	rjmp	.+4      	; 0x608 <port_pin_set+0x52>
     604:	88 0f       	add	r24, r24
     606:	99 1f       	adc	r25, r25
     608:	6a 95       	dec	r22
     60a:	e2 f7       	brpl	.-8      	; 0x604 <port_pin_set+0x4e>
     60c:	28 2b       	or	r18, r24
     60e:	28 b9       	out	0x08, r18	; 8
     610:	81 e0       	ldi	r24, 0x01	; 1
	// TODO catch invalid pin numbers
#else 
#    warning "device type not defined"
#endif
	return(1); // return OKAY
}
     612:	08 95       	ret

00000614 <port_pin_clear>:
 // please contact me with details so that I may correct the situation. 

#include "digitalio.h"

int8_t port_pin_clear(uint8_t portx, uint8_t pin)
{
     614:	98 2f       	mov	r25, r24
	{
		return(-1); // returen ERROR
	}
	// TODO fix for Butterfly ports
#elif defined (__AVR_ATmega328__) || defined (__AVR_ATmega328P__) 
	if(portx == PORTD ) // matches bit for PORTD 
     616:	8b b1       	in	r24, 0x0b	; 11
     618:	98 17       	cp	r25, r24
     61a:	61 f4       	brne	.+24     	; 0x634 <port_pin_clear+0x20>
	{
		pin_write(PORTD,pin,0);
     61c:	2b b1       	in	r18, 0x0b	; 11
     61e:	81 e0       	ldi	r24, 0x01	; 1
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	02 c0       	rjmp	.+4      	; 0x628 <port_pin_clear+0x14>
     624:	88 0f       	add	r24, r24
     626:	99 1f       	adc	r25, r25
     628:	6a 95       	dec	r22
     62a:	e2 f7       	brpl	.-8      	; 0x624 <port_pin_clear+0x10>
     62c:	80 95       	com	r24
     62e:	82 23       	and	r24, r18
     630:	8b b9       	out	0x0b, r24	; 11
     632:	0e c0       	rjmp	.+28     	; 0x650 <port_pin_clear+0x3c>
	}
	else if (portx == PORTB)
     634:	85 b1       	in	r24, 0x05	; 5
     636:	98 17       	cp	r25, r24
     638:	69 f4       	brne	.+26     	; 0x654 <port_pin_clear+0x40>
	{
		pin_write(PORTB,pin,0);
     63a:	25 b1       	in	r18, 0x05	; 5
     63c:	81 e0       	ldi	r24, 0x01	; 1
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	02 c0       	rjmp	.+4      	; 0x646 <port_pin_clear+0x32>
     642:	88 0f       	add	r24, r24
     644:	99 1f       	adc	r25, r25
     646:	6a 95       	dec	r22
     648:	e2 f7       	brpl	.-8      	; 0x642 <port_pin_clear+0x2e>
     64a:	80 95       	com	r24
     64c:	82 23       	and	r24, r18
     64e:	85 b9       	out	0x05, r24	; 5
     650:	81 e0       	ldi	r24, 0x01	; 1
     652:	08 95       	ret
	}
	else if (portx == PORTC)
     654:	88 b1       	in	r24, 0x08	; 8
     656:	98 17       	cp	r25, r24
     658:	11 f0       	breq	.+4      	; 0x65e <port_pin_clear+0x4a>
     65a:	8f ef       	ldi	r24, 0xFF	; 255
     65c:	08 95       	ret
	{ 
			pin_write(PORTC,pin,0);
     65e:	28 b1       	in	r18, 0x08	; 8
     660:	81 e0       	ldi	r24, 0x01	; 1
     662:	90 e0       	ldi	r25, 0x00	; 0
     664:	02 c0       	rjmp	.+4      	; 0x66a <port_pin_clear+0x56>
     666:	88 0f       	add	r24, r24
     668:	99 1f       	adc	r25, r25
     66a:	6a 95       	dec	r22
     66c:	e2 f7       	brpl	.-8      	; 0x666 <port_pin_clear+0x52>
     66e:	80 95       	com	r24
     670:	82 23       	and	r24, r18
     672:	88 b9       	out	0x08, r24	; 8
     674:	81 e0       	ldi	r24, 0x01	; 1
#else 
#    warning "device type not defined"
#endif
	return(1); // return OKAY

}
     676:	08 95       	ret

00000678 <port_pin_activate_pullup>:
 // If anyone has any reason to believe that any of this code violates other licenses
 // please contact me with details so that I may correct the situation. 

#include "digitalio.h"
int8_t port_pin_activate_pullup(uint8_t portx, uint8_t pin)
{
     678:	98 2f       	mov	r25, r24
	{
		return(-1); // return ERROR
	}
	// TODO: remaining accessible Butterfly ports
#elif defined (__AVR_ATmega328__) || defined (__AVR_ATmega328P__) 
	if( portx == PORTD ) 
     67a:	8b b1       	in	r24, 0x0b	; 11
     67c:	98 17       	cp	r25, r24
     67e:	81 f4       	brne	.+32     	; 0x6a0 <port_pin_activate_pullup+0x28>
	{
		//bit_clear(DDRD,pin); // Make sure it is an input
		//bit_set(PORTD,pin);  // Activate pullup
		DDRD &= ~(1<<pin);
     680:	3a b1       	in	r19, 0x0a	; 10
     682:	81 e0       	ldi	r24, 0x01	; 1
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	02 c0       	rjmp	.+4      	; 0x68c <port_pin_activate_pullup+0x14>
     688:	88 0f       	add	r24, r24
     68a:	99 1f       	adc	r25, r25
     68c:	6a 95       	dec	r22
     68e:	e2 f7       	brpl	.-8      	; 0x688 <port_pin_activate_pullup+0x10>
     690:	28 2f       	mov	r18, r24
     692:	20 95       	com	r18
     694:	23 23       	and	r18, r19
     696:	2a b9       	out	0x0a, r18	; 10
		PORTD |= (1<<pin);
     698:	2b b1       	in	r18, 0x0b	; 11
     69a:	82 2b       	or	r24, r18
     69c:	8b b9       	out	0x0b, r24	; 11
     69e:	12 c0       	rjmp	.+36     	; 0x6c4 <port_pin_activate_pullup+0x4c>
	}
	else if (portx == PORTB)
     6a0:	85 b1       	in	r24, 0x05	; 5
     6a2:	98 17       	cp	r25, r24
     6a4:	89 f4       	brne	.+34     	; 0x6c8 <port_pin_activate_pullup+0x50>
	{
		//bit_clear(DDRB,pin); // Make sure it is an input
		//bit_set(PORTB,pin);  // Activate pullup
		DDRB &= ~(1<<pin);
     6a6:	34 b1       	in	r19, 0x04	; 4
     6a8:	81 e0       	ldi	r24, 0x01	; 1
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	02 c0       	rjmp	.+4      	; 0x6b2 <port_pin_activate_pullup+0x3a>
     6ae:	88 0f       	add	r24, r24
     6b0:	99 1f       	adc	r25, r25
     6b2:	6a 95       	dec	r22
     6b4:	e2 f7       	brpl	.-8      	; 0x6ae <port_pin_activate_pullup+0x36>
     6b6:	28 2f       	mov	r18, r24
     6b8:	20 95       	com	r18
     6ba:	23 23       	and	r18, r19
     6bc:	24 b9       	out	0x04, r18	; 4
		PORTB |= (1<<pin);
     6be:	25 b1       	in	r18, 0x05	; 5
     6c0:	82 2b       	or	r24, r18
     6c2:	85 b9       	out	0x05, r24	; 5
     6c4:	81 e0       	ldi	r24, 0x01	; 1
     6c6:	08 95       	ret
	}
	else if (portx == PORTC)
     6c8:	88 b1       	in	r24, 0x08	; 8
     6ca:	98 17       	cp	r25, r24
     6cc:	11 f0       	breq	.+4      	; 0x6d2 <port_pin_activate_pullup+0x5a>
     6ce:	8f ef       	ldi	r24, 0xFF	; 255
     6d0:	08 95       	ret
	{ 		
		//bit_clear(DDRC,pin); // Make sure it is an input
		//bit_set(PORTC,pin);  // Activate pullup
		DDRC &= ~(1<<pin);
     6d2:	37 b1       	in	r19, 0x07	; 7
     6d4:	81 e0       	ldi	r24, 0x01	; 1
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	02 c0       	rjmp	.+4      	; 0x6de <port_pin_activate_pullup+0x66>
     6da:	88 0f       	add	r24, r24
     6dc:	99 1f       	adc	r25, r25
     6de:	6a 95       	dec	r22
     6e0:	e2 f7       	brpl	.-8      	; 0x6da <port_pin_activate_pullup+0x62>
     6e2:	28 2f       	mov	r18, r24
     6e4:	20 95       	com	r18
     6e6:	23 23       	and	r18, r19
     6e8:	27 b9       	out	0x07, r18	; 7
		PORTC |= (1<<pin);
     6ea:	28 b1       	in	r18, 0x08	; 8
     6ec:	82 2b       	or	r24, r18
     6ee:	88 b9       	out	0x08, r24	; 8
     6f0:	81 e0       	ldi	r24, 0x01	; 1
#else 
#    warning "device type not defined"
#endif
	return(1); // return OKAY

}
     6f2:	08 95       	ret

000006f4 <port_pin_deactivate_pullup>:
#else 
#    warning "device type not defined"
#endif*/
	return(1); // return OKAY

}
     6f4:	81 e0       	ldi	r24, 0x01	; 1
     6f6:	08 95       	ret

000006f8 <port_pin_write>:
 // please contact me with details so that I may correct the situation. 

#include "digitalio.h"

int8_t port_pin_write(uint8_t portx, uint8_t pin, uint8_t state)
{
     6f8:	98 2f       	mov	r25, r24
	{
		return(-1); // return ERROR
	}
	// TODO fix for Butterfly ports
#elif defined (__AVR_ATmega328__) || defined (__AVR_ATmega328P__) 
	if(portx == PORTD ) // matches bit for PORTD 
     6fa:	8b b1       	in	r24, 0x0b	; 11
     6fc:	98 17       	cp	r25, r24
     6fe:	d1 f4       	brne	.+52     	; 0x734 <port_pin_write+0x3c>
	{
		pin_write(PORTD,pin,state);
     700:	44 23       	and	r20, r20
     702:	59 f0       	breq	.+22     	; 0x71a <port_pin_write+0x22>
     704:	2b b1       	in	r18, 0x0b	; 11
     706:	81 e0       	ldi	r24, 0x01	; 1
     708:	90 e0       	ldi	r25, 0x00	; 0
     70a:	02 c0       	rjmp	.+4      	; 0x710 <port_pin_write+0x18>
     70c:	88 0f       	add	r24, r24
     70e:	99 1f       	adc	r25, r25
     710:	6a 95       	dec	r22
     712:	e2 f7       	brpl	.-8      	; 0x70c <port_pin_write+0x14>
     714:	28 2b       	or	r18, r24
     716:	2b b9       	out	0x0b, r18	; 11
     718:	0b c0       	rjmp	.+22     	; 0x730 <port_pin_write+0x38>
     71a:	2b b1       	in	r18, 0x0b	; 11
     71c:	81 e0       	ldi	r24, 0x01	; 1
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	02 c0       	rjmp	.+4      	; 0x726 <port_pin_write+0x2e>
     722:	88 0f       	add	r24, r24
     724:	99 1f       	adc	r25, r25
     726:	6a 95       	dec	r22
     728:	e2 f7       	brpl	.-8      	; 0x722 <port_pin_write+0x2a>
     72a:	80 95       	com	r24
     72c:	82 23       	and	r24, r18
     72e:	8b b9       	out	0x0b, r24	; 11
     730:	8b b1       	in	r24, 0x0b	; 11
     732:	2f c0       	rjmp	.+94     	; 0x792 <port_pin_write+0x9a>
	}
	else if (portx == PORTB)
     734:	85 b1       	in	r24, 0x05	; 5
     736:	98 17       	cp	r25, r24
     738:	d1 f4       	brne	.+52     	; 0x76e <port_pin_write+0x76>
	{
		pin_write(PORTB,pin,state);
     73a:	44 23       	and	r20, r20
     73c:	59 f0       	breq	.+22     	; 0x754 <port_pin_write+0x5c>
     73e:	25 b1       	in	r18, 0x05	; 5
     740:	81 e0       	ldi	r24, 0x01	; 1
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	02 c0       	rjmp	.+4      	; 0x74a <port_pin_write+0x52>
     746:	88 0f       	add	r24, r24
     748:	99 1f       	adc	r25, r25
     74a:	6a 95       	dec	r22
     74c:	e2 f7       	brpl	.-8      	; 0x746 <port_pin_write+0x4e>
     74e:	28 2b       	or	r18, r24
     750:	25 b9       	out	0x05, r18	; 5
     752:	0b c0       	rjmp	.+22     	; 0x76a <port_pin_write+0x72>
     754:	25 b1       	in	r18, 0x05	; 5
     756:	81 e0       	ldi	r24, 0x01	; 1
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	02 c0       	rjmp	.+4      	; 0x760 <port_pin_write+0x68>
     75c:	88 0f       	add	r24, r24
     75e:	99 1f       	adc	r25, r25
     760:	6a 95       	dec	r22
     762:	e2 f7       	brpl	.-8      	; 0x75c <port_pin_write+0x64>
     764:	80 95       	com	r24
     766:	82 23       	and	r24, r18
     768:	85 b9       	out	0x05, r24	; 5
     76a:	85 b1       	in	r24, 0x05	; 5
     76c:	12 c0       	rjmp	.+36     	; 0x792 <port_pin_write+0x9a>
	}
	else if (portx == PORTC)
     76e:	88 b1       	in	r24, 0x08	; 8
     770:	98 17       	cp	r25, r24
     772:	11 f0       	breq	.+4      	; 0x778 <port_pin_write+0x80>
     774:	8f ef       	ldi	r24, 0xFF	; 255
     776:	08 95       	ret
	{ 
		pin_write(PORTC,pin,state);
     778:	44 23       	and	r20, r20
     77a:	69 f0       	breq	.+26     	; 0x796 <port_pin_write+0x9e>
     77c:	28 b1       	in	r18, 0x08	; 8
     77e:	81 e0       	ldi	r24, 0x01	; 1
     780:	90 e0       	ldi	r25, 0x00	; 0
     782:	02 c0       	rjmp	.+4      	; 0x788 <port_pin_write+0x90>
     784:	88 0f       	add	r24, r24
     786:	99 1f       	adc	r25, r25
     788:	6a 95       	dec	r22
     78a:	e2 f7       	brpl	.-8      	; 0x784 <port_pin_write+0x8c>
     78c:	28 2b       	or	r18, r24
     78e:	28 b9       	out	0x08, r18	; 8
     790:	88 b1       	in	r24, 0x08	; 8
     792:	81 e0       	ldi	r24, 0x01	; 1
     794:	08 95       	ret
     796:	28 b1       	in	r18, 0x08	; 8
     798:	81 e0       	ldi	r24, 0x01	; 1
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	02 c0       	rjmp	.+4      	; 0x7a2 <port_pin_write+0xaa>
     79e:	88 0f       	add	r24, r24
     7a0:	99 1f       	adc	r25, r25
     7a2:	6a 95       	dec	r22
     7a4:	e2 f7       	brpl	.-8      	; 0x79e <port_pin_write+0xa6>
     7a6:	80 95       	com	r24
     7a8:	82 23       	and	r24, r18
     7aa:	88 b9       	out	0x08, r24	; 8
     7ac:	88 b1       	in	r24, 0x08	; 8
     7ae:	81 e0       	ldi	r24, 0x01	; 1
	// TODO catch invalid pin numbers
#else 
#    warning "device type not defined"
#endif
	return(1); // return OKAY
}
     7b0:	08 95       	ret

000007b2 <serial_begin>:
 // please contact me with details so that I may correct the situation. #include "serial.h"

#include "serial.h"

void serial_begin(uint32_t baud)
{
     7b2:	8f 92       	push	r8
     7b4:	af 92       	push	r10
     7b6:	cf 92       	push	r12
     7b8:	ef 92       	push	r14
     7ba:	0f 93       	push	r16
	cli();
     7bc:	f8 94       	cli
	uint8_t databits = 8;
	uint8_t stopbits = 1;
	usart_parity_t parity = parity_none;
	usart_flow_control_t flow_control = flow_none;

	usart0_init(baud, F_CPU, mode,  databits, stopbits, parity, flow_control);
     7be:	20 e0       	ldi	r18, 0x00	; 0
     7c0:	34 e2       	ldi	r19, 0x24	; 36
     7c2:	44 ef       	ldi	r20, 0xF4	; 244
     7c4:	50 e0       	ldi	r21, 0x00	; 0
     7c6:	00 e0       	ldi	r16, 0x00	; 0
     7c8:	e8 e0       	ldi	r30, 0x08	; 8
     7ca:	ee 2e       	mov	r14, r30
     7cc:	cc 24       	eor	r12, r12
     7ce:	c3 94       	inc	r12
     7d0:	aa 24       	eor	r10, r10
     7d2:	88 24       	eor	r8, r8
     7d4:	0e 94 bc 04 	call	0x978	; 0x978 <usart0_init>

	sei();
     7d8:	78 94       	sei

}
     7da:	0f 91       	pop	r16
     7dc:	ef 90       	pop	r14
     7de:	cf 90       	pop	r12
     7e0:	af 90       	pop	r10
     7e2:	8f 90       	pop	r8
     7e4:	08 95       	ret

000007e6 <serial_out>:
#include <stdarg.h>

// The variadic (va_) stuff is magic 
//void serial_out(const char *fmt, ...)
void serial_out(const char *fmt, ...)
{
     7e6:	df 93       	push	r29
     7e8:	cf 93       	push	r28
     7ea:	cd b7       	in	r28, 0x3d	; 61
     7ec:	de b7       	in	r29, 0x3e	; 62
     7ee:	fe 01       	movw	r30, r28
     7f0:	35 96       	adiw	r30, 0x05	; 5
	va_list arg;
	va_start(arg, fmt);
	vprintf(fmt, arg);
     7f2:	81 91       	ld	r24, Z+
     7f4:	91 91       	ld	r25, Z+
     7f6:	bf 01       	movw	r22, r30
     7f8:	0e 94 5e 06 	call	0xcbc	; 0xcbc <vprintf>
	va_end(arg);
}
     7fc:	cf 91       	pop	r28
     7fe:	df 91       	pop	r29
     800:	08 95       	ret

00000802 <usart0_uninit>:
	setting = usart_baudrate_to_setting(freq_cpu,baudrate);
	
	// Write hi byte first as writing lo byte will trigger immediate update of baud prescaler.
	UART_BAUD_RATE_HIGH = hi_byte(setting);
	UART_BAUD_RATE_LOW= lo_byte(setting);
	
     802:	80 e2       	ldi	r24, 0x20	; 32
     804:	80 93 c0 00 	sts	0x00C0, r24
	return;
     808:	10 92 c1 00 	sts	0x00C1, r1
}
     80c:	86 e0       	ldi	r24, 0x06	; 6
     80e:	80 93 c2 00 	sts	0x00C2, r24

     812:	08 95       	ret

00000814 <usart0_baud_set>:
		//if(usart0_transmit_ring.count)// Alternate technique
		if(usart0_transmit_buffer_inuse_count())// Is there data in the buffer?
		{
			// Send next byte in the buffer.
 	       UART_DATA_REG = ring_remove(&usart0_transmit_ring);
		}
     814:	ef 92       	push	r14
     816:	ff 92       	push	r15
     818:	0f 93       	push	r16
     81a:	1f 93       	push	r17
     81c:	7b 01       	movw	r14, r22
     81e:	8c 01       	movw	r16, r24
		else
		{
			// The buffer is empty
     820:	84 e0       	ldi	r24, 0x04	; 4
     822:	ee 0c       	add	r14, r14
     824:	ff 1c       	adc	r15, r15
     826:	00 1f       	adc	r16, r16
     828:	11 1f       	adc	r17, r17
     82a:	8a 95       	dec	r24
     82c:	d1 f7       	brne	.-12     	; 0x822 <usart0_baud_set+0xe>
     82e:	ca 01       	movw	r24, r20
     830:	b9 01       	movw	r22, r18
     832:	a8 01       	movw	r20, r16
     834:	97 01       	movw	r18, r14
     836:	0e 94 35 06 	call	0xc6a	; 0xc6a <__udivmodsi4>
     83a:	21 50       	subi	r18, 0x01	; 1
     83c:	30 40       	sbci	r19, 0x00	; 0
			usart_buffered_tx_flag = false;
			// Set the ready flag
			usart_tx_ready_flag = true;
     83e:	30 93 c5 00 	sts	0x00C5, r19
		}
     842:	20 93 c4 00 	sts	0x00C4, r18
	}
	else // Not buffered so transmited single byte
	{
     846:	1f 91       	pop	r17
     848:	0f 91       	pop	r16
     84a:	ff 90       	pop	r15
     84c:	ef 90       	pop	r14
     84e:	08 95       	ret

00000850 <usart0_parity_set>:
		// Set transmit ready flag
		usart_tx_ready_flag = true;
	}
	
     850:	81 11       	cpse	r24, r1
    return;
}
     852:	8f 5f       	subi	r24, 0xFF	; 255


     854:	98 2f       	mov	r25, r24
     856:	80 ff       	sbrs	r24, 0
     858:	04 c0       	rjmp	.+8      	; 0x862 <usart0_parity_set+0x12>
     85a:	80 91 c2 00 	lds	r24, 0x00C2
     85e:	80 61       	ori	r24, 0x10	; 16
     860:	03 c0       	rjmp	.+6      	; 0x868 <usart0_parity_set+0x18>
     862:	80 91 c2 00 	lds	r24, 0x00C2
     866:	8f 7e       	andi	r24, 0xEF	; 239
     868:	80 93 c2 00 	sts	0x00C2, r24
     86c:	80 91 c2 00 	lds	r24, 0x00C2
// The interrupt service routines are included in the initialization .c file 
     870:	91 ff       	sbrs	r25, 1
     872:	04 c0       	rjmp	.+8      	; 0x87c <usart0_parity_set+0x2c>
     874:	80 91 c2 00 	lds	r24, 0x00C2
     878:	80 62       	ori	r24, 0x20	; 32
     87a:	03 c0       	rjmp	.+6      	; 0x882 <usart0_parity_set+0x32>
     87c:	80 91 c2 00 	lds	r24, 0x00C2
     880:	8f 7d       	andi	r24, 0xDF	; 223
     882:	80 93 c2 00 	sts	0x00C2, r24
     886:	80 91 c2 00 	lds	r24, 0x00C2
     88a:	08 95       	ret

0000088c <__vector_18>:
     88c:	1f 92       	push	r1
     88e:	0f 92       	push	r0
     890:	0f b6       	in	r0, 0x3f	; 63
     892:	0f 92       	push	r0
     894:	11 24       	eor	r1, r1
     896:	2f 93       	push	r18
     898:	3f 93       	push	r19
     89a:	4f 93       	push	r20
     89c:	5f 93       	push	r21
     89e:	6f 93       	push	r22
     8a0:	7f 93       	push	r23
     8a2:	8f 93       	push	r24
     8a4:	9f 93       	push	r25
     8a6:	af 93       	push	r26
     8a8:	bf 93       	push	r27
     8aa:	ef 93       	push	r30
     8ac:	ff 93       	push	r31
     8ae:	80 91 c0 00 	lds	r24, 0x00C0
     8b2:	90 91 c0 00 	lds	r25, 0x00C0
     8b6:	60 91 c6 00 	lds	r22, 0x00C6
     8ba:	84 fd       	sbrc	r24, 4
     8bc:	06 c0       	rjmp	.+12     	; 0x8ca <__vector_18+0x3e>
     8be:	92 fd       	sbrc	r25, 2
     8c0:	04 c0       	rjmp	.+8      	; 0x8ca <__vector_18+0x3e>
     8c2:	8c eb       	ldi	r24, 0xBC	; 188
     8c4:	91 e0       	ldi	r25, 0x01	; 1
     8c6:	0e 94 a2 05 	call	0xb44	; 0xb44 <ring_add>
     8ca:	ff 91       	pop	r31
     8cc:	ef 91       	pop	r30
     8ce:	bf 91       	pop	r27
     8d0:	af 91       	pop	r26
     8d2:	9f 91       	pop	r25
     8d4:	8f 91       	pop	r24
     8d6:	7f 91       	pop	r23
     8d8:	6f 91       	pop	r22
     8da:	5f 91       	pop	r21
     8dc:	4f 91       	pop	r20
     8de:	3f 91       	pop	r19
     8e0:	2f 91       	pop	r18
     8e2:	0f 90       	pop	r0
     8e4:	0f be       	out	0x3f, r0	; 63
     8e6:	0f 90       	pop	r0
     8e8:	1f 90       	pop	r1
     8ea:	18 95       	reti

000008ec <__vector_20>:
	register uint8_t data;
	register uint8_t parity_error = false;
	register uint8_t frame_error = false;

	// Get error conditions before getting the data.
	frame_error = usart0_frame_error();
     8ec:	1f 92       	push	r1
     8ee:	0f 92       	push	r0
     8f0:	0f b6       	in	r0, 0x3f	; 63
     8f2:	0f 92       	push	r0
     8f4:	11 24       	eor	r1, r1
     8f6:	2f 93       	push	r18
     8f8:	3f 93       	push	r19
     8fa:	4f 93       	push	r20
     8fc:	5f 93       	push	r21
     8fe:	6f 93       	push	r22
     900:	7f 93       	push	r23
     902:	8f 93       	push	r24
     904:	9f 93       	push	r25
     906:	af 93       	push	r26
     908:	bf 93       	push	r27
     90a:	ef 93       	push	r30
     90c:	ff 93       	push	r31
	parity_error = usart0_parity_error();
	
	data = UART_DATA_REG;
     90e:	80 91 04 02 	lds	r24, 0x0204
     912:	88 23       	and	r24, r24
     914:	69 f0       	breq	.+26     	; 0x930 <__stack+0x31>
    
	if(!frame_error && !parity_error)
	{
     916:	0e 94 9d 05 	call	0xb3a	; 0xb3a <usart0_transmit_buffer_inuse_count>
     91a:	88 23       	and	r24, r24
     91c:	39 f0       	breq	.+14     	; 0x92c <__stack+0x2d>
		// Store data in ring buffer.
        ring_add(&usart0_receive_ring, data);
	}
     91e:	84 eb       	ldi	r24, 0xB4	; 180
     920:	91 e0       	ldi	r25, 0x01	; 1
     922:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <ring_remove>
     926:	80 93 c6 00 	sts	0x00C6, r24
     92a:	05 c0       	rjmp	.+10     	; 0x936 <__stack+0x37>

	return;
}


     92c:	10 92 04 02 	sts	0x0204, r1
     930:	81 e0       	ldi	r24, 0x01	; 1
     932:	80 93 05 02 	sts	0x0205, r24
     936:	ff 91       	pop	r31
     938:	ef 91       	pop	r30
     93a:	bf 91       	pop	r27
     93c:	af 91       	pop	r26
     93e:	9f 91       	pop	r25
     940:	8f 91       	pop	r24
     942:	7f 91       	pop	r23
     944:	6f 91       	pop	r22
     946:	5f 91       	pop	r21
     948:	4f 91       	pop	r20
     94a:	3f 91       	pop	r19
     94c:	2f 91       	pop	r18
     94e:	0f 90       	pop	r0
     950:	0f be       	out	0x3f, r0	; 63
     952:	0f 90       	pop	r0
     954:	1f 90       	pop	r1
     956:	18 95       	reti

00000958 <usart0_send>:
    bit_write(bit_read(parity, BIT(0)), UART_CONTROL_STATUS_REG_C, BIT(UART_PARITY_MODE_0));
    bit_write(bit_read(parity, BIT(1)), UART_CONTROL_STATUS_REG_C, BIT(UART_PARITY_MODE_1));
    return;
}

// JWP 6/16/11 rewrote transmit interrupt to use TX complete vector
     958:	80 91 05 02 	lds	r24, 0x0205
     95c:	88 23       	and	r24, r24
     95e:	e1 f3       	breq	.-8      	; 0x958 <usart0_send>
// rather than the Data Register Empty vector
// The interrupt service routines are included in the initialization .c file 
// since they must be associated with a .c file for the compiler
     960:	81 e0       	ldi	r24, 0x01	; 1
     962:	80 93 04 02 	sts	0x0204, r24
usart0_transmit_interrupt_service_routine
{

     966:	84 eb       	ldi	r24, 0xB4	; 180
     968:	91 e0       	ldi	r25, 0x01	; 1
     96a:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <ring_remove>
     96e:	80 93 c6 00 	sts	0x00C6, r24
	// Is buffered transmission enabled?
	if(usart_buffered_tx_flag)
	{		
     972:	10 92 05 02 	sts	0x0205, r1
		//if(usart0_transmit_ring.count)// Alternate technique
     976:	08 95       	ret

00000978 <usart0_init>:
    //flow.flow_out = true;
    //flow.flow_in = true;

	// JWP 3/27/11 the following was already commented out in xxx code
    // Initialize hw flow control task.
    // flow_out_tcb.handler = usart0_flow_out_hw_task;
     978:	2f 92       	push	r2
     97a:	3f 92       	push	r3
     97c:	4f 92       	push	r4
     97e:	5f 92       	push	r5
     980:	6f 92       	push	r6
     982:	7f 92       	push	r7
     984:	8f 92       	push	r8
     986:	9f 92       	push	r9
     988:	af 92       	push	r10
     98a:	cf 92       	push	r12
     98c:	ef 92       	push	r14
     98e:	0f 93       	push	r16
     990:	1f 93       	push	r17
     992:	df 93       	push	r29
     994:	cf 93       	push	r28
     996:	cd b7       	in	r28, 0x3d	; 61
     998:	de b7       	in	r29, 0x3e	; 62
     99a:	3b 01       	movw	r6, r22
     99c:	4c 01       	movw	r8, r24
     99e:	19 01       	movw	r2, r18
     9a0:	2a 01       	movw	r4, r20
     9a2:	1e 2d       	mov	r17, r14
     9a4:	ec 2c       	mov	r14, r12
    // flow_out_tcb.absolute_timing = false;
    // flow_out_tcb.run_interval = 0;
     9a6:	f8 94       	cli
    // flow_out_tcb.enabled = false;
    // task_add(&flow_out_tcb);
     9a8:	86 e2       	ldi	r24, 0x26	; 38
     9aa:	91 e0       	ldi	r25, 0x01	; 1
     9ac:	90 93 09 02 	sts	0x0209, r25
     9b0:	80 93 08 02 	sts	0x0208, r24
//	usart0_mode(mode);
 	usart0_baud_set(baud, freq_cpu);
    usart0_data_bits_set(databits);
    usart0_stop_bits_set(stopbits);
    usart0_parity_set(parity);
 
     9b4:	80 91 c1 00 	lds	r24, 0x00C1
     9b8:	87 7f       	andi	r24, 0xF7	; 247
     9ba:	80 93 c1 00 	sts	0x00C1, r24
 	usart0_baud_set(baud, freq_cpu);
     9be:	80 91 c1 00 	lds	r24, 0x00C1
     9c2:	8f 7e       	andi	r24, 0xEF	; 239
     9c4:	80 93 c1 00 	sts	0x00C1, r24

     9c8:	80 91 c1 00 	lds	r24, 0x00C1
     9cc:	8f 7b       	andi	r24, 0xBF	; 191
     9ce:	80 93 c1 00 	sts	0x00C1, r24
//JWP 6/16/11 The Butterfly requires special code for clock and baud
     9d2:	80 91 c1 00 	lds	r24, 0x00C1
     9d6:	8f 77       	andi	r24, 0x7F	; 127
     9d8:	80 93 c1 00 	sts	0x00C1, r24
#if defined(__AVR_ATmega169__) // Assume Butterfly
	butterfly_init();
#endif
     9dc:	80 91 c2 00 	lds	r24, 0x00C2
     9e0:	02 95       	swap	r16
     9e2:	00 0f       	add	r16, r16
     9e4:	00 0f       	add	r16, r16
     9e6:	00 7c       	andi	r16, 0xC0	; 192
     9e8:	8f 73       	andi	r24, 0x3F	; 63
     9ea:	80 2b       	or	r24, r16
     9ec:	80 93 c2 00 	sts	0x00C2, r24

     9f0:	c4 01       	movw	r24, r8
     9f2:	b3 01       	movw	r22, r6
     9f4:	0e 94 0a 04 	call	0x814	; 0x814 <usart0_baud_set>

     9f8:	81 2f       	mov	r24, r17
     9fa:	85 50       	subi	r24, 0x05	; 5
     9fc:	84 30       	cpi	r24, 0x04	; 4
     9fe:	18 f5       	brcc	.+70     	; 0xa46 <usart0_init+0xce>
     a00:	21 2f       	mov	r18, r17
     a02:	30 e0       	ldi	r19, 0x00	; 0
     a04:	25 50       	subi	r18, 0x05	; 5
     a06:	30 40       	sbci	r19, 0x00	; 0
     a08:	20 ff       	sbrs	r18, 0
     a0a:	04 c0       	rjmp	.+8      	; 0xa14 <usart0_init+0x9c>
     a0c:	80 91 c2 00 	lds	r24, 0x00C2
     a10:	82 60       	ori	r24, 0x02	; 2
     a12:	03 c0       	rjmp	.+6      	; 0xa1a <usart0_init+0xa2>
     a14:	80 91 c2 00 	lds	r24, 0x00C2
     a18:	8d 7f       	andi	r24, 0xFD	; 253
     a1a:	80 93 c2 00 	sts	0x00C2, r24
     a1e:	80 91 c2 00 	lds	r24, 0x00C2
     a22:	21 ff       	sbrs	r18, 1
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <usart0_init+0xb6>
     a26:	80 91 c2 00 	lds	r24, 0x00C2
     a2a:	84 60       	ori	r24, 0x04	; 4
     a2c:	03 c0       	rjmp	.+6      	; 0xa34 <usart0_init+0xbc>
     a2e:	80 91 c2 00 	lds	r24, 0x00C2
     a32:	8b 7f       	andi	r24, 0xFB	; 251
     a34:	80 93 c2 00 	sts	0x00C2, r24
     a38:	80 91 c2 00 	lds	r24, 0x00C2
     a3c:	80 91 c1 00 	lds	r24, 0x00C1
     a40:	8b 7f       	andi	r24, 0xFB	; 251
     a42:	80 93 c1 00 	sts	0x00C1, r24
     a46:	19 30       	cpi	r17, 0x09	; 9
     a48:	79 f4       	brne	.+30     	; 0xa68 <usart0_init+0xf0>
     a4a:	80 91 c2 00 	lds	r24, 0x00C2
     a4e:	82 60       	ori	r24, 0x02	; 2
     a50:	80 93 c2 00 	sts	0x00C2, r24
     a54:	80 91 c2 00 	lds	r24, 0x00C2
     a58:	84 60       	ori	r24, 0x04	; 4
     a5a:	80 93 c2 00 	sts	0x00C2, r24
     a5e:	80 91 c1 00 	lds	r24, 0x00C1
     a62:	84 60       	ori	r24, 0x04	; 4
     a64:	80 93 c1 00 	sts	0x00C1, r24
	ring_init(&usart0_receive_ring, usart0_receive_buffer, USART0_RECEIVE_BUFFER_LEN);
     a68:	8e 2d       	mov	r24, r14
     a6a:	81 50       	subi	r24, 0x01	; 1
     a6c:	82 30       	cpi	r24, 0x02	; 2
     a6e:	70 f4       	brcc	.+28     	; 0xa8c <usart0_init+0x114>
     a70:	81 e0       	ldi	r24, 0x01	; 1
     a72:	e8 16       	cp	r14, r24
     a74:	21 f0       	breq	.+8      	; 0xa7e <usart0_init+0x106>
     a76:	80 91 c2 00 	lds	r24, 0x00C2
     a7a:	88 60       	ori	r24, 0x08	; 8
     a7c:	03 c0       	rjmp	.+6      	; 0xa84 <usart0_init+0x10c>
     a7e:	80 91 c2 00 	lds	r24, 0x00C2
     a82:	87 7f       	andi	r24, 0xF7	; 247
     a84:	80 93 c2 00 	sts	0x00C2, r24
     a88:	80 91 c2 00 	lds	r24, 0x00C2
    ring_init(&usart0_transmit_ring, usart0_transmit_buffer, USART0_TRANSMIT_BUFFER_LEN);
     a8c:	8a 2d       	mov	r24, r10
     a8e:	0e 94 28 04 	call	0x850	; 0x850 <usart0_parity_set>

	// JWP 6/16/11 
     a92:	c4 01       	movw	r24, r8
     a94:	b3 01       	movw	r22, r6
     a96:	a2 01       	movw	r20, r4
     a98:	91 01       	movw	r18, r2
     a9a:	0e 94 0a 04 	call	0x814	; 0x814 <usart0_baud_set>
// JWP 6/16/11 added to change transmission logic.
// this function waits until a pending transmission is complete
// then sends a byte. If the usart_buffered_TX_flag is set true
// then the ISR continues to send until the buffer is empty, otherwise
// the ISR just sends the byte. 
void usart0_send(void)
     a9e:	8c eb       	ldi	r24, 0xBC	; 188
     aa0:	91 e0       	ldi	r25, 0x01	; 1
     aa2:	64 ec       	ldi	r22, 0xC4	; 196
     aa4:	71 e0       	ldi	r23, 0x01	; 1
     aa6:	40 e4       	ldi	r20, 0x40	; 64
     aa8:	0e 94 d0 05 	call	0xba0	; 0xba0 <ring_init>
{
     aac:	84 eb       	ldi	r24, 0xB4	; 180
     aae:	91 e0       	ldi	r25, 0x01	; 1
     ab0:	64 e3       	ldi	r22, 0x34	; 52
     ab2:	71 e0       	ldi	r23, 0x01	; 1
     ab4:	40 e8       	ldi	r20, 0x80	; 128
     ab6:	0e 94 d0 05 	call	0xba0	; 0xba0 <ring_init>

	// Wait until the transmitter is ready
	while(!usart_tx_ready_flag);

	// Set flag for ISR
	usart_buffered_tx_flag = true;
     aba:	80 91 c1 00 	lds	r24, 0x00C1
     abe:	88 60       	ori	r24, 0x08	; 8
     ac0:	80 93 c1 00 	sts	0x00C1, r24
	
     ac4:	80 91 c1 00 	lds	r24, 0x00C1
     ac8:	80 61       	ori	r24, 0x10	; 16
     aca:	80 93 c1 00 	sts	0x00C1, r24
	// Send the byte
     ace:	80 91 c1 00 	lds	r24, 0x00C1
     ad2:	80 64       	ori	r24, 0x40	; 64
     ad4:	80 93 c1 00 	sts	0x00C1, r24
	UART_DATA_REG = ring_remove(&usart0_transmit_ring);
     ad8:	80 91 c1 00 	lds	r24, 0x00C1
     adc:	80 68       	ori	r24, 0x80	; 128
     ade:	80 93 c1 00 	sts	0x00C1, r24

	// Set the ready flag to false
	usart_tx_ready_flag = false;
}

     ae2:	10 92 04 02 	sts	0x0204, r1

     ae6:	81 e0       	ldi	r24, 0x01	; 1
     ae8:	80 93 05 02 	sts	0x0205, r24
// 3/18/11 JWP removed magic number for clock and added freq_cpu
void usart0_baud_set(uint32_t baudrate, uint32_t freq_cpu)
     aec:	78 94       	sei
{
	uint16_t setting;
	
     aee:	cf 91       	pop	r28
     af0:	df 91       	pop	r29
     af2:	1f 91       	pop	r17
     af4:	0f 91       	pop	r16
     af6:	ef 90       	pop	r14
     af8:	cf 90       	pop	r12
     afa:	af 90       	pop	r10
     afc:	9f 90       	pop	r9
     afe:	8f 90       	pop	r8
     b00:	7f 90       	pop	r7
     b02:	6f 90       	pop	r6
     b04:	5f 90       	pop	r5
     b06:	4f 90       	pop	r4
     b08:	3f 90       	pop	r3
     b0a:	2f 90       	pop	r2
     b0c:	08 95       	ret

00000b0e <usart0_put_char_stream>:
   	return 0; 
} 

void usart0_init(uint32_t baud, uint32_t freq_cpu, usart_mode_t mode, usart_databits_t databits, usart_stopbits_t stopbits, usart_parity_t parity, usart_flow_control_t flow_control)
{

     b0e:	1f 93       	push	r17
     b10:	18 2f       	mov	r17, r24
	cli();
     b12:	8a 30       	cpi	r24, 0x0A	; 10
     b14:	19 f4       	brne	.+6      	; 0xb1c <usart0_put_char_stream+0xe>
     b16:	8d e0       	ldi	r24, 0x0D	; 13
     b18:	0e 94 87 05 	call	0xb0e	; 0xb0e <usart0_put_char_stream>

   	stdout = &mystdout;    //set the output stream 
     b1c:	81 2f       	mov	r24, r17
     b1e:	0e 94 97 05 	call	0xb2e	; 0xb2e <usart0_transmit_buffer_insert>

    //flow.flow_control = flow_control;
     b22:	0e 94 ac 04 	call	0x958	; 0x958 <usart0_send>
    //flow.flow_out = true;
    //flow.flow_in = true;

     b26:	80 e0       	ldi	r24, 0x00	; 0
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	1f 91       	pop	r17
     b2c:	08 95       	ret

00000b2e <usart0_transmit_buffer_insert>:
 // please contact me with details so that I may correct the situation. 
 
#include "usart.h"

bool usart0_transmit_buffer_insert(uint8_t c)
{
     b2e:	68 2f       	mov	r22, r24
    register bool result;
    result = usart0_buffer_insert(&usart0_transmit_ring, c);
     b30:	84 eb       	ldi	r24, 0xB4	; 180
     b32:	91 e0       	ldi	r25, 0x01	; 1
     b34:	0e 94 21 06 	call	0xc42	; 0xc42 <usart0_buffer_insert>
	// JWP 6/14/11 don't automatically send. Use usart0_transmit_send when 
	// 		you have finished loading what you want to send in the buffer
	//if(result == true) usart0_transmit_check();

    return(result);
}
     b38:	08 95       	ret

00000b3a <usart0_transmit_buffer_inuse_count>:
 
#include "usart.h"

uint8_t usart0_transmit_buffer_inuse_count(void)
{
    return(usart0_buffer_inuse_count(&usart0_transmit_ring));
     b3a:	84 eb       	ldi	r24, 0xB4	; 180
     b3c:	91 e0       	ldi	r25, 0x01	; 1
     b3e:	0e 94 2f 06 	call	0xc5e	; 0xc5e <usart0_buffer_inuse_count>
}
     b42:	08 95       	ret

00000b44 <ring_add>:
#include <stdbool.h>
#include <stdint.h>
#include "ring.h"

bool ring_add(ring_t *r, uint8_t data)
{
     b44:	dc 01       	movw	r26, r24
    // Get the next head index.
    ring_index_t temp_head = r->head_index + 1;
     b46:	13 96       	adiw	r26, 0x03	; 3
     b48:	4d 91       	ld	r20, X+
     b4a:	5c 91       	ld	r21, X
     b4c:	14 97       	sbiw	r26, 0x04	; 4
    if(r->head_index >= r->size - 1)
     b4e:	12 96       	adiw	r26, 0x02	; 2
     b50:	8c 91       	ld	r24, X
     b52:	12 97       	sbiw	r26, 0x02	; 2
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	01 97       	sbiw	r24, 0x01	; 1
     b58:	48 17       	cp	r20, r24
     b5a:	59 07       	cpc	r21, r25
     b5c:	18 f0       	brcs	.+6      	; 0xb64 <ring_add+0x20>
     b5e:	20 e0       	ldi	r18, 0x00	; 0
     b60:	30 e0       	ldi	r19, 0x00	; 0
     b62:	03 c0       	rjmp	.+6      	; 0xb6a <ring_add+0x26>
#include "ring.h"

bool ring_add(ring_t *r, uint8_t data)
{
    // Get the next head index.
    ring_index_t temp_head = r->head_index + 1;
     b64:	9a 01       	movw	r18, r20
     b66:	2f 5f       	subi	r18, 0xFF	; 255
     b68:	3f 4f       	sbci	r19, 0xFF	; 255
    if(r->head_index >= r->size - 1)
    {
        temp_head = 0;
    }

    if(temp_head != r->tail_index)
     b6a:	15 96       	adiw	r26, 0x05	; 5
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	16 97       	sbiw	r26, 0x06	; 6
     b72:	28 17       	cp	r18, r24
     b74:	39 07       	cpc	r19, r25
     b76:	11 f4       	brne	.+4      	; 0xb7c <ring_add+0x38>
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	08 95       	ret
    {
        r->buffer[r->head_index] = data;    // Buffer receives data
     b7c:	ed 91       	ld	r30, X+
     b7e:	fc 91       	ld	r31, X
     b80:	11 97       	sbiw	r26, 0x01	; 1
     b82:	e4 0f       	add	r30, r20
     b84:	f5 1f       	adc	r31, r21
     b86:	60 83       	st	Z, r22
        r->head_index = temp_head;
     b88:	14 96       	adiw	r26, 0x04	; 4
     b8a:	3c 93       	st	X, r19
     b8c:	2e 93       	st	-X, r18
     b8e:	13 97       	sbiw	r26, 0x03	; 3
        r->count++;
     b90:	17 96       	adiw	r26, 0x07	; 7
     b92:	8c 91       	ld	r24, X
     b94:	17 97       	sbiw	r26, 0x07	; 7
     b96:	8f 5f       	subi	r24, 0xFF	; 255
     b98:	17 96       	adiw	r26, 0x07	; 7
     b9a:	8c 93       	st	X, r24
     b9c:	81 e0       	ldi	r24, 0x01	; 1
        return(true);       // Return complete
    }

    return(false);          // Return incomplete
}
     b9e:	08 95       	ret

00000ba0 <ring_init>:
#include <stdbool.h>
#include <stdlib.h>
#include "ring.h"

bool ring_init(ring_t *r, ring_buffer_t buffer, ring_size_t size)
{
     ba0:	fc 01       	movw	r30, r24
    bool success = false;
    bool clear;
    if (size >= 2 && r != NULL && buffer != NULL)
     ba2:	42 30       	cpi	r20, 0x02	; 2
     ba4:	58 f0       	brcs	.+22     	; 0xbbc <ring_init+0x1c>
     ba6:	00 97       	sbiw	r24, 0x00	; 0
     ba8:	49 f0       	breq	.+18     	; 0xbbc <ring_init+0x1c>
     baa:	61 15       	cp	r22, r1
     bac:	71 05       	cpc	r23, r1
     bae:	31 f0       	breq	.+12     	; 0xbbc <ring_init+0x1c>
    {
        r->buffer = buffer;     // Set index pointers
     bb0:	71 83       	std	Z+1, r23	; 0x01
     bb2:	60 83       	st	Z, r22
        r->size = size;
     bb4:	42 83       	std	Z+2, r20	; 0x02
        clear = ring_clear(r);  // Call ring_clear function
     bb6:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <ring_clear>
     bba:	08 95       	ret
     bbc:	80 e0       	ldi	r24, 0x00	; 0
        {
                success = true;
        }
    }
    return(success);
}
     bbe:	08 95       	ret

00000bc0 <ring_clear>:
#include <stdlib.h>
#include <string.h>
#include "ring.h"

bool ring_clear(ring_t *r)
{
     bc0:	fc 01       	movw	r30, r24
    bool success = false;
    if (r != NULL)
     bc2:	00 97       	sbiw	r24, 0x00	; 0
     bc4:	11 f4       	brne	.+4      	; 0xbca <ring_clear+0xa>
     bc6:	80 e0       	ldi	r24, 0x00	; 0
     bc8:	08 95       	ret
    {
        r->head_index = 0;
     bca:	14 82       	std	Z+4, r1	; 0x04
     bcc:	13 82       	std	Z+3, r1	; 0x03
        r->tail_index = 0;          // Assign new values
     bce:	16 82       	std	Z+6, r1	; 0x06
     bd0:	15 82       	std	Z+5, r1	; 0x05
        r->count = 0;
     bd2:	17 82       	std	Z+7, r1	; 0x07
        memset((void *)r->buffer, 0, r->size); // Clear out memory
     bd4:	42 81       	ldd	r20, Z+2	; 0x02
     bd6:	80 81       	ld	r24, Z
     bd8:	91 81       	ldd	r25, Z+1	; 0x01
     bda:	60 e0       	ldi	r22, 0x00	; 0
     bdc:	70 e0       	ldi	r23, 0x00	; 0
     bde:	50 e0       	ldi	r21, 0x00	; 0
     be0:	0e 94 57 06 	call	0xcae	; 0xcae <memset>
     be4:	81 e0       	ldi	r24, 0x01	; 1
        success = true;
    }
    return(success);
}
     be6:	08 95       	ret

00000be8 <ring_remove>:

#include <stdint.h>
#include "ring.h"

uint8_t ring_remove(ring_t *r)
{
     be8:	dc 01       	movw	r26, r24
    uint8_t data = 0;

    // Compare the head index and the tail index
    if(r->head_index != r->tail_index)
     bea:	15 96       	adiw	r26, 0x05	; 5
     bec:	2d 91       	ld	r18, X+
     bee:	3c 91       	ld	r19, X
     bf0:	16 97       	sbiw	r26, 0x06	; 6
     bf2:	13 96       	adiw	r26, 0x03	; 3
     bf4:	8d 91       	ld	r24, X+
     bf6:	9c 91       	ld	r25, X
     bf8:	14 97       	sbiw	r26, 0x04	; 4
     bfa:	82 17       	cp	r24, r18
     bfc:	93 07       	cpc	r25, r19
     bfe:	11 f4       	brne	.+4      	; 0xc04 <ring_remove+0x1c>
     c00:	e0 e0       	ldi	r30, 0x00	; 0
     c02:	1d c0       	rjmp	.+58     	; 0xc3e <ring_remove+0x56>
    {
        // Get the Data from the buffer.
        data = r->buffer[r->tail_index];
     c04:	ed 91       	ld	r30, X+
     c06:	fc 91       	ld	r31, X
     c08:	11 97       	sbiw	r26, 0x01	; 1
     c0a:	e2 0f       	add	r30, r18
     c0c:	f3 1f       	adc	r31, r19
     c0e:	e0 81       	ld	r30, Z

        // Get the next tail index.
        ring_index_t next_tail = r->tail_index + 1;
        if(r->tail_index >= r->size - 1)
     c10:	12 96       	adiw	r26, 0x02	; 2
     c12:	8c 91       	ld	r24, X
     c14:	12 97       	sbiw	r26, 0x02	; 2
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	01 97       	sbiw	r24, 0x01	; 1
     c1a:	28 17       	cp	r18, r24
     c1c:	39 07       	cpc	r19, r25
     c1e:	18 f0       	brcs	.+6      	; 0xc26 <ring_remove+0x3e>
     c20:	80 e0       	ldi	r24, 0x00	; 0
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	02 c0       	rjmp	.+4      	; 0xc2a <ring_remove+0x42>
    {
        // Get the Data from the buffer.
        data = r->buffer[r->tail_index];

        // Get the next tail index.
        ring_index_t next_tail = r->tail_index + 1;
     c26:	c9 01       	movw	r24, r18
     c28:	01 96       	adiw	r24, 0x01	; 1
        if(r->tail_index >= r->size - 1)
        {
            next_tail = 0;
        }

        r->tail_index = next_tail;      // Move index
     c2a:	16 96       	adiw	r26, 0x06	; 6
     c2c:	9c 93       	st	X, r25
     c2e:	8e 93       	st	-X, r24
     c30:	15 97       	sbiw	r26, 0x05	; 5
        r->count--;             // Decrement count
     c32:	17 96       	adiw	r26, 0x07	; 7
     c34:	8c 91       	ld	r24, X
     c36:	17 97       	sbiw	r26, 0x07	; 7
     c38:	81 50       	subi	r24, 0x01	; 1
     c3a:	17 96       	adiw	r26, 0x07	; 7
     c3c:	8c 93       	st	X, r24
    }

    return(data);
}
     c3e:	8e 2f       	mov	r24, r30
     c40:	08 95       	ret

00000c42 <usart0_buffer_insert>:
 // please contact me with details so that I may correct the situation. 
 
#include "usart.h"

bool usart0_buffer_insert(ring_t *ring, uint8_t c)
{
     c42:	1f 93       	push	r17
     c44:	9c 01       	movw	r18, r24
    register bool result;
    register uint8_t sreg;
   
   	// Do not load buffer while transmitting from buffer
	while(usart_buffered_tx_flag);
     c46:	80 91 04 02 	lds	r24, 0x0204
     c4a:	88 23       	and	r24, r24
     c4c:	e1 f7       	brne	.-8      	; 0xc46 <usart0_buffer_insert+0x4>
    
    sreg = SREG;
     c4e:	1f b7       	in	r17, 0x3f	; 63
    cli();
     c50:	f8 94       	cli
    result = ring_add(ring, c);
     c52:	c9 01       	movw	r24, r18
     c54:	0e 94 a2 05 	call	0xb44	; 0xb44 <ring_add>
    SREG = sreg;
     c58:	1f bf       	out	0x3f, r17	; 63
    return(result);
}
     c5a:	1f 91       	pop	r17
     c5c:	08 95       	ret

00000c5e <usart0_buffer_inuse_count>:
 // please contact me with details so that I may correct the situation. 
 
#include "usart.h"

uint8_t usart0_buffer_inuse_count(ring_t *ring)
{
     c5e:	fc 01       	movw	r30, r24
    register uint8_t result;
    register uint8_t sreg;
    
    sreg = SREG;
     c60:	8f b7       	in	r24, 0x3f	; 63
    cli();
     c62:	f8 94       	cli
    result = ring->count;
    SREG = sreg;
     c64:	8f bf       	out	0x3f, r24	; 63
    return(result);
}
     c66:	87 81       	ldd	r24, Z+7	; 0x07
     c68:	08 95       	ret

00000c6a <__udivmodsi4>:
     c6a:	a1 e2       	ldi	r26, 0x21	; 33
     c6c:	1a 2e       	mov	r1, r26
     c6e:	aa 1b       	sub	r26, r26
     c70:	bb 1b       	sub	r27, r27
     c72:	fd 01       	movw	r30, r26
     c74:	0d c0       	rjmp	.+26     	; 0xc90 <__udivmodsi4_ep>

00000c76 <__udivmodsi4_loop>:
     c76:	aa 1f       	adc	r26, r26
     c78:	bb 1f       	adc	r27, r27
     c7a:	ee 1f       	adc	r30, r30
     c7c:	ff 1f       	adc	r31, r31
     c7e:	a2 17       	cp	r26, r18
     c80:	b3 07       	cpc	r27, r19
     c82:	e4 07       	cpc	r30, r20
     c84:	f5 07       	cpc	r31, r21
     c86:	20 f0       	brcs	.+8      	; 0xc90 <__udivmodsi4_ep>
     c88:	a2 1b       	sub	r26, r18
     c8a:	b3 0b       	sbc	r27, r19
     c8c:	e4 0b       	sbc	r30, r20
     c8e:	f5 0b       	sbc	r31, r21

00000c90 <__udivmodsi4_ep>:
     c90:	66 1f       	adc	r22, r22
     c92:	77 1f       	adc	r23, r23
     c94:	88 1f       	adc	r24, r24
     c96:	99 1f       	adc	r25, r25
     c98:	1a 94       	dec	r1
     c9a:	69 f7       	brne	.-38     	; 0xc76 <__udivmodsi4_loop>
     c9c:	60 95       	com	r22
     c9e:	70 95       	com	r23
     ca0:	80 95       	com	r24
     ca2:	90 95       	com	r25
     ca4:	9b 01       	movw	r18, r22
     ca6:	ac 01       	movw	r20, r24
     ca8:	bd 01       	movw	r22, r26
     caa:	cf 01       	movw	r24, r30
     cac:	08 95       	ret

00000cae <memset>:
     cae:	dc 01       	movw	r26, r24
     cb0:	01 c0       	rjmp	.+2      	; 0xcb4 <memset+0x6>
     cb2:	6d 93       	st	X+, r22
     cb4:	41 50       	subi	r20, 0x01	; 1
     cb6:	50 40       	sbci	r21, 0x00	; 0
     cb8:	e0 f7       	brcc	.-8      	; 0xcb2 <memset+0x4>
     cba:	08 95       	ret

00000cbc <vprintf>:
     cbc:	9c 01       	movw	r18, r24
     cbe:	ab 01       	movw	r20, r22
     cc0:	80 91 08 02 	lds	r24, 0x0208
     cc4:	90 91 09 02 	lds	r25, 0x0209
     cc8:	b9 01       	movw	r22, r18
     cca:	0e 94 68 06 	call	0xcd0	; 0xcd0 <vfprintf>
     cce:	08 95       	ret

00000cd0 <vfprintf>:
     cd0:	ab e0       	ldi	r26, 0x0B	; 11
     cd2:	b0 e0       	ldi	r27, 0x00	; 0
     cd4:	ee e6       	ldi	r30, 0x6E	; 110
     cd6:	f6 e0       	ldi	r31, 0x06	; 6
     cd8:	0c 94 e5 08 	jmp	0x11ca	; 0x11ca <__prologue_saves__>
     cdc:	3c 01       	movw	r6, r24
     cde:	2b 01       	movw	r4, r22
     ce0:	5a 01       	movw	r10, r20
     ce2:	fc 01       	movw	r30, r24
     ce4:	17 82       	std	Z+7, r1	; 0x07
     ce6:	16 82       	std	Z+6, r1	; 0x06
     ce8:	83 81       	ldd	r24, Z+3	; 0x03
     cea:	81 fd       	sbrc	r24, 1
     cec:	03 c0       	rjmp	.+6      	; 0xcf4 <vfprintf+0x24>
     cee:	6f ef       	ldi	r22, 0xFF	; 255
     cf0:	7f ef       	ldi	r23, 0xFF	; 255
     cf2:	c6 c1       	rjmp	.+908    	; 0x1080 <vfprintf+0x3b0>
     cf4:	9a e0       	ldi	r25, 0x0A	; 10
     cf6:	89 2e       	mov	r8, r25
     cf8:	1e 01       	movw	r2, r28
     cfa:	08 94       	sec
     cfc:	21 1c       	adc	r2, r1
     cfe:	31 1c       	adc	r3, r1
     d00:	f3 01       	movw	r30, r6
     d02:	23 81       	ldd	r18, Z+3	; 0x03
     d04:	f2 01       	movw	r30, r4
     d06:	23 fd       	sbrc	r18, 3
     d08:	85 91       	lpm	r24, Z+
     d0a:	23 ff       	sbrs	r18, 3
     d0c:	81 91       	ld	r24, Z+
     d0e:	2f 01       	movw	r4, r30
     d10:	88 23       	and	r24, r24
     d12:	09 f4       	brne	.+2      	; 0xd16 <vfprintf+0x46>
     d14:	b2 c1       	rjmp	.+868    	; 0x107a <vfprintf+0x3aa>
     d16:	85 32       	cpi	r24, 0x25	; 37
     d18:	39 f4       	brne	.+14     	; 0xd28 <vfprintf+0x58>
     d1a:	23 fd       	sbrc	r18, 3
     d1c:	85 91       	lpm	r24, Z+
     d1e:	23 ff       	sbrs	r18, 3
     d20:	81 91       	ld	r24, Z+
     d22:	2f 01       	movw	r4, r30
     d24:	85 32       	cpi	r24, 0x25	; 37
     d26:	29 f4       	brne	.+10     	; 0xd32 <vfprintf+0x62>
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	b3 01       	movw	r22, r6
     d2c:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <fputc>
     d30:	e7 cf       	rjmp	.-50     	; 0xd00 <vfprintf+0x30>
     d32:	98 2f       	mov	r25, r24
     d34:	ff 24       	eor	r15, r15
     d36:	ee 24       	eor	r14, r14
     d38:	99 24       	eor	r9, r9
     d3a:	ff e1       	ldi	r31, 0x1F	; 31
     d3c:	ff 15       	cp	r31, r15
     d3e:	d0 f0       	brcs	.+52     	; 0xd74 <vfprintf+0xa4>
     d40:	9b 32       	cpi	r25, 0x2B	; 43
     d42:	69 f0       	breq	.+26     	; 0xd5e <vfprintf+0x8e>
     d44:	9c 32       	cpi	r25, 0x2C	; 44
     d46:	28 f4       	brcc	.+10     	; 0xd52 <vfprintf+0x82>
     d48:	90 32       	cpi	r25, 0x20	; 32
     d4a:	59 f0       	breq	.+22     	; 0xd62 <vfprintf+0x92>
     d4c:	93 32       	cpi	r25, 0x23	; 35
     d4e:	91 f4       	brne	.+36     	; 0xd74 <vfprintf+0xa4>
     d50:	0e c0       	rjmp	.+28     	; 0xd6e <vfprintf+0x9e>
     d52:	9d 32       	cpi	r25, 0x2D	; 45
     d54:	49 f0       	breq	.+18     	; 0xd68 <vfprintf+0x98>
     d56:	90 33       	cpi	r25, 0x30	; 48
     d58:	69 f4       	brne	.+26     	; 0xd74 <vfprintf+0xa4>
     d5a:	41 e0       	ldi	r20, 0x01	; 1
     d5c:	24 c0       	rjmp	.+72     	; 0xda6 <vfprintf+0xd6>
     d5e:	52 e0       	ldi	r21, 0x02	; 2
     d60:	f5 2a       	or	r15, r21
     d62:	84 e0       	ldi	r24, 0x04	; 4
     d64:	f8 2a       	or	r15, r24
     d66:	28 c0       	rjmp	.+80     	; 0xdb8 <vfprintf+0xe8>
     d68:	98 e0       	ldi	r25, 0x08	; 8
     d6a:	f9 2a       	or	r15, r25
     d6c:	25 c0       	rjmp	.+74     	; 0xdb8 <vfprintf+0xe8>
     d6e:	e0 e1       	ldi	r30, 0x10	; 16
     d70:	fe 2a       	or	r15, r30
     d72:	22 c0       	rjmp	.+68     	; 0xdb8 <vfprintf+0xe8>
     d74:	f7 fc       	sbrc	r15, 7
     d76:	29 c0       	rjmp	.+82     	; 0xdca <vfprintf+0xfa>
     d78:	89 2f       	mov	r24, r25
     d7a:	80 53       	subi	r24, 0x30	; 48
     d7c:	8a 30       	cpi	r24, 0x0A	; 10
     d7e:	70 f4       	brcc	.+28     	; 0xd9c <vfprintf+0xcc>
     d80:	f6 fe       	sbrs	r15, 6
     d82:	05 c0       	rjmp	.+10     	; 0xd8e <vfprintf+0xbe>
     d84:	98 9c       	mul	r9, r8
     d86:	90 2c       	mov	r9, r0
     d88:	11 24       	eor	r1, r1
     d8a:	98 0e       	add	r9, r24
     d8c:	15 c0       	rjmp	.+42     	; 0xdb8 <vfprintf+0xe8>
     d8e:	e8 9c       	mul	r14, r8
     d90:	e0 2c       	mov	r14, r0
     d92:	11 24       	eor	r1, r1
     d94:	e8 0e       	add	r14, r24
     d96:	f0 e2       	ldi	r31, 0x20	; 32
     d98:	ff 2a       	or	r15, r31
     d9a:	0e c0       	rjmp	.+28     	; 0xdb8 <vfprintf+0xe8>
     d9c:	9e 32       	cpi	r25, 0x2E	; 46
     d9e:	29 f4       	brne	.+10     	; 0xdaa <vfprintf+0xda>
     da0:	f6 fc       	sbrc	r15, 6
     da2:	6b c1       	rjmp	.+726    	; 0x107a <vfprintf+0x3aa>
     da4:	40 e4       	ldi	r20, 0x40	; 64
     da6:	f4 2a       	or	r15, r20
     da8:	07 c0       	rjmp	.+14     	; 0xdb8 <vfprintf+0xe8>
     daa:	9c 36       	cpi	r25, 0x6C	; 108
     dac:	19 f4       	brne	.+6      	; 0xdb4 <vfprintf+0xe4>
     dae:	50 e8       	ldi	r21, 0x80	; 128
     db0:	f5 2a       	or	r15, r21
     db2:	02 c0       	rjmp	.+4      	; 0xdb8 <vfprintf+0xe8>
     db4:	98 36       	cpi	r25, 0x68	; 104
     db6:	49 f4       	brne	.+18     	; 0xdca <vfprintf+0xfa>
     db8:	f2 01       	movw	r30, r4
     dba:	23 fd       	sbrc	r18, 3
     dbc:	95 91       	lpm	r25, Z+
     dbe:	23 ff       	sbrs	r18, 3
     dc0:	91 91       	ld	r25, Z+
     dc2:	2f 01       	movw	r4, r30
     dc4:	99 23       	and	r25, r25
     dc6:	09 f0       	breq	.+2      	; 0xdca <vfprintf+0xfa>
     dc8:	b8 cf       	rjmp	.-144    	; 0xd3a <vfprintf+0x6a>
     dca:	89 2f       	mov	r24, r25
     dcc:	85 54       	subi	r24, 0x45	; 69
     dce:	83 30       	cpi	r24, 0x03	; 3
     dd0:	18 f0       	brcs	.+6      	; 0xdd8 <vfprintf+0x108>
     dd2:	80 52       	subi	r24, 0x20	; 32
     dd4:	83 30       	cpi	r24, 0x03	; 3
     dd6:	38 f4       	brcc	.+14     	; 0xde6 <vfprintf+0x116>
     dd8:	44 e0       	ldi	r20, 0x04	; 4
     dda:	50 e0       	ldi	r21, 0x00	; 0
     ddc:	a4 0e       	add	r10, r20
     dde:	b5 1e       	adc	r11, r21
     de0:	5f e3       	ldi	r21, 0x3F	; 63
     de2:	59 83       	std	Y+1, r21	; 0x01
     de4:	0f c0       	rjmp	.+30     	; 0xe04 <vfprintf+0x134>
     de6:	93 36       	cpi	r25, 0x63	; 99
     de8:	31 f0       	breq	.+12     	; 0xdf6 <vfprintf+0x126>
     dea:	93 37       	cpi	r25, 0x73	; 115
     dec:	79 f0       	breq	.+30     	; 0xe0c <vfprintf+0x13c>
     dee:	93 35       	cpi	r25, 0x53	; 83
     df0:	09 f0       	breq	.+2      	; 0xdf4 <vfprintf+0x124>
     df2:	56 c0       	rjmp	.+172    	; 0xea0 <vfprintf+0x1d0>
     df4:	20 c0       	rjmp	.+64     	; 0xe36 <vfprintf+0x166>
     df6:	f5 01       	movw	r30, r10
     df8:	80 81       	ld	r24, Z
     dfa:	89 83       	std	Y+1, r24	; 0x01
     dfc:	42 e0       	ldi	r20, 0x02	; 2
     dfe:	50 e0       	ldi	r21, 0x00	; 0
     e00:	a4 0e       	add	r10, r20
     e02:	b5 1e       	adc	r11, r21
     e04:	61 01       	movw	r12, r2
     e06:	01 e0       	ldi	r16, 0x01	; 1
     e08:	10 e0       	ldi	r17, 0x00	; 0
     e0a:	12 c0       	rjmp	.+36     	; 0xe30 <vfprintf+0x160>
     e0c:	f5 01       	movw	r30, r10
     e0e:	c0 80       	ld	r12, Z
     e10:	d1 80       	ldd	r13, Z+1	; 0x01
     e12:	f6 fc       	sbrc	r15, 6
     e14:	03 c0       	rjmp	.+6      	; 0xe1c <vfprintf+0x14c>
     e16:	6f ef       	ldi	r22, 0xFF	; 255
     e18:	7f ef       	ldi	r23, 0xFF	; 255
     e1a:	02 c0       	rjmp	.+4      	; 0xe20 <vfprintf+0x150>
     e1c:	69 2d       	mov	r22, r9
     e1e:	70 e0       	ldi	r23, 0x00	; 0
     e20:	42 e0       	ldi	r20, 0x02	; 2
     e22:	50 e0       	ldi	r21, 0x00	; 0
     e24:	a4 0e       	add	r10, r20
     e26:	b5 1e       	adc	r11, r21
     e28:	c6 01       	movw	r24, r12
     e2a:	0e 94 50 08 	call	0x10a0	; 0x10a0 <strnlen>
     e2e:	8c 01       	movw	r16, r24
     e30:	5f e7       	ldi	r21, 0x7F	; 127
     e32:	f5 22       	and	r15, r21
     e34:	14 c0       	rjmp	.+40     	; 0xe5e <vfprintf+0x18e>
     e36:	f5 01       	movw	r30, r10
     e38:	c0 80       	ld	r12, Z
     e3a:	d1 80       	ldd	r13, Z+1	; 0x01
     e3c:	f6 fc       	sbrc	r15, 6
     e3e:	03 c0       	rjmp	.+6      	; 0xe46 <vfprintf+0x176>
     e40:	6f ef       	ldi	r22, 0xFF	; 255
     e42:	7f ef       	ldi	r23, 0xFF	; 255
     e44:	02 c0       	rjmp	.+4      	; 0xe4a <vfprintf+0x17a>
     e46:	69 2d       	mov	r22, r9
     e48:	70 e0       	ldi	r23, 0x00	; 0
     e4a:	42 e0       	ldi	r20, 0x02	; 2
     e4c:	50 e0       	ldi	r21, 0x00	; 0
     e4e:	a4 0e       	add	r10, r20
     e50:	b5 1e       	adc	r11, r21
     e52:	c6 01       	movw	r24, r12
     e54:	0e 94 45 08 	call	0x108a	; 0x108a <strnlen_P>
     e58:	8c 01       	movw	r16, r24
     e5a:	50 e8       	ldi	r21, 0x80	; 128
     e5c:	f5 2a       	or	r15, r21
     e5e:	f3 fe       	sbrs	r15, 3
     e60:	07 c0       	rjmp	.+14     	; 0xe70 <vfprintf+0x1a0>
     e62:	1a c0       	rjmp	.+52     	; 0xe98 <vfprintf+0x1c8>
     e64:	80 e2       	ldi	r24, 0x20	; 32
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	b3 01       	movw	r22, r6
     e6a:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <fputc>
     e6e:	ea 94       	dec	r14
     e70:	8e 2d       	mov	r24, r14
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	08 17       	cp	r16, r24
     e76:	19 07       	cpc	r17, r25
     e78:	a8 f3       	brcs	.-22     	; 0xe64 <vfprintf+0x194>
     e7a:	0e c0       	rjmp	.+28     	; 0xe98 <vfprintf+0x1c8>
     e7c:	f6 01       	movw	r30, r12
     e7e:	f7 fc       	sbrc	r15, 7
     e80:	85 91       	lpm	r24, Z+
     e82:	f7 fe       	sbrs	r15, 7
     e84:	81 91       	ld	r24, Z+
     e86:	6f 01       	movw	r12, r30
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	b3 01       	movw	r22, r6
     e8c:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <fputc>
     e90:	e1 10       	cpse	r14, r1
     e92:	ea 94       	dec	r14
     e94:	01 50       	subi	r16, 0x01	; 1
     e96:	10 40       	sbci	r17, 0x00	; 0
     e98:	01 15       	cp	r16, r1
     e9a:	11 05       	cpc	r17, r1
     e9c:	79 f7       	brne	.-34     	; 0xe7c <vfprintf+0x1ac>
     e9e:	ea c0       	rjmp	.+468    	; 0x1074 <vfprintf+0x3a4>
     ea0:	94 36       	cpi	r25, 0x64	; 100
     ea2:	11 f0       	breq	.+4      	; 0xea8 <vfprintf+0x1d8>
     ea4:	99 36       	cpi	r25, 0x69	; 105
     ea6:	69 f5       	brne	.+90     	; 0xf02 <vfprintf+0x232>
     ea8:	f7 fe       	sbrs	r15, 7
     eaa:	08 c0       	rjmp	.+16     	; 0xebc <vfprintf+0x1ec>
     eac:	f5 01       	movw	r30, r10
     eae:	20 81       	ld	r18, Z
     eb0:	31 81       	ldd	r19, Z+1	; 0x01
     eb2:	42 81       	ldd	r20, Z+2	; 0x02
     eb4:	53 81       	ldd	r21, Z+3	; 0x03
     eb6:	84 e0       	ldi	r24, 0x04	; 4
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	0a c0       	rjmp	.+20     	; 0xed0 <vfprintf+0x200>
     ebc:	f5 01       	movw	r30, r10
     ebe:	80 81       	ld	r24, Z
     ec0:	91 81       	ldd	r25, Z+1	; 0x01
     ec2:	9c 01       	movw	r18, r24
     ec4:	44 27       	eor	r20, r20
     ec6:	37 fd       	sbrc	r19, 7
     ec8:	40 95       	com	r20
     eca:	54 2f       	mov	r21, r20
     ecc:	82 e0       	ldi	r24, 0x02	; 2
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	a8 0e       	add	r10, r24
     ed2:	b9 1e       	adc	r11, r25
     ed4:	9f e6       	ldi	r25, 0x6F	; 111
     ed6:	f9 22       	and	r15, r25
     ed8:	57 ff       	sbrs	r21, 7
     eda:	09 c0       	rjmp	.+18     	; 0xeee <vfprintf+0x21e>
     edc:	50 95       	com	r21
     ede:	40 95       	com	r20
     ee0:	30 95       	com	r19
     ee2:	21 95       	neg	r18
     ee4:	3f 4f       	sbci	r19, 0xFF	; 255
     ee6:	4f 4f       	sbci	r20, 0xFF	; 255
     ee8:	5f 4f       	sbci	r21, 0xFF	; 255
     eea:	e0 e8       	ldi	r30, 0x80	; 128
     eec:	fe 2a       	or	r15, r30
     eee:	ca 01       	movw	r24, r20
     ef0:	b9 01       	movw	r22, r18
     ef2:	a1 01       	movw	r20, r2
     ef4:	2a e0       	ldi	r18, 0x0A	; 10
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	0e 94 87 08 	call	0x110e	; 0x110e <__ultoa_invert>
     efc:	d8 2e       	mov	r13, r24
     efe:	d2 18       	sub	r13, r2
     f00:	40 c0       	rjmp	.+128    	; 0xf82 <vfprintf+0x2b2>
     f02:	95 37       	cpi	r25, 0x75	; 117
     f04:	29 f4       	brne	.+10     	; 0xf10 <vfprintf+0x240>
     f06:	1f 2d       	mov	r17, r15
     f08:	1f 7e       	andi	r17, 0xEF	; 239
     f0a:	2a e0       	ldi	r18, 0x0A	; 10
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	1d c0       	rjmp	.+58     	; 0xf4a <vfprintf+0x27a>
     f10:	1f 2d       	mov	r17, r15
     f12:	19 7f       	andi	r17, 0xF9	; 249
     f14:	9f 36       	cpi	r25, 0x6F	; 111
     f16:	61 f0       	breq	.+24     	; 0xf30 <vfprintf+0x260>
     f18:	90 37       	cpi	r25, 0x70	; 112
     f1a:	20 f4       	brcc	.+8      	; 0xf24 <vfprintf+0x254>
     f1c:	98 35       	cpi	r25, 0x58	; 88
     f1e:	09 f0       	breq	.+2      	; 0xf22 <vfprintf+0x252>
     f20:	ac c0       	rjmp	.+344    	; 0x107a <vfprintf+0x3aa>
     f22:	0f c0       	rjmp	.+30     	; 0xf42 <vfprintf+0x272>
     f24:	90 37       	cpi	r25, 0x70	; 112
     f26:	39 f0       	breq	.+14     	; 0xf36 <vfprintf+0x266>
     f28:	98 37       	cpi	r25, 0x78	; 120
     f2a:	09 f0       	breq	.+2      	; 0xf2e <vfprintf+0x25e>
     f2c:	a6 c0       	rjmp	.+332    	; 0x107a <vfprintf+0x3aa>
     f2e:	04 c0       	rjmp	.+8      	; 0xf38 <vfprintf+0x268>
     f30:	28 e0       	ldi	r18, 0x08	; 8
     f32:	30 e0       	ldi	r19, 0x00	; 0
     f34:	0a c0       	rjmp	.+20     	; 0xf4a <vfprintf+0x27a>
     f36:	10 61       	ori	r17, 0x10	; 16
     f38:	14 fd       	sbrc	r17, 4
     f3a:	14 60       	ori	r17, 0x04	; 4
     f3c:	20 e1       	ldi	r18, 0x10	; 16
     f3e:	30 e0       	ldi	r19, 0x00	; 0
     f40:	04 c0       	rjmp	.+8      	; 0xf4a <vfprintf+0x27a>
     f42:	14 fd       	sbrc	r17, 4
     f44:	16 60       	ori	r17, 0x06	; 6
     f46:	20 e1       	ldi	r18, 0x10	; 16
     f48:	32 e0       	ldi	r19, 0x02	; 2
     f4a:	17 ff       	sbrs	r17, 7
     f4c:	08 c0       	rjmp	.+16     	; 0xf5e <vfprintf+0x28e>
     f4e:	f5 01       	movw	r30, r10
     f50:	60 81       	ld	r22, Z
     f52:	71 81       	ldd	r23, Z+1	; 0x01
     f54:	82 81       	ldd	r24, Z+2	; 0x02
     f56:	93 81       	ldd	r25, Z+3	; 0x03
     f58:	44 e0       	ldi	r20, 0x04	; 4
     f5a:	50 e0       	ldi	r21, 0x00	; 0
     f5c:	08 c0       	rjmp	.+16     	; 0xf6e <vfprintf+0x29e>
     f5e:	f5 01       	movw	r30, r10
     f60:	80 81       	ld	r24, Z
     f62:	91 81       	ldd	r25, Z+1	; 0x01
     f64:	bc 01       	movw	r22, r24
     f66:	80 e0       	ldi	r24, 0x00	; 0
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	42 e0       	ldi	r20, 0x02	; 2
     f6c:	50 e0       	ldi	r21, 0x00	; 0
     f6e:	a4 0e       	add	r10, r20
     f70:	b5 1e       	adc	r11, r21
     f72:	a1 01       	movw	r20, r2
     f74:	0e 94 87 08 	call	0x110e	; 0x110e <__ultoa_invert>
     f78:	d8 2e       	mov	r13, r24
     f7a:	d2 18       	sub	r13, r2
     f7c:	8f e7       	ldi	r24, 0x7F	; 127
     f7e:	f8 2e       	mov	r15, r24
     f80:	f1 22       	and	r15, r17
     f82:	f6 fe       	sbrs	r15, 6
     f84:	0b c0       	rjmp	.+22     	; 0xf9c <vfprintf+0x2cc>
     f86:	5e ef       	ldi	r21, 0xFE	; 254
     f88:	f5 22       	and	r15, r21
     f8a:	d9 14       	cp	r13, r9
     f8c:	38 f4       	brcc	.+14     	; 0xf9c <vfprintf+0x2cc>
     f8e:	f4 fe       	sbrs	r15, 4
     f90:	07 c0       	rjmp	.+14     	; 0xfa0 <vfprintf+0x2d0>
     f92:	f2 fc       	sbrc	r15, 2
     f94:	05 c0       	rjmp	.+10     	; 0xfa0 <vfprintf+0x2d0>
     f96:	8f ee       	ldi	r24, 0xEF	; 239
     f98:	f8 22       	and	r15, r24
     f9a:	02 c0       	rjmp	.+4      	; 0xfa0 <vfprintf+0x2d0>
     f9c:	1d 2d       	mov	r17, r13
     f9e:	01 c0       	rjmp	.+2      	; 0xfa2 <vfprintf+0x2d2>
     fa0:	19 2d       	mov	r17, r9
     fa2:	f4 fe       	sbrs	r15, 4
     fa4:	0d c0       	rjmp	.+26     	; 0xfc0 <vfprintf+0x2f0>
     fa6:	fe 01       	movw	r30, r28
     fa8:	ed 0d       	add	r30, r13
     faa:	f1 1d       	adc	r31, r1
     fac:	80 81       	ld	r24, Z
     fae:	80 33       	cpi	r24, 0x30	; 48
     fb0:	19 f4       	brne	.+6      	; 0xfb8 <vfprintf+0x2e8>
     fb2:	99 ee       	ldi	r25, 0xE9	; 233
     fb4:	f9 22       	and	r15, r25
     fb6:	08 c0       	rjmp	.+16     	; 0xfc8 <vfprintf+0x2f8>
     fb8:	1f 5f       	subi	r17, 0xFF	; 255
     fba:	f2 fe       	sbrs	r15, 2
     fbc:	05 c0       	rjmp	.+10     	; 0xfc8 <vfprintf+0x2f8>
     fbe:	03 c0       	rjmp	.+6      	; 0xfc6 <vfprintf+0x2f6>
     fc0:	8f 2d       	mov	r24, r15
     fc2:	86 78       	andi	r24, 0x86	; 134
     fc4:	09 f0       	breq	.+2      	; 0xfc8 <vfprintf+0x2f8>
     fc6:	1f 5f       	subi	r17, 0xFF	; 255
     fc8:	0f 2d       	mov	r16, r15
     fca:	f3 fc       	sbrc	r15, 3
     fcc:	14 c0       	rjmp	.+40     	; 0xff6 <vfprintf+0x326>
     fce:	f0 fe       	sbrs	r15, 0
     fd0:	0f c0       	rjmp	.+30     	; 0xff0 <vfprintf+0x320>
     fd2:	1e 15       	cp	r17, r14
     fd4:	10 f0       	brcs	.+4      	; 0xfda <vfprintf+0x30a>
     fd6:	9d 2c       	mov	r9, r13
     fd8:	0b c0       	rjmp	.+22     	; 0xff0 <vfprintf+0x320>
     fda:	9d 2c       	mov	r9, r13
     fdc:	9e 0c       	add	r9, r14
     fde:	91 1a       	sub	r9, r17
     fe0:	1e 2d       	mov	r17, r14
     fe2:	06 c0       	rjmp	.+12     	; 0xff0 <vfprintf+0x320>
     fe4:	80 e2       	ldi	r24, 0x20	; 32
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	b3 01       	movw	r22, r6
     fea:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <fputc>
     fee:	1f 5f       	subi	r17, 0xFF	; 255
     ff0:	1e 15       	cp	r17, r14
     ff2:	c0 f3       	brcs	.-16     	; 0xfe4 <vfprintf+0x314>
     ff4:	04 c0       	rjmp	.+8      	; 0xffe <vfprintf+0x32e>
     ff6:	1e 15       	cp	r17, r14
     ff8:	10 f4       	brcc	.+4      	; 0xffe <vfprintf+0x32e>
     ffa:	e1 1a       	sub	r14, r17
     ffc:	01 c0       	rjmp	.+2      	; 0x1000 <vfprintf+0x330>
     ffe:	ee 24       	eor	r14, r14
    1000:	04 ff       	sbrs	r16, 4
    1002:	0f c0       	rjmp	.+30     	; 0x1022 <vfprintf+0x352>
    1004:	80 e3       	ldi	r24, 0x30	; 48
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	b3 01       	movw	r22, r6
    100a:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <fputc>
    100e:	02 ff       	sbrs	r16, 2
    1010:	1d c0       	rjmp	.+58     	; 0x104c <vfprintf+0x37c>
    1012:	01 fd       	sbrc	r16, 1
    1014:	03 c0       	rjmp	.+6      	; 0x101c <vfprintf+0x34c>
    1016:	88 e7       	ldi	r24, 0x78	; 120
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	0e c0       	rjmp	.+28     	; 0x1038 <vfprintf+0x368>
    101c:	88 e5       	ldi	r24, 0x58	; 88
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	0b c0       	rjmp	.+22     	; 0x1038 <vfprintf+0x368>
    1022:	80 2f       	mov	r24, r16
    1024:	86 78       	andi	r24, 0x86	; 134
    1026:	91 f0       	breq	.+36     	; 0x104c <vfprintf+0x37c>
    1028:	01 ff       	sbrs	r16, 1
    102a:	02 c0       	rjmp	.+4      	; 0x1030 <vfprintf+0x360>
    102c:	8b e2       	ldi	r24, 0x2B	; 43
    102e:	01 c0       	rjmp	.+2      	; 0x1032 <vfprintf+0x362>
    1030:	80 e2       	ldi	r24, 0x20	; 32
    1032:	f7 fc       	sbrc	r15, 7
    1034:	8d e2       	ldi	r24, 0x2D	; 45
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	b3 01       	movw	r22, r6
    103a:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <fputc>
    103e:	06 c0       	rjmp	.+12     	; 0x104c <vfprintf+0x37c>
    1040:	80 e3       	ldi	r24, 0x30	; 48
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	b3 01       	movw	r22, r6
    1046:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <fputc>
    104a:	9a 94       	dec	r9
    104c:	d9 14       	cp	r13, r9
    104e:	c0 f3       	brcs	.-16     	; 0x1040 <vfprintf+0x370>
    1050:	da 94       	dec	r13
    1052:	f1 01       	movw	r30, r2
    1054:	ed 0d       	add	r30, r13
    1056:	f1 1d       	adc	r31, r1
    1058:	80 81       	ld	r24, Z
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	b3 01       	movw	r22, r6
    105e:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <fputc>
    1062:	dd 20       	and	r13, r13
    1064:	a9 f7       	brne	.-22     	; 0x1050 <vfprintf+0x380>
    1066:	06 c0       	rjmp	.+12     	; 0x1074 <vfprintf+0x3a4>
    1068:	80 e2       	ldi	r24, 0x20	; 32
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	b3 01       	movw	r22, r6
    106e:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <fputc>
    1072:	ea 94       	dec	r14
    1074:	ee 20       	and	r14, r14
    1076:	c1 f7       	brne	.-16     	; 0x1068 <vfprintf+0x398>
    1078:	43 ce       	rjmp	.-890    	; 0xd00 <vfprintf+0x30>
    107a:	f3 01       	movw	r30, r6
    107c:	66 81       	ldd	r22, Z+6	; 0x06
    107e:	77 81       	ldd	r23, Z+7	; 0x07
    1080:	cb 01       	movw	r24, r22
    1082:	2b 96       	adiw	r28, 0x0b	; 11
    1084:	e2 e1       	ldi	r30, 0x12	; 18
    1086:	0c 94 01 09 	jmp	0x1202	; 0x1202 <__epilogue_restores__>

0000108a <strnlen_P>:
    108a:	fc 01       	movw	r30, r24
    108c:	05 90       	lpm	r0, Z+
    108e:	61 50       	subi	r22, 0x01	; 1
    1090:	70 40       	sbci	r23, 0x00	; 0
    1092:	01 10       	cpse	r0, r1
    1094:	d8 f7       	brcc	.-10     	; 0x108c <strnlen_P+0x2>
    1096:	80 95       	com	r24
    1098:	90 95       	com	r25
    109a:	8e 0f       	add	r24, r30
    109c:	9f 1f       	adc	r25, r31
    109e:	08 95       	ret

000010a0 <strnlen>:
    10a0:	fc 01       	movw	r30, r24
    10a2:	61 50       	subi	r22, 0x01	; 1
    10a4:	70 40       	sbci	r23, 0x00	; 0
    10a6:	01 90       	ld	r0, Z+
    10a8:	01 10       	cpse	r0, r1
    10aa:	d8 f7       	brcc	.-10     	; 0x10a2 <strnlen+0x2>
    10ac:	80 95       	com	r24
    10ae:	90 95       	com	r25
    10b0:	8e 0f       	add	r24, r30
    10b2:	9f 1f       	adc	r25, r31
    10b4:	08 95       	ret

000010b6 <fputc>:
    10b6:	0f 93       	push	r16
    10b8:	1f 93       	push	r17
    10ba:	cf 93       	push	r28
    10bc:	df 93       	push	r29
    10be:	8c 01       	movw	r16, r24
    10c0:	eb 01       	movw	r28, r22
    10c2:	8b 81       	ldd	r24, Y+3	; 0x03
    10c4:	81 ff       	sbrs	r24, 1
    10c6:	1b c0       	rjmp	.+54     	; 0x10fe <fputc+0x48>
    10c8:	82 ff       	sbrs	r24, 2
    10ca:	0d c0       	rjmp	.+26     	; 0x10e6 <fputc+0x30>
    10cc:	2e 81       	ldd	r18, Y+6	; 0x06
    10ce:	3f 81       	ldd	r19, Y+7	; 0x07
    10d0:	8c 81       	ldd	r24, Y+4	; 0x04
    10d2:	9d 81       	ldd	r25, Y+5	; 0x05
    10d4:	28 17       	cp	r18, r24
    10d6:	39 07       	cpc	r19, r25
    10d8:	64 f4       	brge	.+24     	; 0x10f2 <fputc+0x3c>
    10da:	e8 81       	ld	r30, Y
    10dc:	f9 81       	ldd	r31, Y+1	; 0x01
    10de:	01 93       	st	Z+, r16
    10e0:	f9 83       	std	Y+1, r31	; 0x01
    10e2:	e8 83       	st	Y, r30
    10e4:	06 c0       	rjmp	.+12     	; 0x10f2 <fputc+0x3c>
    10e6:	e8 85       	ldd	r30, Y+8	; 0x08
    10e8:	f9 85       	ldd	r31, Y+9	; 0x09
    10ea:	80 2f       	mov	r24, r16
    10ec:	09 95       	icall
    10ee:	89 2b       	or	r24, r25
    10f0:	31 f4       	brne	.+12     	; 0x10fe <fputc+0x48>
    10f2:	8e 81       	ldd	r24, Y+6	; 0x06
    10f4:	9f 81       	ldd	r25, Y+7	; 0x07
    10f6:	01 96       	adiw	r24, 0x01	; 1
    10f8:	9f 83       	std	Y+7, r25	; 0x07
    10fa:	8e 83       	std	Y+6, r24	; 0x06
    10fc:	02 c0       	rjmp	.+4      	; 0x1102 <fputc+0x4c>
    10fe:	0f ef       	ldi	r16, 0xFF	; 255
    1100:	1f ef       	ldi	r17, 0xFF	; 255
    1102:	c8 01       	movw	r24, r16
    1104:	df 91       	pop	r29
    1106:	cf 91       	pop	r28
    1108:	1f 91       	pop	r17
    110a:	0f 91       	pop	r16
    110c:	08 95       	ret

0000110e <__ultoa_invert>:
    110e:	fa 01       	movw	r30, r20
    1110:	aa 27       	eor	r26, r26
    1112:	28 30       	cpi	r18, 0x08	; 8
    1114:	51 f1       	breq	.+84     	; 0x116a <__ultoa_invert+0x5c>
    1116:	20 31       	cpi	r18, 0x10	; 16
    1118:	81 f1       	breq	.+96     	; 0x117a <__ultoa_invert+0x6c>
    111a:	e8 94       	clt
    111c:	6f 93       	push	r22
    111e:	6e 7f       	andi	r22, 0xFE	; 254
    1120:	6e 5f       	subi	r22, 0xFE	; 254
    1122:	7f 4f       	sbci	r23, 0xFF	; 255
    1124:	8f 4f       	sbci	r24, 0xFF	; 255
    1126:	9f 4f       	sbci	r25, 0xFF	; 255
    1128:	af 4f       	sbci	r26, 0xFF	; 255
    112a:	b1 e0       	ldi	r27, 0x01	; 1
    112c:	3e d0       	rcall	.+124    	; 0x11aa <__ultoa_invert+0x9c>
    112e:	b4 e0       	ldi	r27, 0x04	; 4
    1130:	3c d0       	rcall	.+120    	; 0x11aa <__ultoa_invert+0x9c>
    1132:	67 0f       	add	r22, r23
    1134:	78 1f       	adc	r23, r24
    1136:	89 1f       	adc	r24, r25
    1138:	9a 1f       	adc	r25, r26
    113a:	a1 1d       	adc	r26, r1
    113c:	68 0f       	add	r22, r24
    113e:	79 1f       	adc	r23, r25
    1140:	8a 1f       	adc	r24, r26
    1142:	91 1d       	adc	r25, r1
    1144:	a1 1d       	adc	r26, r1
    1146:	6a 0f       	add	r22, r26
    1148:	71 1d       	adc	r23, r1
    114a:	81 1d       	adc	r24, r1
    114c:	91 1d       	adc	r25, r1
    114e:	a1 1d       	adc	r26, r1
    1150:	20 d0       	rcall	.+64     	; 0x1192 <__ultoa_invert+0x84>
    1152:	09 f4       	brne	.+2      	; 0x1156 <__ultoa_invert+0x48>
    1154:	68 94       	set
    1156:	3f 91       	pop	r19
    1158:	2a e0       	ldi	r18, 0x0A	; 10
    115a:	26 9f       	mul	r18, r22
    115c:	11 24       	eor	r1, r1
    115e:	30 19       	sub	r19, r0
    1160:	30 5d       	subi	r19, 0xD0	; 208
    1162:	31 93       	st	Z+, r19
    1164:	de f6       	brtc	.-74     	; 0x111c <__ultoa_invert+0xe>
    1166:	cf 01       	movw	r24, r30
    1168:	08 95       	ret
    116a:	46 2f       	mov	r20, r22
    116c:	47 70       	andi	r20, 0x07	; 7
    116e:	40 5d       	subi	r20, 0xD0	; 208
    1170:	41 93       	st	Z+, r20
    1172:	b3 e0       	ldi	r27, 0x03	; 3
    1174:	0f d0       	rcall	.+30     	; 0x1194 <__ultoa_invert+0x86>
    1176:	c9 f7       	brne	.-14     	; 0x116a <__ultoa_invert+0x5c>
    1178:	f6 cf       	rjmp	.-20     	; 0x1166 <__ultoa_invert+0x58>
    117a:	46 2f       	mov	r20, r22
    117c:	4f 70       	andi	r20, 0x0F	; 15
    117e:	40 5d       	subi	r20, 0xD0	; 208
    1180:	4a 33       	cpi	r20, 0x3A	; 58
    1182:	18 f0       	brcs	.+6      	; 0x118a <__ultoa_invert+0x7c>
    1184:	49 5d       	subi	r20, 0xD9	; 217
    1186:	31 fd       	sbrc	r19, 1
    1188:	40 52       	subi	r20, 0x20	; 32
    118a:	41 93       	st	Z+, r20
    118c:	02 d0       	rcall	.+4      	; 0x1192 <__ultoa_invert+0x84>
    118e:	a9 f7       	brne	.-22     	; 0x117a <__ultoa_invert+0x6c>
    1190:	ea cf       	rjmp	.-44     	; 0x1166 <__ultoa_invert+0x58>
    1192:	b4 e0       	ldi	r27, 0x04	; 4
    1194:	a6 95       	lsr	r26
    1196:	97 95       	ror	r25
    1198:	87 95       	ror	r24
    119a:	77 95       	ror	r23
    119c:	67 95       	ror	r22
    119e:	ba 95       	dec	r27
    11a0:	c9 f7       	brne	.-14     	; 0x1194 <__ultoa_invert+0x86>
    11a2:	00 97       	sbiw	r24, 0x00	; 0
    11a4:	61 05       	cpc	r22, r1
    11a6:	71 05       	cpc	r23, r1
    11a8:	08 95       	ret
    11aa:	9b 01       	movw	r18, r22
    11ac:	ac 01       	movw	r20, r24
    11ae:	0a 2e       	mov	r0, r26
    11b0:	06 94       	lsr	r0
    11b2:	57 95       	ror	r21
    11b4:	47 95       	ror	r20
    11b6:	37 95       	ror	r19
    11b8:	27 95       	ror	r18
    11ba:	ba 95       	dec	r27
    11bc:	c9 f7       	brne	.-14     	; 0x11b0 <__ultoa_invert+0xa2>
    11be:	62 0f       	add	r22, r18
    11c0:	73 1f       	adc	r23, r19
    11c2:	84 1f       	adc	r24, r20
    11c4:	95 1f       	adc	r25, r21
    11c6:	a0 1d       	adc	r26, r0
    11c8:	08 95       	ret

000011ca <__prologue_saves__>:
    11ca:	2f 92       	push	r2
    11cc:	3f 92       	push	r3
    11ce:	4f 92       	push	r4
    11d0:	5f 92       	push	r5
    11d2:	6f 92       	push	r6
    11d4:	7f 92       	push	r7
    11d6:	8f 92       	push	r8
    11d8:	9f 92       	push	r9
    11da:	af 92       	push	r10
    11dc:	bf 92       	push	r11
    11de:	cf 92       	push	r12
    11e0:	df 92       	push	r13
    11e2:	ef 92       	push	r14
    11e4:	ff 92       	push	r15
    11e6:	0f 93       	push	r16
    11e8:	1f 93       	push	r17
    11ea:	cf 93       	push	r28
    11ec:	df 93       	push	r29
    11ee:	cd b7       	in	r28, 0x3d	; 61
    11f0:	de b7       	in	r29, 0x3e	; 62
    11f2:	ca 1b       	sub	r28, r26
    11f4:	db 0b       	sbc	r29, r27
    11f6:	0f b6       	in	r0, 0x3f	; 63
    11f8:	f8 94       	cli
    11fa:	de bf       	out	0x3e, r29	; 62
    11fc:	0f be       	out	0x3f, r0	; 63
    11fe:	cd bf       	out	0x3d, r28	; 61
    1200:	09 94       	ijmp

00001202 <__epilogue_restores__>:
    1202:	2a 88       	ldd	r2, Y+18	; 0x12
    1204:	39 88       	ldd	r3, Y+17	; 0x11
    1206:	48 88       	ldd	r4, Y+16	; 0x10
    1208:	5f 84       	ldd	r5, Y+15	; 0x0f
    120a:	6e 84       	ldd	r6, Y+14	; 0x0e
    120c:	7d 84       	ldd	r7, Y+13	; 0x0d
    120e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1210:	9b 84       	ldd	r9, Y+11	; 0x0b
    1212:	aa 84       	ldd	r10, Y+10	; 0x0a
    1214:	b9 84       	ldd	r11, Y+9	; 0x09
    1216:	c8 84       	ldd	r12, Y+8	; 0x08
    1218:	df 80       	ldd	r13, Y+7	; 0x07
    121a:	ee 80       	ldd	r14, Y+6	; 0x06
    121c:	fd 80       	ldd	r15, Y+5	; 0x05
    121e:	0c 81       	ldd	r16, Y+4	; 0x04
    1220:	1b 81       	ldd	r17, Y+3	; 0x03
    1222:	aa 81       	ldd	r26, Y+2	; 0x02
    1224:	b9 81       	ldd	r27, Y+1	; 0x01
    1226:	ce 0f       	add	r28, r30
    1228:	d1 1d       	adc	r29, r1
    122a:	0f b6       	in	r0, 0x3f	; 63
    122c:	f8 94       	cli
    122e:	de bf       	out	0x3e, r29	; 62
    1230:	0f be       	out	0x3f, r0	; 63
    1232:	cd bf       	out	0x3d, r28	; 61
    1234:	ed 01       	movw	r28, r26
    1236:	08 95       	ret

00001238 <_exit>:
    1238:	f8 94       	cli

0000123a <__stop_program>:
    123a:	ff cf       	rjmp	.-2      	; 0x123a <__stop_program>
