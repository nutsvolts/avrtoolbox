
digitalio.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000074  00800100  000011cc  00001260  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d8  00800174  00800174  000012d4  2**0
                  ALLOC
  3 .debug_aranges 000002a0  00000000  00000000  000012d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000de4  00000000  00000000  00001574  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002937  00000000  00000000  00002358  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000010b7  00000000  00000000  00004c8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001b18  00000000  00000000  00005d46  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000310  00000000  00000000  00007860  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000085b  00000000  00000000  00007b70  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006b9  00000000  00000000  000083cb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 0e 04 	jmp	0x81c	; 0x81c <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 3e 04 	jmp	0x87c	; 0x87c <__vector_20>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ec ec       	ldi	r30, 0xCC	; 204
      7c:	f1 e1       	ldi	r31, 0x11	; 17
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	a4 37       	cpi	r26, 0x74	; 116
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	12 e0       	ldi	r17, 0x02	; 2
      8c:	a4 e7       	ldi	r26, 0x74	; 116
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ac 34       	cpi	r26, 0x4C	; 76
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
      9e:	0c 94 e4 08 	jmp	0x11c8	; 0x11c8 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#define DIP_PIN5 PC0
#define DIP_PIN6 PC1
#define DIP_PIN7 PC2

int main()
{
      a6:	2f 92       	push	r2
      a8:	3f 92       	push	r3
      aa:	5f 92       	push	r5
      ac:	6f 92       	push	r6
      ae:	7f 92       	push	r7
      b0:	8f 92       	push	r8
      b2:	9f 92       	push	r9
      b4:	af 92       	push	r10
      b6:	bf 92       	push	r11
      b8:	cf 92       	push	r12
      ba:	df 92       	push	r13
      bc:	ef 92       	push	r14
      be:	ff 92       	push	r15
      c0:	0f 93       	push	r16
      c2:	1f 93       	push	r17
      c4:	cf 93       	push	r28
      c6:	df 93       	push	r29

	serial_begin(57600);
      c8:	60 e0       	ldi	r22, 0x00	; 0
      ca:	71 ee       	ldi	r23, 0xE1	; 225
      cc:	80 e0       	ldi	r24, 0x00	; 0
      ce:	90 e0       	ldi	r25, 0x00	; 0
      d0:	0e 94 a1 03 	call	0x742	; 0x742 <serial_begin>
	serial_out("Digitalio tester 073\n");
      d4:	00 d0       	rcall	.+0      	; 0xd6 <main+0x30>
      d6:	80 e0       	ldi	r24, 0x00	; 0
      d8:	91 e0       	ldi	r25, 0x01	; 1
      da:	ad b7       	in	r26, 0x3d	; 61
      dc:	be b7       	in	r27, 0x3e	; 62
      de:	12 96       	adiw	r26, 0x02	; 2
      e0:	9c 93       	st	X, r25
      e2:	8e 93       	st	-X, r24
      e4:	11 97       	sbiw	r26, 0x01	; 1
      e6:	0e 94 bb 03 	call	0x776	; 0x776 <serial_out>

	int newvalue = 0;
	int oldvalue = 1;

	// Set LED port pins to output
	port_pin_mode(LED0_1_PORT,LED0_PIN,OUTPUT);
      ea:	0f 90       	pop	r0
      ec:	0f 90       	pop	r0
      ee:	82 e0       	ldi	r24, 0x02	; 2
      f0:	64 e0       	ldi	r22, 0x04	; 4
      f2:	41 e0       	ldi	r20, 0x01	; 1
      f4:	0e 94 08 02 	call	0x410	; 0x410 <port_pin_mode>
	port_pin_mode(LED0_1_PORT,LED1_PIN,OUTPUT);
      f8:	82 e0       	ldi	r24, 0x02	; 2
      fa:	65 e0       	ldi	r22, 0x05	; 5
      fc:	41 e0       	ldi	r20, 0x01	; 1
      fe:	0e 94 08 02 	call	0x410	; 0x410 <port_pin_mode>
	port_pin_mode(LED2_7_PORT,LED2_PIN,OUTPUT);
     102:	83 e0       	ldi	r24, 0x03	; 3
     104:	62 e0       	ldi	r22, 0x02	; 2
     106:	41 e0       	ldi	r20, 0x01	; 1
     108:	0e 94 08 02 	call	0x410	; 0x410 <port_pin_mode>
	port_pin_mode(LED2_7_PORT,LED3_PIN,OUTPUT);
     10c:	83 e0       	ldi	r24, 0x03	; 3
     10e:	63 e0       	ldi	r22, 0x03	; 3
     110:	41 e0       	ldi	r20, 0x01	; 1
     112:	0e 94 08 02 	call	0x410	; 0x410 <port_pin_mode>
	port_pin_mode(LED2_7_PORT,LED4_PIN,OUTPUT);
     116:	83 e0       	ldi	r24, 0x03	; 3
     118:	64 e0       	ldi	r22, 0x04	; 4
     11a:	41 e0       	ldi	r20, 0x01	; 1
     11c:	0e 94 08 02 	call	0x410	; 0x410 <port_pin_mode>
	port_pin_mode(LED2_7_PORT,LED5_PIN,OUTPUT);
     120:	83 e0       	ldi	r24, 0x03	; 3
     122:	65 e0       	ldi	r22, 0x05	; 5
     124:	41 e0       	ldi	r20, 0x01	; 1
     126:	0e 94 08 02 	call	0x410	; 0x410 <port_pin_mode>
	port_pin_mode(LED2_7_PORT,LED6_PIN,OUTPUT);
     12a:	83 e0       	ldi	r24, 0x03	; 3
     12c:	66 e0       	ldi	r22, 0x06	; 6
     12e:	41 e0       	ldi	r20, 0x01	; 1
     130:	0e 94 08 02 	call	0x410	; 0x410 <port_pin_mode>
	port_pin_mode(LED2_7_PORT,LED7_PIN,OUTPUT);
     134:	83 e0       	ldi	r24, 0x03	; 3
     136:	67 e0       	ldi	r22, 0x07	; 7
     138:	41 e0       	ldi	r20, 0x01	; 1
     13a:	0e 94 08 02 	call	0x410	; 0x410 <port_pin_mode>

	// set the pullups for the DIP switch
	port_pin_activate_pullup(DIP0_4_PORT,DIP_PIN0);
     13e:	81 e0       	ldi	r24, 0x01	; 1
     140:	60 e0       	ldi	r22, 0x00	; 0
     142:	0e 94 df 02 	call	0x5be	; 0x5be <port_pin_activate_pullup>
	port_pin_activate_pullup(DIP0_4_PORT,DIP_PIN1);
     146:	81 e0       	ldi	r24, 0x01	; 1
     148:	61 e0       	ldi	r22, 0x01	; 1
     14a:	0e 94 df 02 	call	0x5be	; 0x5be <port_pin_activate_pullup>
	port_pin_activate_pullup(DIP0_4_PORT,DIP_PIN2);
     14e:	81 e0       	ldi	r24, 0x01	; 1
     150:	62 e0       	ldi	r22, 0x02	; 2
     152:	0e 94 df 02 	call	0x5be	; 0x5be <port_pin_activate_pullup>
	port_pin_activate_pullup(DIP0_4_PORT,DIP_PIN3);
     156:	81 e0       	ldi	r24, 0x01	; 1
     158:	63 e0       	ldi	r22, 0x03	; 3
     15a:	0e 94 df 02 	call	0x5be	; 0x5be <port_pin_activate_pullup>
	port_pin_activate_pullup(DIP0_4_PORT,DIP_PIN4);
     15e:	81 e0       	ldi	r24, 0x01	; 1
     160:	64 e0       	ldi	r22, 0x04	; 4
     162:	0e 94 df 02 	call	0x5be	; 0x5be <port_pin_activate_pullup>
	port_pin_activate_pullup(DIP5_7_PORT,DIP_PIN5);
     166:	82 e0       	ldi	r24, 0x02	; 2
     168:	60 e0       	ldi	r22, 0x00	; 0
     16a:	0e 94 df 02 	call	0x5be	; 0x5be <port_pin_activate_pullup>
	port_pin_activate_pullup(DIP5_7_PORT,DIP_PIN6);
     16e:	82 e0       	ldi	r24, 0x02	; 2
     170:	61 e0       	ldi	r22, 0x01	; 1
     172:	0e 94 df 02 	call	0x5be	; 0x5be <port_pin_activate_pullup>
	port_pin_activate_pullup(DIP5_7_PORT,DIP_PIN7);
     176:	82 e0       	ldi	r24, 0x02	; 2
     178:	62 e0       	ldi	r22, 0x02	; 2
     17a:	0e 94 df 02 	call	0x5be	; 0x5be <port_pin_activate_pullup>
     17e:	f1 e0       	ldi	r31, 0x01	; 1
     180:	2f 2e       	mov	r2, r31
     182:	31 2c       	mov	r3, r1

	

	while(1)
	{
		port_pin_write(LED0_1_PORT,LED0_PIN,port_pin_read(DIP0_4_PORT,DIP_PIN0));
     184:	81 e0       	ldi	r24, 0x01	; 1
     186:	60 e0       	ldi	r22, 0x00	; 0
     188:	0e 94 5d 02 	call	0x4ba	; 0x4ba <port_pin_read>
     18c:	48 2f       	mov	r20, r24
     18e:	82 e0       	ldi	r24, 0x02	; 2
     190:	64 e0       	ldi	r22, 0x04	; 4
     192:	0e 94 4c 03 	call	0x698	; 0x698 <port_pin_write>
		port_pin_write(LED0_1_PORT,LED1_PIN,port_pin_read(DIP0_4_PORT,DIP_PIN1));
     196:	81 e0       	ldi	r24, 0x01	; 1
     198:	61 e0       	ldi	r22, 0x01	; 1
     19a:	0e 94 5d 02 	call	0x4ba	; 0x4ba <port_pin_read>
     19e:	48 2f       	mov	r20, r24
     1a0:	82 e0       	ldi	r24, 0x02	; 2
     1a2:	65 e0       	ldi	r22, 0x05	; 5
     1a4:	0e 94 4c 03 	call	0x698	; 0x698 <port_pin_write>
		port_pin_write(LED2_7_PORT,LED2_PIN,port_pin_read(DIP0_4_PORT,DIP_PIN2));
     1a8:	81 e0       	ldi	r24, 0x01	; 1
     1aa:	62 e0       	ldi	r22, 0x02	; 2
     1ac:	0e 94 5d 02 	call	0x4ba	; 0x4ba <port_pin_read>
     1b0:	48 2f       	mov	r20, r24
     1b2:	83 e0       	ldi	r24, 0x03	; 3
     1b4:	62 e0       	ldi	r22, 0x02	; 2
     1b6:	0e 94 4c 03 	call	0x698	; 0x698 <port_pin_write>
		port_pin_write(LED2_7_PORT,LED3_PIN,port_pin_read(DIP0_4_PORT,DIP_PIN3));
     1ba:	81 e0       	ldi	r24, 0x01	; 1
     1bc:	63 e0       	ldi	r22, 0x03	; 3
     1be:	0e 94 5d 02 	call	0x4ba	; 0x4ba <port_pin_read>
     1c2:	48 2f       	mov	r20, r24
     1c4:	83 e0       	ldi	r24, 0x03	; 3
     1c6:	63 e0       	ldi	r22, 0x03	; 3
     1c8:	0e 94 4c 03 	call	0x698	; 0x698 <port_pin_write>
		port_pin_write(LED2_7_PORT,LED4_PIN,port_pin_read(DIP0_4_PORT,DIP_PIN4));
     1cc:	81 e0       	ldi	r24, 0x01	; 1
     1ce:	64 e0       	ldi	r22, 0x04	; 4
     1d0:	0e 94 5d 02 	call	0x4ba	; 0x4ba <port_pin_read>
     1d4:	48 2f       	mov	r20, r24
     1d6:	83 e0       	ldi	r24, 0x03	; 3
     1d8:	64 e0       	ldi	r22, 0x04	; 4
     1da:	0e 94 4c 03 	call	0x698	; 0x698 <port_pin_write>
		port_pin_write(LED2_7_PORT,LED5_PIN,port_pin_read(DIP5_7_PORT,DIP_PIN5));
     1de:	82 e0       	ldi	r24, 0x02	; 2
     1e0:	60 e0       	ldi	r22, 0x00	; 0
     1e2:	0e 94 5d 02 	call	0x4ba	; 0x4ba <port_pin_read>
     1e6:	48 2f       	mov	r20, r24
     1e8:	83 e0       	ldi	r24, 0x03	; 3
     1ea:	65 e0       	ldi	r22, 0x05	; 5
     1ec:	0e 94 4c 03 	call	0x698	; 0x698 <port_pin_write>
		port_pin_write(LED2_7_PORT,LED6_PIN,port_pin_read(DIP5_7_PORT,DIP_PIN6));
     1f0:	82 e0       	ldi	r24, 0x02	; 2
     1f2:	61 e0       	ldi	r22, 0x01	; 1
     1f4:	0e 94 5d 02 	call	0x4ba	; 0x4ba <port_pin_read>
     1f8:	48 2f       	mov	r20, r24
     1fa:	83 e0       	ldi	r24, 0x03	; 3
     1fc:	66 e0       	ldi	r22, 0x06	; 6
     1fe:	0e 94 4c 03 	call	0x698	; 0x698 <port_pin_write>
		port_pin_write(LED2_7_PORT,LED7_PIN,port_pin_read(DIP5_7_PORT,DIP_PIN7));
     202:	82 e0       	ldi	r24, 0x02	; 2
     204:	62 e0       	ldi	r22, 0x02	; 2
     206:	0e 94 5d 02 	call	0x4ba	; 0x4ba <port_pin_read>
     20a:	48 2f       	mov	r20, r24
     20c:	83 e0       	ldi	r24, 0x03	; 3
     20e:	67 e0       	ldi	r22, 0x07	; 7
     210:	0e 94 4c 03 	call	0x698	; 0x698 <port_pin_write>

		newvalue = (port_pin_read(DIP0_4_PORT,DIP_PIN0)) \
     214:	81 e0       	ldi	r24, 0x01	; 1
     216:	60 e0       	ldi	r22, 0x00	; 0
     218:	0e 94 5d 02 	call	0x4ba	; 0x4ba <port_pin_read>
     21c:	68 2e       	mov	r6, r24
     21e:	81 e0       	ldi	r24, 0x01	; 1
     220:	61 e0       	ldi	r22, 0x01	; 1
     222:	0e 94 5d 02 	call	0x4ba	; 0x4ba <port_pin_read>
     226:	58 2e       	mov	r5, r24
     228:	81 e0       	ldi	r24, 0x01	; 1
     22a:	62 e0       	ldi	r22, 0x02	; 2
     22c:	0e 94 5d 02 	call	0x4ba	; 0x4ba <port_pin_read>
     230:	c8 2e       	mov	r12, r24
     232:	81 e0       	ldi	r24, 0x01	; 1
     234:	63 e0       	ldi	r22, 0x03	; 3
     236:	0e 94 5d 02 	call	0x4ba	; 0x4ba <port_pin_read>
     23a:	88 2e       	mov	r8, r24
     23c:	81 e0       	ldi	r24, 0x01	; 1
     23e:	64 e0       	ldi	r22, 0x04	; 4
     240:	0e 94 5d 02 	call	0x4ba	; 0x4ba <port_pin_read>
     244:	a8 2e       	mov	r10, r24
     246:	82 e0       	ldi	r24, 0x02	; 2
     248:	60 e0       	ldi	r22, 0x00	; 0
     24a:	0e 94 5d 02 	call	0x4ba	; 0x4ba <port_pin_read>
     24e:	e8 2e       	mov	r14, r24
     250:	82 e0       	ldi	r24, 0x02	; 2
     252:	61 e0       	ldi	r22, 0x01	; 1
     254:	0e 94 5d 02 	call	0x4ba	; 0x4ba <port_pin_read>
     258:	08 2f       	mov	r16, r24
     25a:	82 e0       	ldi	r24, 0x02	; 2
     25c:	62 e0       	ldi	r22, 0x02	; 2
     25e:	0e 94 5d 02 	call	0x4ba	; 0x4ba <port_pin_read>
     262:	c5 2d       	mov	r28, r5
     264:	dd 27       	eor	r29, r29
     266:	c7 fd       	sbrc	r28, 7
     268:	d0 95       	com	r29
     26a:	cc 0f       	add	r28, r28
     26c:	dd 1f       	adc	r29, r29
     26e:	dd 24       	eor	r13, r13
     270:	c7 fc       	sbrc	r12, 7
     272:	d0 94       	com	r13
     274:	cc 0c       	add	r12, r12
     276:	dd 1c       	adc	r13, r13
     278:	cc 0c       	add	r12, r12
     27a:	dd 1c       	adc	r13, r13
     27c:	cc 0d       	add	r28, r12
     27e:	dd 1d       	adc	r29, r13
     280:	77 24       	eor	r7, r7
     282:	67 fc       	sbrc	r6, 7
     284:	70 94       	com	r7
     286:	c6 0d       	add	r28, r6
     288:	d7 1d       	adc	r29, r7
     28a:	99 24       	eor	r9, r9
     28c:	87 fc       	sbrc	r8, 7
     28e:	90 94       	com	r9
     290:	63 e0       	ldi	r22, 0x03	; 3
     292:	88 0c       	add	r8, r8
     294:	99 1c       	adc	r9, r9
     296:	6a 95       	dec	r22
     298:	e1 f7       	brne	.-8      	; 0x292 <main+0x1ec>
     29a:	c8 0d       	add	r28, r8
     29c:	d9 1d       	adc	r29, r9
     29e:	bb 24       	eor	r11, r11
     2a0:	a7 fc       	sbrc	r10, 7
     2a2:	b0 94       	com	r11
     2a4:	54 e0       	ldi	r21, 0x04	; 4
     2a6:	aa 0c       	add	r10, r10
     2a8:	bb 1c       	adc	r11, r11
     2aa:	5a 95       	dec	r21
     2ac:	e1 f7       	brne	.-8      	; 0x2a6 <main+0x200>
     2ae:	ca 0d       	add	r28, r10
     2b0:	db 1d       	adc	r29, r11
     2b2:	ff 24       	eor	r15, r15
     2b4:	e7 fc       	sbrc	r14, 7
     2b6:	f0 94       	com	r15
     2b8:	45 e0       	ldi	r20, 0x05	; 5
     2ba:	ee 0c       	add	r14, r14
     2bc:	ff 1c       	adc	r15, r15
     2be:	4a 95       	dec	r20
     2c0:	e1 f7       	brne	.-8      	; 0x2ba <main+0x214>
     2c2:	ce 0d       	add	r28, r14
     2c4:	df 1d       	adc	r29, r15
     2c6:	11 27       	eor	r17, r17
     2c8:	07 fd       	sbrc	r16, 7
     2ca:	10 95       	com	r17
     2cc:	36 e0       	ldi	r19, 0x06	; 6
     2ce:	00 0f       	add	r16, r16
     2d0:	11 1f       	adc	r17, r17
     2d2:	3a 95       	dec	r19
     2d4:	e1 f7       	brne	.-8      	; 0x2ce <main+0x228>
     2d6:	c0 0f       	add	r28, r16
     2d8:	d1 1f       	adc	r29, r17
     2da:	99 27       	eor	r25, r25
     2dc:	87 fd       	sbrc	r24, 7
     2de:	90 95       	com	r25
     2e0:	96 95       	lsr	r25
     2e2:	98 2f       	mov	r25, r24
     2e4:	88 27       	eor	r24, r24
     2e6:	97 95       	ror	r25
     2e8:	87 95       	ror	r24
     2ea:	c8 0f       	add	r28, r24
     2ec:	d9 1f       	adc	r29, r25
				 + (port_pin_read(DIP0_4_PORT,DIP_PIN4) << 4) \
				 + (port_pin_read(DIP5_7_PORT,DIP_PIN5) << 5) \
				 + (port_pin_read(DIP5_7_PORT,DIP_PIN6) << 6) \
				 + (port_pin_read(DIP5_7_PORT,DIP_PIN7) << 7);
		
		if(newvalue != oldvalue)
     2ee:	c2 15       	cp	r28, r2
     2f0:	d3 05       	cpc	r29, r3
     2f2:	09 f4       	brne	.+2      	; 0x2f6 <main+0x250>
     2f4:	47 cf       	rjmp	.-370    	; 0x184 <main+0xde>
		{
			serial_out("DIP 8-bits: %x\n", newvalue);	
     2f6:	00 d0       	rcall	.+0      	; 0x2f8 <main+0x252>
     2f8:	00 d0       	rcall	.+0      	; 0x2fa <main+0x254>
     2fa:	ed b7       	in	r30, 0x3d	; 61
     2fc:	fe b7       	in	r31, 0x3e	; 62
     2fe:	31 96       	adiw	r30, 0x01	; 1
     300:	86 e1       	ldi	r24, 0x16	; 22
     302:	91 e0       	ldi	r25, 0x01	; 1
     304:	ad b7       	in	r26, 0x3d	; 61
     306:	be b7       	in	r27, 0x3e	; 62
     308:	12 96       	adiw	r26, 0x02	; 2
     30a:	9c 93       	st	X, r25
     30c:	8e 93       	st	-X, r24
     30e:	11 97       	sbiw	r26, 0x01	; 1
     310:	c2 83       	std	Z+2, r28	; 0x02
     312:	d3 83       	std	Z+3, r29	; 0x03
     314:	0e 94 bb 03 	call	0x776	; 0x776 <serial_out>
     318:	1e 01       	movw	r2, r28
     31a:	0f 90       	pop	r0
     31c:	0f 90       	pop	r0
     31e:	0f 90       	pop	r0
     320:	0f 90       	pop	r0
     322:	30 cf       	rjmp	.-416    	; 0x184 <main+0xde>

00000324 <digital_read>:

// Declared int for compatiblity with Arduino digitalRead
// However added return of ERROR as -1 since the Arduino way
// of returning LOW for NOT_A_PIN is doesn't inform on the error
int8_t digital_read(uint8_t pin)
{
     324:	28 2f       	mov	r18, r24
	{
		return(-1); // returen ERROR
	}
#elif defined (__AVR_ATmega328__) || defined (__AVR_ATmega328P__) 
	// Use Arduino numbering
	if( pin <= 7 ) // matches bit for PORTD 
     326:	88 30       	cpi	r24, 0x08	; 8
     328:	10 f4       	brcc	.+4      	; 0x32e <digital_read+0xa>
	{
		return(pin_read(PIND,pin));
     32a:	39 b1       	in	r19, 0x09	; 9
     32c:	0b c0       	rjmp	.+22     	; 0x344 <digital_read+0x20>
	}
	else if (pin <= 13) // matches bit# for PORTB 0 thru 5
     32e:	8e 30       	cpi	r24, 0x0E	; 14
     330:	18 f4       	brcc	.+6      	; 0x338 <digital_read+0x14>
	{
		pin -= 8;
		return(pin_read(PINB,pin));			
     332:	33 b1       	in	r19, 0x03	; 3
     334:	28 50       	subi	r18, 0x08	; 8
     336:	06 c0       	rjmp	.+12     	; 0x344 <digital_read+0x20>
	}
	else if (pin <= 19) // matches bit# for PORTC 0 thru 5
     338:	84 31       	cpi	r24, 0x14	; 20
     33a:	10 f0       	brcs	.+4      	; 0x340 <digital_read+0x1c>
     33c:	3f ef       	ldi	r19, 0xFF	; 255
     33e:	0a c0       	rjmp	.+20     	; 0x354 <digital_read+0x30>
	{ // on the Arduino these are labeled analog 0 thru 5, but also work for digitalio
		pin -= 14;
		return(pin_read(PINC,pin));
     340:	36 b1       	in	r19, 0x06	; 6
     342:	2e 50       	subi	r18, 0x0E	; 14
     344:	81 e0       	ldi	r24, 0x01	; 1
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	02 c0       	rjmp	.+4      	; 0x34e <digital_read+0x2a>
     34a:	88 0f       	add	r24, r24
     34c:	99 1f       	adc	r25, r25
     34e:	2a 95       	dec	r18
     350:	e2 f7       	brpl	.-8      	; 0x34a <digital_read+0x26>
     352:	38 23       	and	r19, r24
	}
#else 
#    warning "device type not defined"
#endif

}
     354:	83 2f       	mov	r24, r19
     356:	08 95       	ret

00000358 <digital_write>:
 // please contact me with details so that I may correct the situation. 

#include "digitalio.h"

int8_t digital_write(uint8_t pin, uint8_t value)
{
     358:	38 2f       	mov	r19, r24
	{
		return(-1); // return ERROR
	}
#elif defined (__AVR_ATmega328__) || defined (__AVR_ATmega328P__) 
	// Use Arduino numbering
	if( pin <= 7 ) // matches bit for PORTD 
     35a:	88 30       	cpi	r24, 0x08	; 8
     35c:	d0 f4       	brcc	.+52     	; 0x392 <digital_write+0x3a>
	{
		pin_write(PORTD,pin,value);
     35e:	66 23       	and	r22, r22
     360:	59 f0       	breq	.+22     	; 0x378 <digital_write+0x20>
     362:	2b b1       	in	r18, 0x0b	; 11
     364:	81 e0       	ldi	r24, 0x01	; 1
     366:	90 e0       	ldi	r25, 0x00	; 0
     368:	02 c0       	rjmp	.+4      	; 0x36e <digital_write+0x16>
     36a:	88 0f       	add	r24, r24
     36c:	99 1f       	adc	r25, r25
     36e:	3a 95       	dec	r19
     370:	e2 f7       	brpl	.-8      	; 0x36a <digital_write+0x12>
     372:	28 2b       	or	r18, r24
     374:	2b b9       	out	0x0b, r18	; 11
     376:	0b c0       	rjmp	.+22     	; 0x38e <digital_write+0x36>
     378:	2b b1       	in	r18, 0x0b	; 11
     37a:	81 e0       	ldi	r24, 0x01	; 1
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	02 c0       	rjmp	.+4      	; 0x384 <digital_write+0x2c>
     380:	88 0f       	add	r24, r24
     382:	99 1f       	adc	r25, r25
     384:	3a 95       	dec	r19
     386:	e2 f7       	brpl	.-8      	; 0x380 <digital_write+0x28>
     388:	80 95       	com	r24
     38a:	82 23       	and	r24, r18
     38c:	8b b9       	out	0x0b, r24	; 11
     38e:	8b b1       	in	r24, 0x0b	; 11
     390:	2f c0       	rjmp	.+94     	; 0x3f0 <digital_write+0x98>
	}
	else if (pin <= 13) // matches bit# for PORTB 0 thru 5
     392:	8e 30       	cpi	r24, 0x0E	; 14
     394:	d8 f4       	brcc	.+54     	; 0x3cc <digital_write+0x74>
	{
		pin -= 8;
     396:	38 50       	subi	r19, 0x08	; 8
		pin_write(PORTB,pin,value);
     398:	66 23       	and	r22, r22
     39a:	59 f0       	breq	.+22     	; 0x3b2 <digital_write+0x5a>
     39c:	25 b1       	in	r18, 0x05	; 5
     39e:	81 e0       	ldi	r24, 0x01	; 1
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	02 c0       	rjmp	.+4      	; 0x3a8 <digital_write+0x50>
     3a4:	88 0f       	add	r24, r24
     3a6:	99 1f       	adc	r25, r25
     3a8:	3a 95       	dec	r19
     3aa:	e2 f7       	brpl	.-8      	; 0x3a4 <digital_write+0x4c>
     3ac:	28 2b       	or	r18, r24
     3ae:	25 b9       	out	0x05, r18	; 5
     3b0:	0b c0       	rjmp	.+22     	; 0x3c8 <digital_write+0x70>
     3b2:	25 b1       	in	r18, 0x05	; 5
     3b4:	81 e0       	ldi	r24, 0x01	; 1
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	02 c0       	rjmp	.+4      	; 0x3be <digital_write+0x66>
     3ba:	88 0f       	add	r24, r24
     3bc:	99 1f       	adc	r25, r25
     3be:	3a 95       	dec	r19
     3c0:	e2 f7       	brpl	.-8      	; 0x3ba <digital_write+0x62>
     3c2:	80 95       	com	r24
     3c4:	82 23       	and	r24, r18
     3c6:	85 b9       	out	0x05, r24	; 5
     3c8:	85 b1       	in	r24, 0x05	; 5
     3ca:	12 c0       	rjmp	.+36     	; 0x3f0 <digital_write+0x98>
	}
	else if (pin <= 19) // matches bit# for PORTC 0 thru 5
     3cc:	84 31       	cpi	r24, 0x14	; 20
     3ce:	10 f0       	brcs	.+4      	; 0x3d4 <digital_write+0x7c>
     3d0:	8f ef       	ldi	r24, 0xFF	; 255
     3d2:	08 95       	ret
	{ // on the Arduino these are labeled analog 0 thru 5, but also work for digitalio
		pin -= 14;
     3d4:	3e 50       	subi	r19, 0x0E	; 14
		pin_write(PORTC,pin,value);
     3d6:	66 23       	and	r22, r22
     3d8:	69 f0       	breq	.+26     	; 0x3f4 <digital_write+0x9c>
     3da:	28 b1       	in	r18, 0x08	; 8
     3dc:	81 e0       	ldi	r24, 0x01	; 1
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	02 c0       	rjmp	.+4      	; 0x3e6 <digital_write+0x8e>
     3e2:	88 0f       	add	r24, r24
     3e4:	99 1f       	adc	r25, r25
     3e6:	3a 95       	dec	r19
     3e8:	e2 f7       	brpl	.-8      	; 0x3e2 <digital_write+0x8a>
     3ea:	28 2b       	or	r18, r24
     3ec:	28 b9       	out	0x08, r18	; 8
     3ee:	88 b1       	in	r24, 0x08	; 8
     3f0:	81 e0       	ldi	r24, 0x01	; 1
     3f2:	08 95       	ret
     3f4:	28 b1       	in	r18, 0x08	; 8
     3f6:	81 e0       	ldi	r24, 0x01	; 1
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	02 c0       	rjmp	.+4      	; 0x400 <digital_write+0xa8>
     3fc:	88 0f       	add	r24, r24
     3fe:	99 1f       	adc	r25, r25
     400:	3a 95       	dec	r19
     402:	e2 f7       	brpl	.-8      	; 0x3fc <digital_write+0xa4>
     404:	80 95       	com	r24
     406:	82 23       	and	r24, r18
     408:	88 b9       	out	0x08, r24	; 8
     40a:	88 b1       	in	r24, 0x08	; 8
     40c:	81 e0       	ldi	r24, 0x01	; 1
#else 
#    warning "device type not defined"
#endif
	return(1); // return OKAY

}
     40e:	08 95       	ret

00000410 <port_pin_mode>:
	{
		return(-1); // return ERROR
	}
	// TODO: remaining accessible Butterfly ports
#elif defined (__AVR_ATmega328__) || defined (__AVR_ATmega328P__) 
	if( portx == portd ) // matches bit for PORTD 
     410:	83 30       	cpi	r24, 0x03	; 3
     412:	c9 f4       	brne	.+50     	; 0x446 <port_pin_mode+0x36>
	{
		if ( mode == INPUT ) // set DDRD bit to 0
     414:	44 23       	and	r20, r20
     416:	61 f4       	brne	.+24     	; 0x430 <port_pin_mode+0x20>
		{
			DDRD &= ~(1<<pin);
     418:	2a b1       	in	r18, 0x0a	; 10
     41a:	81 e0       	ldi	r24, 0x01	; 1
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	02 c0       	rjmp	.+4      	; 0x424 <port_pin_mode+0x14>
     420:	88 0f       	add	r24, r24
     422:	99 1f       	adc	r25, r25
     424:	6a 95       	dec	r22
     426:	e2 f7       	brpl	.-8      	; 0x420 <port_pin_mode+0x10>
     428:	80 95       	com	r24
     42a:	82 23       	and	r24, r18
     42c:	8a b9       	out	0x0a, r24	; 10
     42e:	37 c0       	rjmp	.+110    	; 0x49e <port_pin_mode+0x8e>
		}
		else // ( mode == OUTPUT ) // set DDRB bit to 1
		{
			DDRD |= (1<<pin);
     430:	2a b1       	in	r18, 0x0a	; 10
     432:	81 e0       	ldi	r24, 0x01	; 1
     434:	90 e0       	ldi	r25, 0x00	; 0
     436:	02 c0       	rjmp	.+4      	; 0x43c <port_pin_mode+0x2c>
     438:	88 0f       	add	r24, r24
     43a:	99 1f       	adc	r25, r25
     43c:	6a 95       	dec	r22
     43e:	e2 f7       	brpl	.-8      	; 0x438 <port_pin_mode+0x28>
     440:	28 2b       	or	r18, r24
     442:	2a b9       	out	0x0a, r18	; 10
     444:	2c c0       	rjmp	.+88     	; 0x49e <port_pin_mode+0x8e>
		}
	}
	else if (portx == portb) // matches bit# for PORTB 0 thru 5
     446:	81 30       	cpi	r24, 0x01	; 1
     448:	c9 f4       	brne	.+50     	; 0x47c <port_pin_mode+0x6c>
	{
		if ( mode == INPUT ) // set DDRD bit to 0
     44a:	44 23       	and	r20, r20
     44c:	61 f4       	brne	.+24     	; 0x466 <port_pin_mode+0x56>
		{
			DDRB &= ~(1<<pin);
     44e:	24 b1       	in	r18, 0x04	; 4
     450:	81 e0       	ldi	r24, 0x01	; 1
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	02 c0       	rjmp	.+4      	; 0x45a <port_pin_mode+0x4a>
     456:	88 0f       	add	r24, r24
     458:	99 1f       	adc	r25, r25
     45a:	6a 95       	dec	r22
     45c:	e2 f7       	brpl	.-8      	; 0x456 <port_pin_mode+0x46>
     45e:	80 95       	com	r24
     460:	82 23       	and	r24, r18
     462:	84 b9       	out	0x04, r24	; 4
     464:	1c c0       	rjmp	.+56     	; 0x49e <port_pin_mode+0x8e>
		}
		else // ( mode == OUTPUT ) // set DDRB bit to 1
		{
			DDRB |= (1<<pin);
     466:	24 b1       	in	r18, 0x04	; 4
     468:	81 e0       	ldi	r24, 0x01	; 1
     46a:	90 e0       	ldi	r25, 0x00	; 0
     46c:	02 c0       	rjmp	.+4      	; 0x472 <port_pin_mode+0x62>
     46e:	88 0f       	add	r24, r24
     470:	99 1f       	adc	r25, r25
     472:	6a 95       	dec	r22
     474:	e2 f7       	brpl	.-8      	; 0x46e <port_pin_mode+0x5e>
     476:	28 2b       	or	r18, r24
     478:	24 b9       	out	0x04, r18	; 4
     47a:	11 c0       	rjmp	.+34     	; 0x49e <port_pin_mode+0x8e>
		}
	}
	else if (portx == portc) // matches bit# for PORTC 0 thru 5
     47c:	82 30       	cpi	r24, 0x02	; 2
     47e:	11 f0       	breq	.+4      	; 0x484 <port_pin_mode+0x74>
     480:	8f ef       	ldi	r24, 0xFF	; 255
     482:	08 95       	ret
	{ // on the Arduino these are labeled analog 0 thru 5, but also work for digitalio
		if ( mode == INPUT ) // set DDRD bit to 0
     484:	44 23       	and	r20, r20
     486:	69 f4       	brne	.+26     	; 0x4a2 <port_pin_mode+0x92>
		{
			DDRC &= ~(1<<pin);
     488:	27 b1       	in	r18, 0x07	; 7
     48a:	81 e0       	ldi	r24, 0x01	; 1
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	02 c0       	rjmp	.+4      	; 0x494 <port_pin_mode+0x84>
     490:	88 0f       	add	r24, r24
     492:	99 1f       	adc	r25, r25
     494:	6a 95       	dec	r22
     496:	e2 f7       	brpl	.-8      	; 0x490 <port_pin_mode+0x80>
     498:	80 95       	com	r24
     49a:	82 23       	and	r24, r18
     49c:	87 b9       	out	0x07, r24	; 7
     49e:	81 e0       	ldi	r24, 0x01	; 1
     4a0:	08 95       	ret
		}
		else // ( mode == OUTPUT ) // set DDRB bit to 1
		{
			DDRC |= (1<<pin);
     4a2:	27 b1       	in	r18, 0x07	; 7
     4a4:	81 e0       	ldi	r24, 0x01	; 1
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	02 c0       	rjmp	.+4      	; 0x4ae <port_pin_mode+0x9e>
     4aa:	88 0f       	add	r24, r24
     4ac:	99 1f       	adc	r25, r25
     4ae:	6a 95       	dec	r22
     4b0:	e2 f7       	brpl	.-8      	; 0x4aa <port_pin_mode+0x9a>
     4b2:	28 2b       	or	r18, r24
     4b4:	27 b9       	out	0x07, r18	; 7
     4b6:	81 e0       	ldi	r24, 0x01	; 1
#else 
#    warning "device type not defined"
#endif
	return(1); // return OKAY

}
     4b8:	08 95       	ret

000004ba <port_pin_read>:
	{
		return(-1); // return ERROR
	}
	// TODO: ADD ADDRESSIBLE BUTTERFLY PORT PINS
#elif defined (__AVR_ATmega328__) || defined (__AVR_ATmega328P__) 
	if(portx == portd) // matches bit for PORTD 
     4ba:	83 30       	cpi	r24, 0x03	; 3
     4bc:	11 f4       	brne	.+4      	; 0x4c2 <port_pin_read+0x8>
	{
		return( (PIND & (1<<pin)) >> pin);
     4be:	29 b1       	in	r18, 0x09	; 9
     4c0:	07 c0       	rjmp	.+14     	; 0x4d0 <port_pin_read+0x16>
	}
	else if (portx == portb)
     4c2:	81 30       	cpi	r24, 0x01	; 1
     4c4:	11 f4       	brne	.+4      	; 0x4ca <port_pin_read+0x10>
	{
		return( (PINB & (1<<pin)) >> pin);
     4c6:	23 b1       	in	r18, 0x03	; 3
     4c8:	03 c0       	rjmp	.+6      	; 0x4d0 <port_pin_read+0x16>
	}
	else if (portx == portc) // matches bit# for PORTC 0 thru 5
     4ca:	82 30       	cpi	r24, 0x02	; 2
     4cc:	91 f4       	brne	.+36     	; 0x4f2 <port_pin_read+0x38>
	{ 
		return( (PINC & (1<<pin)) >> pin);
     4ce:	26 b1       	in	r18, 0x06	; 6
     4d0:	81 e0       	ldi	r24, 0x01	; 1
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	06 2e       	mov	r0, r22
     4d6:	02 c0       	rjmp	.+4      	; 0x4dc <port_pin_read+0x22>
     4d8:	88 0f       	add	r24, r24
     4da:	99 1f       	adc	r25, r25
     4dc:	0a 94       	dec	r0
     4de:	e2 f7       	brpl	.-8      	; 0x4d8 <port_pin_read+0x1e>
     4e0:	30 e0       	ldi	r19, 0x00	; 0
     4e2:	82 23       	and	r24, r18
     4e4:	93 23       	and	r25, r19
     4e6:	02 c0       	rjmp	.+4      	; 0x4ec <port_pin_read+0x32>
     4e8:	95 95       	asr	r25
     4ea:	87 95       	ror	r24
     4ec:	6a 95       	dec	r22
     4ee:	e2 f7       	brpl	.-8      	; 0x4e8 <port_pin_read+0x2e>
     4f0:	08 95       	ret
	}	
	else // out of range 
	{
		serial_out("Error in port_pin_read()\n");
     4f2:	00 d0       	rcall	.+0      	; 0x4f4 <port_pin_read+0x3a>
     4f4:	86 e2       	ldi	r24, 0x26	; 38
     4f6:	91 e0       	ldi	r25, 0x01	; 1
     4f8:	ed b7       	in	r30, 0x3d	; 61
     4fa:	fe b7       	in	r31, 0x3e	; 62
     4fc:	92 83       	std	Z+2, r25	; 0x02
     4fe:	81 83       	std	Z+1, r24	; 0x01
     500:	0e 94 bb 03 	call	0x776	; 0x776 <serial_out>
     504:	8f ef       	ldi	r24, 0xFF	; 255
     506:	0f 90       	pop	r0
     508:	0f 90       	pop	r0
#else 
#    warning "device type not defined"
#endif
	return(1); // return OKAY

}
     50a:	08 95       	ret

0000050c <port_pin_set>:
	{
		return(-1); // return ERROR
	}
	// TODO fix for Butterfly ports
#elif defined (__AVR_ATmega328__) || defined (__AVR_ATmega328P__) 
	if(portx == portd ) // matches bit for PORTD 
     50c:	83 30       	cpi	r24, 0x03	; 3
     50e:	59 f4       	brne	.+22     	; 0x526 <port_pin_set+0x1a>
	{
		pin_write(PORTD,pin,1);
     510:	2b b1       	in	r18, 0x0b	; 11
     512:	81 e0       	ldi	r24, 0x01	; 1
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	02 c0       	rjmp	.+4      	; 0x51c <port_pin_set+0x10>
     518:	88 0f       	add	r24, r24
     51a:	99 1f       	adc	r25, r25
     51c:	6a 95       	dec	r22
     51e:	e2 f7       	brpl	.-8      	; 0x518 <port_pin_set+0xc>
     520:	28 2b       	or	r18, r24
     522:	2b b9       	out	0x0b, r18	; 11
     524:	0c c0       	rjmp	.+24     	; 0x53e <port_pin_set+0x32>
	}
	else if (portx == portb)
     526:	81 30       	cpi	r24, 0x01	; 1
     528:	61 f4       	brne	.+24     	; 0x542 <port_pin_set+0x36>
	{
		pin_write(PORTB,pin,1);
     52a:	25 b1       	in	r18, 0x05	; 5
     52c:	81 e0       	ldi	r24, 0x01	; 1
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	02 c0       	rjmp	.+4      	; 0x536 <port_pin_set+0x2a>
     532:	88 0f       	add	r24, r24
     534:	99 1f       	adc	r25, r25
     536:	6a 95       	dec	r22
     538:	e2 f7       	brpl	.-8      	; 0x532 <port_pin_set+0x26>
     53a:	28 2b       	or	r18, r24
     53c:	25 b9       	out	0x05, r18	; 5
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	08 95       	ret
	}
	else if (portx == portc)
     542:	82 30       	cpi	r24, 0x02	; 2
     544:	11 f0       	breq	.+4      	; 0x54a <port_pin_set+0x3e>
     546:	8f ef       	ldi	r24, 0xFF	; 255
     548:	08 95       	ret
	{ 
			pin_write(PORTC,pin,1);
     54a:	28 b1       	in	r18, 0x08	; 8
     54c:	81 e0       	ldi	r24, 0x01	; 1
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	02 c0       	rjmp	.+4      	; 0x556 <port_pin_set+0x4a>
     552:	88 0f       	add	r24, r24
     554:	99 1f       	adc	r25, r25
     556:	6a 95       	dec	r22
     558:	e2 f7       	brpl	.-8      	; 0x552 <port_pin_set+0x46>
     55a:	28 2b       	or	r18, r24
     55c:	28 b9       	out	0x08, r18	; 8
     55e:	81 e0       	ldi	r24, 0x01	; 1
	// TODO catch invalid pin numbers
#else 
#    warning "device type not defined"
#endif
	return(1); // return OKAY
}
     560:	08 95       	ret

00000562 <port_pin_clear>:
	{
		return(-1); // returen ERROR
	}
	// TODO fix for Butterfly ports
#elif defined (__AVR_ATmega328__) || defined (__AVR_ATmega328P__) 
	if(portx == portd ) // matches bit for PORTD 
     562:	83 30       	cpi	r24, 0x03	; 3
     564:	61 f4       	brne	.+24     	; 0x57e <port_pin_clear+0x1c>
	{
		pin_write(PORTD,pin,0);
     566:	2b b1       	in	r18, 0x0b	; 11
     568:	81 e0       	ldi	r24, 0x01	; 1
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	02 c0       	rjmp	.+4      	; 0x572 <port_pin_clear+0x10>
     56e:	88 0f       	add	r24, r24
     570:	99 1f       	adc	r25, r25
     572:	6a 95       	dec	r22
     574:	e2 f7       	brpl	.-8      	; 0x56e <port_pin_clear+0xc>
     576:	80 95       	com	r24
     578:	82 23       	and	r24, r18
     57a:	8b b9       	out	0x0b, r24	; 11
     57c:	0d c0       	rjmp	.+26     	; 0x598 <port_pin_clear+0x36>
	}
	else if (portx == portb)
     57e:	81 30       	cpi	r24, 0x01	; 1
     580:	69 f4       	brne	.+26     	; 0x59c <port_pin_clear+0x3a>
	{
		pin_write(PORTB,pin,0);
     582:	25 b1       	in	r18, 0x05	; 5
     584:	81 e0       	ldi	r24, 0x01	; 1
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	02 c0       	rjmp	.+4      	; 0x58e <port_pin_clear+0x2c>
     58a:	88 0f       	add	r24, r24
     58c:	99 1f       	adc	r25, r25
     58e:	6a 95       	dec	r22
     590:	e2 f7       	brpl	.-8      	; 0x58a <port_pin_clear+0x28>
     592:	80 95       	com	r24
     594:	82 23       	and	r24, r18
     596:	85 b9       	out	0x05, r24	; 5
     598:	81 e0       	ldi	r24, 0x01	; 1
     59a:	08 95       	ret
	}
	else if (portx == portc)
     59c:	82 30       	cpi	r24, 0x02	; 2
     59e:	11 f0       	breq	.+4      	; 0x5a4 <port_pin_clear+0x42>
     5a0:	8f ef       	ldi	r24, 0xFF	; 255
     5a2:	08 95       	ret
	{ 
		pin_write(PORTC,pin,0);
     5a4:	28 b1       	in	r18, 0x08	; 8
     5a6:	81 e0       	ldi	r24, 0x01	; 1
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	02 c0       	rjmp	.+4      	; 0x5b0 <port_pin_clear+0x4e>
     5ac:	88 0f       	add	r24, r24
     5ae:	99 1f       	adc	r25, r25
     5b0:	6a 95       	dec	r22
     5b2:	e2 f7       	brpl	.-8      	; 0x5ac <port_pin_clear+0x4a>
     5b4:	80 95       	com	r24
     5b6:	82 23       	and	r24, r18
     5b8:	88 b9       	out	0x08, r24	; 8
     5ba:	81 e0       	ldi	r24, 0x01	; 1
#else 
#    warning "device type not defined"
#endif
	return(1); // return OKAY

}
     5bc:	08 95       	ret

000005be <port_pin_activate_pullup>:
	{
		return(-1); // return ERROR
	}
	// TODO: remaining accessible Butterfly ports
#elif defined (__AVR_ATmega328__) || defined (__AVR_ATmega328P__) 
	if( portx == portd ) 
     5be:	83 30       	cpi	r24, 0x03	; 3
     5c0:	81 f4       	brne	.+32     	; 0x5e2 <port_pin_activate_pullup+0x24>
	{
		DDRD &= ~(1<<pin);
     5c2:	3a b1       	in	r19, 0x0a	; 10
     5c4:	81 e0       	ldi	r24, 0x01	; 1
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	02 c0       	rjmp	.+4      	; 0x5ce <port_pin_activate_pullup+0x10>
     5ca:	88 0f       	add	r24, r24
     5cc:	99 1f       	adc	r25, r25
     5ce:	6a 95       	dec	r22
     5d0:	e2 f7       	brpl	.-8      	; 0x5ca <port_pin_activate_pullup+0xc>
     5d2:	28 2f       	mov	r18, r24
     5d4:	20 95       	com	r18
     5d6:	23 23       	and	r18, r19
     5d8:	2a b9       	out	0x0a, r18	; 10
		PORTD |= (1<<pin);
     5da:	2b b1       	in	r18, 0x0b	; 11
     5dc:	82 2b       	or	r24, r18
     5de:	8b b9       	out	0x0b, r24	; 11
     5e0:	23 c0       	rjmp	.+70     	; 0x628 <port_pin_activate_pullup+0x6a>
	}
	else if (portx == portb)
     5e2:	81 30       	cpi	r24, 0x01	; 1
     5e4:	81 f4       	brne	.+32     	; 0x606 <port_pin_activate_pullup+0x48>
	{
		DDRB &= ~(1<<pin);
     5e6:	34 b1       	in	r19, 0x04	; 4
     5e8:	81 e0       	ldi	r24, 0x01	; 1
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	02 c0       	rjmp	.+4      	; 0x5f2 <port_pin_activate_pullup+0x34>
     5ee:	88 0f       	add	r24, r24
     5f0:	99 1f       	adc	r25, r25
     5f2:	6a 95       	dec	r22
     5f4:	e2 f7       	brpl	.-8      	; 0x5ee <port_pin_activate_pullup+0x30>
     5f6:	28 2f       	mov	r18, r24
     5f8:	20 95       	com	r18
     5fa:	23 23       	and	r18, r19
     5fc:	24 b9       	out	0x04, r18	; 4
		PORTB |= (1<<pin);
     5fe:	25 b1       	in	r18, 0x05	; 5
     600:	82 2b       	or	r24, r18
     602:	85 b9       	out	0x05, r24	; 5
     604:	11 c0       	rjmp	.+34     	; 0x628 <port_pin_activate_pullup+0x6a>
	}
	else if (portx == portc)
     606:	82 30       	cpi	r24, 0x02	; 2
     608:	89 f4       	brne	.+34     	; 0x62c <port_pin_activate_pullup+0x6e>
	{ 		
		DDRC &= ~(1<<pin);
     60a:	37 b1       	in	r19, 0x07	; 7
     60c:	81 e0       	ldi	r24, 0x01	; 1
     60e:	90 e0       	ldi	r25, 0x00	; 0
     610:	02 c0       	rjmp	.+4      	; 0x616 <port_pin_activate_pullup+0x58>
     612:	88 0f       	add	r24, r24
     614:	99 1f       	adc	r25, r25
     616:	6a 95       	dec	r22
     618:	e2 f7       	brpl	.-8      	; 0x612 <port_pin_activate_pullup+0x54>
     61a:	28 2f       	mov	r18, r24
     61c:	20 95       	com	r18
     61e:	23 23       	and	r18, r19
     620:	27 b9       	out	0x07, r18	; 7
		PORTC |= (1<<pin);
     622:	28 b1       	in	r18, 0x08	; 8
     624:	82 2b       	or	r24, r18
     626:	88 b9       	out	0x08, r24	; 8
     628:	81 e0       	ldi	r24, 0x01	; 1
     62a:	08 95       	ret
	}
	else // out of range 
	{
		serial_out("Error in port_pin_acitvate_pullup()\n\n");
     62c:	00 d0       	rcall	.+0      	; 0x62e <port_pin_activate_pullup+0x70>
     62e:	80 e4       	ldi	r24, 0x40	; 64
     630:	91 e0       	ldi	r25, 0x01	; 1
     632:	ed b7       	in	r30, 0x3d	; 61
     634:	fe b7       	in	r31, 0x3e	; 62
     636:	92 83       	std	Z+2, r25	; 0x02
     638:	81 83       	std	Z+1, r24	; 0x01
     63a:	0e 94 bb 03 	call	0x776	; 0x776 <serial_out>
     63e:	8f ef       	ldi	r24, 0xFF	; 255
     640:	0f 90       	pop	r0
     642:	0f 90       	pop	r0
#else 
#    warning "device type not defined"
#endif
	return(1); // return OKAY

}
     644:	08 95       	ret

00000646 <port_pin_deactivate_pullup>:
 // If anyone has any reason to believe that any of this code violates other licenses
 // please contact me with details so that I may correct the situation. 

#include "digitalio.h"
int8_t port_pin_deactivate_pullup(uint8_t portx, uint8_t pin)
{
     646:	28 2f       	mov	r18, r24
	{
		return(-1); // return ERROR
	}
	// TODO: remaining accessible Butterfly ports
#elif defined (__AVR_ATmega328__) || defined (__AVR_ATmega328P__) 
	if( portx == PORTD ) 
     648:	8b b1       	in	r24, 0x0b	; 11
     64a:	28 17       	cp	r18, r24
     64c:	49 f4       	brne	.+18     	; 0x660 <port_pin_deactivate_pullup+0x1a>
	{
		bit_clear(DDRD,pin); // Make sure it is an input
     64e:	8a b1       	in	r24, 0x0a	; 10
     650:	96 2f       	mov	r25, r22
     652:	90 95       	com	r25
     654:	89 23       	and	r24, r25
     656:	8a b9       	out	0x0a, r24	; 10
		bit_clear(PORTD,pin);  // Deactivate pullup
     658:	8b b1       	in	r24, 0x0b	; 11
     65a:	98 23       	and	r25, r24
     65c:	9b b9       	out	0x0b, r25	; 11
     65e:	0b c0       	rjmp	.+22     	; 0x676 <port_pin_deactivate_pullup+0x30>
	}
	else if (portx == PORTB)
     660:	85 b1       	in	r24, 0x05	; 5
     662:	28 17       	cp	r18, r24
     664:	51 f4       	brne	.+20     	; 0x67a <port_pin_deactivate_pullup+0x34>
	{
		bit_clear(DDRB,pin); // Make sure it is an input
     666:	84 b1       	in	r24, 0x04	; 4
     668:	96 2f       	mov	r25, r22
     66a:	90 95       	com	r25
     66c:	89 23       	and	r24, r25
     66e:	84 b9       	out	0x04, r24	; 4
		bit_clear(PORTB,pin);  // Deactivate pullup
     670:	85 b1       	in	r24, 0x05	; 5
     672:	98 23       	and	r25, r24
     674:	95 b9       	out	0x05, r25	; 5
     676:	81 e0       	ldi	r24, 0x01	; 1
     678:	08 95       	ret
	}
	else if (portx == PORTC)
     67a:	88 b1       	in	r24, 0x08	; 8
     67c:	28 17       	cp	r18, r24
     67e:	11 f0       	breq	.+4      	; 0x684 <port_pin_deactivate_pullup+0x3e>
     680:	8f ef       	ldi	r24, 0xFF	; 255
     682:	08 95       	ret
	{ 		
		bit_clear(DDRC,pin); // Make sure it is an input
     684:	87 b1       	in	r24, 0x07	; 7
     686:	96 2f       	mov	r25, r22
     688:	90 95       	com	r25
     68a:	89 23       	and	r24, r25
     68c:	87 b9       	out	0x07, r24	; 7
		bit_clear(PORTC,pin);  // Deactivate pullup
     68e:	88 b1       	in	r24, 0x08	; 8
     690:	98 23       	and	r25, r24
     692:	98 b9       	out	0x08, r25	; 8
     694:	81 e0       	ldi	r24, 0x01	; 1
#else 
#    warning "device type not defined"
#endif
	return(1); // return OKAY

}
     696:	08 95       	ret

00000698 <port_pin_write>:
	{
		return(-1); // return ERROR
	}
	// TODO fix for Butterfly ports
#elif defined (__AVR_ATmega328__) || defined (__AVR_ATmega328P__) 
	if(portx == portd ) // matches bit for PORTD 
     698:	83 30       	cpi	r24, 0x03	; 3
     69a:	c9 f4       	brne	.+50     	; 0x6ce <port_pin_write+0x36>
	{
		//pin_write(PORTD,pin,state);
		if(state) PORTD |= (1<<pin);
     69c:	44 23       	and	r20, r20
     69e:	59 f0       	breq	.+22     	; 0x6b6 <port_pin_write+0x1e>
     6a0:	2b b1       	in	r18, 0x0b	; 11
     6a2:	81 e0       	ldi	r24, 0x01	; 1
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	02 c0       	rjmp	.+4      	; 0x6ac <port_pin_write+0x14>
     6a8:	88 0f       	add	r24, r24
     6aa:	99 1f       	adc	r25, r25
     6ac:	6a 95       	dec	r22
     6ae:	e2 f7       	brpl	.-8      	; 0x6a8 <port_pin_write+0x10>
     6b0:	28 2b       	or	r18, r24
     6b2:	2b b9       	out	0x0b, r18	; 11
     6b4:	37 c0       	rjmp	.+110    	; 0x724 <port_pin_write+0x8c>
		else PORTD &= ~(1<<pin);
     6b6:	2b b1       	in	r18, 0x0b	; 11
     6b8:	81 e0       	ldi	r24, 0x01	; 1
     6ba:	90 e0       	ldi	r25, 0x00	; 0
     6bc:	02 c0       	rjmp	.+4      	; 0x6c2 <port_pin_write+0x2a>
     6be:	88 0f       	add	r24, r24
     6c0:	99 1f       	adc	r25, r25
     6c2:	6a 95       	dec	r22
     6c4:	e2 f7       	brpl	.-8      	; 0x6be <port_pin_write+0x26>
     6c6:	80 95       	com	r24
     6c8:	82 23       	and	r24, r18
     6ca:	8b b9       	out	0x0b, r24	; 11
     6cc:	2b c0       	rjmp	.+86     	; 0x724 <port_pin_write+0x8c>
	}
	else if (portx == portb)
     6ce:	81 30       	cpi	r24, 0x01	; 1
     6d0:	c9 f4       	brne	.+50     	; 0x704 <port_pin_write+0x6c>
	{
		//pin_write(PORTB,pin,state);
		if(state) PORTB |= (1<<pin);
     6d2:	44 23       	and	r20, r20
     6d4:	59 f0       	breq	.+22     	; 0x6ec <port_pin_write+0x54>
     6d6:	25 b1       	in	r18, 0x05	; 5
     6d8:	81 e0       	ldi	r24, 0x01	; 1
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	02 c0       	rjmp	.+4      	; 0x6e2 <port_pin_write+0x4a>
     6de:	88 0f       	add	r24, r24
     6e0:	99 1f       	adc	r25, r25
     6e2:	6a 95       	dec	r22
     6e4:	e2 f7       	brpl	.-8      	; 0x6de <port_pin_write+0x46>
     6e6:	28 2b       	or	r18, r24
     6e8:	25 b9       	out	0x05, r18	; 5
     6ea:	1c c0       	rjmp	.+56     	; 0x724 <port_pin_write+0x8c>
		else PORTB &= ~(1<<pin);
     6ec:	25 b1       	in	r18, 0x05	; 5
     6ee:	81 e0       	ldi	r24, 0x01	; 1
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	02 c0       	rjmp	.+4      	; 0x6f8 <port_pin_write+0x60>
     6f4:	88 0f       	add	r24, r24
     6f6:	99 1f       	adc	r25, r25
     6f8:	6a 95       	dec	r22
     6fa:	e2 f7       	brpl	.-8      	; 0x6f4 <port_pin_write+0x5c>
     6fc:	80 95       	com	r24
     6fe:	82 23       	and	r24, r18
     700:	85 b9       	out	0x05, r24	; 5
     702:	10 c0       	rjmp	.+32     	; 0x724 <port_pin_write+0x8c>
	}
	else if (portx == portc)
     704:	82 30       	cpi	r24, 0x02	; 2
     706:	11 f0       	breq	.+4      	; 0x70c <port_pin_write+0x74>
     708:	8f ef       	ldi	r24, 0xFF	; 255
     70a:	08 95       	ret
	{ 
		//pin_write(PORTC,pin,state);
		if(state) PORTC |= (1<<pin);
     70c:	44 23       	and	r20, r20
     70e:	61 f0       	breq	.+24     	; 0x728 <port_pin_write+0x90>
     710:	28 b1       	in	r18, 0x08	; 8
     712:	81 e0       	ldi	r24, 0x01	; 1
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	02 c0       	rjmp	.+4      	; 0x71c <port_pin_write+0x84>
     718:	88 0f       	add	r24, r24
     71a:	99 1f       	adc	r25, r25
     71c:	6a 95       	dec	r22
     71e:	e2 f7       	brpl	.-8      	; 0x718 <port_pin_write+0x80>
     720:	28 2b       	or	r18, r24
     722:	28 b9       	out	0x08, r18	; 8
     724:	81 e0       	ldi	r24, 0x01	; 1
     726:	08 95       	ret
		else PORTC &= ~(1<<pin);
     728:	28 b1       	in	r18, 0x08	; 8
     72a:	81 e0       	ldi	r24, 0x01	; 1
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	02 c0       	rjmp	.+4      	; 0x734 <port_pin_write+0x9c>
     730:	88 0f       	add	r24, r24
     732:	99 1f       	adc	r25, r25
     734:	6a 95       	dec	r22
     736:	e2 f7       	brpl	.-8      	; 0x730 <port_pin_write+0x98>
     738:	80 95       	com	r24
     73a:	82 23       	and	r24, r18
     73c:	88 b9       	out	0x08, r24	; 8
     73e:	81 e0       	ldi	r24, 0x01	; 1
	// TODO catch invalid pin numbers
#else 
#    warning "device type not defined"
#endif
	return(1); // return OKAY
}
     740:	08 95       	ret

00000742 <serial_begin>:
 // please contact me with details so that I may correct the situation. #include "serial.h"

#include "serial.h"

void serial_begin(uint32_t baud)
{
     742:	8f 92       	push	r8
     744:	af 92       	push	r10
     746:	cf 92       	push	r12
     748:	ef 92       	push	r14
     74a:	0f 93       	push	r16
	cli();
     74c:	f8 94       	cli
	uint8_t databits = 8;
	uint8_t stopbits = 1;
	usart_parity_t parity = parity_none;
	usart_flow_control_t flow_control = flow_none;

	usart0_init(baud, F_CPU, mode,  databits, stopbits, parity, flow_control);
     74e:	20 e0       	ldi	r18, 0x00	; 0
     750:	34 e2       	ldi	r19, 0x24	; 36
     752:	44 ef       	ldi	r20, 0xF4	; 244
     754:	50 e0       	ldi	r21, 0x00	; 0
     756:	00 e0       	ldi	r16, 0x00	; 0
     758:	e8 e0       	ldi	r30, 0x08	; 8
     75a:	ee 2e       	mov	r14, r30
     75c:	cc 24       	eor	r12, r12
     75e:	c3 94       	inc	r12
     760:	aa 24       	eor	r10, r10
     762:	88 24       	eor	r8, r8
     764:	0e 94 84 04 	call	0x908	; 0x908 <usart0_init>

	sei();
     768:	78 94       	sei

}
     76a:	0f 91       	pop	r16
     76c:	ef 90       	pop	r14
     76e:	cf 90       	pop	r12
     770:	af 90       	pop	r10
     772:	8f 90       	pop	r8
     774:	08 95       	ret

00000776 <serial_out>:
#include <stdarg.h>

// The variadic (va_) stuff is magic 
//void serial_out(const char *fmt, ...)
void serial_out(const char *fmt, ...)
{
     776:	df 93       	push	r29
     778:	cf 93       	push	r28
     77a:	cd b7       	in	r28, 0x3d	; 61
     77c:	de b7       	in	r29, 0x3e	; 62
     77e:	fe 01       	movw	r30, r28
     780:	35 96       	adiw	r30, 0x05	; 5
	va_list arg;
	va_start(arg, fmt);
	vprintf(fmt, arg);
     782:	81 91       	ld	r24, Z+
     784:	91 91       	ld	r25, Z+
     786:	bf 01       	movw	r22, r30
     788:	0e 94 26 06 	call	0xc4c	; 0xc4c <vprintf>
	va_end(arg);
}
     78c:	cf 91       	pop	r28
     78e:	df 91       	pop	r29
     790:	08 95       	ret

00000792 <usart0_uninit>:
	setting = usart_baudrate_to_setting(freq_cpu,baudrate);
	
	// Write hi byte first as writing lo byte will trigger immediate update of baud prescaler.
	UART_BAUD_RATE_HIGH = hi_byte(setting);
	UART_BAUD_RATE_LOW= lo_byte(setting);
	
     792:	80 e2       	ldi	r24, 0x20	; 32
     794:	80 93 c0 00 	sts	0x00C0, r24
	return;
     798:	10 92 c1 00 	sts	0x00C1, r1
}
     79c:	86 e0       	ldi	r24, 0x06	; 6
     79e:	80 93 c2 00 	sts	0x00C2, r24

     7a2:	08 95       	ret

000007a4 <usart0_baud_set>:
		//if(usart0_transmit_ring.count)// Alternate technique
		if(usart0_transmit_buffer_inuse_count())// Is there data in the buffer?
		{
			// Send next byte in the buffer.
 	       UART_DATA_REG = ring_remove(&usart0_transmit_ring);
		}
     7a4:	ef 92       	push	r14
     7a6:	ff 92       	push	r15
     7a8:	0f 93       	push	r16
     7aa:	1f 93       	push	r17
     7ac:	7b 01       	movw	r14, r22
     7ae:	8c 01       	movw	r16, r24
		else
		{
			// The buffer is empty
     7b0:	84 e0       	ldi	r24, 0x04	; 4
     7b2:	ee 0c       	add	r14, r14
     7b4:	ff 1c       	adc	r15, r15
     7b6:	00 1f       	adc	r16, r16
     7b8:	11 1f       	adc	r17, r17
     7ba:	8a 95       	dec	r24
     7bc:	d1 f7       	brne	.-12     	; 0x7b2 <usart0_baud_set+0xe>
     7be:	ca 01       	movw	r24, r20
     7c0:	b9 01       	movw	r22, r18
     7c2:	a8 01       	movw	r20, r16
     7c4:	97 01       	movw	r18, r14
     7c6:	0e 94 fd 05 	call	0xbfa	; 0xbfa <__udivmodsi4>
     7ca:	21 50       	subi	r18, 0x01	; 1
     7cc:	30 40       	sbci	r19, 0x00	; 0
			usart_buffered_tx_flag = false;
			// Set the ready flag
			usart_tx_ready_flag = true;
     7ce:	30 93 c5 00 	sts	0x00C5, r19
		}
     7d2:	20 93 c4 00 	sts	0x00C4, r18
	}
	else // Not buffered so transmited single byte
	{
     7d6:	1f 91       	pop	r17
     7d8:	0f 91       	pop	r16
     7da:	ff 90       	pop	r15
     7dc:	ef 90       	pop	r14
     7de:	08 95       	ret

000007e0 <usart0_parity_set>:
		// Set transmit ready flag
		usart_tx_ready_flag = true;
	}
	
     7e0:	81 11       	cpse	r24, r1
    return;
}
     7e2:	8f 5f       	subi	r24, 0xFF	; 255


     7e4:	98 2f       	mov	r25, r24
     7e6:	80 ff       	sbrs	r24, 0
     7e8:	04 c0       	rjmp	.+8      	; 0x7f2 <usart0_parity_set+0x12>
     7ea:	80 91 c2 00 	lds	r24, 0x00C2
     7ee:	80 61       	ori	r24, 0x10	; 16
     7f0:	03 c0       	rjmp	.+6      	; 0x7f8 <usart0_parity_set+0x18>
     7f2:	80 91 c2 00 	lds	r24, 0x00C2
     7f6:	8f 7e       	andi	r24, 0xEF	; 239
     7f8:	80 93 c2 00 	sts	0x00C2, r24
     7fc:	80 91 c2 00 	lds	r24, 0x00C2
// The interrupt service routines are included in the initialization .c file 
     800:	91 ff       	sbrs	r25, 1
     802:	04 c0       	rjmp	.+8      	; 0x80c <usart0_parity_set+0x2c>
     804:	80 91 c2 00 	lds	r24, 0x00C2
     808:	80 62       	ori	r24, 0x20	; 32
     80a:	03 c0       	rjmp	.+6      	; 0x812 <usart0_parity_set+0x32>
     80c:	80 91 c2 00 	lds	r24, 0x00C2
     810:	8f 7d       	andi	r24, 0xDF	; 223
     812:	80 93 c2 00 	sts	0x00C2, r24
     816:	80 91 c2 00 	lds	r24, 0x00C2
     81a:	08 95       	ret

0000081c <__vector_18>:
     81c:	1f 92       	push	r1
     81e:	0f 92       	push	r0
     820:	0f b6       	in	r0, 0x3f	; 63
     822:	0f 92       	push	r0
     824:	11 24       	eor	r1, r1
     826:	2f 93       	push	r18
     828:	3f 93       	push	r19
     82a:	4f 93       	push	r20
     82c:	5f 93       	push	r21
     82e:	6f 93       	push	r22
     830:	7f 93       	push	r23
     832:	8f 93       	push	r24
     834:	9f 93       	push	r25
     836:	af 93       	push	r26
     838:	bf 93       	push	r27
     83a:	ef 93       	push	r30
     83c:	ff 93       	push	r31
     83e:	80 91 c0 00 	lds	r24, 0x00C0
     842:	90 91 c0 00 	lds	r25, 0x00C0
     846:	60 91 c6 00 	lds	r22, 0x00C6
     84a:	84 fd       	sbrc	r24, 4
     84c:	06 c0       	rjmp	.+12     	; 0x85a <__vector_18+0x3e>
     84e:	92 fd       	sbrc	r25, 2
     850:	04 c0       	rjmp	.+8      	; 0x85a <__vector_18+0x3e>
     852:	8c ef       	ldi	r24, 0xFC	; 252
     854:	91 e0       	ldi	r25, 0x01	; 1
     856:	0e 94 6a 05 	call	0xad4	; 0xad4 <ring_add>
     85a:	ff 91       	pop	r31
     85c:	ef 91       	pop	r30
     85e:	bf 91       	pop	r27
     860:	af 91       	pop	r26
     862:	9f 91       	pop	r25
     864:	8f 91       	pop	r24
     866:	7f 91       	pop	r23
     868:	6f 91       	pop	r22
     86a:	5f 91       	pop	r21
     86c:	4f 91       	pop	r20
     86e:	3f 91       	pop	r19
     870:	2f 91       	pop	r18
     872:	0f 90       	pop	r0
     874:	0f be       	out	0x3f, r0	; 63
     876:	0f 90       	pop	r0
     878:	1f 90       	pop	r1
     87a:	18 95       	reti

0000087c <__vector_20>:
	register uint8_t data;
	register uint8_t parity_error = false;
	register uint8_t frame_error = false;

	// Get error conditions before getting the data.
	frame_error = usart0_frame_error();
     87c:	1f 92       	push	r1
     87e:	0f 92       	push	r0
     880:	0f b6       	in	r0, 0x3f	; 63
     882:	0f 92       	push	r0
     884:	11 24       	eor	r1, r1
     886:	2f 93       	push	r18
     888:	3f 93       	push	r19
     88a:	4f 93       	push	r20
     88c:	5f 93       	push	r21
     88e:	6f 93       	push	r22
     890:	7f 93       	push	r23
     892:	8f 93       	push	r24
     894:	9f 93       	push	r25
     896:	af 93       	push	r26
     898:	bf 93       	push	r27
     89a:	ef 93       	push	r30
     89c:	ff 93       	push	r31
	parity_error = usart0_parity_error();
	
	data = UART_DATA_REG;
     89e:	80 91 44 02 	lds	r24, 0x0244
     8a2:	88 23       	and	r24, r24
     8a4:	69 f0       	breq	.+26     	; 0x8c0 <__vector_20+0x44>
    
	if(!frame_error && !parity_error)
	{
     8a6:	0e 94 65 05 	call	0xaca	; 0xaca <usart0_transmit_buffer_inuse_count>
     8aa:	88 23       	and	r24, r24
     8ac:	39 f0       	breq	.+14     	; 0x8bc <__vector_20+0x40>
		// Store data in ring buffer.
        ring_add(&usart0_receive_ring, data);
	}
     8ae:	84 ef       	ldi	r24, 0xF4	; 244
     8b0:	91 e0       	ldi	r25, 0x01	; 1
     8b2:	0e 94 bc 05 	call	0xb78	; 0xb78 <ring_remove>
     8b6:	80 93 c6 00 	sts	0x00C6, r24
     8ba:	05 c0       	rjmp	.+10     	; 0x8c6 <__vector_20+0x4a>

	return;
}


     8bc:	10 92 44 02 	sts	0x0244, r1
     8c0:	81 e0       	ldi	r24, 0x01	; 1
     8c2:	80 93 45 02 	sts	0x0245, r24
     8c6:	ff 91       	pop	r31
     8c8:	ef 91       	pop	r30
     8ca:	bf 91       	pop	r27
     8cc:	af 91       	pop	r26
     8ce:	9f 91       	pop	r25
     8d0:	8f 91       	pop	r24
     8d2:	7f 91       	pop	r23
     8d4:	6f 91       	pop	r22
     8d6:	5f 91       	pop	r21
     8d8:	4f 91       	pop	r20
     8da:	3f 91       	pop	r19
     8dc:	2f 91       	pop	r18
     8de:	0f 90       	pop	r0
     8e0:	0f be       	out	0x3f, r0	; 63
     8e2:	0f 90       	pop	r0
     8e4:	1f 90       	pop	r1
     8e6:	18 95       	reti

000008e8 <usart0_send>:
    bit_write(bit_read(parity, BIT(0)), UART_CONTROL_STATUS_REG_C, BIT(UART_PARITY_MODE_0));
    bit_write(bit_read(parity, BIT(1)), UART_CONTROL_STATUS_REG_C, BIT(UART_PARITY_MODE_1));
    return;
}

// JWP 6/16/11 rewrote transmit interrupt to use TX complete vector
     8e8:	80 91 45 02 	lds	r24, 0x0245
     8ec:	88 23       	and	r24, r24
     8ee:	e1 f3       	breq	.-8      	; 0x8e8 <usart0_send>
// rather than the Data Register Empty vector
// The interrupt service routines are included in the initialization .c file 
// since they must be associated with a .c file for the compiler
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	80 93 44 02 	sts	0x0244, r24
usart0_transmit_interrupt_service_routine
{

     8f6:	84 ef       	ldi	r24, 0xF4	; 244
     8f8:	91 e0       	ldi	r25, 0x01	; 1
     8fa:	0e 94 bc 05 	call	0xb78	; 0xb78 <ring_remove>
     8fe:	80 93 c6 00 	sts	0x00C6, r24
	// Is buffered transmission enabled?
	if(usart_buffered_tx_flag)
	{		
     902:	10 92 45 02 	sts	0x0245, r1
		//if(usart0_transmit_ring.count)// Alternate technique
     906:	08 95       	ret

00000908 <usart0_init>:
    //flow.flow_out = true;
    //flow.flow_in = true;

	// JWP 3/27/11 the following was already commented out in xxx code
    // Initialize hw flow control task.
    // flow_out_tcb.handler = usart0_flow_out_hw_task;
     908:	2f 92       	push	r2
     90a:	3f 92       	push	r3
     90c:	4f 92       	push	r4
     90e:	5f 92       	push	r5
     910:	6f 92       	push	r6
     912:	7f 92       	push	r7
     914:	8f 92       	push	r8
     916:	9f 92       	push	r9
     918:	af 92       	push	r10
     91a:	cf 92       	push	r12
     91c:	ef 92       	push	r14
     91e:	0f 93       	push	r16
     920:	1f 93       	push	r17
     922:	df 93       	push	r29
     924:	cf 93       	push	r28
     926:	cd b7       	in	r28, 0x3d	; 61
     928:	de b7       	in	r29, 0x3e	; 62
     92a:	3b 01       	movw	r6, r22
     92c:	4c 01       	movw	r8, r24
     92e:	19 01       	movw	r2, r18
     930:	2a 01       	movw	r4, r20
     932:	1e 2d       	mov	r17, r14
     934:	ec 2c       	mov	r14, r12
    // flow_out_tcb.absolute_timing = false;
    // flow_out_tcb.run_interval = 0;
     936:	f8 94       	cli
    // flow_out_tcb.enabled = false;
    // task_add(&flow_out_tcb);
     938:	86 e6       	ldi	r24, 0x66	; 102
     93a:	91 e0       	ldi	r25, 0x01	; 1
     93c:	90 93 49 02 	sts	0x0249, r25
     940:	80 93 48 02 	sts	0x0248, r24
//	usart0_mode(mode);
 	usart0_baud_set(baud, freq_cpu);
    usart0_data_bits_set(databits);
    usart0_stop_bits_set(stopbits);
    usart0_parity_set(parity);
 
     944:	80 91 c1 00 	lds	r24, 0x00C1
     948:	87 7f       	andi	r24, 0xF7	; 247
     94a:	80 93 c1 00 	sts	0x00C1, r24
 	usart0_baud_set(baud, freq_cpu);
     94e:	80 91 c1 00 	lds	r24, 0x00C1
     952:	8f 7e       	andi	r24, 0xEF	; 239
     954:	80 93 c1 00 	sts	0x00C1, r24

     958:	80 91 c1 00 	lds	r24, 0x00C1
     95c:	8f 7b       	andi	r24, 0xBF	; 191
     95e:	80 93 c1 00 	sts	0x00C1, r24
//JWP 6/16/11 The Butterfly requires special code for clock and baud
     962:	80 91 c1 00 	lds	r24, 0x00C1
     966:	8f 77       	andi	r24, 0x7F	; 127
     968:	80 93 c1 00 	sts	0x00C1, r24
#if defined(__AVR_ATmega169__) // Assume Butterfly
	butterfly_init();
#endif
     96c:	80 91 c2 00 	lds	r24, 0x00C2
     970:	02 95       	swap	r16
     972:	00 0f       	add	r16, r16
     974:	00 0f       	add	r16, r16
     976:	00 7c       	andi	r16, 0xC0	; 192
     978:	8f 73       	andi	r24, 0x3F	; 63
     97a:	80 2b       	or	r24, r16
     97c:	80 93 c2 00 	sts	0x00C2, r24

     980:	c4 01       	movw	r24, r8
     982:	b3 01       	movw	r22, r6
     984:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <usart0_baud_set>

     988:	81 2f       	mov	r24, r17
     98a:	85 50       	subi	r24, 0x05	; 5
     98c:	84 30       	cpi	r24, 0x04	; 4
     98e:	18 f5       	brcc	.+70     	; 0x9d6 <usart0_init+0xce>
     990:	21 2f       	mov	r18, r17
     992:	30 e0       	ldi	r19, 0x00	; 0
     994:	25 50       	subi	r18, 0x05	; 5
     996:	30 40       	sbci	r19, 0x00	; 0
     998:	20 ff       	sbrs	r18, 0
     99a:	04 c0       	rjmp	.+8      	; 0x9a4 <usart0_init+0x9c>
     99c:	80 91 c2 00 	lds	r24, 0x00C2
     9a0:	82 60       	ori	r24, 0x02	; 2
     9a2:	03 c0       	rjmp	.+6      	; 0x9aa <usart0_init+0xa2>
     9a4:	80 91 c2 00 	lds	r24, 0x00C2
     9a8:	8d 7f       	andi	r24, 0xFD	; 253
     9aa:	80 93 c2 00 	sts	0x00C2, r24
     9ae:	80 91 c2 00 	lds	r24, 0x00C2
     9b2:	21 ff       	sbrs	r18, 1
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <usart0_init+0xb6>
     9b6:	80 91 c2 00 	lds	r24, 0x00C2
     9ba:	84 60       	ori	r24, 0x04	; 4
     9bc:	03 c0       	rjmp	.+6      	; 0x9c4 <usart0_init+0xbc>
     9be:	80 91 c2 00 	lds	r24, 0x00C2
     9c2:	8b 7f       	andi	r24, 0xFB	; 251
     9c4:	80 93 c2 00 	sts	0x00C2, r24
     9c8:	80 91 c2 00 	lds	r24, 0x00C2
     9cc:	80 91 c1 00 	lds	r24, 0x00C1
     9d0:	8b 7f       	andi	r24, 0xFB	; 251
     9d2:	80 93 c1 00 	sts	0x00C1, r24
     9d6:	19 30       	cpi	r17, 0x09	; 9
     9d8:	79 f4       	brne	.+30     	; 0x9f8 <usart0_init+0xf0>
     9da:	80 91 c2 00 	lds	r24, 0x00C2
     9de:	82 60       	ori	r24, 0x02	; 2
     9e0:	80 93 c2 00 	sts	0x00C2, r24
     9e4:	80 91 c2 00 	lds	r24, 0x00C2
     9e8:	84 60       	ori	r24, 0x04	; 4
     9ea:	80 93 c2 00 	sts	0x00C2, r24
     9ee:	80 91 c1 00 	lds	r24, 0x00C1
     9f2:	84 60       	ori	r24, 0x04	; 4
     9f4:	80 93 c1 00 	sts	0x00C1, r24
	ring_init(&usart0_receive_ring, usart0_receive_buffer, USART0_RECEIVE_BUFFER_LEN);
     9f8:	8e 2d       	mov	r24, r14
     9fa:	81 50       	subi	r24, 0x01	; 1
     9fc:	82 30       	cpi	r24, 0x02	; 2
     9fe:	70 f4       	brcc	.+28     	; 0xa1c <usart0_init+0x114>
     a00:	81 e0       	ldi	r24, 0x01	; 1
     a02:	e8 16       	cp	r14, r24
     a04:	21 f0       	breq	.+8      	; 0xa0e <usart0_init+0x106>
     a06:	80 91 c2 00 	lds	r24, 0x00C2
     a0a:	88 60       	ori	r24, 0x08	; 8
     a0c:	03 c0       	rjmp	.+6      	; 0xa14 <usart0_init+0x10c>
     a0e:	80 91 c2 00 	lds	r24, 0x00C2
     a12:	87 7f       	andi	r24, 0xF7	; 247
     a14:	80 93 c2 00 	sts	0x00C2, r24
     a18:	80 91 c2 00 	lds	r24, 0x00C2
    ring_init(&usart0_transmit_ring, usart0_transmit_buffer, USART0_TRANSMIT_BUFFER_LEN);
     a1c:	8a 2d       	mov	r24, r10
     a1e:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <usart0_parity_set>

	// JWP 6/16/11 
     a22:	c4 01       	movw	r24, r8
     a24:	b3 01       	movw	r22, r6
     a26:	a2 01       	movw	r20, r4
     a28:	91 01       	movw	r18, r2
     a2a:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <usart0_baud_set>
// JWP 6/16/11 added to change transmission logic.
// this function waits until a pending transmission is complete
// then sends a byte. If the usart_buffered_TX_flag is set true
// then the ISR continues to send until the buffer is empty, otherwise
// the ISR just sends the byte. 
void usart0_send(void)
     a2e:	8c ef       	ldi	r24, 0xFC	; 252
     a30:	91 e0       	ldi	r25, 0x01	; 1
     a32:	64 e0       	ldi	r22, 0x04	; 4
     a34:	72 e0       	ldi	r23, 0x02	; 2
     a36:	40 e4       	ldi	r20, 0x40	; 64
     a38:	0e 94 98 05 	call	0xb30	; 0xb30 <ring_init>
{
     a3c:	84 ef       	ldi	r24, 0xF4	; 244
     a3e:	91 e0       	ldi	r25, 0x01	; 1
     a40:	64 e7       	ldi	r22, 0x74	; 116
     a42:	71 e0       	ldi	r23, 0x01	; 1
     a44:	40 e8       	ldi	r20, 0x80	; 128
     a46:	0e 94 98 05 	call	0xb30	; 0xb30 <ring_init>

	// Wait until the transmitter is ready
	while(!usart_tx_ready_flag);

	// Set flag for ISR
	usart_buffered_tx_flag = true;
     a4a:	80 91 c1 00 	lds	r24, 0x00C1
     a4e:	88 60       	ori	r24, 0x08	; 8
     a50:	80 93 c1 00 	sts	0x00C1, r24
	
     a54:	80 91 c1 00 	lds	r24, 0x00C1
     a58:	80 61       	ori	r24, 0x10	; 16
     a5a:	80 93 c1 00 	sts	0x00C1, r24
	// Send the byte
     a5e:	80 91 c1 00 	lds	r24, 0x00C1
     a62:	80 64       	ori	r24, 0x40	; 64
     a64:	80 93 c1 00 	sts	0x00C1, r24
	UART_DATA_REG = ring_remove(&usart0_transmit_ring);
     a68:	80 91 c1 00 	lds	r24, 0x00C1
     a6c:	80 68       	ori	r24, 0x80	; 128
     a6e:	80 93 c1 00 	sts	0x00C1, r24

	// Set the ready flag to false
	usart_tx_ready_flag = false;
}

     a72:	10 92 44 02 	sts	0x0244, r1

     a76:	81 e0       	ldi	r24, 0x01	; 1
     a78:	80 93 45 02 	sts	0x0245, r24
// 3/18/11 JWP removed magic number for clock and added freq_cpu
void usart0_baud_set(uint32_t baudrate, uint32_t freq_cpu)
     a7c:	78 94       	sei
{
	uint16_t setting;
	
     a7e:	cf 91       	pop	r28
     a80:	df 91       	pop	r29
     a82:	1f 91       	pop	r17
     a84:	0f 91       	pop	r16
     a86:	ef 90       	pop	r14
     a88:	cf 90       	pop	r12
     a8a:	af 90       	pop	r10
     a8c:	9f 90       	pop	r9
     a8e:	8f 90       	pop	r8
     a90:	7f 90       	pop	r7
     a92:	6f 90       	pop	r6
     a94:	5f 90       	pop	r5
     a96:	4f 90       	pop	r4
     a98:	3f 90       	pop	r3
     a9a:	2f 90       	pop	r2
     a9c:	08 95       	ret

00000a9e <usart0_put_char_stream>:
   	return 0; 
} 

void usart0_init(uint32_t baud, uint32_t freq_cpu, usart_mode_t mode, usart_databits_t databits, usart_stopbits_t stopbits, usart_parity_t parity, usart_flow_control_t flow_control)
{

     a9e:	1f 93       	push	r17
     aa0:	18 2f       	mov	r17, r24
	cli();
     aa2:	8a 30       	cpi	r24, 0x0A	; 10
     aa4:	19 f4       	brne	.+6      	; 0xaac <usart0_put_char_stream+0xe>
     aa6:	8d e0       	ldi	r24, 0x0D	; 13
     aa8:	0e 94 4f 05 	call	0xa9e	; 0xa9e <usart0_put_char_stream>

   	stdout = &mystdout;    //set the output stream 
     aac:	81 2f       	mov	r24, r17
     aae:	0e 94 5f 05 	call	0xabe	; 0xabe <usart0_transmit_buffer_insert>

    //flow.flow_control = flow_control;
     ab2:	0e 94 74 04 	call	0x8e8	; 0x8e8 <usart0_send>
    //flow.flow_out = true;
    //flow.flow_in = true;

     ab6:	80 e0       	ldi	r24, 0x00	; 0
     ab8:	90 e0       	ldi	r25, 0x00	; 0
     aba:	1f 91       	pop	r17
     abc:	08 95       	ret

00000abe <usart0_transmit_buffer_insert>:
 // please contact me with details so that I may correct the situation. 
 
#include "usart.h"

bool usart0_transmit_buffer_insert(uint8_t c)
{
     abe:	68 2f       	mov	r22, r24
    register bool result;
    result = usart0_buffer_insert(&usart0_transmit_ring, c);
     ac0:	84 ef       	ldi	r24, 0xF4	; 244
     ac2:	91 e0       	ldi	r25, 0x01	; 1
     ac4:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <usart0_buffer_insert>
	// JWP 6/14/11 don't automatically send. Use usart0_transmit_send when 
	// 		you have finished loading what you want to send in the buffer
	//if(result == true) usart0_transmit_check();

    return(result);
}
     ac8:	08 95       	ret

00000aca <usart0_transmit_buffer_inuse_count>:
 
#include "usart.h"

uint8_t usart0_transmit_buffer_inuse_count(void)
{
    return(usart0_buffer_inuse_count(&usart0_transmit_ring));
     aca:	84 ef       	ldi	r24, 0xF4	; 244
     acc:	91 e0       	ldi	r25, 0x01	; 1
     ace:	0e 94 f7 05 	call	0xbee	; 0xbee <usart0_buffer_inuse_count>
}
     ad2:	08 95       	ret

00000ad4 <ring_add>:
#include <stdbool.h>
#include <stdint.h>
#include "ring.h"

bool ring_add(ring_t *r, uint8_t data)
{
     ad4:	dc 01       	movw	r26, r24
    // Get the next head index.
    ring_index_t temp_head = r->head_index + 1;
     ad6:	13 96       	adiw	r26, 0x03	; 3
     ad8:	4d 91       	ld	r20, X+
     ada:	5c 91       	ld	r21, X
     adc:	14 97       	sbiw	r26, 0x04	; 4
    if(r->head_index >= r->size - 1)
     ade:	12 96       	adiw	r26, 0x02	; 2
     ae0:	8c 91       	ld	r24, X
     ae2:	12 97       	sbiw	r26, 0x02	; 2
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	01 97       	sbiw	r24, 0x01	; 1
     ae8:	48 17       	cp	r20, r24
     aea:	59 07       	cpc	r21, r25
     aec:	18 f0       	brcs	.+6      	; 0xaf4 <ring_add+0x20>
     aee:	20 e0       	ldi	r18, 0x00	; 0
     af0:	30 e0       	ldi	r19, 0x00	; 0
     af2:	03 c0       	rjmp	.+6      	; 0xafa <ring_add+0x26>
#include "ring.h"

bool ring_add(ring_t *r, uint8_t data)
{
    // Get the next head index.
    ring_index_t temp_head = r->head_index + 1;
     af4:	9a 01       	movw	r18, r20
     af6:	2f 5f       	subi	r18, 0xFF	; 255
     af8:	3f 4f       	sbci	r19, 0xFF	; 255
    if(r->head_index >= r->size - 1)
    {
        temp_head = 0;
    }

    if(temp_head != r->tail_index)
     afa:	15 96       	adiw	r26, 0x05	; 5
     afc:	8d 91       	ld	r24, X+
     afe:	9c 91       	ld	r25, X
     b00:	16 97       	sbiw	r26, 0x06	; 6
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	11 f4       	brne	.+4      	; 0xb0c <ring_add+0x38>
     b08:	80 e0       	ldi	r24, 0x00	; 0
     b0a:	08 95       	ret
    {
        r->buffer[r->head_index] = data;    // Buffer receives data
     b0c:	ed 91       	ld	r30, X+
     b0e:	fc 91       	ld	r31, X
     b10:	11 97       	sbiw	r26, 0x01	; 1
     b12:	e4 0f       	add	r30, r20
     b14:	f5 1f       	adc	r31, r21
     b16:	60 83       	st	Z, r22
        r->head_index = temp_head;
     b18:	14 96       	adiw	r26, 0x04	; 4
     b1a:	3c 93       	st	X, r19
     b1c:	2e 93       	st	-X, r18
     b1e:	13 97       	sbiw	r26, 0x03	; 3
        r->count++;
     b20:	17 96       	adiw	r26, 0x07	; 7
     b22:	8c 91       	ld	r24, X
     b24:	17 97       	sbiw	r26, 0x07	; 7
     b26:	8f 5f       	subi	r24, 0xFF	; 255
     b28:	17 96       	adiw	r26, 0x07	; 7
     b2a:	8c 93       	st	X, r24
     b2c:	81 e0       	ldi	r24, 0x01	; 1
        return(true);       // Return complete
    }

    return(false);          // Return incomplete
}
     b2e:	08 95       	ret

00000b30 <ring_init>:
#include <stdbool.h>
#include <stdlib.h>
#include "ring.h"

bool ring_init(ring_t *r, ring_buffer_t buffer, ring_size_t size)
{
     b30:	fc 01       	movw	r30, r24
    bool success = false;
    bool clear;
    if (size >= 2 && r != NULL && buffer != NULL)
     b32:	42 30       	cpi	r20, 0x02	; 2
     b34:	58 f0       	brcs	.+22     	; 0xb4c <ring_init+0x1c>
     b36:	00 97       	sbiw	r24, 0x00	; 0
     b38:	49 f0       	breq	.+18     	; 0xb4c <ring_init+0x1c>
     b3a:	61 15       	cp	r22, r1
     b3c:	71 05       	cpc	r23, r1
     b3e:	31 f0       	breq	.+12     	; 0xb4c <ring_init+0x1c>
    {
        r->buffer = buffer;     // Set index pointers
     b40:	71 83       	std	Z+1, r23	; 0x01
     b42:	60 83       	st	Z, r22
        r->size = size;
     b44:	42 83       	std	Z+2, r20	; 0x02
        clear = ring_clear(r);  // Call ring_clear function
     b46:	0e 94 a8 05 	call	0xb50	; 0xb50 <ring_clear>
     b4a:	08 95       	ret
     b4c:	80 e0       	ldi	r24, 0x00	; 0
        {
                success = true;
        }
    }
    return(success);
}
     b4e:	08 95       	ret

00000b50 <ring_clear>:
#include <stdlib.h>
#include <string.h>
#include "ring.h"

bool ring_clear(ring_t *r)
{
     b50:	fc 01       	movw	r30, r24
    bool success = false;
    if (r != NULL)
     b52:	00 97       	sbiw	r24, 0x00	; 0
     b54:	11 f4       	brne	.+4      	; 0xb5a <ring_clear+0xa>
     b56:	80 e0       	ldi	r24, 0x00	; 0
     b58:	08 95       	ret
    {
        r->head_index = 0;
     b5a:	14 82       	std	Z+4, r1	; 0x04
     b5c:	13 82       	std	Z+3, r1	; 0x03
        r->tail_index = 0;          // Assign new values
     b5e:	16 82       	std	Z+6, r1	; 0x06
     b60:	15 82       	std	Z+5, r1	; 0x05
        r->count = 0;
     b62:	17 82       	std	Z+7, r1	; 0x07
        memset((void *)r->buffer, 0, r->size); // Clear out memory
     b64:	42 81       	ldd	r20, Z+2	; 0x02
     b66:	80 81       	ld	r24, Z
     b68:	91 81       	ldd	r25, Z+1	; 0x01
     b6a:	60 e0       	ldi	r22, 0x00	; 0
     b6c:	70 e0       	ldi	r23, 0x00	; 0
     b6e:	50 e0       	ldi	r21, 0x00	; 0
     b70:	0e 94 1f 06 	call	0xc3e	; 0xc3e <memset>
     b74:	81 e0       	ldi	r24, 0x01	; 1
        success = true;
    }
    return(success);
}
     b76:	08 95       	ret

00000b78 <ring_remove>:

#include <stdint.h>
#include "ring.h"

uint8_t ring_remove(ring_t *r)
{
     b78:	dc 01       	movw	r26, r24
    uint8_t data = 0;

    // Compare the head index and the tail index
    if(r->head_index != r->tail_index)
     b7a:	15 96       	adiw	r26, 0x05	; 5
     b7c:	2d 91       	ld	r18, X+
     b7e:	3c 91       	ld	r19, X
     b80:	16 97       	sbiw	r26, 0x06	; 6
     b82:	13 96       	adiw	r26, 0x03	; 3
     b84:	8d 91       	ld	r24, X+
     b86:	9c 91       	ld	r25, X
     b88:	14 97       	sbiw	r26, 0x04	; 4
     b8a:	82 17       	cp	r24, r18
     b8c:	93 07       	cpc	r25, r19
     b8e:	11 f4       	brne	.+4      	; 0xb94 <ring_remove+0x1c>
     b90:	e0 e0       	ldi	r30, 0x00	; 0
     b92:	1d c0       	rjmp	.+58     	; 0xbce <ring_remove+0x56>
    {
        // Get the Data from the buffer.
        data = r->buffer[r->tail_index];
     b94:	ed 91       	ld	r30, X+
     b96:	fc 91       	ld	r31, X
     b98:	11 97       	sbiw	r26, 0x01	; 1
     b9a:	e2 0f       	add	r30, r18
     b9c:	f3 1f       	adc	r31, r19
     b9e:	e0 81       	ld	r30, Z

        // Get the next tail index.
        ring_index_t next_tail = r->tail_index + 1;
        if(r->tail_index >= r->size - 1)
     ba0:	12 96       	adiw	r26, 0x02	; 2
     ba2:	8c 91       	ld	r24, X
     ba4:	12 97       	sbiw	r26, 0x02	; 2
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	01 97       	sbiw	r24, 0x01	; 1
     baa:	28 17       	cp	r18, r24
     bac:	39 07       	cpc	r19, r25
     bae:	18 f0       	brcs	.+6      	; 0xbb6 <ring_remove+0x3e>
     bb0:	80 e0       	ldi	r24, 0x00	; 0
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	02 c0       	rjmp	.+4      	; 0xbba <ring_remove+0x42>
    {
        // Get the Data from the buffer.
        data = r->buffer[r->tail_index];

        // Get the next tail index.
        ring_index_t next_tail = r->tail_index + 1;
     bb6:	c9 01       	movw	r24, r18
     bb8:	01 96       	adiw	r24, 0x01	; 1
        if(r->tail_index >= r->size - 1)
        {
            next_tail = 0;
        }

        r->tail_index = next_tail;      // Move index
     bba:	16 96       	adiw	r26, 0x06	; 6
     bbc:	9c 93       	st	X, r25
     bbe:	8e 93       	st	-X, r24
     bc0:	15 97       	sbiw	r26, 0x05	; 5
        r->count--;             // Decrement count
     bc2:	17 96       	adiw	r26, 0x07	; 7
     bc4:	8c 91       	ld	r24, X
     bc6:	17 97       	sbiw	r26, 0x07	; 7
     bc8:	81 50       	subi	r24, 0x01	; 1
     bca:	17 96       	adiw	r26, 0x07	; 7
     bcc:	8c 93       	st	X, r24
    }

    return(data);
}
     bce:	8e 2f       	mov	r24, r30
     bd0:	08 95       	ret

00000bd2 <usart0_buffer_insert>:
 // please contact me with details so that I may correct the situation. 
 
#include "usart.h"

bool usart0_buffer_insert(ring_t *ring, uint8_t c)
{
     bd2:	1f 93       	push	r17
     bd4:	9c 01       	movw	r18, r24
    register bool result;
    register uint8_t sreg;
   
   	// Do not load buffer while transmitting from buffer
	while(usart_buffered_tx_flag);
     bd6:	80 91 44 02 	lds	r24, 0x0244
     bda:	88 23       	and	r24, r24
     bdc:	e1 f7       	brne	.-8      	; 0xbd6 <usart0_buffer_insert+0x4>
    
    sreg = SREG;
     bde:	1f b7       	in	r17, 0x3f	; 63
    cli();
     be0:	f8 94       	cli
    result = ring_add(ring, c);
     be2:	c9 01       	movw	r24, r18
     be4:	0e 94 6a 05 	call	0xad4	; 0xad4 <ring_add>
    SREG = sreg;
     be8:	1f bf       	out	0x3f, r17	; 63
    return(result);
}
     bea:	1f 91       	pop	r17
     bec:	08 95       	ret

00000bee <usart0_buffer_inuse_count>:
 // please contact me with details so that I may correct the situation. 
 
#include "usart.h"

uint8_t usart0_buffer_inuse_count(ring_t *ring)
{
     bee:	fc 01       	movw	r30, r24
    register uint8_t result;
    register uint8_t sreg;
    
    sreg = SREG;
     bf0:	8f b7       	in	r24, 0x3f	; 63
    cli();
     bf2:	f8 94       	cli
    result = ring->count;
    SREG = sreg;
     bf4:	8f bf       	out	0x3f, r24	; 63
    return(result);
}
     bf6:	87 81       	ldd	r24, Z+7	; 0x07
     bf8:	08 95       	ret

00000bfa <__udivmodsi4>:
     bfa:	a1 e2       	ldi	r26, 0x21	; 33
     bfc:	1a 2e       	mov	r1, r26
     bfe:	aa 1b       	sub	r26, r26
     c00:	bb 1b       	sub	r27, r27
     c02:	fd 01       	movw	r30, r26
     c04:	0d c0       	rjmp	.+26     	; 0xc20 <__udivmodsi4_ep>

00000c06 <__udivmodsi4_loop>:
     c06:	aa 1f       	adc	r26, r26
     c08:	bb 1f       	adc	r27, r27
     c0a:	ee 1f       	adc	r30, r30
     c0c:	ff 1f       	adc	r31, r31
     c0e:	a2 17       	cp	r26, r18
     c10:	b3 07       	cpc	r27, r19
     c12:	e4 07       	cpc	r30, r20
     c14:	f5 07       	cpc	r31, r21
     c16:	20 f0       	brcs	.+8      	; 0xc20 <__udivmodsi4_ep>
     c18:	a2 1b       	sub	r26, r18
     c1a:	b3 0b       	sbc	r27, r19
     c1c:	e4 0b       	sbc	r30, r20
     c1e:	f5 0b       	sbc	r31, r21

00000c20 <__udivmodsi4_ep>:
     c20:	66 1f       	adc	r22, r22
     c22:	77 1f       	adc	r23, r23
     c24:	88 1f       	adc	r24, r24
     c26:	99 1f       	adc	r25, r25
     c28:	1a 94       	dec	r1
     c2a:	69 f7       	brne	.-38     	; 0xc06 <__udivmodsi4_loop>
     c2c:	60 95       	com	r22
     c2e:	70 95       	com	r23
     c30:	80 95       	com	r24
     c32:	90 95       	com	r25
     c34:	9b 01       	movw	r18, r22
     c36:	ac 01       	movw	r20, r24
     c38:	bd 01       	movw	r22, r26
     c3a:	cf 01       	movw	r24, r30
     c3c:	08 95       	ret

00000c3e <memset>:
     c3e:	dc 01       	movw	r26, r24
     c40:	01 c0       	rjmp	.+2      	; 0xc44 <memset+0x6>
     c42:	6d 93       	st	X+, r22
     c44:	41 50       	subi	r20, 0x01	; 1
     c46:	50 40       	sbci	r21, 0x00	; 0
     c48:	e0 f7       	brcc	.-8      	; 0xc42 <memset+0x4>
     c4a:	08 95       	ret

00000c4c <vprintf>:
     c4c:	9c 01       	movw	r18, r24
     c4e:	ab 01       	movw	r20, r22
     c50:	80 91 48 02 	lds	r24, 0x0248
     c54:	90 91 49 02 	lds	r25, 0x0249
     c58:	b9 01       	movw	r22, r18
     c5a:	0e 94 30 06 	call	0xc60	; 0xc60 <vfprintf>
     c5e:	08 95       	ret

00000c60 <vfprintf>:
     c60:	ab e0       	ldi	r26, 0x0B	; 11
     c62:	b0 e0       	ldi	r27, 0x00	; 0
     c64:	e6 e3       	ldi	r30, 0x36	; 54
     c66:	f6 e0       	ldi	r31, 0x06	; 6
     c68:	0c 94 ad 08 	jmp	0x115a	; 0x115a <__prologue_saves__>
     c6c:	3c 01       	movw	r6, r24
     c6e:	2b 01       	movw	r4, r22
     c70:	5a 01       	movw	r10, r20
     c72:	fc 01       	movw	r30, r24
     c74:	17 82       	std	Z+7, r1	; 0x07
     c76:	16 82       	std	Z+6, r1	; 0x06
     c78:	83 81       	ldd	r24, Z+3	; 0x03
     c7a:	81 fd       	sbrc	r24, 1
     c7c:	03 c0       	rjmp	.+6      	; 0xc84 <vfprintf+0x24>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	c6 c1       	rjmp	.+908    	; 0x1010 <vfprintf+0x3b0>
     c84:	9a e0       	ldi	r25, 0x0A	; 10
     c86:	89 2e       	mov	r8, r25
     c88:	1e 01       	movw	r2, r28
     c8a:	08 94       	sec
     c8c:	21 1c       	adc	r2, r1
     c8e:	31 1c       	adc	r3, r1
     c90:	f3 01       	movw	r30, r6
     c92:	23 81       	ldd	r18, Z+3	; 0x03
     c94:	f2 01       	movw	r30, r4
     c96:	23 fd       	sbrc	r18, 3
     c98:	85 91       	lpm	r24, Z+
     c9a:	23 ff       	sbrs	r18, 3
     c9c:	81 91       	ld	r24, Z+
     c9e:	2f 01       	movw	r4, r30
     ca0:	88 23       	and	r24, r24
     ca2:	09 f4       	brne	.+2      	; 0xca6 <vfprintf+0x46>
     ca4:	b2 c1       	rjmp	.+868    	; 0x100a <vfprintf+0x3aa>
     ca6:	85 32       	cpi	r24, 0x25	; 37
     ca8:	39 f4       	brne	.+14     	; 0xcb8 <vfprintf+0x58>
     caa:	23 fd       	sbrc	r18, 3
     cac:	85 91       	lpm	r24, Z+
     cae:	23 ff       	sbrs	r18, 3
     cb0:	81 91       	ld	r24, Z+
     cb2:	2f 01       	movw	r4, r30
     cb4:	85 32       	cpi	r24, 0x25	; 37
     cb6:	29 f4       	brne	.+10     	; 0xcc2 <vfprintf+0x62>
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	b3 01       	movw	r22, r6
     cbc:	0e 94 23 08 	call	0x1046	; 0x1046 <fputc>
     cc0:	e7 cf       	rjmp	.-50     	; 0xc90 <vfprintf+0x30>
     cc2:	98 2f       	mov	r25, r24
     cc4:	ff 24       	eor	r15, r15
     cc6:	ee 24       	eor	r14, r14
     cc8:	99 24       	eor	r9, r9
     cca:	ff e1       	ldi	r31, 0x1F	; 31
     ccc:	ff 15       	cp	r31, r15
     cce:	d0 f0       	brcs	.+52     	; 0xd04 <vfprintf+0xa4>
     cd0:	9b 32       	cpi	r25, 0x2B	; 43
     cd2:	69 f0       	breq	.+26     	; 0xcee <vfprintf+0x8e>
     cd4:	9c 32       	cpi	r25, 0x2C	; 44
     cd6:	28 f4       	brcc	.+10     	; 0xce2 <vfprintf+0x82>
     cd8:	90 32       	cpi	r25, 0x20	; 32
     cda:	59 f0       	breq	.+22     	; 0xcf2 <vfprintf+0x92>
     cdc:	93 32       	cpi	r25, 0x23	; 35
     cde:	91 f4       	brne	.+36     	; 0xd04 <vfprintf+0xa4>
     ce0:	0e c0       	rjmp	.+28     	; 0xcfe <vfprintf+0x9e>
     ce2:	9d 32       	cpi	r25, 0x2D	; 45
     ce4:	49 f0       	breq	.+18     	; 0xcf8 <vfprintf+0x98>
     ce6:	90 33       	cpi	r25, 0x30	; 48
     ce8:	69 f4       	brne	.+26     	; 0xd04 <vfprintf+0xa4>
     cea:	41 e0       	ldi	r20, 0x01	; 1
     cec:	24 c0       	rjmp	.+72     	; 0xd36 <vfprintf+0xd6>
     cee:	52 e0       	ldi	r21, 0x02	; 2
     cf0:	f5 2a       	or	r15, r21
     cf2:	84 e0       	ldi	r24, 0x04	; 4
     cf4:	f8 2a       	or	r15, r24
     cf6:	28 c0       	rjmp	.+80     	; 0xd48 <vfprintf+0xe8>
     cf8:	98 e0       	ldi	r25, 0x08	; 8
     cfa:	f9 2a       	or	r15, r25
     cfc:	25 c0       	rjmp	.+74     	; 0xd48 <vfprintf+0xe8>
     cfe:	e0 e1       	ldi	r30, 0x10	; 16
     d00:	fe 2a       	or	r15, r30
     d02:	22 c0       	rjmp	.+68     	; 0xd48 <vfprintf+0xe8>
     d04:	f7 fc       	sbrc	r15, 7
     d06:	29 c0       	rjmp	.+82     	; 0xd5a <vfprintf+0xfa>
     d08:	89 2f       	mov	r24, r25
     d0a:	80 53       	subi	r24, 0x30	; 48
     d0c:	8a 30       	cpi	r24, 0x0A	; 10
     d0e:	70 f4       	brcc	.+28     	; 0xd2c <vfprintf+0xcc>
     d10:	f6 fe       	sbrs	r15, 6
     d12:	05 c0       	rjmp	.+10     	; 0xd1e <vfprintf+0xbe>
     d14:	98 9c       	mul	r9, r8
     d16:	90 2c       	mov	r9, r0
     d18:	11 24       	eor	r1, r1
     d1a:	98 0e       	add	r9, r24
     d1c:	15 c0       	rjmp	.+42     	; 0xd48 <vfprintf+0xe8>
     d1e:	e8 9c       	mul	r14, r8
     d20:	e0 2c       	mov	r14, r0
     d22:	11 24       	eor	r1, r1
     d24:	e8 0e       	add	r14, r24
     d26:	f0 e2       	ldi	r31, 0x20	; 32
     d28:	ff 2a       	or	r15, r31
     d2a:	0e c0       	rjmp	.+28     	; 0xd48 <vfprintf+0xe8>
     d2c:	9e 32       	cpi	r25, 0x2E	; 46
     d2e:	29 f4       	brne	.+10     	; 0xd3a <vfprintf+0xda>
     d30:	f6 fc       	sbrc	r15, 6
     d32:	6b c1       	rjmp	.+726    	; 0x100a <vfprintf+0x3aa>
     d34:	40 e4       	ldi	r20, 0x40	; 64
     d36:	f4 2a       	or	r15, r20
     d38:	07 c0       	rjmp	.+14     	; 0xd48 <vfprintf+0xe8>
     d3a:	9c 36       	cpi	r25, 0x6C	; 108
     d3c:	19 f4       	brne	.+6      	; 0xd44 <vfprintf+0xe4>
     d3e:	50 e8       	ldi	r21, 0x80	; 128
     d40:	f5 2a       	or	r15, r21
     d42:	02 c0       	rjmp	.+4      	; 0xd48 <vfprintf+0xe8>
     d44:	98 36       	cpi	r25, 0x68	; 104
     d46:	49 f4       	brne	.+18     	; 0xd5a <vfprintf+0xfa>
     d48:	f2 01       	movw	r30, r4
     d4a:	23 fd       	sbrc	r18, 3
     d4c:	95 91       	lpm	r25, Z+
     d4e:	23 ff       	sbrs	r18, 3
     d50:	91 91       	ld	r25, Z+
     d52:	2f 01       	movw	r4, r30
     d54:	99 23       	and	r25, r25
     d56:	09 f0       	breq	.+2      	; 0xd5a <vfprintf+0xfa>
     d58:	b8 cf       	rjmp	.-144    	; 0xcca <vfprintf+0x6a>
     d5a:	89 2f       	mov	r24, r25
     d5c:	85 54       	subi	r24, 0x45	; 69
     d5e:	83 30       	cpi	r24, 0x03	; 3
     d60:	18 f0       	brcs	.+6      	; 0xd68 <vfprintf+0x108>
     d62:	80 52       	subi	r24, 0x20	; 32
     d64:	83 30       	cpi	r24, 0x03	; 3
     d66:	38 f4       	brcc	.+14     	; 0xd76 <vfprintf+0x116>
     d68:	44 e0       	ldi	r20, 0x04	; 4
     d6a:	50 e0       	ldi	r21, 0x00	; 0
     d6c:	a4 0e       	add	r10, r20
     d6e:	b5 1e       	adc	r11, r21
     d70:	5f e3       	ldi	r21, 0x3F	; 63
     d72:	59 83       	std	Y+1, r21	; 0x01
     d74:	0f c0       	rjmp	.+30     	; 0xd94 <vfprintf+0x134>
     d76:	93 36       	cpi	r25, 0x63	; 99
     d78:	31 f0       	breq	.+12     	; 0xd86 <vfprintf+0x126>
     d7a:	93 37       	cpi	r25, 0x73	; 115
     d7c:	79 f0       	breq	.+30     	; 0xd9c <vfprintf+0x13c>
     d7e:	93 35       	cpi	r25, 0x53	; 83
     d80:	09 f0       	breq	.+2      	; 0xd84 <vfprintf+0x124>
     d82:	56 c0       	rjmp	.+172    	; 0xe30 <vfprintf+0x1d0>
     d84:	20 c0       	rjmp	.+64     	; 0xdc6 <vfprintf+0x166>
     d86:	f5 01       	movw	r30, r10
     d88:	80 81       	ld	r24, Z
     d8a:	89 83       	std	Y+1, r24	; 0x01
     d8c:	42 e0       	ldi	r20, 0x02	; 2
     d8e:	50 e0       	ldi	r21, 0x00	; 0
     d90:	a4 0e       	add	r10, r20
     d92:	b5 1e       	adc	r11, r21
     d94:	61 01       	movw	r12, r2
     d96:	01 e0       	ldi	r16, 0x01	; 1
     d98:	10 e0       	ldi	r17, 0x00	; 0
     d9a:	12 c0       	rjmp	.+36     	; 0xdc0 <vfprintf+0x160>
     d9c:	f5 01       	movw	r30, r10
     d9e:	c0 80       	ld	r12, Z
     da0:	d1 80       	ldd	r13, Z+1	; 0x01
     da2:	f6 fc       	sbrc	r15, 6
     da4:	03 c0       	rjmp	.+6      	; 0xdac <vfprintf+0x14c>
     da6:	6f ef       	ldi	r22, 0xFF	; 255
     da8:	7f ef       	ldi	r23, 0xFF	; 255
     daa:	02 c0       	rjmp	.+4      	; 0xdb0 <vfprintf+0x150>
     dac:	69 2d       	mov	r22, r9
     dae:	70 e0       	ldi	r23, 0x00	; 0
     db0:	42 e0       	ldi	r20, 0x02	; 2
     db2:	50 e0       	ldi	r21, 0x00	; 0
     db4:	a4 0e       	add	r10, r20
     db6:	b5 1e       	adc	r11, r21
     db8:	c6 01       	movw	r24, r12
     dba:	0e 94 18 08 	call	0x1030	; 0x1030 <strnlen>
     dbe:	8c 01       	movw	r16, r24
     dc0:	5f e7       	ldi	r21, 0x7F	; 127
     dc2:	f5 22       	and	r15, r21
     dc4:	14 c0       	rjmp	.+40     	; 0xdee <vfprintf+0x18e>
     dc6:	f5 01       	movw	r30, r10
     dc8:	c0 80       	ld	r12, Z
     dca:	d1 80       	ldd	r13, Z+1	; 0x01
     dcc:	f6 fc       	sbrc	r15, 6
     dce:	03 c0       	rjmp	.+6      	; 0xdd6 <vfprintf+0x176>
     dd0:	6f ef       	ldi	r22, 0xFF	; 255
     dd2:	7f ef       	ldi	r23, 0xFF	; 255
     dd4:	02 c0       	rjmp	.+4      	; 0xdda <vfprintf+0x17a>
     dd6:	69 2d       	mov	r22, r9
     dd8:	70 e0       	ldi	r23, 0x00	; 0
     dda:	42 e0       	ldi	r20, 0x02	; 2
     ddc:	50 e0       	ldi	r21, 0x00	; 0
     dde:	a4 0e       	add	r10, r20
     de0:	b5 1e       	adc	r11, r21
     de2:	c6 01       	movw	r24, r12
     de4:	0e 94 0d 08 	call	0x101a	; 0x101a <strnlen_P>
     de8:	8c 01       	movw	r16, r24
     dea:	50 e8       	ldi	r21, 0x80	; 128
     dec:	f5 2a       	or	r15, r21
     dee:	f3 fe       	sbrs	r15, 3
     df0:	07 c0       	rjmp	.+14     	; 0xe00 <vfprintf+0x1a0>
     df2:	1a c0       	rjmp	.+52     	; 0xe28 <vfprintf+0x1c8>
     df4:	80 e2       	ldi	r24, 0x20	; 32
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	b3 01       	movw	r22, r6
     dfa:	0e 94 23 08 	call	0x1046	; 0x1046 <fputc>
     dfe:	ea 94       	dec	r14
     e00:	8e 2d       	mov	r24, r14
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	08 17       	cp	r16, r24
     e06:	19 07       	cpc	r17, r25
     e08:	a8 f3       	brcs	.-22     	; 0xdf4 <vfprintf+0x194>
     e0a:	0e c0       	rjmp	.+28     	; 0xe28 <vfprintf+0x1c8>
     e0c:	f6 01       	movw	r30, r12
     e0e:	f7 fc       	sbrc	r15, 7
     e10:	85 91       	lpm	r24, Z+
     e12:	f7 fe       	sbrs	r15, 7
     e14:	81 91       	ld	r24, Z+
     e16:	6f 01       	movw	r12, r30
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	b3 01       	movw	r22, r6
     e1c:	0e 94 23 08 	call	0x1046	; 0x1046 <fputc>
     e20:	e1 10       	cpse	r14, r1
     e22:	ea 94       	dec	r14
     e24:	01 50       	subi	r16, 0x01	; 1
     e26:	10 40       	sbci	r17, 0x00	; 0
     e28:	01 15       	cp	r16, r1
     e2a:	11 05       	cpc	r17, r1
     e2c:	79 f7       	brne	.-34     	; 0xe0c <vfprintf+0x1ac>
     e2e:	ea c0       	rjmp	.+468    	; 0x1004 <vfprintf+0x3a4>
     e30:	94 36       	cpi	r25, 0x64	; 100
     e32:	11 f0       	breq	.+4      	; 0xe38 <vfprintf+0x1d8>
     e34:	99 36       	cpi	r25, 0x69	; 105
     e36:	69 f5       	brne	.+90     	; 0xe92 <vfprintf+0x232>
     e38:	f7 fe       	sbrs	r15, 7
     e3a:	08 c0       	rjmp	.+16     	; 0xe4c <vfprintf+0x1ec>
     e3c:	f5 01       	movw	r30, r10
     e3e:	20 81       	ld	r18, Z
     e40:	31 81       	ldd	r19, Z+1	; 0x01
     e42:	42 81       	ldd	r20, Z+2	; 0x02
     e44:	53 81       	ldd	r21, Z+3	; 0x03
     e46:	84 e0       	ldi	r24, 0x04	; 4
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	0a c0       	rjmp	.+20     	; 0xe60 <vfprintf+0x200>
     e4c:	f5 01       	movw	r30, r10
     e4e:	80 81       	ld	r24, Z
     e50:	91 81       	ldd	r25, Z+1	; 0x01
     e52:	9c 01       	movw	r18, r24
     e54:	44 27       	eor	r20, r20
     e56:	37 fd       	sbrc	r19, 7
     e58:	40 95       	com	r20
     e5a:	54 2f       	mov	r21, r20
     e5c:	82 e0       	ldi	r24, 0x02	; 2
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	a8 0e       	add	r10, r24
     e62:	b9 1e       	adc	r11, r25
     e64:	9f e6       	ldi	r25, 0x6F	; 111
     e66:	f9 22       	and	r15, r25
     e68:	57 ff       	sbrs	r21, 7
     e6a:	09 c0       	rjmp	.+18     	; 0xe7e <vfprintf+0x21e>
     e6c:	50 95       	com	r21
     e6e:	40 95       	com	r20
     e70:	30 95       	com	r19
     e72:	21 95       	neg	r18
     e74:	3f 4f       	sbci	r19, 0xFF	; 255
     e76:	4f 4f       	sbci	r20, 0xFF	; 255
     e78:	5f 4f       	sbci	r21, 0xFF	; 255
     e7a:	e0 e8       	ldi	r30, 0x80	; 128
     e7c:	fe 2a       	or	r15, r30
     e7e:	ca 01       	movw	r24, r20
     e80:	b9 01       	movw	r22, r18
     e82:	a1 01       	movw	r20, r2
     e84:	2a e0       	ldi	r18, 0x0A	; 10
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	0e 94 4f 08 	call	0x109e	; 0x109e <__ultoa_invert>
     e8c:	d8 2e       	mov	r13, r24
     e8e:	d2 18       	sub	r13, r2
     e90:	40 c0       	rjmp	.+128    	; 0xf12 <vfprintf+0x2b2>
     e92:	95 37       	cpi	r25, 0x75	; 117
     e94:	29 f4       	brne	.+10     	; 0xea0 <vfprintf+0x240>
     e96:	1f 2d       	mov	r17, r15
     e98:	1f 7e       	andi	r17, 0xEF	; 239
     e9a:	2a e0       	ldi	r18, 0x0A	; 10
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	1d c0       	rjmp	.+58     	; 0xeda <vfprintf+0x27a>
     ea0:	1f 2d       	mov	r17, r15
     ea2:	19 7f       	andi	r17, 0xF9	; 249
     ea4:	9f 36       	cpi	r25, 0x6F	; 111
     ea6:	61 f0       	breq	.+24     	; 0xec0 <vfprintf+0x260>
     ea8:	90 37       	cpi	r25, 0x70	; 112
     eaa:	20 f4       	brcc	.+8      	; 0xeb4 <vfprintf+0x254>
     eac:	98 35       	cpi	r25, 0x58	; 88
     eae:	09 f0       	breq	.+2      	; 0xeb2 <vfprintf+0x252>
     eb0:	ac c0       	rjmp	.+344    	; 0x100a <vfprintf+0x3aa>
     eb2:	0f c0       	rjmp	.+30     	; 0xed2 <vfprintf+0x272>
     eb4:	90 37       	cpi	r25, 0x70	; 112
     eb6:	39 f0       	breq	.+14     	; 0xec6 <vfprintf+0x266>
     eb8:	98 37       	cpi	r25, 0x78	; 120
     eba:	09 f0       	breq	.+2      	; 0xebe <vfprintf+0x25e>
     ebc:	a6 c0       	rjmp	.+332    	; 0x100a <vfprintf+0x3aa>
     ebe:	04 c0       	rjmp	.+8      	; 0xec8 <vfprintf+0x268>
     ec0:	28 e0       	ldi	r18, 0x08	; 8
     ec2:	30 e0       	ldi	r19, 0x00	; 0
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <vfprintf+0x27a>
     ec6:	10 61       	ori	r17, 0x10	; 16
     ec8:	14 fd       	sbrc	r17, 4
     eca:	14 60       	ori	r17, 0x04	; 4
     ecc:	20 e1       	ldi	r18, 0x10	; 16
     ece:	30 e0       	ldi	r19, 0x00	; 0
     ed0:	04 c0       	rjmp	.+8      	; 0xeda <vfprintf+0x27a>
     ed2:	14 fd       	sbrc	r17, 4
     ed4:	16 60       	ori	r17, 0x06	; 6
     ed6:	20 e1       	ldi	r18, 0x10	; 16
     ed8:	32 e0       	ldi	r19, 0x02	; 2
     eda:	17 ff       	sbrs	r17, 7
     edc:	08 c0       	rjmp	.+16     	; 0xeee <vfprintf+0x28e>
     ede:	f5 01       	movw	r30, r10
     ee0:	60 81       	ld	r22, Z
     ee2:	71 81       	ldd	r23, Z+1	; 0x01
     ee4:	82 81       	ldd	r24, Z+2	; 0x02
     ee6:	93 81       	ldd	r25, Z+3	; 0x03
     ee8:	44 e0       	ldi	r20, 0x04	; 4
     eea:	50 e0       	ldi	r21, 0x00	; 0
     eec:	08 c0       	rjmp	.+16     	; 0xefe <vfprintf+0x29e>
     eee:	f5 01       	movw	r30, r10
     ef0:	80 81       	ld	r24, Z
     ef2:	91 81       	ldd	r25, Z+1	; 0x01
     ef4:	bc 01       	movw	r22, r24
     ef6:	80 e0       	ldi	r24, 0x00	; 0
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	42 e0       	ldi	r20, 0x02	; 2
     efc:	50 e0       	ldi	r21, 0x00	; 0
     efe:	a4 0e       	add	r10, r20
     f00:	b5 1e       	adc	r11, r21
     f02:	a1 01       	movw	r20, r2
     f04:	0e 94 4f 08 	call	0x109e	; 0x109e <__ultoa_invert>
     f08:	d8 2e       	mov	r13, r24
     f0a:	d2 18       	sub	r13, r2
     f0c:	8f e7       	ldi	r24, 0x7F	; 127
     f0e:	f8 2e       	mov	r15, r24
     f10:	f1 22       	and	r15, r17
     f12:	f6 fe       	sbrs	r15, 6
     f14:	0b c0       	rjmp	.+22     	; 0xf2c <vfprintf+0x2cc>
     f16:	5e ef       	ldi	r21, 0xFE	; 254
     f18:	f5 22       	and	r15, r21
     f1a:	d9 14       	cp	r13, r9
     f1c:	38 f4       	brcc	.+14     	; 0xf2c <vfprintf+0x2cc>
     f1e:	f4 fe       	sbrs	r15, 4
     f20:	07 c0       	rjmp	.+14     	; 0xf30 <vfprintf+0x2d0>
     f22:	f2 fc       	sbrc	r15, 2
     f24:	05 c0       	rjmp	.+10     	; 0xf30 <vfprintf+0x2d0>
     f26:	8f ee       	ldi	r24, 0xEF	; 239
     f28:	f8 22       	and	r15, r24
     f2a:	02 c0       	rjmp	.+4      	; 0xf30 <vfprintf+0x2d0>
     f2c:	1d 2d       	mov	r17, r13
     f2e:	01 c0       	rjmp	.+2      	; 0xf32 <vfprintf+0x2d2>
     f30:	19 2d       	mov	r17, r9
     f32:	f4 fe       	sbrs	r15, 4
     f34:	0d c0       	rjmp	.+26     	; 0xf50 <vfprintf+0x2f0>
     f36:	fe 01       	movw	r30, r28
     f38:	ed 0d       	add	r30, r13
     f3a:	f1 1d       	adc	r31, r1
     f3c:	80 81       	ld	r24, Z
     f3e:	80 33       	cpi	r24, 0x30	; 48
     f40:	19 f4       	brne	.+6      	; 0xf48 <vfprintf+0x2e8>
     f42:	99 ee       	ldi	r25, 0xE9	; 233
     f44:	f9 22       	and	r15, r25
     f46:	08 c0       	rjmp	.+16     	; 0xf58 <vfprintf+0x2f8>
     f48:	1f 5f       	subi	r17, 0xFF	; 255
     f4a:	f2 fe       	sbrs	r15, 2
     f4c:	05 c0       	rjmp	.+10     	; 0xf58 <vfprintf+0x2f8>
     f4e:	03 c0       	rjmp	.+6      	; 0xf56 <vfprintf+0x2f6>
     f50:	8f 2d       	mov	r24, r15
     f52:	86 78       	andi	r24, 0x86	; 134
     f54:	09 f0       	breq	.+2      	; 0xf58 <vfprintf+0x2f8>
     f56:	1f 5f       	subi	r17, 0xFF	; 255
     f58:	0f 2d       	mov	r16, r15
     f5a:	f3 fc       	sbrc	r15, 3
     f5c:	14 c0       	rjmp	.+40     	; 0xf86 <vfprintf+0x326>
     f5e:	f0 fe       	sbrs	r15, 0
     f60:	0f c0       	rjmp	.+30     	; 0xf80 <vfprintf+0x320>
     f62:	1e 15       	cp	r17, r14
     f64:	10 f0       	brcs	.+4      	; 0xf6a <vfprintf+0x30a>
     f66:	9d 2c       	mov	r9, r13
     f68:	0b c0       	rjmp	.+22     	; 0xf80 <vfprintf+0x320>
     f6a:	9d 2c       	mov	r9, r13
     f6c:	9e 0c       	add	r9, r14
     f6e:	91 1a       	sub	r9, r17
     f70:	1e 2d       	mov	r17, r14
     f72:	06 c0       	rjmp	.+12     	; 0xf80 <vfprintf+0x320>
     f74:	80 e2       	ldi	r24, 0x20	; 32
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	b3 01       	movw	r22, r6
     f7a:	0e 94 23 08 	call	0x1046	; 0x1046 <fputc>
     f7e:	1f 5f       	subi	r17, 0xFF	; 255
     f80:	1e 15       	cp	r17, r14
     f82:	c0 f3       	brcs	.-16     	; 0xf74 <vfprintf+0x314>
     f84:	04 c0       	rjmp	.+8      	; 0xf8e <vfprintf+0x32e>
     f86:	1e 15       	cp	r17, r14
     f88:	10 f4       	brcc	.+4      	; 0xf8e <vfprintf+0x32e>
     f8a:	e1 1a       	sub	r14, r17
     f8c:	01 c0       	rjmp	.+2      	; 0xf90 <vfprintf+0x330>
     f8e:	ee 24       	eor	r14, r14
     f90:	04 ff       	sbrs	r16, 4
     f92:	0f c0       	rjmp	.+30     	; 0xfb2 <vfprintf+0x352>
     f94:	80 e3       	ldi	r24, 0x30	; 48
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	b3 01       	movw	r22, r6
     f9a:	0e 94 23 08 	call	0x1046	; 0x1046 <fputc>
     f9e:	02 ff       	sbrs	r16, 2
     fa0:	1d c0       	rjmp	.+58     	; 0xfdc <vfprintf+0x37c>
     fa2:	01 fd       	sbrc	r16, 1
     fa4:	03 c0       	rjmp	.+6      	; 0xfac <vfprintf+0x34c>
     fa6:	88 e7       	ldi	r24, 0x78	; 120
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	0e c0       	rjmp	.+28     	; 0xfc8 <vfprintf+0x368>
     fac:	88 e5       	ldi	r24, 0x58	; 88
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	0b c0       	rjmp	.+22     	; 0xfc8 <vfprintf+0x368>
     fb2:	80 2f       	mov	r24, r16
     fb4:	86 78       	andi	r24, 0x86	; 134
     fb6:	91 f0       	breq	.+36     	; 0xfdc <vfprintf+0x37c>
     fb8:	01 ff       	sbrs	r16, 1
     fba:	02 c0       	rjmp	.+4      	; 0xfc0 <vfprintf+0x360>
     fbc:	8b e2       	ldi	r24, 0x2B	; 43
     fbe:	01 c0       	rjmp	.+2      	; 0xfc2 <vfprintf+0x362>
     fc0:	80 e2       	ldi	r24, 0x20	; 32
     fc2:	f7 fc       	sbrc	r15, 7
     fc4:	8d e2       	ldi	r24, 0x2D	; 45
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	b3 01       	movw	r22, r6
     fca:	0e 94 23 08 	call	0x1046	; 0x1046 <fputc>
     fce:	06 c0       	rjmp	.+12     	; 0xfdc <vfprintf+0x37c>
     fd0:	80 e3       	ldi	r24, 0x30	; 48
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	b3 01       	movw	r22, r6
     fd6:	0e 94 23 08 	call	0x1046	; 0x1046 <fputc>
     fda:	9a 94       	dec	r9
     fdc:	d9 14       	cp	r13, r9
     fde:	c0 f3       	brcs	.-16     	; 0xfd0 <vfprintf+0x370>
     fe0:	da 94       	dec	r13
     fe2:	f1 01       	movw	r30, r2
     fe4:	ed 0d       	add	r30, r13
     fe6:	f1 1d       	adc	r31, r1
     fe8:	80 81       	ld	r24, Z
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	b3 01       	movw	r22, r6
     fee:	0e 94 23 08 	call	0x1046	; 0x1046 <fputc>
     ff2:	dd 20       	and	r13, r13
     ff4:	a9 f7       	brne	.-22     	; 0xfe0 <vfprintf+0x380>
     ff6:	06 c0       	rjmp	.+12     	; 0x1004 <vfprintf+0x3a4>
     ff8:	80 e2       	ldi	r24, 0x20	; 32
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	b3 01       	movw	r22, r6
     ffe:	0e 94 23 08 	call	0x1046	; 0x1046 <fputc>
    1002:	ea 94       	dec	r14
    1004:	ee 20       	and	r14, r14
    1006:	c1 f7       	brne	.-16     	; 0xff8 <vfprintf+0x398>
    1008:	43 ce       	rjmp	.-890    	; 0xc90 <vfprintf+0x30>
    100a:	f3 01       	movw	r30, r6
    100c:	66 81       	ldd	r22, Z+6	; 0x06
    100e:	77 81       	ldd	r23, Z+7	; 0x07
    1010:	cb 01       	movw	r24, r22
    1012:	2b 96       	adiw	r28, 0x0b	; 11
    1014:	e2 e1       	ldi	r30, 0x12	; 18
    1016:	0c 94 c9 08 	jmp	0x1192	; 0x1192 <__epilogue_restores__>

0000101a <strnlen_P>:
    101a:	fc 01       	movw	r30, r24
    101c:	05 90       	lpm	r0, Z+
    101e:	61 50       	subi	r22, 0x01	; 1
    1020:	70 40       	sbci	r23, 0x00	; 0
    1022:	01 10       	cpse	r0, r1
    1024:	d8 f7       	brcc	.-10     	; 0x101c <strnlen_P+0x2>
    1026:	80 95       	com	r24
    1028:	90 95       	com	r25
    102a:	8e 0f       	add	r24, r30
    102c:	9f 1f       	adc	r25, r31
    102e:	08 95       	ret

00001030 <strnlen>:
    1030:	fc 01       	movw	r30, r24
    1032:	61 50       	subi	r22, 0x01	; 1
    1034:	70 40       	sbci	r23, 0x00	; 0
    1036:	01 90       	ld	r0, Z+
    1038:	01 10       	cpse	r0, r1
    103a:	d8 f7       	brcc	.-10     	; 0x1032 <strnlen+0x2>
    103c:	80 95       	com	r24
    103e:	90 95       	com	r25
    1040:	8e 0f       	add	r24, r30
    1042:	9f 1f       	adc	r25, r31
    1044:	08 95       	ret

00001046 <fputc>:
    1046:	0f 93       	push	r16
    1048:	1f 93       	push	r17
    104a:	cf 93       	push	r28
    104c:	df 93       	push	r29
    104e:	8c 01       	movw	r16, r24
    1050:	eb 01       	movw	r28, r22
    1052:	8b 81       	ldd	r24, Y+3	; 0x03
    1054:	81 ff       	sbrs	r24, 1
    1056:	1b c0       	rjmp	.+54     	; 0x108e <fputc+0x48>
    1058:	82 ff       	sbrs	r24, 2
    105a:	0d c0       	rjmp	.+26     	; 0x1076 <fputc+0x30>
    105c:	2e 81       	ldd	r18, Y+6	; 0x06
    105e:	3f 81       	ldd	r19, Y+7	; 0x07
    1060:	8c 81       	ldd	r24, Y+4	; 0x04
    1062:	9d 81       	ldd	r25, Y+5	; 0x05
    1064:	28 17       	cp	r18, r24
    1066:	39 07       	cpc	r19, r25
    1068:	64 f4       	brge	.+24     	; 0x1082 <fputc+0x3c>
    106a:	e8 81       	ld	r30, Y
    106c:	f9 81       	ldd	r31, Y+1	; 0x01
    106e:	01 93       	st	Z+, r16
    1070:	f9 83       	std	Y+1, r31	; 0x01
    1072:	e8 83       	st	Y, r30
    1074:	06 c0       	rjmp	.+12     	; 0x1082 <fputc+0x3c>
    1076:	e8 85       	ldd	r30, Y+8	; 0x08
    1078:	f9 85       	ldd	r31, Y+9	; 0x09
    107a:	80 2f       	mov	r24, r16
    107c:	09 95       	icall
    107e:	89 2b       	or	r24, r25
    1080:	31 f4       	brne	.+12     	; 0x108e <fputc+0x48>
    1082:	8e 81       	ldd	r24, Y+6	; 0x06
    1084:	9f 81       	ldd	r25, Y+7	; 0x07
    1086:	01 96       	adiw	r24, 0x01	; 1
    1088:	9f 83       	std	Y+7, r25	; 0x07
    108a:	8e 83       	std	Y+6, r24	; 0x06
    108c:	02 c0       	rjmp	.+4      	; 0x1092 <fputc+0x4c>
    108e:	0f ef       	ldi	r16, 0xFF	; 255
    1090:	1f ef       	ldi	r17, 0xFF	; 255
    1092:	c8 01       	movw	r24, r16
    1094:	df 91       	pop	r29
    1096:	cf 91       	pop	r28
    1098:	1f 91       	pop	r17
    109a:	0f 91       	pop	r16
    109c:	08 95       	ret

0000109e <__ultoa_invert>:
    109e:	fa 01       	movw	r30, r20
    10a0:	aa 27       	eor	r26, r26
    10a2:	28 30       	cpi	r18, 0x08	; 8
    10a4:	51 f1       	breq	.+84     	; 0x10fa <__ultoa_invert+0x5c>
    10a6:	20 31       	cpi	r18, 0x10	; 16
    10a8:	81 f1       	breq	.+96     	; 0x110a <__ultoa_invert+0x6c>
    10aa:	e8 94       	clt
    10ac:	6f 93       	push	r22
    10ae:	6e 7f       	andi	r22, 0xFE	; 254
    10b0:	6e 5f       	subi	r22, 0xFE	; 254
    10b2:	7f 4f       	sbci	r23, 0xFF	; 255
    10b4:	8f 4f       	sbci	r24, 0xFF	; 255
    10b6:	9f 4f       	sbci	r25, 0xFF	; 255
    10b8:	af 4f       	sbci	r26, 0xFF	; 255
    10ba:	b1 e0       	ldi	r27, 0x01	; 1
    10bc:	3e d0       	rcall	.+124    	; 0x113a <__ultoa_invert+0x9c>
    10be:	b4 e0       	ldi	r27, 0x04	; 4
    10c0:	3c d0       	rcall	.+120    	; 0x113a <__ultoa_invert+0x9c>
    10c2:	67 0f       	add	r22, r23
    10c4:	78 1f       	adc	r23, r24
    10c6:	89 1f       	adc	r24, r25
    10c8:	9a 1f       	adc	r25, r26
    10ca:	a1 1d       	adc	r26, r1
    10cc:	68 0f       	add	r22, r24
    10ce:	79 1f       	adc	r23, r25
    10d0:	8a 1f       	adc	r24, r26
    10d2:	91 1d       	adc	r25, r1
    10d4:	a1 1d       	adc	r26, r1
    10d6:	6a 0f       	add	r22, r26
    10d8:	71 1d       	adc	r23, r1
    10da:	81 1d       	adc	r24, r1
    10dc:	91 1d       	adc	r25, r1
    10de:	a1 1d       	adc	r26, r1
    10e0:	20 d0       	rcall	.+64     	; 0x1122 <__ultoa_invert+0x84>
    10e2:	09 f4       	brne	.+2      	; 0x10e6 <__ultoa_invert+0x48>
    10e4:	68 94       	set
    10e6:	3f 91       	pop	r19
    10e8:	2a e0       	ldi	r18, 0x0A	; 10
    10ea:	26 9f       	mul	r18, r22
    10ec:	11 24       	eor	r1, r1
    10ee:	30 19       	sub	r19, r0
    10f0:	30 5d       	subi	r19, 0xD0	; 208
    10f2:	31 93       	st	Z+, r19
    10f4:	de f6       	brtc	.-74     	; 0x10ac <__ultoa_invert+0xe>
    10f6:	cf 01       	movw	r24, r30
    10f8:	08 95       	ret
    10fa:	46 2f       	mov	r20, r22
    10fc:	47 70       	andi	r20, 0x07	; 7
    10fe:	40 5d       	subi	r20, 0xD0	; 208
    1100:	41 93       	st	Z+, r20
    1102:	b3 e0       	ldi	r27, 0x03	; 3
    1104:	0f d0       	rcall	.+30     	; 0x1124 <__ultoa_invert+0x86>
    1106:	c9 f7       	brne	.-14     	; 0x10fa <__ultoa_invert+0x5c>
    1108:	f6 cf       	rjmp	.-20     	; 0x10f6 <__ultoa_invert+0x58>
    110a:	46 2f       	mov	r20, r22
    110c:	4f 70       	andi	r20, 0x0F	; 15
    110e:	40 5d       	subi	r20, 0xD0	; 208
    1110:	4a 33       	cpi	r20, 0x3A	; 58
    1112:	18 f0       	brcs	.+6      	; 0x111a <__ultoa_invert+0x7c>
    1114:	49 5d       	subi	r20, 0xD9	; 217
    1116:	31 fd       	sbrc	r19, 1
    1118:	40 52       	subi	r20, 0x20	; 32
    111a:	41 93       	st	Z+, r20
    111c:	02 d0       	rcall	.+4      	; 0x1122 <__ultoa_invert+0x84>
    111e:	a9 f7       	brne	.-22     	; 0x110a <__ultoa_invert+0x6c>
    1120:	ea cf       	rjmp	.-44     	; 0x10f6 <__ultoa_invert+0x58>
    1122:	b4 e0       	ldi	r27, 0x04	; 4
    1124:	a6 95       	lsr	r26
    1126:	97 95       	ror	r25
    1128:	87 95       	ror	r24
    112a:	77 95       	ror	r23
    112c:	67 95       	ror	r22
    112e:	ba 95       	dec	r27
    1130:	c9 f7       	brne	.-14     	; 0x1124 <__ultoa_invert+0x86>
    1132:	00 97       	sbiw	r24, 0x00	; 0
    1134:	61 05       	cpc	r22, r1
    1136:	71 05       	cpc	r23, r1
    1138:	08 95       	ret
    113a:	9b 01       	movw	r18, r22
    113c:	ac 01       	movw	r20, r24
    113e:	0a 2e       	mov	r0, r26
    1140:	06 94       	lsr	r0
    1142:	57 95       	ror	r21
    1144:	47 95       	ror	r20
    1146:	37 95       	ror	r19
    1148:	27 95       	ror	r18
    114a:	ba 95       	dec	r27
    114c:	c9 f7       	brne	.-14     	; 0x1140 <__ultoa_invert+0xa2>
    114e:	62 0f       	add	r22, r18
    1150:	73 1f       	adc	r23, r19
    1152:	84 1f       	adc	r24, r20
    1154:	95 1f       	adc	r25, r21
    1156:	a0 1d       	adc	r26, r0
    1158:	08 95       	ret

0000115a <__prologue_saves__>:
    115a:	2f 92       	push	r2
    115c:	3f 92       	push	r3
    115e:	4f 92       	push	r4
    1160:	5f 92       	push	r5
    1162:	6f 92       	push	r6
    1164:	7f 92       	push	r7
    1166:	8f 92       	push	r8
    1168:	9f 92       	push	r9
    116a:	af 92       	push	r10
    116c:	bf 92       	push	r11
    116e:	cf 92       	push	r12
    1170:	df 92       	push	r13
    1172:	ef 92       	push	r14
    1174:	ff 92       	push	r15
    1176:	0f 93       	push	r16
    1178:	1f 93       	push	r17
    117a:	cf 93       	push	r28
    117c:	df 93       	push	r29
    117e:	cd b7       	in	r28, 0x3d	; 61
    1180:	de b7       	in	r29, 0x3e	; 62
    1182:	ca 1b       	sub	r28, r26
    1184:	db 0b       	sbc	r29, r27
    1186:	0f b6       	in	r0, 0x3f	; 63
    1188:	f8 94       	cli
    118a:	de bf       	out	0x3e, r29	; 62
    118c:	0f be       	out	0x3f, r0	; 63
    118e:	cd bf       	out	0x3d, r28	; 61
    1190:	09 94       	ijmp

00001192 <__epilogue_restores__>:
    1192:	2a 88       	ldd	r2, Y+18	; 0x12
    1194:	39 88       	ldd	r3, Y+17	; 0x11
    1196:	48 88       	ldd	r4, Y+16	; 0x10
    1198:	5f 84       	ldd	r5, Y+15	; 0x0f
    119a:	6e 84       	ldd	r6, Y+14	; 0x0e
    119c:	7d 84       	ldd	r7, Y+13	; 0x0d
    119e:	8c 84       	ldd	r8, Y+12	; 0x0c
    11a0:	9b 84       	ldd	r9, Y+11	; 0x0b
    11a2:	aa 84       	ldd	r10, Y+10	; 0x0a
    11a4:	b9 84       	ldd	r11, Y+9	; 0x09
    11a6:	c8 84       	ldd	r12, Y+8	; 0x08
    11a8:	df 80       	ldd	r13, Y+7	; 0x07
    11aa:	ee 80       	ldd	r14, Y+6	; 0x06
    11ac:	fd 80       	ldd	r15, Y+5	; 0x05
    11ae:	0c 81       	ldd	r16, Y+4	; 0x04
    11b0:	1b 81       	ldd	r17, Y+3	; 0x03
    11b2:	aa 81       	ldd	r26, Y+2	; 0x02
    11b4:	b9 81       	ldd	r27, Y+1	; 0x01
    11b6:	ce 0f       	add	r28, r30
    11b8:	d1 1d       	adc	r29, r1
    11ba:	0f b6       	in	r0, 0x3f	; 63
    11bc:	f8 94       	cli
    11be:	de bf       	out	0x3e, r29	; 62
    11c0:	0f be       	out	0x3f, r0	; 63
    11c2:	cd bf       	out	0x3d, r28	; 61
    11c4:	ed 01       	movw	r28, r26
    11c6:	08 95       	ret

000011c8 <_exit>:
    11c8:	f8 94       	cli

000011ca <__stop_program>:
    11ca:	ff cf       	rjmp	.-2      	; 0x11ca <__stop_program>
