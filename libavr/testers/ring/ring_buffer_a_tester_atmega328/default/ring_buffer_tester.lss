
ring_buffer_tester.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002f6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000103  00800100  00800100  0000036a  2**0
                  ALLOC
  2 .debug_aranges 000000c0  00000000  00000000  0000036a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000012c  00000000  00000000  0000042a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000009db  00000000  00000000  00000556  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000412  00000000  00000000  00000f31  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000006a2  00000000  00000000  00001343  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000c0  00000000  00000000  000019e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000038b  00000000  00000000  00001aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000028b  00000000  00000000  00001e33  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a3 30       	cpi	r26, 0x03	; 3
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
static uint8_t array1[BUFFER_SIZE];
static uint8_t array2[BUFFER_SIZE];
static uint8_t array3[BUFFER_SIZE];

int main(void)
{
  90:	df 93       	push	r29
  92:	cf 93       	push	r28
  94:	cd b7       	in	r28, 0x3d	; 61
  96:	de b7       	in	r29, 0x3e	; 62
  98:	a4 97       	sbiw	r28, 0x24	; 36
  9a:	0f b6       	in	r0, 0x3f	; 63
  9c:	f8 94       	cli
  9e:	de bf       	out	0x3e, r29	; 62
  a0:	0f be       	out	0x3f, r0	; 63
  a2:	cd bf       	out	0x3d, r28	; 61
	// Create fifos
	//fifoInit(&fifoStruct1, array1, BUFFER_SIZE);
	//fifoInit(&fifoStruct2, array2, BUFFER_SIZE);
	//fifoInit(&fifoStruct3, array3, BUFFER_SIZE);

	ring_init(&ring1, array1, BUFFER_SIZE);
  a4:	ce 01       	movw	r24, r28
  a6:	04 96       	adiw	r24, 0x04	; 4
  a8:	20 e0       	ldi	r18, 0x00	; 0
  aa:	31 e0       	ldi	r19, 0x01	; 1
  ac:	b9 01       	movw	r22, r18
  ae:	40 e1       	ldi	r20, 0x10	; 16
  b0:	0e 94 f6 00 	call	0x1ec	; 0x1ec <ring_init>
	ring_init(&ring2, array2, BUFFER_SIZE);
  b4:	ce 01       	movw	r24, r28
  b6:	0c 96       	adiw	r24, 0x0c	; 12
  b8:	20 e1       	ldi	r18, 0x10	; 16
  ba:	31 e0       	ldi	r19, 0x01	; 1
  bc:	b9 01       	movw	r22, r18
  be:	40 e1       	ldi	r20, 0x10	; 16
  c0:	0e 94 f6 00 	call	0x1ec	; 0x1ec <ring_init>
	ring_init(&ring3, array3, BUFFER_SIZE);
  c4:	ce 01       	movw	r24, r28
  c6:	44 96       	adiw	r24, 0x14	; 20
  c8:	20 e2       	ldi	r18, 0x20	; 32
  ca:	31 e0       	ldi	r19, 0x01	; 1
  cc:	b9 01       	movw	r22, r18
  ce:	40 e1       	ldi	r20, 0x10	; 16
  d0:	0e 94 f6 00 	call	0x1ec	; 0x1ec <ring_init>


	// Assign temporary variables so that we can look at
	// them in the Breakpoints and Tracepoint window
	uint16_t volatile temp_head_index = 0;
  d4:	1d 8e       	std	Y+29, r1	; 0x1d
  d6:	1c 8e       	std	Y+28, r1	; 0x1c
	uint16_t volatile temp_tail_index = 0;
  d8:	1f 8e       	std	Y+31, r1	; 0x1f
  da:	1e 8e       	std	Y+30, r1	; 0x1e
	uint8_t volatile temp_count = 0;
  dc:	18 a2       	std	Y+32, r1	; 0x20


	// Test 1

	// Store six 0x01 bytes in ring 1
	for(uint8_t i = 0; i < 6; i++)
  de:	1b 82       	std	Y+3, r1	; 0x03
  e0:	08 c0       	rjmp	.+16     	; 0xf2 <main+0x62>
	{
		ring_add(&ring1, 0x01);	
  e2:	ce 01       	movw	r24, r28
  e4:	04 96       	adiw	r24, 0x04	; 4
  e6:	61 e0       	ldi	r22, 0x01	; 1
  e8:	0e 94 c8 00 	call	0x190	; 0x190 <ring_add>


	// Test 1

	// Store six 0x01 bytes in ring 1
	for(uint8_t i = 0; i < 6; i++)
  ec:	8b 81       	ldd	r24, Y+3	; 0x03
  ee:	8f 5f       	subi	r24, 0xFF	; 255
  f0:	8b 83       	std	Y+3, r24	; 0x03
  f2:	8b 81       	ldd	r24, Y+3	; 0x03
  f4:	86 30       	cpi	r24, 0x06	; 6
  f6:	a8 f3       	brcs	.-22     	; 0xe2 <main+0x52>
	{
		ring_add(&ring1, 0x01);	
	}
	temp_head_index = ring1.head_index;
  f8:	8f 81       	ldd	r24, Y+7	; 0x07
  fa:	98 85       	ldd	r25, Y+8	; 0x08
  fc:	9d 8f       	std	Y+29, r25	; 0x1d
  fe:	8c 8f       	std	Y+28, r24	; 0x1c
	temp_tail_index = ring1.tail_index;
 100:	89 85       	ldd	r24, Y+9	; 0x09
 102:	9a 85       	ldd	r25, Y+10	; 0x0a
 104:	9f 8f       	std	Y+31, r25	; 0x1f
 106:	8e 8f       	std	Y+30, r24	; 0x1e
	temp_count = ring1.count;
 108:	8b 85       	ldd	r24, Y+11	; 0x0b
 10a:	88 a3       	std	Y+32, r24	; 0x20

	// Test 2
	// First three bytes 'removed' to array3
	// Note that the value doesn't change
	// but the index does change
	for(uint8_t i = 0; i < 3; i++)
 10c:	1a 82       	std	Y+2, r1	; 0x02
 10e:	0d c0       	rjmp	.+26     	; 0x12a <main+0x9a>
	{
		ring_add(&ring3, ring_remove(&ring1));
 110:	ce 01       	movw	r24, r28
 112:	04 96       	adiw	r24, 0x04	; 4
 114:	0e 94 32 01 	call	0x264	; 0x264 <ring_remove>
 118:	28 2f       	mov	r18, r24
 11a:	ce 01       	movw	r24, r28
 11c:	44 96       	adiw	r24, 0x14	; 20
 11e:	62 2f       	mov	r22, r18
 120:	0e 94 c8 00 	call	0x190	; 0x190 <ring_add>

	// Test 2
	// First three bytes 'removed' to array3
	// Note that the value doesn't change
	// but the index does change
	for(uint8_t i = 0; i < 3; i++)
 124:	8a 81       	ldd	r24, Y+2	; 0x02
 126:	8f 5f       	subi	r24, 0xFF	; 255
 128:	8a 83       	std	Y+2, r24	; 0x02
 12a:	8a 81       	ldd	r24, Y+2	; 0x02
 12c:	83 30       	cpi	r24, 0x03	; 3
 12e:	80 f3       	brcs	.-32     	; 0x110 <main+0x80>
	{
		ring_add(&ring3, ring_remove(&ring1));
	}

	temp_head_index = ring1.head_index;
 130:	8f 81       	ldd	r24, Y+7	; 0x07
 132:	98 85       	ldd	r25, Y+8	; 0x08
 134:	9d 8f       	std	Y+29, r25	; 0x1d
 136:	8c 8f       	std	Y+28, r24	; 0x1c
	temp_tail_index = ring1.tail_index;
 138:	89 85       	ldd	r24, Y+9	; 0x09
 13a:	9a 85       	ldd	r25, Y+10	; 0x0a
 13c:	9f 8f       	std	Y+31, r25	; 0x1f
 13e:	8e 8f       	std	Y+30, r24	; 0x1e
	temp_count = ring1.count;
 140:	8b 85       	ldd	r24, Y+11	; 0x0b
 142:	88 a3       	std	Y+32, r24	; 0x20

	// Test 3
	// Fill ring2 with sequence of 16 bytes
	// 0x01 to 0x10 and then read four bytes
	// beginning at position 8
	for(uint8_t i = 1; i <= 16; i++)
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	89 83       	std	Y+1, r24	; 0x01
 148:	08 c0       	rjmp	.+16     	; 0x15a <main+0xca>
	{
		ring_add(&ring2, i);
 14a:	ce 01       	movw	r24, r28
 14c:	0c 96       	adiw	r24, 0x0c	; 12
 14e:	69 81       	ldd	r22, Y+1	; 0x01
 150:	0e 94 c8 00 	call	0x190	; 0x190 <ring_add>

	// Test 3
	// Fill ring2 with sequence of 16 bytes
	// 0x01 to 0x10 and then read four bytes
	// beginning at position 8
	for(uint8_t i = 1; i <= 16; i++)
 154:	89 81       	ldd	r24, Y+1	; 0x01
 156:	8f 5f       	subi	r24, 0xFF	; 255
 158:	89 83       	std	Y+1, r24	; 0x01
 15a:	89 81       	ldd	r24, Y+1	; 0x01
 15c:	81 31       	cpi	r24, 0x11	; 17
 15e:	a8 f3       	brcs	.-22     	; 0x14a <main+0xba>
	{
		ring_add(&ring2, i);
	}
	
	uint8_t temp_buf[] = {0,0,0,0};
 160:	19 a2       	std	Y+33, r1	; 0x21
 162:	1a a2       	std	Y+34, r1	; 0x22
 164:	1b a2       	std	Y+35, r1	; 0x23
 166:	1c a2       	std	Y+36, r1	; 0x24
	
	ring_peek(&ring2, temp_buf, 4);
 168:	ce 01       	movw	r24, r28
 16a:	0c 96       	adiw	r24, 0x0c	; 12
 16c:	9e 01       	movw	r18, r28
 16e:	2f 5d       	subi	r18, 0xDF	; 223
 170:	3f 4f       	sbci	r19, 0xFF	; 255
 172:	b9 01       	movw	r22, r18
 174:	44 e0       	ldi	r20, 0x04	; 4
 176:	0e 94 06 01 	call	0x20c	; 0x20c <ring_peek>
 17a:	80 e0       	ldi	r24, 0x00	; 0
 17c:	90 e0       	ldi	r25, 0x00	; 0

	
}
 17e:	a4 96       	adiw	r28, 0x24	; 36
 180:	0f b6       	in	r0, 0x3f	; 63
 182:	f8 94       	cli
 184:	de bf       	out	0x3e, r29	; 62
 186:	0f be       	out	0x3f, r0	; 63
 188:	cd bf       	out	0x3d, r28	; 61
 18a:	cf 91       	pop	r28
 18c:	df 91       	pop	r29
 18e:	08 95       	ret

00000190 <ring_add>:
 *  ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 *  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 *  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 *  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 *  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 *  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 190:	dc 01       	movw	r26, r24
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 192:	13 96       	adiw	r26, 0x03	; 3
 194:	4d 91       	ld	r20, X+
 196:	5c 91       	ld	r21, X
 198:	14 97       	sbiw	r26, 0x04	; 4
 */
 19a:	12 96       	adiw	r26, 0x02	; 2
 19c:	8c 91       	ld	r24, X
 19e:	12 97       	sbiw	r26, 0x02	; 2
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	48 17       	cp	r20, r24
 1a6:	59 07       	cpc	r21, r25
 1a8:	18 f0       	brcs	.+6      	; 0x1b0 <ring_add+0x20>
 1aa:	20 e0       	ldi	r18, 0x00	; 0
 1ac:	30 e0       	ldi	r19, 0x00	; 0
 1ae:	03 c0       	rjmp	.+6      	; 0x1b6 <ring_add+0x26>
 *  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 *  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 *  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 *  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 1b0:	9a 01       	movw	r18, r20
 1b2:	2f 5f       	subi	r18, 0xFF	; 255
 1b4:	3f 4f       	sbci	r19, 0xFF	; 255
 */
#define RING_ADD_C

#include <stdbool.h>
#include <stdint.h>
#include "ring.h"
 1b6:	15 96       	adiw	r26, 0x05	; 5
 1b8:	8d 91       	ld	r24, X+
 1ba:	9c 91       	ld	r25, X
 1bc:	16 97       	sbiw	r26, 0x06	; 6
 1be:	28 17       	cp	r18, r24
 1c0:	39 07       	cpc	r19, r25
 1c2:	11 f4       	brne	.+4      	; 0x1c8 <ring_add+0x38>
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	08 95       	ret

bool ring_add(ring_t *r, uint8_t data)
 1c8:	ed 91       	ld	r30, X+
 1ca:	fc 91       	ld	r31, X
 1cc:	11 97       	sbiw	r26, 0x01	; 1
 1ce:	e4 0f       	add	r30, r20
 1d0:	f5 1f       	adc	r31, r21
 1d2:	60 83       	st	Z, r22
{
 1d4:	14 96       	adiw	r26, 0x04	; 4
 1d6:	3c 93       	st	X, r19
 1d8:	2e 93       	st	-X, r18
 1da:	13 97       	sbiw	r26, 0x03	; 3
    // Get the next head index.
 1dc:	17 96       	adiw	r26, 0x07	; 7
 1de:	8c 91       	ld	r24, X
 1e0:	17 97       	sbiw	r26, 0x07	; 7
 1e2:	8f 5f       	subi	r24, 0xFF	; 255
 1e4:	17 96       	adiw	r26, 0x07	; 7
 1e6:	8c 93       	st	X, r24
 1e8:	81 e0       	ldi	r24, 0x01	; 1
    ring_index_t temp_head = r->head_index + 1;
    if(r->head_index >= r->size - 1)
    {
        temp_head = 0;
    }
 1ea:	08 95       	ret

000001ec <ring_init>:
 *  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 *  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 *  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 *  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 *  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 1ec:	fc 01       	movw	r30, r24
 *  POSSIBILITY OF SUCH DAMAGE.
 */

 1ee:	42 30       	cpi	r20, 0x02	; 2
 1f0:	58 f0       	brcs	.+22     	; 0x208 <ring_init+0x1c>
 1f2:	00 97       	sbiw	r24, 0x00	; 0
 1f4:	49 f0       	breq	.+18     	; 0x208 <ring_init+0x1c>
 1f6:	61 15       	cp	r22, r1
 1f8:	71 05       	cpc	r23, r1
 1fa:	31 f0       	breq	.+12     	; 0x208 <ring_init+0x1c>
#define RING_INIT_C

 1fc:	71 83       	std	Z+1, r23	; 0x01
 1fe:	60 83       	st	Z, r22
#include <stdbool.h>
 200:	42 83       	std	Z+2, r20	; 0x02
#include <stdlib.h>
 202:	0e 94 5f 01 	call	0x2be	; 0x2be <ring_clear>
 206:	08 95       	ret
 208:	80 e0       	ldi	r24, 0x00	; 0

bool ring_init(ring_t *r, ring_buffer_t buffer, ring_size_t size)
{
    bool success = false;
    bool clear;
    if (size >= 2 && r != NULL && buffer != NULL)
 20a:	08 95       	ret

0000020c <ring_peek>:
 *  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 *  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 *  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
 20c:	cf 93       	push	r28
 20e:	df 93       	push	r29
 210:	ec 01       	movw	r28, r24
#define RING_PEEK_C

#include <stdint.h>
#include <stdlib.h>
 212:	00 97       	sbiw	r24, 0x00	; 0
 214:	11 f1       	breq	.+68     	; 0x25a <ring_peek+0x4e>
 216:	61 15       	cp	r22, r1
 218:	71 05       	cpc	r23, r1
 21a:	f9 f0       	breq	.+62     	; 0x25a <ring_peek+0x4e>
#include "ring.h"

 21c:	2d 81       	ldd	r18, Y+5	; 0x05
 21e:	3e 81       	ldd	r19, Y+6	; 0x06
 220:	db 01       	movw	r26, r22
 222:	11 c0       	rjmp	.+34     	; 0x246 <ring_peek+0x3a>
uint8_t ring_peek(ring_t *r, uint8_t *buf, uint8_t count)
{
    ring_index_t index;
    uint8_t total = 0;
 224:	e8 81       	ld	r30, Y
 226:	f9 81       	ldd	r31, Y+1	; 0x01
 228:	e2 0f       	add	r30, r18
 22a:	f3 1f       	adc	r31, r19
 22c:	80 81       	ld	r24, Z
 22e:	8c 93       	st	X, r24
 230:	2f 5f       	subi	r18, 0xFF	; 255
 232:	3f 4f       	sbci	r19, 0xFF	; 255

    if (r != NULL && buf != NULL)
 234:	8a 81       	ldd	r24, Y+2	; 0x02
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	28 17       	cp	r18, r24
 23a:	39 07       	cpc	r19, r25
 23c:	10 f0       	brcs	.+4      	; 0x242 <ring_peek+0x36>
 23e:	20 e0       	ldi	r18, 0x00	; 0
 240:	30 e0       	ldi	r19, 0x00	; 0
#include "ring.h"

uint8_t ring_peek(ring_t *r, uint8_t *buf, uint8_t count)
{
    ring_index_t index;
    uint8_t total = 0;
 242:	11 96       	adiw	r26, 0x01	; 1
    if (r != NULL && buf != NULL)
    {
        index = r->tail_index;
        // Compare the head index to the tail index
        while(count && index != r->head_index)
        {
 244:	41 50       	subi	r20, 0x01	; 1
 246:	5a 2f       	mov	r21, r26
 248:	56 1b       	sub	r21, r22
#include <stdint.h>
#include <stdlib.h>
#include "ring.h"

uint8_t ring_peek(ring_t *r, uint8_t *buf, uint8_t count)
{
 24a:	44 23       	and	r20, r20
 24c:	39 f0       	breq	.+14     	; 0x25c <ring_peek+0x50>
 24e:	8b 81       	ldd	r24, Y+3	; 0x03
 250:	9c 81       	ldd	r25, Y+4	; 0x04
 252:	28 17       	cp	r18, r24
 254:	39 07       	cpc	r19, r25
 256:	31 f7       	brne	.-52     	; 0x224 <ring_peek+0x18>
 258:	01 c0       	rjmp	.+2      	; 0x25c <ring_peek+0x50>
 25a:	50 e0       	ldi	r21, 0x00	; 0
        {
            *buf++ = r->buffer[index++];    // Grab data requested and increment
    
            if(index >= r->size)        // End of buffer determination
            {
                index = 0;
 25c:	85 2f       	mov	r24, r21
 25e:	df 91       	pop	r29
 260:	cf 91       	pop	r28
 262:	08 95       	ret

00000264 <ring_remove>:
 *  Copyright (c) 2011, Eric Weddington and Joe Pardue, All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions are met:
 *
 *  - Redistributions of source code must retain the above copyright notice,
 264:	dc 01       	movw	r26, r24
 *    this list of conditions and the following disclaimer. 
 *   
 *  - Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 266:	15 96       	adiw	r26, 0x05	; 5
 268:	2d 91       	ld	r18, X+
 26a:	3c 91       	ld	r19, X
 26c:	16 97       	sbiw	r26, 0x06	; 6
 26e:	13 96       	adiw	r26, 0x03	; 3
 270:	8d 91       	ld	r24, X+
 272:	9c 91       	ld	r25, X
 274:	14 97       	sbiw	r26, 0x04	; 4
 276:	82 17       	cp	r24, r18
 278:	93 07       	cpc	r25, r19
 27a:	11 f4       	brne	.+4      	; 0x280 <ring_remove+0x1c>
 27c:	e0 e0       	ldi	r30, 0x00	; 0
 27e:	1d c0       	rjmp	.+58     	; 0x2ba <ring_remove+0x56>
 *    and/or other materials provided with the distribution. 
 *   
 *  - Neither the name of the Eric Weddington nor Joe Pardue nor the names of 
 280:	ed 91       	ld	r30, X+
 282:	fc 91       	ld	r31, X
 284:	11 97       	sbiw	r26, 0x01	; 1
 286:	e2 0f       	add	r30, r18
 288:	f3 1f       	adc	r31, r19
 28a:	e0 81       	ld	r30, Z
 *    its contributors may be used to endorse or promote products derived from 
 *    this software without specific prior written permission. 
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 28c:	12 96       	adiw	r26, 0x02	; 2
 28e:	8c 91       	ld	r24, X
 290:	12 97       	sbiw	r26, 0x02	; 2
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	01 97       	sbiw	r24, 0x01	; 1
 296:	28 17       	cp	r18, r24
 298:	39 07       	cpc	r19, r25
 29a:	18 f0       	brcs	.+6      	; 0x2a2 <ring_remove+0x3e>
 29c:	80 e0       	ldi	r24, 0x00	; 0
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	02 c0       	rjmp	.+4      	; 0x2a6 <ring_remove+0x42>
 *    and/or other materials provided with the distribution. 
 *   
 *  - Neither the name of the Eric Weddington nor Joe Pardue nor the names of 
 *    its contributors may be used to endorse or promote products derived from 
 *    this software without specific prior written permission. 
 *
 2a2:	c9 01       	movw	r24, r18
 2a4:	01 96       	adiw	r24, 0x01	; 1
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 *  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 *  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 *  ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 *  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 *  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 2a6:	16 96       	adiw	r26, 0x06	; 6
 2a8:	9c 93       	st	X, r25
 2aa:	8e 93       	st	-X, r24
 2ac:	15 97       	sbiw	r26, 0x05	; 5
 *  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 2ae:	17 96       	adiw	r26, 0x07	; 7
 2b0:	8c 91       	ld	r24, X
 2b2:	17 97       	sbiw	r26, 0x07	; 7
 2b4:	81 50       	subi	r24, 0x01	; 1
 2b6:	17 96       	adiw	r26, 0x07	; 7
 2b8:	8c 93       	st	X, r24
 *  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 *  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 2ba:	8e 2f       	mov	r24, r30
 2bc:	08 95       	ret

000002be <ring_clear>:
 *  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 *  ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 *  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 *  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 *  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 *  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 2be:	dc 01       	movw	r26, r24
 *  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 2c0:	00 97       	sbiw	r24, 0x00	; 0
 2c2:	11 f4       	brne	.+4      	; 0x2c8 <ring_clear+0xa>
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	08 95       	ret
 *  POSSIBILITY OF SUCH DAMAGE.
 */
 2c8:	14 96       	adiw	r26, 0x04	; 4
 2ca:	1c 92       	st	X, r1
 2cc:	1e 92       	st	-X, r1
 2ce:	13 97       	sbiw	r26, 0x03	; 3

 2d0:	16 96       	adiw	r26, 0x06	; 6
 2d2:	1c 92       	st	X, r1
 2d4:	1e 92       	st	-X, r1
 2d6:	15 97       	sbiw	r26, 0x05	; 5
#define RING_CLEAR_C
 2d8:	17 96       	adiw	r26, 0x07	; 7
 2da:	1c 92       	st	X, r1
 2dc:	17 97       	sbiw	r26, 0x07	; 7

 2de:	ec 91       	ld	r30, X
 2e0:	11 96       	adiw	r26, 0x01	; 1
 2e2:	fc 91       	ld	r31, X
 2e4:	8a e0       	ldi	r24, 0x0A	; 10
 2e6:	df 01       	movw	r26, r30
 2e8:	1d 92       	st	X+, r1
 2ea:	8a 95       	dec	r24
 2ec:	e9 f7       	brne	.-6      	; 0x2e8 <ring_clear+0x2a>
 2ee:	81 e0       	ldi	r24, 0x01	; 1
#include <stdlib.h>
#include <string.h>
#include "ring.h"

 2f0:	08 95       	ret

000002f2 <_exit>:
 2f2:	f8 94       	cli

000002f4 <__stop_program>:
 2f4:	ff cf       	rjmp	.-2      	; 0x2f4 <__stop_program>
