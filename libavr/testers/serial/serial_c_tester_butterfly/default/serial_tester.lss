
serial_tester.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000024c  00800100  00000f44  00000fd8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f44  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d8  0080034c  0080034c  00001224  2**0
                  ALLOC
  3 .debug_aranges 00000460  00000000  00000000  00001224  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000169a  00000000  00000000  00001684  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00004051  00000000  00000000  00002d1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001a6c  00000000  00000000  00006d6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002a48  00000000  00000000  000087db  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000004f0  00000000  00000000  0000b224  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000e73  00000000  00000000  0000b714  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007da  00000000  00000000  0000c587  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   8:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  10:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  14:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  1c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  24:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  28:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  2c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  30:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  34:	0c 94 31 02 	jmp	0x462	; 0x462 <__vector_13>
  38:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  3c:	0c 94 61 02 	jmp	0x4c2	; 0x4c2 <__vector_15>
  40:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  44:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  48:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  4c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  50:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  54:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  58:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	13 e0       	ldi	r17, 0x03	; 3
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	e4 e4       	ldi	r30, 0x44	; 68
  70:	ff e0       	ldi	r31, 0x0F	; 15
  72:	02 c0       	rjmp	.+4      	; 0x78 <.do_copy_data_start>

00000074 <.do_copy_data_loop>:
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0

00000078 <.do_copy_data_start>:
  78:	ac 34       	cpi	r26, 0x4C	; 76
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <.do_copy_data_loop>

0000007e <__do_clear_bss>:
  7e:	14 e0       	ldi	r17, 0x04	; 4
  80:	ac e4       	ldi	r26, 0x4C	; 76
  82:	b3 e0       	ldi	r27, 0x03	; 3
  84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
  86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
  88:	a4 32       	cpi	r26, 0x24	; 36
  8a:	b1 07       	cpc	r27, r17
  8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
  8e:	0e 94 4d 00 	call	0x9a	; 0x9a <main>
  92:	0c 94 a0 07 	jmp	0xf40	; 0xf40 <_exit>

00000096 <__bad_interrupt>:
  96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <main>:
 // please contact me with details so that I may correct the situation. 

#include "c:\avrtoolbox\libavr\source\elementary\serial\serial.h"

int main(void)
{ 
  9a:	0f 93       	push	r16
  9c:	1f 93       	push	r17
  9e:	df 93       	push	r29
  a0:	cf 93       	push	r28
  a2:	cd b7       	in	r28, 0x3d	; 61
  a4:	de b7       	in	r29, 0x3e	; 62
  a6:	c5 54       	subi	r28, 0x45	; 69
  a8:	d0 40       	sbci	r29, 0x00	; 0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	f8 94       	cli
  ae:	de bf       	out	0x3e, r29	; 62
  b0:	0f be       	out	0x3f, r0	; 63
  b2:	cd bf       	out	0x3d, r28	; 61
	uint8_t buf[64];


	// NOTE: If BUTTERFLY is defined then the serial_being() is bypassed
	// and the usart is set to 19200 regardless of what this says
	serial_begin(57600);
  b4:	60 e0       	ldi	r22, 0x00	; 0
  b6:	71 ee       	ldi	r23, 0xE1	; 225
  b8:	80 e0       	ldi	r24, 0x00	; 0
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	0e 94 15 01 	call	0x22a	; 0x22a <serial_begin>


	serial_out("Serial tester 013\n");//,0);
  c0:	00 d0       	rcall	.+0      	; 0xc2 <main+0x28>
  c2:	80 e0       	ldi	r24, 0x00	; 0
  c4:	91 e0       	ldi	r25, 0x01	; 1
  c6:	ad b7       	in	r26, 0x3d	; 61
  c8:	be b7       	in	r27, 0x3e	; 62
  ca:	12 96       	adiw	r26, 0x02	; 2
  cc:	9c 93       	st	X, r25
  ce:	8e 93       	st	-X, r24
  d0:	11 97       	sbiw	r26, 0x01	; 1
  d2:	0e 94 10 04 	call	0x820	; 0x820 <serial_out>

	// Send a bunch of stuff to see if it poops out
	serial_out("serial_out The quick brown fox jumped over the lazy dog.");
  d6:	83 e1       	ldi	r24, 0x13	; 19
  d8:	91 e0       	ldi	r25, 0x01	; 1
  da:	ed b7       	in	r30, 0x3d	; 61
  dc:	fe b7       	in	r31, 0x3e	; 62
  de:	92 83       	std	Z+2, r25	; 0x02
  e0:	81 83       	std	Z+1, r24	; 0x01
  e2:	0e 94 10 04 	call	0x820	; 0x820 <serial_out>
	serial_out("serial_out The quick brown fox jumped over the lazy dog.\n");
  e6:	8c e4       	ldi	r24, 0x4C	; 76
  e8:	91 e0       	ldi	r25, 0x01	; 1
  ea:	ad b7       	in	r26, 0x3d	; 61
  ec:	be b7       	in	r27, 0x3e	; 62
  ee:	12 96       	adiw	r26, 0x02	; 2
  f0:	9c 93       	st	X, r25
  f2:	8e 93       	st	-X, r24
  f4:	11 97       	sbiw	r26, 0x01	; 1
  f6:	0e 94 10 04 	call	0x820	; 0x820 <serial_out>
	serial_out("1serial_out The quick brown fox jumped over the lazy dog.\n");
  fa:	86 e8       	ldi	r24, 0x86	; 134
  fc:	91 e0       	ldi	r25, 0x01	; 1
  fe:	ed b7       	in	r30, 0x3d	; 61
 100:	fe b7       	in	r31, 0x3e	; 62
 102:	92 83       	std	Z+2, r25	; 0x02
 104:	81 83       	std	Z+1, r24	; 0x01
 106:	0e 94 10 04 	call	0x820	; 0x820 <serial_out>
	serial_out("2serial_out The quick brown fox jumped over the lazy dog.\n");
 10a:	81 ec       	ldi	r24, 0xC1	; 193
 10c:	91 e0       	ldi	r25, 0x01	; 1
 10e:	ad b7       	in	r26, 0x3d	; 61
 110:	be b7       	in	r27, 0x3e	; 62
 112:	12 96       	adiw	r26, 0x02	; 2
 114:	9c 93       	st	X, r25
 116:	8e 93       	st	-X, r24
 118:	11 97       	sbiw	r26, 0x01	; 1
 11a:	0e 94 10 04 	call	0x820	; 0x820 <serial_out>
	serial_out("3serial_out The quick brown fox jumped over the lazy dog.\n");
 11e:	8c ef       	ldi	r24, 0xFC	; 252
 120:	91 e0       	ldi	r25, 0x01	; 1
 122:	ed b7       	in	r30, 0x3d	; 61
 124:	fe b7       	in	r31, 0x3e	; 62
 126:	92 83       	std	Z+2, r25	; 0x02
 128:	81 83       	std	Z+1, r24	; 0x01
 12a:	0e 94 10 04 	call	0x820	; 0x820 <serial_out>
	serial_out("4serial_out The quick brown fox jumped over the lazy dog.\n");
 12e:	87 e3       	ldi	r24, 0x37	; 55
 130:	92 e0       	ldi	r25, 0x02	; 2
 132:	ad b7       	in	r26, 0x3d	; 61
 134:	be b7       	in	r27, 0x3e	; 62
 136:	12 96       	adiw	r26, 0x02	; 2
 138:	9c 93       	st	X, r25
 13a:	8e 93       	st	-X, r24
 13c:	11 97       	sbiw	r26, 0x01	; 1
 13e:	0e 94 10 04 	call	0x820	; 0x820 <serial_out>
	serial_out("5serial_out The quick brown fox jumped over the lazy dog.\n");
 142:	82 e7       	ldi	r24, 0x72	; 114
 144:	92 e0       	ldi	r25, 0x02	; 2
 146:	ed b7       	in	r30, 0x3d	; 61
 148:	fe b7       	in	r31, 0x3e	; 62
 14a:	92 83       	std	Z+2, r25	; 0x02
 14c:	81 83       	std	Z+1, r24	; 0x01
 14e:	0e 94 10 04 	call	0x820	; 0x820 <serial_out>

	char c = 'A';
	uint8_t x = 0x22;
	uint16_t X = 0x1122;

	serial_out("Test character: %c\n", c);
 152:	00 d0       	rcall	.+0      	; 0x154 <main+0xba>
 154:	8d ea       	ldi	r24, 0xAD	; 173
 156:	92 e0       	ldi	r25, 0x02	; 2
 158:	ad b7       	in	r26, 0x3d	; 61
 15a:	be b7       	in	r27, 0x3e	; 62
 15c:	12 96       	adiw	r26, 0x02	; 2
 15e:	9c 93       	st	X, r25
 160:	8e 93       	st	-X, r24
 162:	11 97       	sbiw	r26, 0x01	; 1
 164:	81 e4       	ldi	r24, 0x41	; 65
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	14 96       	adiw	r26, 0x04	; 4
 16a:	9c 93       	st	X, r25
 16c:	8e 93       	st	-X, r24
 16e:	13 97       	sbiw	r26, 0x03	; 3
 170:	0e 94 10 04 	call	0x820	; 0x820 <serial_out>

	serial_out("Test hexadecimal integer: %x\n", x);
 174:	81 ec       	ldi	r24, 0xC1	; 193
 176:	92 e0       	ldi	r25, 0x02	; 2
 178:	ed b7       	in	r30, 0x3d	; 61
 17a:	fe b7       	in	r31, 0x3e	; 62
 17c:	92 83       	std	Z+2, r25	; 0x02
 17e:	81 83       	std	Z+1, r24	; 0x01
 180:	82 e2       	ldi	r24, 0x22	; 34
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	94 83       	std	Z+4, r25	; 0x04
 186:	83 83       	std	Z+3, r24	; 0x03
 188:	0e 94 10 04 	call	0x820	; 0x820 <serial_out>

	serial_out("Test 16-bit hexadecimal integer: %x\n", X);
 18c:	8f ed       	ldi	r24, 0xDF	; 223
 18e:	92 e0       	ldi	r25, 0x02	; 2
 190:	ad b7       	in	r26, 0x3d	; 61
 192:	be b7       	in	r27, 0x3e	; 62
 194:	12 96       	adiw	r26, 0x02	; 2
 196:	9c 93       	st	X, r25
 198:	8e 93       	st	-X, r24
 19a:	11 97       	sbiw	r26, 0x01	; 1
 19c:	82 e2       	ldi	r24, 0x22	; 34
 19e:	91 e1       	ldi	r25, 0x11	; 17
 1a0:	14 96       	adiw	r26, 0x04	; 4
 1a2:	9c 93       	st	X, r25
 1a4:	8e 93       	st	-X, r24
 1a6:	13 97       	sbiw	r26, 0x03	; 3
 1a8:	0e 94 10 04 	call	0x820	; 0x820 <serial_out>

	uint8_t  my_day = 21;
	uint8_t my_month[] = {"July"};
 1ac:	de 01       	movw	r26, r28
 1ae:	11 96       	adiw	r26, 0x01	; 1
 1b0:	e9 e3       	ldi	r30, 0x39	; 57
 1b2:	f3 e0       	ldi	r31, 0x03	; 3
 1b4:	85 e0       	ldi	r24, 0x05	; 5
 1b6:	01 90       	ld	r0, Z+
 1b8:	0d 92       	st	X+, r0
 1ba:	81 50       	subi	r24, 0x01	; 1
 1bc:	e1 f7       	brne	.-8      	; 0x1b6 <main+0x11c>
	uint16_t my_year = 1980;
	
	serial_out("Your date of birth is:\nDay: %d \nMonth: %s \nYear: %d.", my_day, my_month, my_year); 
 1be:	00 d0       	rcall	.+0      	; 0x1c0 <main+0x126>
 1c0:	00 d0       	rcall	.+0      	; 0x1c2 <main+0x128>
 1c2:	ed b7       	in	r30, 0x3d	; 61
 1c4:	fe b7       	in	r31, 0x3e	; 62
 1c6:	31 96       	adiw	r30, 0x01	; 1
 1c8:	84 e0       	ldi	r24, 0x04	; 4
 1ca:	93 e0       	ldi	r25, 0x03	; 3
 1cc:	ad b7       	in	r26, 0x3d	; 61
 1ce:	be b7       	in	r27, 0x3e	; 62
 1d0:	12 96       	adiw	r26, 0x02	; 2
 1d2:	9c 93       	st	X, r25
 1d4:	8e 93       	st	-X, r24
 1d6:	11 97       	sbiw	r26, 0x01	; 1
 1d8:	85 e1       	ldi	r24, 0x15	; 21
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	93 83       	std	Z+3, r25	; 0x03
 1de:	82 83       	std	Z+2, r24	; 0x02
 1e0:	ce 01       	movw	r24, r28
 1e2:	01 96       	adiw	r24, 0x01	; 1
 1e4:	95 83       	std	Z+5, r25	; 0x05
 1e6:	84 83       	std	Z+4, r24	; 0x04
 1e8:	8c eb       	ldi	r24, 0xBC	; 188
 1ea:	97 e0       	ldi	r25, 0x07	; 7
 1ec:	97 83       	std	Z+7, r25	; 0x07
 1ee:	86 83       	std	Z+6, r24	; 0x06
 1f0:	0e 94 10 04 	call	0x820	; 0x820 <serial_out>
	
	buf[1] = '\0';
 1f4:	1f 82       	std	Y+7, r1	; 0x07
 1f6:	ed b7       	in	r30, 0x3d	; 61
 1f8:	fe b7       	in	r31, 0x3e	; 62
 1fa:	38 96       	adiw	r30, 0x08	; 8
 1fc:	0f b6       	in	r0, 0x3f	; 63
 1fe:	f8 94       	cli
 200:	fe bf       	out	0x3e, r31	; 62
 202:	0f be       	out	0x3f, r0	; 63
 204:	ed bf       	out	0x3d, r30	; 61
	while(1)
	{
		if(serial_available())
		{
			buf[0] = serial_in();
			serial_write(buf,1);
 206:	8e 01       	movw	r16, r28
 208:	0a 5f       	subi	r16, 0xFA	; 250
 20a:	1f 4f       	sbci	r17, 0xFF	; 255
	serial_out("Your date of birth is:\nDay: %d \nMonth: %s \nYear: %d.", my_day, my_month, my_year); 
	
	buf[1] = '\0';
	while(1)
	{
		if(serial_available())
 20c:	0e 94 12 01 	call	0x224	; 0x224 <serial_available>
 210:	88 23       	and	r24, r24
 212:	e1 f3       	breq	.-8      	; 0x20c <main+0x172>
		{
			buf[0] = serial_in();
 214:	0e 94 0d 04 	call	0x81a	; 0x81a <serial_in>
 218:	8e 83       	std	Y+6, r24	; 0x06
			serial_write(buf,1);
 21a:	c8 01       	movw	r24, r16
 21c:	61 e0       	ldi	r22, 0x01	; 1
 21e:	0e 94 1e 04 	call	0x83c	; 0x83c <serial_write>
 222:	f4 cf       	rjmp	.-24     	; 0x20c <main+0x172>

00000224 <serial_available>:

#include "serial.h"

uint8_t serial_available(void)
{
	return usart0_receive_buffer_inuse_count();	
 224:	0e 94 b7 03 	call	0x76e	; 0x76e <usart0_receive_buffer_inuse_count>
}
 228:	08 95       	ret

0000022a <serial_begin>:
 // please contact me with details so that I may correct the situation. #include "serial.h"

#include "serial.h"

void serial_begin(uint32_t baud)
{
 22a:	8f 92       	push	r8
 22c:	af 92       	push	r10
 22e:	cf 92       	push	r12
 230:	ef 92       	push	r14
 232:	0f 93       	push	r16
	cli();
 234:	f8 94       	cli
	uint8_t databits = 8;
	uint8_t stopbits = 1;
	usart_parity_t parity = parity_none;
	usart_flow_control_t flow_control = flow_none;

	usart0_init(baud, F_CPU, mode,  databits, stopbits, parity, flow_control);
 236:	20 e8       	ldi	r18, 0x80	; 128
 238:	34 e8       	ldi	r19, 0x84	; 132
 23a:	4e e1       	ldi	r20, 0x1E	; 30
 23c:	50 e0       	ldi	r21, 0x00	; 0
 23e:	00 e0       	ldi	r16, 0x00	; 0
 240:	e8 e0       	ldi	r30, 0x08	; 8
 242:	ee 2e       	mov	r14, r30
 244:	cc 24       	eor	r12, r12
 246:	c3 94       	inc	r12
 248:	aa 24       	eor	r10, r10
 24a:	88 24       	eor	r8, r8
 24c:	0e 94 a7 02 	call	0x54e	; 0x54e <usart0_init>

	sei();
 250:	78 94       	sei

}
 252:	0f 91       	pop	r16
 254:	ef 90       	pop	r14
 256:	cf 90       	pop	r12
 258:	af 90       	pop	r10
 25a:	8f 90       	pop	r8
 25c:	08 95       	ret

0000025e <serial_end>:

#include "serial.h"

void serial_end(void)
{
	usart0_uninit();
 25e:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <usart0_uninit>
}
 262:	08 95       	ret

00000264 <serial_flush>:
#include "serial.h"


void serial_flush(void)
{
	cli();
 264:	f8 94       	cli
	usart0_receive_buffer_clear();
 266:	0e 94 ad 03 	call	0x75a	; 0x75a <usart0_receive_buffer_clear>
	usart0_transmit_buffer_clear();
 26a:	0e 94 c9 03 	call	0x792	; 0x792 <usart0_transmit_buffer_clear>
	sei();
 26e:	78 94       	sei

}
 270:	08 95       	ret

00000272 <ring_above_highmark>:
#include <stdint.h>
#include "ring.h"

/** High mark is set once 3/4 of ring buffer is determined. */
bool ring_above_highmark(ring_t *r)
{
 272:	fc 01       	movw	r30, r24
 274:	30 e0       	ldi	r19, 0x00	; 0
 276:	82 81       	ldd	r24, Z+2	; 0x02
 278:	23 e0       	ldi	r18, 0x03	; 3
 27a:	82 9f       	mul	r24, r18
 27c:	c0 01       	movw	r24, r0
 27e:	11 24       	eor	r1, r1
 280:	96 95       	lsr	r25
 282:	87 95       	ror	r24
 284:	96 95       	lsr	r25
 286:	87 95       	ror	r24
 288:	27 81       	ldd	r18, Z+7	; 0x07
 28a:	28 17       	cp	r18, r24
 28c:	08 f0       	brcs	.+2      	; 0x290 <ring_above_highmark+0x1e>
 28e:	31 e0       	ldi	r19, 0x01	; 1
    // Highmark Buffer size equation
    return(r->count >= (uint8_t)(((uint16_t)(r->size) * 3)/4));
}
 290:	83 2f       	mov	r24, r19
 292:	08 95       	ret

00000294 <ring_add>:
#include <stdbool.h>
#include <stdint.h>
#include "ring.h"

bool ring_add(ring_t *r, uint8_t data)
{
 294:	dc 01       	movw	r26, r24
    // Get the next head index.
    ring_index_t temp_head = r->head_index + 1;
 296:	13 96       	adiw	r26, 0x03	; 3
 298:	4d 91       	ld	r20, X+
 29a:	5c 91       	ld	r21, X
 29c:	14 97       	sbiw	r26, 0x04	; 4
    if(r->head_index >= r->size - 1)
 29e:	12 96       	adiw	r26, 0x02	; 2
 2a0:	8c 91       	ld	r24, X
 2a2:	12 97       	sbiw	r26, 0x02	; 2
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	01 97       	sbiw	r24, 0x01	; 1
 2a8:	48 17       	cp	r20, r24
 2aa:	59 07       	cpc	r21, r25
 2ac:	18 f0       	brcs	.+6      	; 0x2b4 <ring_add+0x20>
 2ae:	20 e0       	ldi	r18, 0x00	; 0
 2b0:	30 e0       	ldi	r19, 0x00	; 0
 2b2:	03 c0       	rjmp	.+6      	; 0x2ba <ring_add+0x26>
#include "ring.h"

bool ring_add(ring_t *r, uint8_t data)
{
    // Get the next head index.
    ring_index_t temp_head = r->head_index + 1;
 2b4:	9a 01       	movw	r18, r20
 2b6:	2f 5f       	subi	r18, 0xFF	; 255
 2b8:	3f 4f       	sbci	r19, 0xFF	; 255
    if(r->head_index >= r->size - 1)
    {
        temp_head = 0;
    }

    if(temp_head != r->tail_index)
 2ba:	15 96       	adiw	r26, 0x05	; 5
 2bc:	8d 91       	ld	r24, X+
 2be:	9c 91       	ld	r25, X
 2c0:	16 97       	sbiw	r26, 0x06	; 6
 2c2:	28 17       	cp	r18, r24
 2c4:	39 07       	cpc	r19, r25
 2c6:	11 f4       	brne	.+4      	; 0x2cc <ring_add+0x38>
 2c8:	80 e0       	ldi	r24, 0x00	; 0
 2ca:	08 95       	ret
    {
        r->buffer[r->head_index] = data;    // Buffer receives data
 2cc:	ed 91       	ld	r30, X+
 2ce:	fc 91       	ld	r31, X
 2d0:	11 97       	sbiw	r26, 0x01	; 1
 2d2:	e4 0f       	add	r30, r20
 2d4:	f5 1f       	adc	r31, r21
 2d6:	60 83       	st	Z, r22
        r->head_index = temp_head;
 2d8:	14 96       	adiw	r26, 0x04	; 4
 2da:	3c 93       	st	X, r19
 2dc:	2e 93       	st	-X, r18
 2de:	13 97       	sbiw	r26, 0x03	; 3
        r->count++;
 2e0:	17 96       	adiw	r26, 0x07	; 7
 2e2:	8c 91       	ld	r24, X
 2e4:	17 97       	sbiw	r26, 0x07	; 7
 2e6:	8f 5f       	subi	r24, 0xFF	; 255
 2e8:	17 96       	adiw	r26, 0x07	; 7
 2ea:	8c 93       	st	X, r24
 2ec:	81 e0       	ldi	r24, 0x01	; 1
        return(true);       // Return complete
    }

    return(false);          // Return incomplete
}
 2ee:	08 95       	ret

000002f0 <ring_below_lowmark>:

#include "ring.h"

/** Low mark is set once 1/4 of ring buffer is determined. */
bool ring_below_lowmark(ring_t *r)
{
 2f0:	fc 01       	movw	r30, r24
 2f2:	20 e0       	ldi	r18, 0x00	; 0
 2f4:	82 81       	ldd	r24, Z+2	; 0x02
 2f6:	86 95       	lsr	r24
 2f8:	86 95       	lsr	r24
 2fa:	97 81       	ldd	r25, Z+7	; 0x07
 2fc:	89 17       	cp	r24, r25
 2fe:	08 f0       	brcs	.+2      	; 0x302 <ring_below_lowmark+0x12>
 300:	21 e0       	ldi	r18, 0x01	; 1
    // Lowmark Buffer size equation
    return(r->count <= (r->size / 4));
}
 302:	82 2f       	mov	r24, r18
 304:	08 95       	ret

00000306 <ring_init>:
#include <stdbool.h>
#include <stdlib.h>
#include "ring.h"

bool ring_init(ring_t *r, ring_buffer_t buffer, ring_size_t size)
{
 306:	fc 01       	movw	r30, r24
    bool success = false;
    bool clear;
    if (size >= 2 && r != NULL && buffer != NULL)
 308:	42 30       	cpi	r20, 0x02	; 2
 30a:	58 f0       	brcs	.+22     	; 0x322 <ring_init+0x1c>
 30c:	00 97       	sbiw	r24, 0x00	; 0
 30e:	49 f0       	breq	.+18     	; 0x322 <ring_init+0x1c>
 310:	61 15       	cp	r22, r1
 312:	71 05       	cpc	r23, r1
 314:	31 f0       	breq	.+12     	; 0x322 <ring_init+0x1c>
    {
        r->buffer = buffer;     // Set index pointers
 316:	71 83       	std	Z+1, r23	; 0x01
 318:	60 83       	st	Z, r22
        r->size = size;
 31a:	42 83       	std	Z+2, r20	; 0x02
        clear = ring_clear(r);  // Call ring_clear function
 31c:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <ring_clear>
 320:	08 95       	ret
 322:	80 e0       	ldi	r24, 0x00	; 0
        {
                success = true;
        }
    }
    return(success);
}
 324:	08 95       	ret

00000326 <ring_peek>:
#include <stdint.h>
#include <stdlib.h>
#include "ring.h"

uint8_t ring_peek(ring_t *r, uint8_t *buf, uint8_t count)
{
 326:	cf 93       	push	r28
 328:	df 93       	push	r29
 32a:	ec 01       	movw	r28, r24
    ring_index_t index;
    uint8_t total = 0;

    if (r != NULL && buf != NULL)
 32c:	00 97       	sbiw	r24, 0x00	; 0
 32e:	11 f1       	breq	.+68     	; 0x374 <ring_peek+0x4e>
 330:	61 15       	cp	r22, r1
 332:	71 05       	cpc	r23, r1
 334:	f9 f0       	breq	.+62     	; 0x374 <ring_peek+0x4e>
    {
        index = r->tail_index;
 336:	2d 81       	ldd	r18, Y+5	; 0x05
 338:	3e 81       	ldd	r19, Y+6	; 0x06
 33a:	db 01       	movw	r26, r22
 33c:	11 c0       	rjmp	.+34     	; 0x360 <ring_peek+0x3a>
        // Compare the head index to the tail index
        while(count && index != r->head_index)
        {
            *buf++ = r->buffer[index++];    // Grab data requested and increment
 33e:	e8 81       	ld	r30, Y
 340:	f9 81       	ldd	r31, Y+1	; 0x01
 342:	e2 0f       	add	r30, r18
 344:	f3 1f       	adc	r31, r19
 346:	80 81       	ld	r24, Z
 348:	8c 93       	st	X, r24
 34a:	2f 5f       	subi	r18, 0xFF	; 255
 34c:	3f 4f       	sbci	r19, 0xFF	; 255
    
            if(index >= r->size)        // End of buffer determination
 34e:	8a 81       	ldd	r24, Y+2	; 0x02
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	28 17       	cp	r18, r24
 354:	39 07       	cpc	r19, r25
 356:	10 f0       	brcs	.+4      	; 0x35c <ring_peek+0x36>
 358:	20 e0       	ldi	r18, 0x00	; 0
 35a:	30 e0       	ldi	r19, 0x00	; 0
    {
        index = r->tail_index;
        // Compare the head index to the tail index
        while(count && index != r->head_index)
        {
            *buf++ = r->buffer[index++];    // Grab data requested and increment
 35c:	11 96       	adiw	r26, 0x01	; 1
            if(index >= r->size)        // End of buffer determination
            {
                index = 0;
            }
    
            count--;
 35e:	41 50       	subi	r20, 0x01	; 1
 360:	5a 2f       	mov	r21, r26
 362:	56 1b       	sub	r21, r22

    if (r != NULL && buf != NULL)
    {
        index = r->tail_index;
        // Compare the head index to the tail index
        while(count && index != r->head_index)
 364:	44 23       	and	r20, r20
 366:	39 f0       	breq	.+14     	; 0x376 <ring_peek+0x50>
 368:	8b 81       	ldd	r24, Y+3	; 0x03
 36a:	9c 81       	ldd	r25, Y+4	; 0x04
 36c:	28 17       	cp	r18, r24
 36e:	39 07       	cpc	r19, r25
 370:	31 f7       	brne	.-52     	; 0x33e <ring_peek+0x18>
 372:	01 c0       	rjmp	.+2      	; 0x376 <ring_peek+0x50>
 374:	50 e0       	ldi	r21, 0x00	; 0
            count--;
            total++;
        }
    }
    return(total);
}
 376:	85 2f       	mov	r24, r21
 378:	df 91       	pop	r29
 37a:	cf 91       	pop	r28
 37c:	08 95       	ret

0000037e <ring_remove>:

#include <stdint.h>
#include "ring.h"

uint8_t ring_remove(ring_t *r)
{
 37e:	dc 01       	movw	r26, r24
    uint8_t data = 0;

    // Compare the head index and the tail index
    if(r->head_index != r->tail_index)
 380:	15 96       	adiw	r26, 0x05	; 5
 382:	2d 91       	ld	r18, X+
 384:	3c 91       	ld	r19, X
 386:	16 97       	sbiw	r26, 0x06	; 6
 388:	13 96       	adiw	r26, 0x03	; 3
 38a:	8d 91       	ld	r24, X+
 38c:	9c 91       	ld	r25, X
 38e:	14 97       	sbiw	r26, 0x04	; 4
 390:	82 17       	cp	r24, r18
 392:	93 07       	cpc	r25, r19
 394:	11 f4       	brne	.+4      	; 0x39a <ring_remove+0x1c>
 396:	e0 e0       	ldi	r30, 0x00	; 0
 398:	1d c0       	rjmp	.+58     	; 0x3d4 <ring_remove+0x56>
    {
        // Get the Data from the buffer.
        data = r->buffer[r->tail_index];
 39a:	ed 91       	ld	r30, X+
 39c:	fc 91       	ld	r31, X
 39e:	11 97       	sbiw	r26, 0x01	; 1
 3a0:	e2 0f       	add	r30, r18
 3a2:	f3 1f       	adc	r31, r19
 3a4:	e0 81       	ld	r30, Z

        // Get the next tail index.
        ring_index_t next_tail = r->tail_index + 1;
        if(r->tail_index >= r->size - 1)
 3a6:	12 96       	adiw	r26, 0x02	; 2
 3a8:	8c 91       	ld	r24, X
 3aa:	12 97       	sbiw	r26, 0x02	; 2
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	01 97       	sbiw	r24, 0x01	; 1
 3b0:	28 17       	cp	r18, r24
 3b2:	39 07       	cpc	r19, r25
 3b4:	18 f0       	brcs	.+6      	; 0x3bc <ring_remove+0x3e>
 3b6:	80 e0       	ldi	r24, 0x00	; 0
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	02 c0       	rjmp	.+4      	; 0x3c0 <ring_remove+0x42>
    {
        // Get the Data from the buffer.
        data = r->buffer[r->tail_index];

        // Get the next tail index.
        ring_index_t next_tail = r->tail_index + 1;
 3bc:	c9 01       	movw	r24, r18
 3be:	01 96       	adiw	r24, 0x01	; 1
        if(r->tail_index >= r->size - 1)
        {
            next_tail = 0;
        }

        r->tail_index = next_tail;      // Move index
 3c0:	16 96       	adiw	r26, 0x06	; 6
 3c2:	9c 93       	st	X, r25
 3c4:	8e 93       	st	-X, r24
 3c6:	15 97       	sbiw	r26, 0x05	; 5
        r->count--;             // Decrement count
 3c8:	17 96       	adiw	r26, 0x07	; 7
 3ca:	8c 91       	ld	r24, X
 3cc:	17 97       	sbiw	r26, 0x07	; 7
 3ce:	81 50       	subi	r24, 0x01	; 1
 3d0:	17 96       	adiw	r26, 0x07	; 7
 3d2:	8c 93       	st	X, r24
    }

    return(data);
}
 3d4:	8e 2f       	mov	r24, r30
 3d6:	08 95       	ret

000003d8 <usart0_uninit>:


void usart0_uninit(void)
{
	// restore to datasheet defaults
	UART_CONTROL_STATUS_REG_A = 0x20;
 3d8:	80 e2       	ldi	r24, 0x20	; 32
 3da:	80 93 c0 00 	sts	0x00C0, r24
	UART_CONTROL_STATUS_REG_B = 0;
 3de:	10 92 c1 00 	sts	0x00C1, r1
	UART_CONTROL_STATUS_REG_C = 0x06;
 3e2:	86 e0       	ldi	r24, 0x06	; 6
 3e4:	80 93 c2 00 	sts	0x00C2, r24
}
 3e8:	08 95       	ret

000003ea <usart0_baud_set>:
}


// 3/18/11 JWP removed magic number for clock and added freq_cpu
void usart0_baud_set(uint32_t baudrate, uint32_t freq_cpu)
{
 3ea:	ef 92       	push	r14
 3ec:	ff 92       	push	r15
 3ee:	0f 93       	push	r16
 3f0:	1f 93       	push	r17
 3f2:	7b 01       	movw	r14, r22
 3f4:	8c 01       	movw	r16, r24
	uint16_t setting;
	
	setting = usart_baudrate_to_setting(freq_cpu,baudrate);
 3f6:	84 e0       	ldi	r24, 0x04	; 4
 3f8:	ee 0c       	add	r14, r14
 3fa:	ff 1c       	adc	r15, r15
 3fc:	00 1f       	adc	r16, r16
 3fe:	11 1f       	adc	r17, r17
 400:	8a 95       	dec	r24
 402:	d1 f7       	brne	.-12     	; 0x3f8 <usart0_baud_set+0xe>
 404:	ca 01       	movw	r24, r20
 406:	b9 01       	movw	r22, r18
 408:	a8 01       	movw	r20, r16
 40a:	97 01       	movw	r18, r14
 40c:	0e 94 b9 04 	call	0x972	; 0x972 <__udivmodsi4>
 410:	21 50       	subi	r18, 0x01	; 1
 412:	30 40       	sbci	r19, 0x00	; 0
	
	// Write hi byte first as writing lo byte will trigger immediate update of baud prescaler.
	UART_BAUD_RATE_HIGH = hi_byte(setting);
 414:	30 93 c5 00 	sts	0x00C5, r19
	UART_BAUD_RATE_LOW= lo_byte(setting);
 418:	20 93 c4 00 	sts	0x00C4, r18
	
	return;
}
 41c:	1f 91       	pop	r17
 41e:	0f 91       	pop	r16
 420:	ff 90       	pop	r15
 422:	ef 90       	pop	r14
 424:	08 95       	ret

00000426 <usart0_parity_set>:

void usart0_parity_set(usart_parity_t parity)
{
    if(parity > 0)
 426:	81 11       	cpse	r24, r1
    {
        parity++;
 428:	8f 5f       	subi	r24, 0xFF	; 255
    }
    bit_write(bit_read(parity, BIT(0)), UART_CONTROL_STATUS_REG_C, BIT(UART_PARITY_MODE_0));
 42a:	98 2f       	mov	r25, r24
 42c:	80 ff       	sbrs	r24, 0
 42e:	04 c0       	rjmp	.+8      	; 0x438 <usart0_parity_set+0x12>
 430:	80 91 c2 00 	lds	r24, 0x00C2
 434:	80 61       	ori	r24, 0x10	; 16
 436:	03 c0       	rjmp	.+6      	; 0x43e <usart0_parity_set+0x18>
 438:	80 91 c2 00 	lds	r24, 0x00C2
 43c:	8f 7e       	andi	r24, 0xEF	; 239
 43e:	80 93 c2 00 	sts	0x00C2, r24
 442:	80 91 c2 00 	lds	r24, 0x00C2
    bit_write(bit_read(parity, BIT(1)), UART_CONTROL_STATUS_REG_C, BIT(UART_PARITY_MODE_1));
 446:	91 ff       	sbrs	r25, 1
 448:	04 c0       	rjmp	.+8      	; 0x452 <usart0_parity_set+0x2c>
 44a:	80 91 c2 00 	lds	r24, 0x00C2
 44e:	80 62       	ori	r24, 0x20	; 32
 450:	03 c0       	rjmp	.+6      	; 0x458 <usart0_parity_set+0x32>
 452:	80 91 c2 00 	lds	r24, 0x00C2
 456:	8f 7d       	andi	r24, 0xDF	; 223
 458:	80 93 c2 00 	sts	0x00C2, r24
 45c:	80 91 c2 00 	lds	r24, 0x00C2
 460:	08 95       	ret

00000462 <__vector_13>:


// The interrupt service routines are included in the initialization .c file 
// since they must be associated with a .c file for the compiler
usart0_receive_interrupt_service_routine
{
 462:	1f 92       	push	r1
 464:	0f 92       	push	r0
 466:	0f b6       	in	r0, 0x3f	; 63
 468:	0f 92       	push	r0
 46a:	11 24       	eor	r1, r1
 46c:	2f 93       	push	r18
 46e:	3f 93       	push	r19
 470:	4f 93       	push	r20
 472:	5f 93       	push	r21
 474:	6f 93       	push	r22
 476:	7f 93       	push	r23
 478:	8f 93       	push	r24
 47a:	9f 93       	push	r25
 47c:	af 93       	push	r26
 47e:	bf 93       	push	r27
 480:	ef 93       	push	r30
 482:	ff 93       	push	r31
	register uint8_t data;
	register uint8_t parity_error = false;
	register uint8_t frame_error = false;

	// Get error conditions before getting the data.
	frame_error = usart0_frame_error();
 484:	80 91 c0 00 	lds	r24, 0x00C0
	parity_error = usart0_parity_error();
 488:	90 91 c0 00 	lds	r25, 0x00C0
	
	data = UART_DATA_REG;
 48c:	60 91 c6 00 	lds	r22, 0x00C6
    
	if(!frame_error && !parity_error)
 490:	84 fd       	sbrc	r24, 4
 492:	06 c0       	rjmp	.+12     	; 0x4a0 <__vector_13+0x3e>
 494:	92 fd       	sbrc	r25, 2
 496:	04 c0       	rjmp	.+8      	; 0x4a0 <__vector_13+0x3e>
	{
		// Store data in ring buffer.
        ring_add(&usart0_receive_ring, data);
 498:	84 ed       	ldi	r24, 0xD4	; 212
 49a:	93 e0       	ldi	r25, 0x03	; 3
 49c:	0e 94 4a 01 	call	0x294	; 0x294 <ring_add>
	}

	return;
}
 4a0:	ff 91       	pop	r31
 4a2:	ef 91       	pop	r30
 4a4:	bf 91       	pop	r27
 4a6:	af 91       	pop	r26
 4a8:	9f 91       	pop	r25
 4aa:	8f 91       	pop	r24
 4ac:	7f 91       	pop	r23
 4ae:	6f 91       	pop	r22
 4b0:	5f 91       	pop	r21
 4b2:	4f 91       	pop	r20
 4b4:	3f 91       	pop	r19
 4b6:	2f 91       	pop	r18
 4b8:	0f 90       	pop	r0
 4ba:	0f be       	out	0x3f, r0	; 63
 4bc:	0f 90       	pop	r0
 4be:	1f 90       	pop	r1
 4c0:	18 95       	reti

000004c2 <__vector_15>:
// JWP 6/16/11 rewrote transmit interrupt to use TX complete vector
// rather than the Data Register Empty vector
// The interrupt service routines are included in the initialization .c file 
// since they must be associated with a .c file for the compiler
usart0_transmit_interrupt_service_routine
{
 4c2:	1f 92       	push	r1
 4c4:	0f 92       	push	r0
 4c6:	0f b6       	in	r0, 0x3f	; 63
 4c8:	0f 92       	push	r0
 4ca:	11 24       	eor	r1, r1
 4cc:	2f 93       	push	r18
 4ce:	3f 93       	push	r19
 4d0:	4f 93       	push	r20
 4d2:	5f 93       	push	r21
 4d4:	6f 93       	push	r22
 4d6:	7f 93       	push	r23
 4d8:	8f 93       	push	r24
 4da:	9f 93       	push	r25
 4dc:	af 93       	push	r26
 4de:	bf 93       	push	r27
 4e0:	ef 93       	push	r30
 4e2:	ff 93       	push	r31

	// Is buffered transmission enabled?
	if(usart_buffered_tx_flag)
 4e4:	80 91 1c 04 	lds	r24, 0x041C
 4e8:	88 23       	and	r24, r24
 4ea:	69 f0       	breq	.+26     	; 0x506 <__stack+0x7>
	{		
		//if(usart0_transmit_ring.count)// Alternate technique
		if(usart0_transmit_buffer_inuse_count())// Is there data in the buffer?
 4ec:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <usart0_transmit_buffer_inuse_count>
 4f0:	88 23       	and	r24, r24
 4f2:	39 f0       	breq	.+14     	; 0x502 <__stack+0x3>
		{
			// Send next byte in the buffer.
 	       UART_DATA_REG = ring_remove(&usart0_transmit_ring);
 4f4:	8c ec       	ldi	r24, 0xCC	; 204
 4f6:	93 e0       	ldi	r25, 0x03	; 3
 4f8:	0e 94 bf 01 	call	0x37e	; 0x37e <ring_remove>
 4fc:	80 93 c6 00 	sts	0x00C6, r24
 500:	05 c0       	rjmp	.+10     	; 0x50c <__stack+0xd>
		}
		else
		{
			// The buffer is empty
			usart_buffered_tx_flag = false;
 502:	10 92 1c 04 	sts	0x041C, r1
		}
	}
	else // Not buffered so transmited single byte
	{
		// Set transmit ready flag
		usart_tx_ready_flag = true;
 506:	81 e0       	ldi	r24, 0x01	; 1
 508:	80 93 1d 04 	sts	0x041D, r24
	}
	
    return;
}
 50c:	ff 91       	pop	r31
 50e:	ef 91       	pop	r30
 510:	bf 91       	pop	r27
 512:	af 91       	pop	r26
 514:	9f 91       	pop	r25
 516:	8f 91       	pop	r24
 518:	7f 91       	pop	r23
 51a:	6f 91       	pop	r22
 51c:	5f 91       	pop	r21
 51e:	4f 91       	pop	r20
 520:	3f 91       	pop	r19
 522:	2f 91       	pop	r18
 524:	0f 90       	pop	r0
 526:	0f be       	out	0x3f, r0	; 63
 528:	0f 90       	pop	r0
 52a:	1f 90       	pop	r1
 52c:	18 95       	reti

0000052e <usart0_send>:
// the ISR just sends the byte. 
void usart0_send(void)
{

	// Wait until the transmitter is ready
	while(!usart_tx_ready_flag);
 52e:	80 91 1d 04 	lds	r24, 0x041D
 532:	88 23       	and	r24, r24
 534:	e1 f3       	breq	.-8      	; 0x52e <usart0_send>

	// Set flag for ISR
	usart_buffered_tx_flag = true;
 536:	81 e0       	ldi	r24, 0x01	; 1
 538:	80 93 1c 04 	sts	0x041C, r24
	
	// Send the byte
	UART_DATA_REG = ring_remove(&usart0_transmit_ring);
 53c:	8c ec       	ldi	r24, 0xCC	; 204
 53e:	93 e0       	ldi	r25, 0x03	; 3
 540:	0e 94 bf 01 	call	0x37e	; 0x37e <ring_remove>
 544:	80 93 c6 00 	sts	0x00C6, r24

	// Set the ready flag to false
	usart_tx_ready_flag = false;
 548:	10 92 1d 04 	sts	0x041D, r1
}
 54c:	08 95       	ret

0000054e <usart0_init>:

   	return 0; 
} 

void usart0_init(uint32_t baud, uint32_t freq_cpu, usart_mode_t mode, usart_databits_t databits, usart_stopbits_t stopbits, usart_parity_t parity, usart_flow_control_t flow_control)
{
 54e:	2f 92       	push	r2
 550:	3f 92       	push	r3
 552:	4f 92       	push	r4
 554:	5f 92       	push	r5
 556:	6f 92       	push	r6
 558:	7f 92       	push	r7
 55a:	8f 92       	push	r8
 55c:	9f 92       	push	r9
 55e:	af 92       	push	r10
 560:	cf 92       	push	r12
 562:	ef 92       	push	r14
 564:	0f 93       	push	r16
 566:	1f 93       	push	r17
 568:	df 93       	push	r29
 56a:	cf 93       	push	r28
 56c:	cd b7       	in	r28, 0x3d	; 61
 56e:	de b7       	in	r29, 0x3e	; 62
 570:	3b 01       	movw	r6, r22
 572:	4c 01       	movw	r8, r24
 574:	19 01       	movw	r2, r18
 576:	2a 01       	movw	r4, r20
 578:	1e 2d       	mov	r17, r14
 57a:	0c 2d       	mov	r16, r12

	cli();
 57c:	f8 94       	cli

   	stdout = &mystdout;    //set the output stream 
 57e:	8e e3       	ldi	r24, 0x3E	; 62
 580:	93 e0       	ldi	r25, 0x03	; 3
 582:	90 93 21 04 	sts	0x0421, r25
 586:	80 93 20 04 	sts	0x0420, r24
    // flow_out_tcb.run_interval = 0;
    // flow_out_tcb.enabled = false;
    // task_add(&flow_out_tcb);

 
 	usart0_transmit_disable();
 58a:	80 91 c1 00 	lds	r24, 0x00C1
 58e:	87 7f       	andi	r24, 0xF7	; 247
 590:	80 93 c1 00 	sts	0x00C1, r24
    usart0_receive_disable();
 594:	80 91 c1 00 	lds	r24, 0x00C1
 598:	8f 7e       	andi	r24, 0xEF	; 239
 59a:	80 93 c1 00 	sts	0x00C1, r24
	usart0_transmit_complete_interrupt_disable();
 59e:	80 91 c1 00 	lds	r24, 0x00C1
 5a2:	8f 7b       	andi	r24, 0xBF	; 191
 5a4:	80 93 c1 00 	sts	0x00C1, r24
    usart0_receive_complete_interrupt_disable();
 5a8:	80 91 c1 00 	lds	r24, 0x00C1
 5ac:	8f 77       	andi	r24, 0x7F	; 127
 5ae:	80 93 c1 00 	sts	0x00C1, r24

//  JWP 6/19/11 Just use default while testing
// TODO: figure this out someday   
//	usart0_mode(mode);
 	usart0_baud_set(baud, freq_cpu);
 5b2:	c4 01       	movw	r24, r8
 5b4:	b3 01       	movw	r22, r6
 5b6:	0e 94 f5 01 	call	0x3ea	; 0x3ea <usart0_baud_set>
    usart0_data_bits_set(databits);
 5ba:	8e 2d       	mov	r24, r14
 5bc:	85 50       	subi	r24, 0x05	; 5
 5be:	84 30       	cpi	r24, 0x04	; 4
 5c0:	18 f5       	brcc	.+70     	; 0x608 <usart0_init+0xba>
 5c2:	2e 2d       	mov	r18, r14
 5c4:	30 e0       	ldi	r19, 0x00	; 0
 5c6:	25 50       	subi	r18, 0x05	; 5
 5c8:	30 40       	sbci	r19, 0x00	; 0
 5ca:	20 ff       	sbrs	r18, 0
 5cc:	04 c0       	rjmp	.+8      	; 0x5d6 <usart0_init+0x88>
 5ce:	80 91 c2 00 	lds	r24, 0x00C2
 5d2:	82 60       	ori	r24, 0x02	; 2
 5d4:	03 c0       	rjmp	.+6      	; 0x5dc <usart0_init+0x8e>
 5d6:	80 91 c2 00 	lds	r24, 0x00C2
 5da:	8d 7f       	andi	r24, 0xFD	; 253
 5dc:	80 93 c2 00 	sts	0x00C2, r24
 5e0:	80 91 c2 00 	lds	r24, 0x00C2
 5e4:	21 ff       	sbrs	r18, 1
 5e6:	04 c0       	rjmp	.+8      	; 0x5f0 <usart0_init+0xa2>
 5e8:	80 91 c2 00 	lds	r24, 0x00C2
 5ec:	84 60       	ori	r24, 0x04	; 4
 5ee:	03 c0       	rjmp	.+6      	; 0x5f6 <usart0_init+0xa8>
 5f0:	80 91 c2 00 	lds	r24, 0x00C2
 5f4:	8b 7f       	andi	r24, 0xFB	; 251
 5f6:	80 93 c2 00 	sts	0x00C2, r24
 5fa:	80 91 c2 00 	lds	r24, 0x00C2
 5fe:	80 91 c1 00 	lds	r24, 0x00C1
 602:	8b 7f       	andi	r24, 0xFB	; 251
 604:	80 93 c1 00 	sts	0x00C1, r24
 608:	19 30       	cpi	r17, 0x09	; 9
 60a:	79 f4       	brne	.+30     	; 0x62a <usart0_init+0xdc>
 60c:	80 91 c2 00 	lds	r24, 0x00C2
 610:	82 60       	ori	r24, 0x02	; 2
 612:	80 93 c2 00 	sts	0x00C2, r24
 616:	80 91 c2 00 	lds	r24, 0x00C2
 61a:	84 60       	ori	r24, 0x04	; 4
 61c:	80 93 c2 00 	sts	0x00C2, r24
 620:	80 91 c1 00 	lds	r24, 0x00C1
 624:	84 60       	ori	r24, 0x04	; 4
 626:	80 93 c1 00 	sts	0x00C1, r24
    usart0_stop_bits_set(stopbits);
 62a:	80 2f       	mov	r24, r16
 62c:	81 50       	subi	r24, 0x01	; 1
 62e:	82 30       	cpi	r24, 0x02	; 2
 630:	68 f4       	brcc	.+26     	; 0x64c <usart0_init+0xfe>
 632:	01 30       	cpi	r16, 0x01	; 1
 634:	21 f0       	breq	.+8      	; 0x63e <usart0_init+0xf0>
 636:	80 91 c2 00 	lds	r24, 0x00C2
 63a:	88 60       	ori	r24, 0x08	; 8
 63c:	03 c0       	rjmp	.+6      	; 0x644 <usart0_init+0xf6>
 63e:	80 91 c2 00 	lds	r24, 0x00C2
 642:	87 7f       	andi	r24, 0xF7	; 247
 644:	80 93 c2 00 	sts	0x00C2, r24
 648:	80 91 c2 00 	lds	r24, 0x00C2
    usart0_parity_set(parity);
 64c:	8a 2d       	mov	r24, r10
 64e:	0e 94 13 02 	call	0x426	; 0x426 <usart0_parity_set>
 
 	usart0_baud_set(baud, freq_cpu);
 652:	c4 01       	movw	r24, r8
 654:	b3 01       	movw	r22, r6
 656:	a2 01       	movw	r20, r4
 658:	91 01       	movw	r18, r2
 65a:	0e 94 f5 01 	call	0x3ea	; 0x3ea <usart0_baud_set>

//JWP 6/16/11 The Butterfly requires special code for clock and baud
#if defined(__AVR_ATmega169__) // Assume Butterfly
	butterfly_init();
 65e:	0e 94 94 04 	call	0x928	; 0x928 <butterfly_init>
#endif


	ring_init(&usart0_receive_ring, usart0_receive_buffer, USART0_RECEIVE_BUFFER_LEN);
 662:	84 ed       	ldi	r24, 0xD4	; 212
 664:	93 e0       	ldi	r25, 0x03	; 3
 666:	6c ed       	ldi	r22, 0xDC	; 220
 668:	73 e0       	ldi	r23, 0x03	; 3
 66a:	40 e4       	ldi	r20, 0x40	; 64
 66c:	0e 94 83 01 	call	0x306	; 0x306 <ring_init>
    ring_init(&usart0_transmit_ring, usart0_transmit_buffer, USART0_TRANSMIT_BUFFER_LEN);
 670:	8c ec       	ldi	r24, 0xCC	; 204
 672:	93 e0       	ldi	r25, 0x03	; 3
 674:	6c e4       	ldi	r22, 0x4C	; 76
 676:	73 e0       	ldi	r23, 0x03	; 3
 678:	40 e8       	ldi	r20, 0x80	; 128
 67a:	0e 94 83 01 	call	0x306	; 0x306 <ring_init>

	// JWP 6/16/11 
	usart0_transmit_enable();
 67e:	80 91 c1 00 	lds	r24, 0x00C1
 682:	88 60       	ori	r24, 0x08	; 8
 684:	80 93 c1 00 	sts	0x00C1, r24
    usart0_receive_enable();
 688:	80 91 c1 00 	lds	r24, 0x00C1
 68c:	80 61       	ori	r24, 0x10	; 16
 68e:	80 93 c1 00 	sts	0x00C1, r24
	usart0_transmit_complete_interrupt_enable();
 692:	80 91 c1 00 	lds	r24, 0x00C1
 696:	80 64       	ori	r24, 0x40	; 64
 698:	80 93 c1 00 	sts	0x00C1, r24
    usart0_receive_complete_interrupt_enable();
 69c:	80 91 c1 00 	lds	r24, 0x00C1
 6a0:	80 68       	ori	r24, 0x80	; 128
 6a2:	80 93 c1 00 	sts	0x00C1, r24

	// JWP 6/16/11 - set flags for revised transmission logic
	usart_buffered_tx_flag = false;
 6a6:	10 92 1c 04 	sts	0x041C, r1
	usart_tx_ready_flag = true;
 6aa:	81 e0       	ldi	r24, 0x01	; 1
 6ac:	80 93 1d 04 	sts	0x041D, r24

	sei();
 6b0:	78 94       	sei

	return;
}
 6b2:	cf 91       	pop	r28
 6b4:	df 91       	pop	r29
 6b6:	1f 91       	pop	r17
 6b8:	0f 91       	pop	r16
 6ba:	ef 90       	pop	r14
 6bc:	cf 90       	pop	r12
 6be:	af 90       	pop	r10
 6c0:	9f 90       	pop	r9
 6c2:	8f 90       	pop	r8
 6c4:	7f 90       	pop	r7
 6c6:	6f 90       	pop	r6
 6c8:	5f 90       	pop	r5
 6ca:	4f 90       	pop	r4
 6cc:	3f 90       	pop	r3
 6ce:	2f 90       	pop	r2
 6d0:	08 95       	ret

000006d2 <usart0_put_char_stream>:
int usart0_put_char_stream(char c, FILE *stream);

// Keep this in the same file as the usart0_put_char function
FILE mystdout = FDEV_SETUP_STREAM(usart0_put_char_stream, NULL, _FDEV_SETUP_WRITE);
int usart0_put_char_stream(char c, FILE *stream) 
{ 
 6d2:	1f 93       	push	r17
 6d4:	18 2f       	mov	r17, r24
	if (c == '\n') usart0_put_char_stream('\r', stream);
 6d6:	8a 30       	cpi	r24, 0x0A	; 10
 6d8:	19 f4       	brne	.+6      	; 0x6e0 <usart0_put_char_stream+0xe>
 6da:	8d e0       	ldi	r24, 0x0D	; 13
 6dc:	0e 94 69 03 	call	0x6d2	; 0x6d2 <usart0_put_char_stream>

	usart0_transmit_buffer_insert((uint8_t)c);
 6e0:	81 2f       	mov	r24, r17
 6e2:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <usart0_transmit_buffer_insert>
   	
	usart0_send();
 6e6:	0e 94 97 02 	call	0x52e	; 0x52e <usart0_send>

   	return 0; 
} 
 6ea:	80 e0       	ldi	r24, 0x00	; 0
 6ec:	90 e0       	ldi	r25, 0x00	; 0
 6ee:	1f 91       	pop	r17
 6f0:	08 95       	ret

000006f2 <usart0_buffer_clear>:
 // please contact me with details so that I may correct the situation. 
 
#include "usart.h"

void usart0_buffer_clear(ring_t *ring)
{
 6f2:	1f 93       	push	r17
    register uint8_t sreg;
    
    sreg = SREG;
 6f4:	1f b7       	in	r17, 0x3f	; 63
    cli();
 6f6:	f8 94       	cli
    ring_clear(ring);
 6f8:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <ring_clear>
    SREG = sreg;
 6fc:	1f bf       	out	0x3f, r17	; 63
    return;
}
 6fe:	1f 91       	pop	r17
 700:	08 95       	ret

00000702 <usart0_buffer_free_count>:
 // please contact me with details so that I may correct the situation. 
 
#include "usart.h"

uint8_t usart0_buffer_free_count(ring_t *ring)
{
 702:	fc 01       	movw	r30, r24
    register uint8_t result;
    register uint8_t sreg;
    
    sreg = SREG;
 704:	8f b7       	in	r24, 0x3f	; 63
    cli();
 706:	f8 94       	cli
    result = ring_free_count(ring);
    SREG = sreg;
 708:	8f bf       	out	0x3f, r24	; 63
 70a:	82 81       	ldd	r24, Z+2	; 0x02
 70c:	97 81       	ldd	r25, Z+7	; 0x07
    return(result);
}
 70e:	89 1b       	sub	r24, r25
 710:	08 95       	ret

00000712 <usart0_buffer_insert>:
 // please contact me with details so that I may correct the situation. 
 
#include "usart.h"

bool usart0_buffer_insert(ring_t *ring, uint8_t c)
{
 712:	1f 93       	push	r17
 714:	9c 01       	movw	r18, r24
    register bool result;
    register uint8_t sreg;
   
   	// Do not load buffer while transmitting from buffer
	while(usart_buffered_tx_flag);
 716:	80 91 1c 04 	lds	r24, 0x041C
 71a:	88 23       	and	r24, r24
 71c:	e1 f7       	brne	.-8      	; 0x716 <usart0_buffer_insert+0x4>
    
    sreg = SREG;
 71e:	1f b7       	in	r17, 0x3f	; 63
    cli();
 720:	f8 94       	cli
    result = ring_add(ring, c);
 722:	c9 01       	movw	r24, r18
 724:	0e 94 4a 01 	call	0x294	; 0x294 <ring_add>
    SREG = sreg;
 728:	1f bf       	out	0x3f, r17	; 63
    return(result);
}
 72a:	1f 91       	pop	r17
 72c:	08 95       	ret

0000072e <usart0_buffer_inuse_count>:
 // please contact me with details so that I may correct the situation. 
 
#include "usart.h"

uint8_t usart0_buffer_inuse_count(ring_t *ring)
{
 72e:	fc 01       	movw	r30, r24
    register uint8_t result;
    register uint8_t sreg;
    
    sreg = SREG;
 730:	8f b7       	in	r24, 0x3f	; 63
    cli();
 732:	f8 94       	cli
    result = ring->count;
    SREG = sreg;
 734:	8f bf       	out	0x3f, r24	; 63
    return(result);
}
 736:	87 81       	ldd	r24, Z+7	; 0x07
 738:	08 95       	ret

0000073a <usart0_buffer_peek>:
 // please contact me with details so that I may correct the situation. 
 
#include "usart.h"

uint8_t usart0_buffer_peek(ring_t *ring, uint8_t *buf, uint8_t count)
{
 73a:	1f 93       	push	r17
    register uint8_t result;
    register uint8_t sreg;
    
    sreg = SREG;
 73c:	1f b7       	in	r17, 0x3f	; 63
    cli();
 73e:	f8 94       	cli
    result = ring_peek(ring, buf, count);
 740:	0e 94 93 01 	call	0x326	; 0x326 <ring_peek>
    SREG = sreg;
 744:	1f bf       	out	0x3f, r17	; 63
    return(result);
}
 746:	1f 91       	pop	r17
 748:	08 95       	ret

0000074a <usart0_buffer_remove>:
 // please contact me with details so that I may correct the situation. 
 
#include "usart.h"

uint8_t usart0_buffer_remove(ring_t *ring)
{
 74a:	1f 93       	push	r17
    register uint8_t result;
    register uint8_t sreg;
    
    sreg = SREG;
 74c:	1f b7       	in	r17, 0x3f	; 63
    cli();
 74e:	f8 94       	cli
    result = ring_remove(ring);
 750:	0e 94 bf 01 	call	0x37e	; 0x37e <ring_remove>
    SREG = sreg;
 754:	1f bf       	out	0x3f, r17	; 63
    return(result);
}
 756:	1f 91       	pop	r17
 758:	08 95       	ret

0000075a <usart0_receive_buffer_clear>:
 
#include "usart.h"

void usart0_receive_buffer_clear(void)
{
    usart0_buffer_clear(&usart0_receive_ring);
 75a:	84 ed       	ldi	r24, 0xD4	; 212
 75c:	93 e0       	ldi	r25, 0x03	; 3
 75e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <usart0_buffer_clear>
	return;
}
 762:	08 95       	ret

00000764 <usart0_receive_buffer_free_count>:
 
#include "usart.h"

uint8_t usart0_receive_buffer_free_count(void)
{
    return(usart0_buffer_free_count(&usart0_receive_ring));
 764:	84 ed       	ldi	r24, 0xD4	; 212
 766:	93 e0       	ldi	r25, 0x03	; 3
 768:	0e 94 81 03 	call	0x702	; 0x702 <usart0_buffer_free_count>
}
 76c:	08 95       	ret

0000076e <usart0_receive_buffer_inuse_count>:
 
#include "usart.h"

uint8_t usart0_receive_buffer_inuse_count(void)
{
    return(usart0_buffer_inuse_count(&usart0_receive_ring));
 76e:	84 ed       	ldi	r24, 0xD4	; 212
 770:	93 e0       	ldi	r25, 0x03	; 3
 772:	0e 94 97 03 	call	0x72e	; 0x72e <usart0_buffer_inuse_count>
}
 776:	08 95       	ret

00000778 <usart0_receive_buffer_peek>:
 // please contact me with details so that I may correct the situation. 

#include "usart.h"

uint8_t usart0_receive_buffer_peek(uint8_t *buf, uint8_t count)
{
 778:	9c 01       	movw	r18, r24
 77a:	46 2f       	mov	r20, r22
    return(usart0_buffer_peek(&usart0_receive_ring, buf, count));
 77c:	84 ed       	ldi	r24, 0xD4	; 212
 77e:	93 e0       	ldi	r25, 0x03	; 3
 780:	b9 01       	movw	r22, r18
 782:	0e 94 9d 03 	call	0x73a	; 0x73a <usart0_buffer_peek>
}
 786:	08 95       	ret

00000788 <usart0_receive_buffer_remove>:

uint8_t usart0_receive_buffer_remove(void)
{
    uint8_t data;
    
    data = usart0_buffer_remove(&usart0_receive_ring);
 788:	84 ed       	ldi	r24, 0xD4	; 212
 78a:	93 e0       	ldi	r25, 0x03	; 3
 78c:	0e 94 a5 03 	call	0x74a	; 0x74a <usart0_buffer_remove>
            usart0_flow_in_enable();
        }
    }
	*/
    return(data);
}
 790:	08 95       	ret

00000792 <usart0_transmit_buffer_clear>:

#include "usart.h"

void usart0_transmit_buffer_clear(void)
{
    usart0_buffer_clear(&usart0_transmit_ring);
 792:	8c ec       	ldi	r24, 0xCC	; 204
 794:	93 e0       	ldi	r25, 0x03	; 3
 796:	0e 94 79 03 	call	0x6f2	; 0x6f2 <usart0_buffer_clear>
    //usart0_transmit_check();
	return;
}
 79a:	08 95       	ret

0000079c <usart0_transmit_buffer_free_count>:
 
#include "usart.h"

uint8_t usart0_transmit_buffer_free_count(void)
{
    return(usart0_buffer_free_count(&usart0_transmit_ring));
 79c:	8c ec       	ldi	r24, 0xCC	; 204
 79e:	93 e0       	ldi	r25, 0x03	; 3
 7a0:	0e 94 81 03 	call	0x702	; 0x702 <usart0_buffer_free_count>
}
 7a4:	08 95       	ret

000007a6 <usart0_transmit_buffer_insert>:
 // please contact me with details so that I may correct the situation. 
 
#include "usart.h"

bool usart0_transmit_buffer_insert(uint8_t c)
{
 7a6:	68 2f       	mov	r22, r24
    register bool result;
    result = usart0_buffer_insert(&usart0_transmit_ring, c);
 7a8:	8c ec       	ldi	r24, 0xCC	; 204
 7aa:	93 e0       	ldi	r25, 0x03	; 3
 7ac:	0e 94 89 03 	call	0x712	; 0x712 <usart0_buffer_insert>
	// JWP 6/14/11 don't automatically send. Use usart0_transmit_send when 
	// 		you have finished loading what you want to send in the buffer
	//if(result == true) usart0_transmit_check();

    return(result);
}
 7b0:	08 95       	ret

000007b2 <usart0_transmit_buffer_inuse_count>:
 
#include "usart.h"

uint8_t usart0_transmit_buffer_inuse_count(void)
{
    return(usart0_buffer_inuse_count(&usart0_transmit_ring));
 7b2:	8c ec       	ldi	r24, 0xCC	; 204
 7b4:	93 e0       	ldi	r25, 0x03	; 3
 7b6:	0e 94 97 03 	call	0x72e	; 0x72e <usart0_buffer_inuse_count>
}
 7ba:	08 95       	ret

000007bc <usart0_transmit_buffer_peek>:
 // please contact me with details so that I may correct the situation. 
 
#include "usart.h"

uint8_t usart0_transmit_buffer_peek(uint8_t *buf, uint8_t count)
{
 7bc:	9c 01       	movw	r18, r24
 7be:	46 2f       	mov	r20, r22
    return(usart0_buffer_peek(&usart0_transmit_ring, buf, count));
 7c0:	8c ec       	ldi	r24, 0xCC	; 204
 7c2:	93 e0       	ldi	r25, 0x03	; 3
 7c4:	b9 01       	movw	r22, r18
 7c6:	0e 94 9d 03 	call	0x73a	; 0x73a <usart0_buffer_peek>
}
 7ca:	08 95       	ret

000007cc <usart0_transmit_buffer_remove>:
#include "usart.h"

uint8_t usart0_transmit_buffer_remove(void)
{
    register uint8_t result;
    result = usart0_buffer_remove(&usart0_transmit_ring);
 7cc:	8c ec       	ldi	r24, 0xCC	; 204
 7ce:	93 e0       	ldi	r25, 0x03	; 3
 7d0:	0e 94 a5 03 	call	0x74a	; 0x74a <usart0_buffer_remove>
    //usart0_transmit_check();
    return(result);
}
 7d4:	08 95       	ret

000007d6 <delay>:
#include <util\delay.h>

void delay(uint16_t ms);

void delay(uint16_t ms)
{
 7d6:	20 e0       	ldi	r18, 0x00	; 0
 7d8:	30 e0       	ldi	r19, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 7da:	44 ef       	ldi	r20, 0xF4	; 244
 7dc:	51 e0       	ldi	r21, 0x01	; 1
 7de:	05 c0       	rjmp	.+10     	; 0x7ea <delay+0x14>
 7e0:	fa 01       	movw	r30, r20
 7e2:	31 97       	sbiw	r30, 0x01	; 1
 7e4:	f1 f7       	brne	.-4      	; 0x7e2 <delay+0xc>
	for(int i = 0 ; i < ms ; i++)
 7e6:	2f 5f       	subi	r18, 0xFF	; 255
 7e8:	3f 4f       	sbci	r19, 0xFF	; 255
 7ea:	28 17       	cp	r18, r24
 7ec:	39 07       	cpc	r19, r25
 7ee:	c0 f3       	brcs	.-16     	; 0x7e0 <delay+0xa>
	{
		_delay_ms(1);
	}
}
 7f0:	08 95       	ret

000007f2 <ring_clear>:
#include <stdlib.h>
#include <string.h>
#include "ring.h"

bool ring_clear(ring_t *r)
{
 7f2:	fc 01       	movw	r30, r24
    bool success = false;
    if (r != NULL)
 7f4:	00 97       	sbiw	r24, 0x00	; 0
 7f6:	11 f4       	brne	.+4      	; 0x7fc <ring_clear+0xa>
 7f8:	80 e0       	ldi	r24, 0x00	; 0
 7fa:	08 95       	ret
    {
        r->head_index = 0;
 7fc:	14 82       	std	Z+4, r1	; 0x04
 7fe:	13 82       	std	Z+3, r1	; 0x03
        r->tail_index = 0;          // Assign new values
 800:	16 82       	std	Z+6, r1	; 0x06
 802:	15 82       	std	Z+5, r1	; 0x05
        r->count = 0;
 804:	17 82       	std	Z+7, r1	; 0x07
        memset((void *)r->buffer, 0, r->size); // Clear out memory
 806:	42 81       	ldd	r20, Z+2	; 0x02
 808:	80 81       	ld	r24, Z
 80a:	91 81       	ldd	r25, Z+1	; 0x01
 80c:	60 e0       	ldi	r22, 0x00	; 0
 80e:	70 e0       	ldi	r23, 0x00	; 0
 810:	50 e0       	ldi	r21, 0x00	; 0
 812:	0e 94 db 04 	call	0x9b6	; 0x9b6 <memset>
 816:	81 e0       	ldi	r24, 0x01	; 1
        success = true;
    }
    return(success);
}
 818:	08 95       	ret

0000081a <serial_in>:

#include "serial.h"

uint8_t serial_in(void)
{
	return usart0_receive_buffer_remove();
 81a:	0e 94 c4 03 	call	0x788	; 0x788 <usart0_receive_buffer_remove>
}
 81e:	08 95       	ret

00000820 <serial_out>:
#include <stdarg.h>

// The variadic (va_) stuff is magic 
//void serial_out(const char *fmt, ...)
void serial_out(const char *fmt, ...)
{
 820:	df 93       	push	r29
 822:	cf 93       	push	r28
 824:	cd b7       	in	r28, 0x3d	; 61
 826:	de b7       	in	r29, 0x3e	; 62
 828:	fe 01       	movw	r30, r28
 82a:	35 96       	adiw	r30, 0x05	; 5
	va_list arg;
	va_start(arg, fmt);
	vprintf(fmt, arg);
 82c:	81 91       	ld	r24, Z+
 82e:	91 91       	ld	r25, Z+
 830:	bf 01       	movw	r22, r30
 832:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <vprintf>
	va_end(arg);
}
 836:	cf 91       	pop	r28
 838:	df 91       	pop	r29
 83a:	08 95       	ret

0000083c <serial_write>:
 // please contact me with details so that I may correct the situation. #include "serial.h"

#include "serial.h"

void serial_write(uint8_t *buff, uint8_t size)
{
 83c:	ef 92       	push	r14
 83e:	ff 92       	push	r15
 840:	0f 93       	push	r16
 842:	1f 93       	push	r17
 844:	cf 93       	push	r28
 846:	df 93       	push	r29
 848:	7c 01       	movw	r14, r24
 84a:	c0 e0       	ldi	r28, 0x00	; 0
 84c:	d0 e0       	ldi	r29, 0x00	; 0
	for(int i = 0; i < size; i++)
 84e:	06 2f       	mov	r16, r22
 850:	10 e0       	ldi	r17, 0x00	; 0
 852:	07 c0       	rjmp	.+14     	; 0x862 <serial_write+0x26>
	{
		usart0_transmit_buffer_insert(buff[i]);
 854:	f7 01       	movw	r30, r14
 856:	ec 0f       	add	r30, r28
 858:	fd 1f       	adc	r31, r29
 85a:	80 81       	ld	r24, Z
 85c:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <usart0_transmit_buffer_insert>

#include "serial.h"

void serial_write(uint8_t *buff, uint8_t size)
{
	for(int i = 0; i < size; i++)
 860:	21 96       	adiw	r28, 0x01	; 1
 862:	c0 17       	cp	r28, r16
 864:	d1 07       	cpc	r29, r17
 866:	b4 f3       	brlt	.-20     	; 0x854 <serial_write+0x18>
	{
		usart0_transmit_buffer_insert(buff[i]);
	}
	usart0_send();
 868:	0e 94 97 02 	call	0x52e	; 0x52e <usart0_send>
}
 86c:	df 91       	pop	r29
 86e:	cf 91       	pop	r28
 870:	1f 91       	pop	r17
 872:	0f 91       	pop	r16
 874:	ff 90       	pop	r15
 876:	ef 90       	pop	r14
 878:	08 95       	ret

0000087a <OSCCAL_calibration>:
{
    unsigned char calibrate = 0;//FALSE;
    int temp;
    unsigned char tempL;

    CLKPR = (1<<CLKPCE);        /// set Clock Prescaler Change Enable
 87a:	80 e8       	ldi	r24, 0x80	; 128
 87c:	80 93 61 00 	sts	0x0061, r24
    /// set prescaler = 8, Inter RC 8Mhz / 8 = 1Mhz
    CLKPR = (1<<CLKPS1) | (1<<CLKPS0);
 880:	83 e0       	ldi	r24, 0x03	; 3
 882:	80 93 61 00 	sts	0x0061, r24
    
    TIMSK2 = 0;             ///disable OCIE2A and TOIE2
 886:	10 92 70 00 	sts	0x0070, r1

    ASSR = (1<<AS2);        ///select asynchronous operation of timer2 (32,768kHz)
 88a:	88 e0       	ldi	r24, 0x08	; 8
 88c:	80 93 b6 00 	sts	0x00B6, r24
    
    OCR2A = 200;            /// set timer2 compare value 
 890:	88 ec       	ldi	r24, 0xC8	; 200
 892:	80 93 b3 00 	sts	0x00B3, r24

    TIMSK0 = 0;             /// delete any interrupt sources
 896:	10 92 6e 00 	sts	0x006E, r1
        
    TCCR1B = (1<<CS10);     /// start timer1 with no prescaling
 89a:	81 e0       	ldi	r24, 0x01	; 1
 89c:	80 93 81 00 	sts	0x0081, r24
    TCCR2A = (1<<CS20);     /// start timer2 with no prescaling
 8a0:	80 93 b0 00 	sts	0x00B0, r24

    while((ASSR & 0x01) | (ASSR & 0x04)); ///wait for TCN2UB and TCR2UB to be cleared
 8a4:	20 91 b6 00 	lds	r18, 0x00B6
 8a8:	80 91 b6 00 	lds	r24, 0x00B6
 8ac:	90 e0       	ldi	r25, 0x00	; 0
 8ae:	84 70       	andi	r24, 0x04	; 4
 8b0:	90 70       	andi	r25, 0x00	; 0
 8b2:	30 e0       	ldi	r19, 0x00	; 0
 8b4:	21 70       	andi	r18, 0x01	; 1
 8b6:	30 70       	andi	r19, 0x00	; 0
 8b8:	82 2b       	or	r24, r18
 8ba:	93 2b       	or	r25, r19
 8bc:	89 2b       	or	r24, r25
 8be:	91 f7       	brne	.-28     	; 0x8a4 <OSCCAL_calibration+0x2a>
    
    while(!calibrate)
    {
        cli(); /// mt __disable_interrupt();  // disable global interrupt
        
        TIFR1 = 0xFF;   /// delete TIFR1 flags
 8c0:	4f ef       	ldi	r20, 0xFF	; 255
    
        if (temp > 6250)
        {
            OSCCAL--;   /// the internRC oscillator runs to fast, decrease the OSCCAL
        }
        else if (temp < 6120)
 8c2:	51 e0       	ldi	r21, 0x01	; 1

    Delay(1000);    /// wait for external crystal to stabilise
    
    while(!calibrate)
    {
        cli(); /// mt __disable_interrupt();  // disable global interrupt
 8c4:	f8 94       	cli
        
        TIFR1 = 0xFF;   /// delete TIFR1 flags
 8c6:	46 bb       	out	0x16, r20	; 22
        TIFR2 = 0xFF;   /// delete TIFR2 flags
 8c8:	47 bb       	out	0x17, r20	; 23
        
        TCNT1H = 0;     /// clear timer1 counter
 8ca:	10 92 85 00 	sts	0x0085, r1
        TCNT1L = 0;
 8ce:	10 92 84 00 	sts	0x0084, r1
        TCNT2 = 0;      /// clear timer2 counter
 8d2:	10 92 b2 00 	sts	0x00B2, r1
           
	while ( !(TIFR2 & (1<<OCF2A)) ); // while ( !(TIFR2 && (1<<OCF2A)) );   // wait for timer2 compareflag
 8d6:	b9 9b       	sbis	0x17, 1	; 23
 8d8:	fe cf       	rjmp	.-4      	; 0x8d6 <OSCCAL_calibration+0x5c>
    
        TCCR1B = 0; /// stop timer1
 8da:	10 92 81 00 	sts	0x0081, r1

        sei(); /// __enable_interrupt();  // enable global interrupt
 8de:	78 94       	sei
    
        if ( (TIFR1 & (1<<TOV1)) ) // if ( (TIFR1 && (1<<TOV1)) )
 8e0:	b0 99       	sbic	0x16, 0	; 22
 8e2:	17 c0       	rjmp	.+46     	; 0x912 <OSCCAL_calibration+0x98>
        {
            temp = 0xFFFF;      /// if timer1 overflows, set the temp to 0xFFFF
        }
        else
        {   /// read out the timer1 counter value
            tempL = TCNT1L;
 8e4:	90 91 84 00 	lds	r25, 0x0084
            temp = TCNT1H;
 8e8:	80 91 85 00 	lds	r24, 0x0085
            temp = (temp << 8);
 8ec:	38 2f       	mov	r19, r24
 8ee:	20 e0       	ldi	r18, 0x00	; 0
            temp += tempL;
 8f0:	b9 01       	movw	r22, r18
 8f2:	69 0f       	add	r22, r25
 8f4:	71 1d       	adc	r23, r1
 8f6:	cb 01       	movw	r24, r22
        }
    
        if (temp > 6250)
 8f8:	78 e1       	ldi	r23, 0x18	; 24
 8fa:	8b 36       	cpi	r24, 0x6B	; 107
 8fc:	97 07       	cpc	r25, r23
 8fe:	24 f0       	brlt	.+8      	; 0x908 <OSCCAL_calibration+0x8e>
        {
            OSCCAL--;   /// the internRC oscillator runs to fast, decrease the OSCCAL
 900:	80 91 66 00 	lds	r24, 0x0066
 904:	81 50       	subi	r24, 0x01	; 1
 906:	08 c0       	rjmp	.+16     	; 0x918 <OSCCAL_calibration+0x9e>
        }
        else if (temp < 6120)
 908:	88 5e       	subi	r24, 0xE8	; 232
 90a:	97 41       	sbci	r25, 0x17	; 23
 90c:	14 f0       	brlt	.+4      	; 0x912 <OSCCAL_calibration+0x98>
 90e:	81 e0       	ldi	r24, 0x01	; 1
 910:	06 c0       	rjmp	.+12     	; 0x91e <OSCCAL_calibration+0xa4>
        {
            OSCCAL++;   /// the internRC oscillator runs to slow, increase the OSCCAL
 912:	80 91 66 00 	lds	r24, 0x0066
 916:	8f 5f       	subi	r24, 0xFF	; 255
 918:	80 93 66 00 	sts	0x0066, r24
 91c:	80 e0       	ldi	r24, 0x00	; 0
        }
        else
            calibrate = 1;///TRUE;   // the interRC is correct
    
        TCCR1B = (1<<CS10); /// start timer1
 91e:	50 93 81 00 	sts	0x0081, r21

    while((ASSR & 0x01) | (ASSR & 0x04)); ///wait for TCN2UB and TCR2UB to be cleared

    Delay(1000);    /// wait for external crystal to stabilise
    
    while(!calibrate)
 922:	88 23       	and	r24, r24
 924:	79 f2       	breq	.-98     	; 0x8c4 <OSCCAL_calibration+0x4a>
        else
            calibrate = 1;///TRUE;   // the interRC is correct
    
        TCCR1B = (1<<CS10); /// start timer1
    }
}
 926:	08 95       	ret

00000928 <butterfly_init>:
#include "butterfly.h"

void butterfly_init(void)
{

    OSCCAL_calibration();   /// Calibrate the OSCCAL byte
 928:	0e 94 3d 04 	call	0x87a	; 0x87a <OSCCAL_calibration>

    ACSR = (1<<ACD);
 92c:	20 e8       	ldi	r18, 0x80	; 128
 92e:	20 bf       	out	0x30, r18	; 48

    /// Disable Digital input on PF0-2 (power save)
    DIDR1 = (7<<ADC0D);
 930:	87 e0       	ldi	r24, 0x07	; 7
 932:	80 93 7f 00 	sts	0x007F, r24

    PORTB = 0xFF;       /// Enable pullups on Ports B and E
 936:	8f ef       	ldi	r24, 0xFF	; 255
 938:	85 b9       	out	0x05, r24	; 5
    PORTE = 0xFF;
 93a:	8e b9       	out	0x0e, r24	; 14
/* */   
    /// boost IntRC to 2Mhz to achieve 19200 baudrate
    CLKPR = (1<<CLKPCE);        /// set Clock Prescaler Change Enable
 93c:	e1 e6       	ldi	r30, 0x61	; 97
 93e:	f0 e0       	ldi	r31, 0x00	; 0
 940:	20 83       	st	Z, r18
    /// set prescaler = 4, Inter RC 8Mhz / 4 = 2Mhz
    CLKPR = (1<<CLKPS1);    
 942:	92 e0       	ldi	r25, 0x02	; 2
 944:	90 83       	st	Z, r25

    UBRRH = 0;
 946:	10 92 c5 00 	sts	0x00C5, r1
    UBRRL = 12;
 94a:	8c e0       	ldi	r24, 0x0C	; 12
 94c:	80 93 c4 00 	sts	0x00C4, r24

    /// Enable 2x speed
    UCSRA = (1<<U2X);
 950:	90 93 c0 00 	sts	0x00C0, r25

    /// Enable receiver and transmitter
	// JWP added | 10/22/10
    UCSRB |= (1<<RXEN)|(1<<TXEN)|(0<<RXCIE)|(0<<UDRIE);
 954:	e1 ec       	ldi	r30, 0xC1	; 193
 956:	f0 e0       	ldi	r31, 0x00	; 0
 958:	80 81       	ld	r24, Z
 95a:	88 61       	ori	r24, 0x18	; 24
 95c:	80 83       	st	Z, r24

    /// Async. mode, 8N1
    UCSRC = (0<<UMSEL)|(0<<UPM0)|(0<<USBS)|(3<<UCSZ0)|(0<<UCPOL);
 95e:	86 e0       	ldi	r24, 0x06	; 6
 960:	80 93 c2 00 	sts	0x00C2, r24

// TODO 10/23/10
//    sei(); /// mt __enable_interrupt();
    
    /// mt PCMSK1 = (1<<PORTB6) | (1<<PORTB4);
	PCMSK1 = (1<<PINB6) | (1<<PINB4);       // set pin-change interrupt mask
 964:	80 e5       	ldi	r24, 0x50	; 80
 966:	80 93 6c 00 	sts	0x006C, r24
  	EIFR   = (1<<PCIF1);                    // clear external intterupt flag 1
 96a:	2c bb       	out	0x1c, r18	; 28
	EIMSK  = (1<<PCIE1);   
 96c:	2d bb       	out	0x1d, r18	; 29

}
 96e:	08 95       	ret

00000970 <Delay>:
{
    unsigned char i; // mt int i;
    
    while (millisec--)
        for (i=0; i<125; i++);
}
 970:	08 95       	ret

00000972 <__udivmodsi4>:
 972:	a1 e2       	ldi	r26, 0x21	; 33
 974:	1a 2e       	mov	r1, r26
 976:	aa 1b       	sub	r26, r26
 978:	bb 1b       	sub	r27, r27
 97a:	fd 01       	movw	r30, r26
 97c:	0d c0       	rjmp	.+26     	; 0x998 <__udivmodsi4_ep>

0000097e <__udivmodsi4_loop>:
 97e:	aa 1f       	adc	r26, r26
 980:	bb 1f       	adc	r27, r27
 982:	ee 1f       	adc	r30, r30
 984:	ff 1f       	adc	r31, r31
 986:	a2 17       	cp	r26, r18
 988:	b3 07       	cpc	r27, r19
 98a:	e4 07       	cpc	r30, r20
 98c:	f5 07       	cpc	r31, r21
 98e:	20 f0       	brcs	.+8      	; 0x998 <__udivmodsi4_ep>
 990:	a2 1b       	sub	r26, r18
 992:	b3 0b       	sbc	r27, r19
 994:	e4 0b       	sbc	r30, r20
 996:	f5 0b       	sbc	r31, r21

00000998 <__udivmodsi4_ep>:
 998:	66 1f       	adc	r22, r22
 99a:	77 1f       	adc	r23, r23
 99c:	88 1f       	adc	r24, r24
 99e:	99 1f       	adc	r25, r25
 9a0:	1a 94       	dec	r1
 9a2:	69 f7       	brne	.-38     	; 0x97e <__udivmodsi4_loop>
 9a4:	60 95       	com	r22
 9a6:	70 95       	com	r23
 9a8:	80 95       	com	r24
 9aa:	90 95       	com	r25
 9ac:	9b 01       	movw	r18, r22
 9ae:	ac 01       	movw	r20, r24
 9b0:	bd 01       	movw	r22, r26
 9b2:	cf 01       	movw	r24, r30
 9b4:	08 95       	ret

000009b6 <memset>:
 9b6:	dc 01       	movw	r26, r24
 9b8:	01 c0       	rjmp	.+2      	; 0x9bc <memset+0x6>
 9ba:	6d 93       	st	X+, r22
 9bc:	41 50       	subi	r20, 0x01	; 1
 9be:	50 40       	sbci	r21, 0x00	; 0
 9c0:	e0 f7       	brcc	.-8      	; 0x9ba <memset+0x4>
 9c2:	08 95       	ret

000009c4 <vprintf>:
 9c4:	9c 01       	movw	r18, r24
 9c6:	ab 01       	movw	r20, r22
 9c8:	80 91 20 04 	lds	r24, 0x0420
 9cc:	90 91 21 04 	lds	r25, 0x0421
 9d0:	b9 01       	movw	r22, r18
 9d2:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <vfprintf>
 9d6:	08 95       	ret

000009d8 <vfprintf>:
 9d8:	ab e0       	ldi	r26, 0x0B	; 11
 9da:	b0 e0       	ldi	r27, 0x00	; 0
 9dc:	e2 ef       	ldi	r30, 0xF2	; 242
 9de:	f4 e0       	ldi	r31, 0x04	; 4
 9e0:	0c 94 69 07 	jmp	0xed2	; 0xed2 <__prologue_saves__>
 9e4:	3c 01       	movw	r6, r24
 9e6:	2b 01       	movw	r4, r22
 9e8:	5a 01       	movw	r10, r20
 9ea:	fc 01       	movw	r30, r24
 9ec:	17 82       	std	Z+7, r1	; 0x07
 9ee:	16 82       	std	Z+6, r1	; 0x06
 9f0:	83 81       	ldd	r24, Z+3	; 0x03
 9f2:	81 fd       	sbrc	r24, 1
 9f4:	03 c0       	rjmp	.+6      	; 0x9fc <vfprintf+0x24>
 9f6:	6f ef       	ldi	r22, 0xFF	; 255
 9f8:	7f ef       	ldi	r23, 0xFF	; 255
 9fa:	c6 c1       	rjmp	.+908    	; 0xd88 <vfprintf+0x3b0>
 9fc:	9a e0       	ldi	r25, 0x0A	; 10
 9fe:	89 2e       	mov	r8, r25
 a00:	1e 01       	movw	r2, r28
 a02:	08 94       	sec
 a04:	21 1c       	adc	r2, r1
 a06:	31 1c       	adc	r3, r1
 a08:	f3 01       	movw	r30, r6
 a0a:	23 81       	ldd	r18, Z+3	; 0x03
 a0c:	f2 01       	movw	r30, r4
 a0e:	23 fd       	sbrc	r18, 3
 a10:	85 91       	lpm	r24, Z+
 a12:	23 ff       	sbrs	r18, 3
 a14:	81 91       	ld	r24, Z+
 a16:	2f 01       	movw	r4, r30
 a18:	88 23       	and	r24, r24
 a1a:	09 f4       	brne	.+2      	; 0xa1e <vfprintf+0x46>
 a1c:	b2 c1       	rjmp	.+868    	; 0xd82 <vfprintf+0x3aa>
 a1e:	85 32       	cpi	r24, 0x25	; 37
 a20:	39 f4       	brne	.+14     	; 0xa30 <vfprintf+0x58>
 a22:	23 fd       	sbrc	r18, 3
 a24:	85 91       	lpm	r24, Z+
 a26:	23 ff       	sbrs	r18, 3
 a28:	81 91       	ld	r24, Z+
 a2a:	2f 01       	movw	r4, r30
 a2c:	85 32       	cpi	r24, 0x25	; 37
 a2e:	29 f4       	brne	.+10     	; 0xa3a <vfprintf+0x62>
 a30:	90 e0       	ldi	r25, 0x00	; 0
 a32:	b3 01       	movw	r22, r6
 a34:	0e 94 df 06 	call	0xdbe	; 0xdbe <fputc>
 a38:	e7 cf       	rjmp	.-50     	; 0xa08 <vfprintf+0x30>
 a3a:	98 2f       	mov	r25, r24
 a3c:	ff 24       	eor	r15, r15
 a3e:	ee 24       	eor	r14, r14
 a40:	99 24       	eor	r9, r9
 a42:	ff e1       	ldi	r31, 0x1F	; 31
 a44:	ff 15       	cp	r31, r15
 a46:	d0 f0       	brcs	.+52     	; 0xa7c <vfprintf+0xa4>
 a48:	9b 32       	cpi	r25, 0x2B	; 43
 a4a:	69 f0       	breq	.+26     	; 0xa66 <vfprintf+0x8e>
 a4c:	9c 32       	cpi	r25, 0x2C	; 44
 a4e:	28 f4       	brcc	.+10     	; 0xa5a <vfprintf+0x82>
 a50:	90 32       	cpi	r25, 0x20	; 32
 a52:	59 f0       	breq	.+22     	; 0xa6a <vfprintf+0x92>
 a54:	93 32       	cpi	r25, 0x23	; 35
 a56:	91 f4       	brne	.+36     	; 0xa7c <vfprintf+0xa4>
 a58:	0e c0       	rjmp	.+28     	; 0xa76 <vfprintf+0x9e>
 a5a:	9d 32       	cpi	r25, 0x2D	; 45
 a5c:	49 f0       	breq	.+18     	; 0xa70 <vfprintf+0x98>
 a5e:	90 33       	cpi	r25, 0x30	; 48
 a60:	69 f4       	brne	.+26     	; 0xa7c <vfprintf+0xa4>
 a62:	41 e0       	ldi	r20, 0x01	; 1
 a64:	24 c0       	rjmp	.+72     	; 0xaae <vfprintf+0xd6>
 a66:	52 e0       	ldi	r21, 0x02	; 2
 a68:	f5 2a       	or	r15, r21
 a6a:	84 e0       	ldi	r24, 0x04	; 4
 a6c:	f8 2a       	or	r15, r24
 a6e:	28 c0       	rjmp	.+80     	; 0xac0 <vfprintf+0xe8>
 a70:	98 e0       	ldi	r25, 0x08	; 8
 a72:	f9 2a       	or	r15, r25
 a74:	25 c0       	rjmp	.+74     	; 0xac0 <vfprintf+0xe8>
 a76:	e0 e1       	ldi	r30, 0x10	; 16
 a78:	fe 2a       	or	r15, r30
 a7a:	22 c0       	rjmp	.+68     	; 0xac0 <vfprintf+0xe8>
 a7c:	f7 fc       	sbrc	r15, 7
 a7e:	29 c0       	rjmp	.+82     	; 0xad2 <vfprintf+0xfa>
 a80:	89 2f       	mov	r24, r25
 a82:	80 53       	subi	r24, 0x30	; 48
 a84:	8a 30       	cpi	r24, 0x0A	; 10
 a86:	70 f4       	brcc	.+28     	; 0xaa4 <vfprintf+0xcc>
 a88:	f6 fe       	sbrs	r15, 6
 a8a:	05 c0       	rjmp	.+10     	; 0xa96 <vfprintf+0xbe>
 a8c:	98 9c       	mul	r9, r8
 a8e:	90 2c       	mov	r9, r0
 a90:	11 24       	eor	r1, r1
 a92:	98 0e       	add	r9, r24
 a94:	15 c0       	rjmp	.+42     	; 0xac0 <vfprintf+0xe8>
 a96:	e8 9c       	mul	r14, r8
 a98:	e0 2c       	mov	r14, r0
 a9a:	11 24       	eor	r1, r1
 a9c:	e8 0e       	add	r14, r24
 a9e:	f0 e2       	ldi	r31, 0x20	; 32
 aa0:	ff 2a       	or	r15, r31
 aa2:	0e c0       	rjmp	.+28     	; 0xac0 <vfprintf+0xe8>
 aa4:	9e 32       	cpi	r25, 0x2E	; 46
 aa6:	29 f4       	brne	.+10     	; 0xab2 <vfprintf+0xda>
 aa8:	f6 fc       	sbrc	r15, 6
 aaa:	6b c1       	rjmp	.+726    	; 0xd82 <vfprintf+0x3aa>
 aac:	40 e4       	ldi	r20, 0x40	; 64
 aae:	f4 2a       	or	r15, r20
 ab0:	07 c0       	rjmp	.+14     	; 0xac0 <vfprintf+0xe8>
 ab2:	9c 36       	cpi	r25, 0x6C	; 108
 ab4:	19 f4       	brne	.+6      	; 0xabc <vfprintf+0xe4>
 ab6:	50 e8       	ldi	r21, 0x80	; 128
 ab8:	f5 2a       	or	r15, r21
 aba:	02 c0       	rjmp	.+4      	; 0xac0 <vfprintf+0xe8>
 abc:	98 36       	cpi	r25, 0x68	; 104
 abe:	49 f4       	brne	.+18     	; 0xad2 <vfprintf+0xfa>
 ac0:	f2 01       	movw	r30, r4
 ac2:	23 fd       	sbrc	r18, 3
 ac4:	95 91       	lpm	r25, Z+
 ac6:	23 ff       	sbrs	r18, 3
 ac8:	91 91       	ld	r25, Z+
 aca:	2f 01       	movw	r4, r30
 acc:	99 23       	and	r25, r25
 ace:	09 f0       	breq	.+2      	; 0xad2 <vfprintf+0xfa>
 ad0:	b8 cf       	rjmp	.-144    	; 0xa42 <vfprintf+0x6a>
 ad2:	89 2f       	mov	r24, r25
 ad4:	85 54       	subi	r24, 0x45	; 69
 ad6:	83 30       	cpi	r24, 0x03	; 3
 ad8:	18 f0       	brcs	.+6      	; 0xae0 <vfprintf+0x108>
 ada:	80 52       	subi	r24, 0x20	; 32
 adc:	83 30       	cpi	r24, 0x03	; 3
 ade:	38 f4       	brcc	.+14     	; 0xaee <vfprintf+0x116>
 ae0:	44 e0       	ldi	r20, 0x04	; 4
 ae2:	50 e0       	ldi	r21, 0x00	; 0
 ae4:	a4 0e       	add	r10, r20
 ae6:	b5 1e       	adc	r11, r21
 ae8:	5f e3       	ldi	r21, 0x3F	; 63
 aea:	59 83       	std	Y+1, r21	; 0x01
 aec:	0f c0       	rjmp	.+30     	; 0xb0c <vfprintf+0x134>
 aee:	93 36       	cpi	r25, 0x63	; 99
 af0:	31 f0       	breq	.+12     	; 0xafe <vfprintf+0x126>
 af2:	93 37       	cpi	r25, 0x73	; 115
 af4:	79 f0       	breq	.+30     	; 0xb14 <vfprintf+0x13c>
 af6:	93 35       	cpi	r25, 0x53	; 83
 af8:	09 f0       	breq	.+2      	; 0xafc <vfprintf+0x124>
 afa:	56 c0       	rjmp	.+172    	; 0xba8 <vfprintf+0x1d0>
 afc:	20 c0       	rjmp	.+64     	; 0xb3e <vfprintf+0x166>
 afe:	f5 01       	movw	r30, r10
 b00:	80 81       	ld	r24, Z
 b02:	89 83       	std	Y+1, r24	; 0x01
 b04:	42 e0       	ldi	r20, 0x02	; 2
 b06:	50 e0       	ldi	r21, 0x00	; 0
 b08:	a4 0e       	add	r10, r20
 b0a:	b5 1e       	adc	r11, r21
 b0c:	61 01       	movw	r12, r2
 b0e:	01 e0       	ldi	r16, 0x01	; 1
 b10:	10 e0       	ldi	r17, 0x00	; 0
 b12:	12 c0       	rjmp	.+36     	; 0xb38 <vfprintf+0x160>
 b14:	f5 01       	movw	r30, r10
 b16:	c0 80       	ld	r12, Z
 b18:	d1 80       	ldd	r13, Z+1	; 0x01
 b1a:	f6 fc       	sbrc	r15, 6
 b1c:	03 c0       	rjmp	.+6      	; 0xb24 <vfprintf+0x14c>
 b1e:	6f ef       	ldi	r22, 0xFF	; 255
 b20:	7f ef       	ldi	r23, 0xFF	; 255
 b22:	02 c0       	rjmp	.+4      	; 0xb28 <vfprintf+0x150>
 b24:	69 2d       	mov	r22, r9
 b26:	70 e0       	ldi	r23, 0x00	; 0
 b28:	42 e0       	ldi	r20, 0x02	; 2
 b2a:	50 e0       	ldi	r21, 0x00	; 0
 b2c:	a4 0e       	add	r10, r20
 b2e:	b5 1e       	adc	r11, r21
 b30:	c6 01       	movw	r24, r12
 b32:	0e 94 d4 06 	call	0xda8	; 0xda8 <strnlen>
 b36:	8c 01       	movw	r16, r24
 b38:	5f e7       	ldi	r21, 0x7F	; 127
 b3a:	f5 22       	and	r15, r21
 b3c:	14 c0       	rjmp	.+40     	; 0xb66 <vfprintf+0x18e>
 b3e:	f5 01       	movw	r30, r10
 b40:	c0 80       	ld	r12, Z
 b42:	d1 80       	ldd	r13, Z+1	; 0x01
 b44:	f6 fc       	sbrc	r15, 6
 b46:	03 c0       	rjmp	.+6      	; 0xb4e <vfprintf+0x176>
 b48:	6f ef       	ldi	r22, 0xFF	; 255
 b4a:	7f ef       	ldi	r23, 0xFF	; 255
 b4c:	02 c0       	rjmp	.+4      	; 0xb52 <vfprintf+0x17a>
 b4e:	69 2d       	mov	r22, r9
 b50:	70 e0       	ldi	r23, 0x00	; 0
 b52:	42 e0       	ldi	r20, 0x02	; 2
 b54:	50 e0       	ldi	r21, 0x00	; 0
 b56:	a4 0e       	add	r10, r20
 b58:	b5 1e       	adc	r11, r21
 b5a:	c6 01       	movw	r24, r12
 b5c:	0e 94 c9 06 	call	0xd92	; 0xd92 <strnlen_P>
 b60:	8c 01       	movw	r16, r24
 b62:	50 e8       	ldi	r21, 0x80	; 128
 b64:	f5 2a       	or	r15, r21
 b66:	f3 fe       	sbrs	r15, 3
 b68:	07 c0       	rjmp	.+14     	; 0xb78 <vfprintf+0x1a0>
 b6a:	1a c0       	rjmp	.+52     	; 0xba0 <vfprintf+0x1c8>
 b6c:	80 e2       	ldi	r24, 0x20	; 32
 b6e:	90 e0       	ldi	r25, 0x00	; 0
 b70:	b3 01       	movw	r22, r6
 b72:	0e 94 df 06 	call	0xdbe	; 0xdbe <fputc>
 b76:	ea 94       	dec	r14
 b78:	8e 2d       	mov	r24, r14
 b7a:	90 e0       	ldi	r25, 0x00	; 0
 b7c:	08 17       	cp	r16, r24
 b7e:	19 07       	cpc	r17, r25
 b80:	a8 f3       	brcs	.-22     	; 0xb6c <vfprintf+0x194>
 b82:	0e c0       	rjmp	.+28     	; 0xba0 <vfprintf+0x1c8>
 b84:	f6 01       	movw	r30, r12
 b86:	f7 fc       	sbrc	r15, 7
 b88:	85 91       	lpm	r24, Z+
 b8a:	f7 fe       	sbrs	r15, 7
 b8c:	81 91       	ld	r24, Z+
 b8e:	6f 01       	movw	r12, r30
 b90:	90 e0       	ldi	r25, 0x00	; 0
 b92:	b3 01       	movw	r22, r6
 b94:	0e 94 df 06 	call	0xdbe	; 0xdbe <fputc>
 b98:	e1 10       	cpse	r14, r1
 b9a:	ea 94       	dec	r14
 b9c:	01 50       	subi	r16, 0x01	; 1
 b9e:	10 40       	sbci	r17, 0x00	; 0
 ba0:	01 15       	cp	r16, r1
 ba2:	11 05       	cpc	r17, r1
 ba4:	79 f7       	brne	.-34     	; 0xb84 <vfprintf+0x1ac>
 ba6:	ea c0       	rjmp	.+468    	; 0xd7c <vfprintf+0x3a4>
 ba8:	94 36       	cpi	r25, 0x64	; 100
 baa:	11 f0       	breq	.+4      	; 0xbb0 <vfprintf+0x1d8>
 bac:	99 36       	cpi	r25, 0x69	; 105
 bae:	69 f5       	brne	.+90     	; 0xc0a <vfprintf+0x232>
 bb0:	f7 fe       	sbrs	r15, 7
 bb2:	08 c0       	rjmp	.+16     	; 0xbc4 <vfprintf+0x1ec>
 bb4:	f5 01       	movw	r30, r10
 bb6:	20 81       	ld	r18, Z
 bb8:	31 81       	ldd	r19, Z+1	; 0x01
 bba:	42 81       	ldd	r20, Z+2	; 0x02
 bbc:	53 81       	ldd	r21, Z+3	; 0x03
 bbe:	84 e0       	ldi	r24, 0x04	; 4
 bc0:	90 e0       	ldi	r25, 0x00	; 0
 bc2:	0a c0       	rjmp	.+20     	; 0xbd8 <vfprintf+0x200>
 bc4:	f5 01       	movw	r30, r10
 bc6:	80 81       	ld	r24, Z
 bc8:	91 81       	ldd	r25, Z+1	; 0x01
 bca:	9c 01       	movw	r18, r24
 bcc:	44 27       	eor	r20, r20
 bce:	37 fd       	sbrc	r19, 7
 bd0:	40 95       	com	r20
 bd2:	54 2f       	mov	r21, r20
 bd4:	82 e0       	ldi	r24, 0x02	; 2
 bd6:	90 e0       	ldi	r25, 0x00	; 0
 bd8:	a8 0e       	add	r10, r24
 bda:	b9 1e       	adc	r11, r25
 bdc:	9f e6       	ldi	r25, 0x6F	; 111
 bde:	f9 22       	and	r15, r25
 be0:	57 ff       	sbrs	r21, 7
 be2:	09 c0       	rjmp	.+18     	; 0xbf6 <vfprintf+0x21e>
 be4:	50 95       	com	r21
 be6:	40 95       	com	r20
 be8:	30 95       	com	r19
 bea:	21 95       	neg	r18
 bec:	3f 4f       	sbci	r19, 0xFF	; 255
 bee:	4f 4f       	sbci	r20, 0xFF	; 255
 bf0:	5f 4f       	sbci	r21, 0xFF	; 255
 bf2:	e0 e8       	ldi	r30, 0x80	; 128
 bf4:	fe 2a       	or	r15, r30
 bf6:	ca 01       	movw	r24, r20
 bf8:	b9 01       	movw	r22, r18
 bfa:	a1 01       	movw	r20, r2
 bfc:	2a e0       	ldi	r18, 0x0A	; 10
 bfe:	30 e0       	ldi	r19, 0x00	; 0
 c00:	0e 94 0b 07 	call	0xe16	; 0xe16 <__ultoa_invert>
 c04:	d8 2e       	mov	r13, r24
 c06:	d2 18       	sub	r13, r2
 c08:	40 c0       	rjmp	.+128    	; 0xc8a <vfprintf+0x2b2>
 c0a:	95 37       	cpi	r25, 0x75	; 117
 c0c:	29 f4       	brne	.+10     	; 0xc18 <vfprintf+0x240>
 c0e:	1f 2d       	mov	r17, r15
 c10:	1f 7e       	andi	r17, 0xEF	; 239
 c12:	2a e0       	ldi	r18, 0x0A	; 10
 c14:	30 e0       	ldi	r19, 0x00	; 0
 c16:	1d c0       	rjmp	.+58     	; 0xc52 <vfprintf+0x27a>
 c18:	1f 2d       	mov	r17, r15
 c1a:	19 7f       	andi	r17, 0xF9	; 249
 c1c:	9f 36       	cpi	r25, 0x6F	; 111
 c1e:	61 f0       	breq	.+24     	; 0xc38 <vfprintf+0x260>
 c20:	90 37       	cpi	r25, 0x70	; 112
 c22:	20 f4       	brcc	.+8      	; 0xc2c <vfprintf+0x254>
 c24:	98 35       	cpi	r25, 0x58	; 88
 c26:	09 f0       	breq	.+2      	; 0xc2a <vfprintf+0x252>
 c28:	ac c0       	rjmp	.+344    	; 0xd82 <vfprintf+0x3aa>
 c2a:	0f c0       	rjmp	.+30     	; 0xc4a <vfprintf+0x272>
 c2c:	90 37       	cpi	r25, 0x70	; 112
 c2e:	39 f0       	breq	.+14     	; 0xc3e <vfprintf+0x266>
 c30:	98 37       	cpi	r25, 0x78	; 120
 c32:	09 f0       	breq	.+2      	; 0xc36 <vfprintf+0x25e>
 c34:	a6 c0       	rjmp	.+332    	; 0xd82 <vfprintf+0x3aa>
 c36:	04 c0       	rjmp	.+8      	; 0xc40 <vfprintf+0x268>
 c38:	28 e0       	ldi	r18, 0x08	; 8
 c3a:	30 e0       	ldi	r19, 0x00	; 0
 c3c:	0a c0       	rjmp	.+20     	; 0xc52 <vfprintf+0x27a>
 c3e:	10 61       	ori	r17, 0x10	; 16
 c40:	14 fd       	sbrc	r17, 4
 c42:	14 60       	ori	r17, 0x04	; 4
 c44:	20 e1       	ldi	r18, 0x10	; 16
 c46:	30 e0       	ldi	r19, 0x00	; 0
 c48:	04 c0       	rjmp	.+8      	; 0xc52 <vfprintf+0x27a>
 c4a:	14 fd       	sbrc	r17, 4
 c4c:	16 60       	ori	r17, 0x06	; 6
 c4e:	20 e1       	ldi	r18, 0x10	; 16
 c50:	32 e0       	ldi	r19, 0x02	; 2
 c52:	17 ff       	sbrs	r17, 7
 c54:	08 c0       	rjmp	.+16     	; 0xc66 <vfprintf+0x28e>
 c56:	f5 01       	movw	r30, r10
 c58:	60 81       	ld	r22, Z
 c5a:	71 81       	ldd	r23, Z+1	; 0x01
 c5c:	82 81       	ldd	r24, Z+2	; 0x02
 c5e:	93 81       	ldd	r25, Z+3	; 0x03
 c60:	44 e0       	ldi	r20, 0x04	; 4
 c62:	50 e0       	ldi	r21, 0x00	; 0
 c64:	08 c0       	rjmp	.+16     	; 0xc76 <vfprintf+0x29e>
 c66:	f5 01       	movw	r30, r10
 c68:	80 81       	ld	r24, Z
 c6a:	91 81       	ldd	r25, Z+1	; 0x01
 c6c:	bc 01       	movw	r22, r24
 c6e:	80 e0       	ldi	r24, 0x00	; 0
 c70:	90 e0       	ldi	r25, 0x00	; 0
 c72:	42 e0       	ldi	r20, 0x02	; 2
 c74:	50 e0       	ldi	r21, 0x00	; 0
 c76:	a4 0e       	add	r10, r20
 c78:	b5 1e       	adc	r11, r21
 c7a:	a1 01       	movw	r20, r2
 c7c:	0e 94 0b 07 	call	0xe16	; 0xe16 <__ultoa_invert>
 c80:	d8 2e       	mov	r13, r24
 c82:	d2 18       	sub	r13, r2
 c84:	8f e7       	ldi	r24, 0x7F	; 127
 c86:	f8 2e       	mov	r15, r24
 c88:	f1 22       	and	r15, r17
 c8a:	f6 fe       	sbrs	r15, 6
 c8c:	0b c0       	rjmp	.+22     	; 0xca4 <vfprintf+0x2cc>
 c8e:	5e ef       	ldi	r21, 0xFE	; 254
 c90:	f5 22       	and	r15, r21
 c92:	d9 14       	cp	r13, r9
 c94:	38 f4       	brcc	.+14     	; 0xca4 <vfprintf+0x2cc>
 c96:	f4 fe       	sbrs	r15, 4
 c98:	07 c0       	rjmp	.+14     	; 0xca8 <vfprintf+0x2d0>
 c9a:	f2 fc       	sbrc	r15, 2
 c9c:	05 c0       	rjmp	.+10     	; 0xca8 <vfprintf+0x2d0>
 c9e:	8f ee       	ldi	r24, 0xEF	; 239
 ca0:	f8 22       	and	r15, r24
 ca2:	02 c0       	rjmp	.+4      	; 0xca8 <vfprintf+0x2d0>
 ca4:	1d 2d       	mov	r17, r13
 ca6:	01 c0       	rjmp	.+2      	; 0xcaa <vfprintf+0x2d2>
 ca8:	19 2d       	mov	r17, r9
 caa:	f4 fe       	sbrs	r15, 4
 cac:	0d c0       	rjmp	.+26     	; 0xcc8 <vfprintf+0x2f0>
 cae:	fe 01       	movw	r30, r28
 cb0:	ed 0d       	add	r30, r13
 cb2:	f1 1d       	adc	r31, r1
 cb4:	80 81       	ld	r24, Z
 cb6:	80 33       	cpi	r24, 0x30	; 48
 cb8:	19 f4       	brne	.+6      	; 0xcc0 <vfprintf+0x2e8>
 cba:	99 ee       	ldi	r25, 0xE9	; 233
 cbc:	f9 22       	and	r15, r25
 cbe:	08 c0       	rjmp	.+16     	; 0xcd0 <vfprintf+0x2f8>
 cc0:	1f 5f       	subi	r17, 0xFF	; 255
 cc2:	f2 fe       	sbrs	r15, 2
 cc4:	05 c0       	rjmp	.+10     	; 0xcd0 <vfprintf+0x2f8>
 cc6:	03 c0       	rjmp	.+6      	; 0xcce <vfprintf+0x2f6>
 cc8:	8f 2d       	mov	r24, r15
 cca:	86 78       	andi	r24, 0x86	; 134
 ccc:	09 f0       	breq	.+2      	; 0xcd0 <vfprintf+0x2f8>
 cce:	1f 5f       	subi	r17, 0xFF	; 255
 cd0:	0f 2d       	mov	r16, r15
 cd2:	f3 fc       	sbrc	r15, 3
 cd4:	14 c0       	rjmp	.+40     	; 0xcfe <vfprintf+0x326>
 cd6:	f0 fe       	sbrs	r15, 0
 cd8:	0f c0       	rjmp	.+30     	; 0xcf8 <vfprintf+0x320>
 cda:	1e 15       	cp	r17, r14
 cdc:	10 f0       	brcs	.+4      	; 0xce2 <vfprintf+0x30a>
 cde:	9d 2c       	mov	r9, r13
 ce0:	0b c0       	rjmp	.+22     	; 0xcf8 <vfprintf+0x320>
 ce2:	9d 2c       	mov	r9, r13
 ce4:	9e 0c       	add	r9, r14
 ce6:	91 1a       	sub	r9, r17
 ce8:	1e 2d       	mov	r17, r14
 cea:	06 c0       	rjmp	.+12     	; 0xcf8 <vfprintf+0x320>
 cec:	80 e2       	ldi	r24, 0x20	; 32
 cee:	90 e0       	ldi	r25, 0x00	; 0
 cf0:	b3 01       	movw	r22, r6
 cf2:	0e 94 df 06 	call	0xdbe	; 0xdbe <fputc>
 cf6:	1f 5f       	subi	r17, 0xFF	; 255
 cf8:	1e 15       	cp	r17, r14
 cfa:	c0 f3       	brcs	.-16     	; 0xcec <vfprintf+0x314>
 cfc:	04 c0       	rjmp	.+8      	; 0xd06 <vfprintf+0x32e>
 cfe:	1e 15       	cp	r17, r14
 d00:	10 f4       	brcc	.+4      	; 0xd06 <vfprintf+0x32e>
 d02:	e1 1a       	sub	r14, r17
 d04:	01 c0       	rjmp	.+2      	; 0xd08 <vfprintf+0x330>
 d06:	ee 24       	eor	r14, r14
 d08:	04 ff       	sbrs	r16, 4
 d0a:	0f c0       	rjmp	.+30     	; 0xd2a <vfprintf+0x352>
 d0c:	80 e3       	ldi	r24, 0x30	; 48
 d0e:	90 e0       	ldi	r25, 0x00	; 0
 d10:	b3 01       	movw	r22, r6
 d12:	0e 94 df 06 	call	0xdbe	; 0xdbe <fputc>
 d16:	02 ff       	sbrs	r16, 2
 d18:	1d c0       	rjmp	.+58     	; 0xd54 <vfprintf+0x37c>
 d1a:	01 fd       	sbrc	r16, 1
 d1c:	03 c0       	rjmp	.+6      	; 0xd24 <vfprintf+0x34c>
 d1e:	88 e7       	ldi	r24, 0x78	; 120
 d20:	90 e0       	ldi	r25, 0x00	; 0
 d22:	0e c0       	rjmp	.+28     	; 0xd40 <vfprintf+0x368>
 d24:	88 e5       	ldi	r24, 0x58	; 88
 d26:	90 e0       	ldi	r25, 0x00	; 0
 d28:	0b c0       	rjmp	.+22     	; 0xd40 <vfprintf+0x368>
 d2a:	80 2f       	mov	r24, r16
 d2c:	86 78       	andi	r24, 0x86	; 134
 d2e:	91 f0       	breq	.+36     	; 0xd54 <vfprintf+0x37c>
 d30:	01 ff       	sbrs	r16, 1
 d32:	02 c0       	rjmp	.+4      	; 0xd38 <vfprintf+0x360>
 d34:	8b e2       	ldi	r24, 0x2B	; 43
 d36:	01 c0       	rjmp	.+2      	; 0xd3a <vfprintf+0x362>
 d38:	80 e2       	ldi	r24, 0x20	; 32
 d3a:	f7 fc       	sbrc	r15, 7
 d3c:	8d e2       	ldi	r24, 0x2D	; 45
 d3e:	90 e0       	ldi	r25, 0x00	; 0
 d40:	b3 01       	movw	r22, r6
 d42:	0e 94 df 06 	call	0xdbe	; 0xdbe <fputc>
 d46:	06 c0       	rjmp	.+12     	; 0xd54 <vfprintf+0x37c>
 d48:	80 e3       	ldi	r24, 0x30	; 48
 d4a:	90 e0       	ldi	r25, 0x00	; 0
 d4c:	b3 01       	movw	r22, r6
 d4e:	0e 94 df 06 	call	0xdbe	; 0xdbe <fputc>
 d52:	9a 94       	dec	r9
 d54:	d9 14       	cp	r13, r9
 d56:	c0 f3       	brcs	.-16     	; 0xd48 <vfprintf+0x370>
 d58:	da 94       	dec	r13
 d5a:	f1 01       	movw	r30, r2
 d5c:	ed 0d       	add	r30, r13
 d5e:	f1 1d       	adc	r31, r1
 d60:	80 81       	ld	r24, Z
 d62:	90 e0       	ldi	r25, 0x00	; 0
 d64:	b3 01       	movw	r22, r6
 d66:	0e 94 df 06 	call	0xdbe	; 0xdbe <fputc>
 d6a:	dd 20       	and	r13, r13
 d6c:	a9 f7       	brne	.-22     	; 0xd58 <vfprintf+0x380>
 d6e:	06 c0       	rjmp	.+12     	; 0xd7c <vfprintf+0x3a4>
 d70:	80 e2       	ldi	r24, 0x20	; 32
 d72:	90 e0       	ldi	r25, 0x00	; 0
 d74:	b3 01       	movw	r22, r6
 d76:	0e 94 df 06 	call	0xdbe	; 0xdbe <fputc>
 d7a:	ea 94       	dec	r14
 d7c:	ee 20       	and	r14, r14
 d7e:	c1 f7       	brne	.-16     	; 0xd70 <vfprintf+0x398>
 d80:	43 ce       	rjmp	.-890    	; 0xa08 <vfprintf+0x30>
 d82:	f3 01       	movw	r30, r6
 d84:	66 81       	ldd	r22, Z+6	; 0x06
 d86:	77 81       	ldd	r23, Z+7	; 0x07
 d88:	cb 01       	movw	r24, r22
 d8a:	2b 96       	adiw	r28, 0x0b	; 11
 d8c:	e2 e1       	ldi	r30, 0x12	; 18
 d8e:	0c 94 85 07 	jmp	0xf0a	; 0xf0a <__epilogue_restores__>

00000d92 <strnlen_P>:
 d92:	fc 01       	movw	r30, r24
 d94:	05 90       	lpm	r0, Z+
 d96:	61 50       	subi	r22, 0x01	; 1
 d98:	70 40       	sbci	r23, 0x00	; 0
 d9a:	01 10       	cpse	r0, r1
 d9c:	d8 f7       	brcc	.-10     	; 0xd94 <strnlen_P+0x2>
 d9e:	80 95       	com	r24
 da0:	90 95       	com	r25
 da2:	8e 0f       	add	r24, r30
 da4:	9f 1f       	adc	r25, r31
 da6:	08 95       	ret

00000da8 <strnlen>:
 da8:	fc 01       	movw	r30, r24
 daa:	61 50       	subi	r22, 0x01	; 1
 dac:	70 40       	sbci	r23, 0x00	; 0
 dae:	01 90       	ld	r0, Z+
 db0:	01 10       	cpse	r0, r1
 db2:	d8 f7       	brcc	.-10     	; 0xdaa <strnlen+0x2>
 db4:	80 95       	com	r24
 db6:	90 95       	com	r25
 db8:	8e 0f       	add	r24, r30
 dba:	9f 1f       	adc	r25, r31
 dbc:	08 95       	ret

00000dbe <fputc>:
 dbe:	0f 93       	push	r16
 dc0:	1f 93       	push	r17
 dc2:	cf 93       	push	r28
 dc4:	df 93       	push	r29
 dc6:	8c 01       	movw	r16, r24
 dc8:	eb 01       	movw	r28, r22
 dca:	8b 81       	ldd	r24, Y+3	; 0x03
 dcc:	81 ff       	sbrs	r24, 1
 dce:	1b c0       	rjmp	.+54     	; 0xe06 <fputc+0x48>
 dd0:	82 ff       	sbrs	r24, 2
 dd2:	0d c0       	rjmp	.+26     	; 0xdee <fputc+0x30>
 dd4:	2e 81       	ldd	r18, Y+6	; 0x06
 dd6:	3f 81       	ldd	r19, Y+7	; 0x07
 dd8:	8c 81       	ldd	r24, Y+4	; 0x04
 dda:	9d 81       	ldd	r25, Y+5	; 0x05
 ddc:	28 17       	cp	r18, r24
 dde:	39 07       	cpc	r19, r25
 de0:	64 f4       	brge	.+24     	; 0xdfa <fputc+0x3c>
 de2:	e8 81       	ld	r30, Y
 de4:	f9 81       	ldd	r31, Y+1	; 0x01
 de6:	01 93       	st	Z+, r16
 de8:	f9 83       	std	Y+1, r31	; 0x01
 dea:	e8 83       	st	Y, r30
 dec:	06 c0       	rjmp	.+12     	; 0xdfa <fputc+0x3c>
 dee:	e8 85       	ldd	r30, Y+8	; 0x08
 df0:	f9 85       	ldd	r31, Y+9	; 0x09
 df2:	80 2f       	mov	r24, r16
 df4:	09 95       	icall
 df6:	89 2b       	or	r24, r25
 df8:	31 f4       	brne	.+12     	; 0xe06 <fputc+0x48>
 dfa:	8e 81       	ldd	r24, Y+6	; 0x06
 dfc:	9f 81       	ldd	r25, Y+7	; 0x07
 dfe:	01 96       	adiw	r24, 0x01	; 1
 e00:	9f 83       	std	Y+7, r25	; 0x07
 e02:	8e 83       	std	Y+6, r24	; 0x06
 e04:	02 c0       	rjmp	.+4      	; 0xe0a <fputc+0x4c>
 e06:	0f ef       	ldi	r16, 0xFF	; 255
 e08:	1f ef       	ldi	r17, 0xFF	; 255
 e0a:	c8 01       	movw	r24, r16
 e0c:	df 91       	pop	r29
 e0e:	cf 91       	pop	r28
 e10:	1f 91       	pop	r17
 e12:	0f 91       	pop	r16
 e14:	08 95       	ret

00000e16 <__ultoa_invert>:
 e16:	fa 01       	movw	r30, r20
 e18:	aa 27       	eor	r26, r26
 e1a:	28 30       	cpi	r18, 0x08	; 8
 e1c:	51 f1       	breq	.+84     	; 0xe72 <__ultoa_invert+0x5c>
 e1e:	20 31       	cpi	r18, 0x10	; 16
 e20:	81 f1       	breq	.+96     	; 0xe82 <__ultoa_invert+0x6c>
 e22:	e8 94       	clt
 e24:	6f 93       	push	r22
 e26:	6e 7f       	andi	r22, 0xFE	; 254
 e28:	6e 5f       	subi	r22, 0xFE	; 254
 e2a:	7f 4f       	sbci	r23, 0xFF	; 255
 e2c:	8f 4f       	sbci	r24, 0xFF	; 255
 e2e:	9f 4f       	sbci	r25, 0xFF	; 255
 e30:	af 4f       	sbci	r26, 0xFF	; 255
 e32:	b1 e0       	ldi	r27, 0x01	; 1
 e34:	3e d0       	rcall	.+124    	; 0xeb2 <__ultoa_invert+0x9c>
 e36:	b4 e0       	ldi	r27, 0x04	; 4
 e38:	3c d0       	rcall	.+120    	; 0xeb2 <__ultoa_invert+0x9c>
 e3a:	67 0f       	add	r22, r23
 e3c:	78 1f       	adc	r23, r24
 e3e:	89 1f       	adc	r24, r25
 e40:	9a 1f       	adc	r25, r26
 e42:	a1 1d       	adc	r26, r1
 e44:	68 0f       	add	r22, r24
 e46:	79 1f       	adc	r23, r25
 e48:	8a 1f       	adc	r24, r26
 e4a:	91 1d       	adc	r25, r1
 e4c:	a1 1d       	adc	r26, r1
 e4e:	6a 0f       	add	r22, r26
 e50:	71 1d       	adc	r23, r1
 e52:	81 1d       	adc	r24, r1
 e54:	91 1d       	adc	r25, r1
 e56:	a1 1d       	adc	r26, r1
 e58:	20 d0       	rcall	.+64     	; 0xe9a <__ultoa_invert+0x84>
 e5a:	09 f4       	brne	.+2      	; 0xe5e <__ultoa_invert+0x48>
 e5c:	68 94       	set
 e5e:	3f 91       	pop	r19
 e60:	2a e0       	ldi	r18, 0x0A	; 10
 e62:	26 9f       	mul	r18, r22
 e64:	11 24       	eor	r1, r1
 e66:	30 19       	sub	r19, r0
 e68:	30 5d       	subi	r19, 0xD0	; 208
 e6a:	31 93       	st	Z+, r19
 e6c:	de f6       	brtc	.-74     	; 0xe24 <__ultoa_invert+0xe>
 e6e:	cf 01       	movw	r24, r30
 e70:	08 95       	ret
 e72:	46 2f       	mov	r20, r22
 e74:	47 70       	andi	r20, 0x07	; 7
 e76:	40 5d       	subi	r20, 0xD0	; 208
 e78:	41 93       	st	Z+, r20
 e7a:	b3 e0       	ldi	r27, 0x03	; 3
 e7c:	0f d0       	rcall	.+30     	; 0xe9c <__ultoa_invert+0x86>
 e7e:	c9 f7       	brne	.-14     	; 0xe72 <__ultoa_invert+0x5c>
 e80:	f6 cf       	rjmp	.-20     	; 0xe6e <__ultoa_invert+0x58>
 e82:	46 2f       	mov	r20, r22
 e84:	4f 70       	andi	r20, 0x0F	; 15
 e86:	40 5d       	subi	r20, 0xD0	; 208
 e88:	4a 33       	cpi	r20, 0x3A	; 58
 e8a:	18 f0       	brcs	.+6      	; 0xe92 <__ultoa_invert+0x7c>
 e8c:	49 5d       	subi	r20, 0xD9	; 217
 e8e:	31 fd       	sbrc	r19, 1
 e90:	40 52       	subi	r20, 0x20	; 32
 e92:	41 93       	st	Z+, r20
 e94:	02 d0       	rcall	.+4      	; 0xe9a <__ultoa_invert+0x84>
 e96:	a9 f7       	brne	.-22     	; 0xe82 <__ultoa_invert+0x6c>
 e98:	ea cf       	rjmp	.-44     	; 0xe6e <__ultoa_invert+0x58>
 e9a:	b4 e0       	ldi	r27, 0x04	; 4
 e9c:	a6 95       	lsr	r26
 e9e:	97 95       	ror	r25
 ea0:	87 95       	ror	r24
 ea2:	77 95       	ror	r23
 ea4:	67 95       	ror	r22
 ea6:	ba 95       	dec	r27
 ea8:	c9 f7       	brne	.-14     	; 0xe9c <__ultoa_invert+0x86>
 eaa:	00 97       	sbiw	r24, 0x00	; 0
 eac:	61 05       	cpc	r22, r1
 eae:	71 05       	cpc	r23, r1
 eb0:	08 95       	ret
 eb2:	9b 01       	movw	r18, r22
 eb4:	ac 01       	movw	r20, r24
 eb6:	0a 2e       	mov	r0, r26
 eb8:	06 94       	lsr	r0
 eba:	57 95       	ror	r21
 ebc:	47 95       	ror	r20
 ebe:	37 95       	ror	r19
 ec0:	27 95       	ror	r18
 ec2:	ba 95       	dec	r27
 ec4:	c9 f7       	brne	.-14     	; 0xeb8 <__ultoa_invert+0xa2>
 ec6:	62 0f       	add	r22, r18
 ec8:	73 1f       	adc	r23, r19
 eca:	84 1f       	adc	r24, r20
 ecc:	95 1f       	adc	r25, r21
 ece:	a0 1d       	adc	r26, r0
 ed0:	08 95       	ret

00000ed2 <__prologue_saves__>:
 ed2:	2f 92       	push	r2
 ed4:	3f 92       	push	r3
 ed6:	4f 92       	push	r4
 ed8:	5f 92       	push	r5
 eda:	6f 92       	push	r6
 edc:	7f 92       	push	r7
 ede:	8f 92       	push	r8
 ee0:	9f 92       	push	r9
 ee2:	af 92       	push	r10
 ee4:	bf 92       	push	r11
 ee6:	cf 92       	push	r12
 ee8:	df 92       	push	r13
 eea:	ef 92       	push	r14
 eec:	ff 92       	push	r15
 eee:	0f 93       	push	r16
 ef0:	1f 93       	push	r17
 ef2:	cf 93       	push	r28
 ef4:	df 93       	push	r29
 ef6:	cd b7       	in	r28, 0x3d	; 61
 ef8:	de b7       	in	r29, 0x3e	; 62
 efa:	ca 1b       	sub	r28, r26
 efc:	db 0b       	sbc	r29, r27
 efe:	0f b6       	in	r0, 0x3f	; 63
 f00:	f8 94       	cli
 f02:	de bf       	out	0x3e, r29	; 62
 f04:	0f be       	out	0x3f, r0	; 63
 f06:	cd bf       	out	0x3d, r28	; 61
 f08:	09 94       	ijmp

00000f0a <__epilogue_restores__>:
 f0a:	2a 88       	ldd	r2, Y+18	; 0x12
 f0c:	39 88       	ldd	r3, Y+17	; 0x11
 f0e:	48 88       	ldd	r4, Y+16	; 0x10
 f10:	5f 84       	ldd	r5, Y+15	; 0x0f
 f12:	6e 84       	ldd	r6, Y+14	; 0x0e
 f14:	7d 84       	ldd	r7, Y+13	; 0x0d
 f16:	8c 84       	ldd	r8, Y+12	; 0x0c
 f18:	9b 84       	ldd	r9, Y+11	; 0x0b
 f1a:	aa 84       	ldd	r10, Y+10	; 0x0a
 f1c:	b9 84       	ldd	r11, Y+9	; 0x09
 f1e:	c8 84       	ldd	r12, Y+8	; 0x08
 f20:	df 80       	ldd	r13, Y+7	; 0x07
 f22:	ee 80       	ldd	r14, Y+6	; 0x06
 f24:	fd 80       	ldd	r15, Y+5	; 0x05
 f26:	0c 81       	ldd	r16, Y+4	; 0x04
 f28:	1b 81       	ldd	r17, Y+3	; 0x03
 f2a:	aa 81       	ldd	r26, Y+2	; 0x02
 f2c:	b9 81       	ldd	r27, Y+1	; 0x01
 f2e:	ce 0f       	add	r28, r30
 f30:	d1 1d       	adc	r29, r1
 f32:	0f b6       	in	r0, 0x3f	; 63
 f34:	f8 94       	cli
 f36:	de bf       	out	0x3e, r29	; 62
 f38:	0f be       	out	0x3f, r0	; 63
 f3a:	cd bf       	out	0x3d, r28	; 61
 f3c:	ed 01       	movw	r28, r26
 f3e:	08 95       	ret

00000f40 <_exit>:
 f40:	f8 94       	cli

00000f42 <__stop_program>:
 f42:	ff cf       	rjmp	.-2      	; 0xf42 <__stop_program>
