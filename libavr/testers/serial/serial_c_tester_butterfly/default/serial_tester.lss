
serial_tester.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000024e  00800100  0000104e  000010e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000104e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d9  0080034e  0080034e  00001330  2**0
                  ALLOC
  3 .debug_aranges 000004c0  00000000  00000000  00001330  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000141c  00000000  00000000  000017f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00004f4a  00000000  00000000  00002c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001e7c  00000000  00000000  00007b56  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000030d8  00000000  00000000  000099d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000570  00000000  00000000  0000caac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000f54  00000000  00000000  0000d01c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000008ec  00000000  00000000  0000df70  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
       4:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
       8:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
       c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      10:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      14:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      1c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      24:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      28:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      2c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      30:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      34:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__vector_13>
      38:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <__vector_14>
      3c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      40:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      44:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      48:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      4c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      50:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      54:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      58:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>

0000005c <__ctors_end>:
      5c:	11 24       	eor	r1, r1
      5e:	1f be       	out	0x3f, r1	; 63
      60:	cf ef       	ldi	r28, 0xFF	; 255
      62:	d4 e0       	ldi	r29, 0x04	; 4
      64:	de bf       	out	0x3e, r29	; 62
      66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
      68:	13 e0       	ldi	r17, 0x03	; 3
      6a:	a0 e0       	ldi	r26, 0x00	; 0
      6c:	b1 e0       	ldi	r27, 0x01	; 1
      6e:	ee e4       	ldi	r30, 0x4E	; 78
      70:	f0 e1       	ldi	r31, 0x10	; 16
      72:	02 c0       	rjmp	.+4      	; 0x78 <.do_copy_data_start>

00000074 <.do_copy_data_loop>:
      74:	05 90       	lpm	r0, Z+
      76:	0d 92       	st	X+, r0

00000078 <.do_copy_data_start>:
      78:	ae 34       	cpi	r26, 0x4E	; 78
      7a:	b1 07       	cpc	r27, r17
      7c:	d9 f7       	brne	.-10     	; 0x74 <.do_copy_data_loop>

0000007e <__do_clear_bss>:
      7e:	14 e0       	ldi	r17, 0x04	; 4
      80:	ae e4       	ldi	r26, 0x4E	; 78
      82:	b3 e0       	ldi	r27, 0x03	; 3
      84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
      86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
      88:	a7 32       	cpi	r26, 0x27	; 39
      8a:	b1 07       	cpc	r27, r17
      8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
      8e:	0e 94 b5 00 	call	0x16a	; 0x16a <main>
      92:	0c 94 25 08 	jmp	0x104a	; 0x104a <_exit>

00000096 <__bad_interrupt>:
      96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <OSCCAL_calibration>:
{
    unsigned char calibrate = 0;//FALSE;
    int temp;
    unsigned char tempL;

    CLKPR = (1<<CLKPCE);        /// set Clock Prescaler Change Enable
      9a:	80 e8       	ldi	r24, 0x80	; 128
      9c:	80 93 61 00 	sts	0x0061, r24
    /// set prescaler = 8, Inter RC 8Mhz / 8 = 1Mhz
    CLKPR = (1<<CLKPS1) | (1<<CLKPS0);
      a0:	83 e0       	ldi	r24, 0x03	; 3
      a2:	80 93 61 00 	sts	0x0061, r24
    
    TIMSK2 = 0;             ///disable OCIE2A and TOIE2
      a6:	10 92 70 00 	sts	0x0070, r1

    ASSR = (1<<AS2);        ///select asynchronous operation of timer2 (32,768kHz)
      aa:	88 e0       	ldi	r24, 0x08	; 8
      ac:	80 93 b6 00 	sts	0x00B6, r24
    
    OCR2A = 200;            /// set timer2 compare value 
      b0:	88 ec       	ldi	r24, 0xC8	; 200
      b2:	80 93 b3 00 	sts	0x00B3, r24

    TIMSK0 = 0;             /// delete any interrupt sources
      b6:	10 92 6e 00 	sts	0x006E, r1
        
    TCCR1B = (1<<CS10);     /// start timer1 with no prescaling
      ba:	81 e0       	ldi	r24, 0x01	; 1
      bc:	80 93 81 00 	sts	0x0081, r24
    TCCR2A = (1<<CS20);     /// start timer2 with no prescaling
      c0:	80 93 b0 00 	sts	0x00B0, r24

    while((ASSR & 0x01) | (ASSR & 0x04)); ///wait for TCN2UB and TCR2UB to be cleared
      c4:	20 91 b6 00 	lds	r18, 0x00B6
      c8:	80 91 b6 00 	lds	r24, 0x00B6
      cc:	90 e0       	ldi	r25, 0x00	; 0
      ce:	84 70       	andi	r24, 0x04	; 4
      d0:	90 70       	andi	r25, 0x00	; 0
      d2:	30 e0       	ldi	r19, 0x00	; 0
      d4:	21 70       	andi	r18, 0x01	; 1
      d6:	30 70       	andi	r19, 0x00	; 0
      d8:	82 2b       	or	r24, r18
      da:	93 2b       	or	r25, r19
      dc:	89 2b       	or	r24, r25
      de:	91 f7       	brne	.-28     	; 0xc4 <OSCCAL_calibration+0x2a>
    
    while(!calibrate)
    {
        cli(); /// mt __disable_interrupt();  // disable global interrupt
        
        TIFR1 = 0xFF;   /// delete TIFR1 flags
      e0:	4f ef       	ldi	r20, 0xFF	; 255
    
        if (temp > 6250)
        {
            OSCCAL--;   /// the internRC oscillator runs to fast, decrease the OSCCAL
        }
        else if (temp < 6120)
      e2:	51 e0       	ldi	r21, 0x01	; 1

    Delay(1000);    /// wait for external crystal to stabilise
    
    while(!calibrate)
    {
        cli(); /// mt __disable_interrupt();  // disable global interrupt
      e4:	f8 94       	cli
        
        TIFR1 = 0xFF;   /// delete TIFR1 flags
      e6:	46 bb       	out	0x16, r20	; 22
        TIFR2 = 0xFF;   /// delete TIFR2 flags
      e8:	47 bb       	out	0x17, r20	; 23
        
        TCNT1H = 0;     /// clear timer1 counter
      ea:	10 92 85 00 	sts	0x0085, r1
        TCNT1L = 0;
      ee:	10 92 84 00 	sts	0x0084, r1
        TCNT2 = 0;      /// clear timer2 counter
      f2:	10 92 b2 00 	sts	0x00B2, r1
           
	while ( !(TIFR2 & (1<<OCF2A)) ); // while ( !(TIFR2 && (1<<OCF2A)) );   // wait for timer2 compareflag
      f6:	b9 9b       	sbis	0x17, 1	; 23
      f8:	fe cf       	rjmp	.-4      	; 0xf6 <OSCCAL_calibration+0x5c>
    
        TCCR1B = 0; /// stop timer1
      fa:	10 92 81 00 	sts	0x0081, r1

        sei(); /// __enable_interrupt();  // enable global interrupt
      fe:	78 94       	sei
    
        if ( (TIFR1 & (1<<TOV1)) ) // if ( (TIFR1 && (1<<TOV1)) )
     100:	b0 99       	sbic	0x16, 0	; 22
     102:	17 c0       	rjmp	.+46     	; 0x132 <OSCCAL_calibration+0x98>
        {
            temp = 0xFFFF;      /// if timer1 overflows, set the temp to 0xFFFF
        }
        else
        {   /// read out the timer1 counter value
            tempL = TCNT1L;
     104:	90 91 84 00 	lds	r25, 0x0084
            temp = TCNT1H;
     108:	80 91 85 00 	lds	r24, 0x0085
            temp = (temp << 8);
     10c:	38 2f       	mov	r19, r24
     10e:	20 e0       	ldi	r18, 0x00	; 0
            temp += tempL;
     110:	b9 01       	movw	r22, r18
     112:	69 0f       	add	r22, r25
     114:	71 1d       	adc	r23, r1
     116:	cb 01       	movw	r24, r22
        }
    
        if (temp > 6250)
     118:	78 e1       	ldi	r23, 0x18	; 24
     11a:	8b 36       	cpi	r24, 0x6B	; 107
     11c:	97 07       	cpc	r25, r23
     11e:	24 f0       	brlt	.+8      	; 0x128 <OSCCAL_calibration+0x8e>
        {
            OSCCAL--;   /// the internRC oscillator runs to fast, decrease the OSCCAL
     120:	80 91 66 00 	lds	r24, 0x0066
     124:	81 50       	subi	r24, 0x01	; 1
     126:	08 c0       	rjmp	.+16     	; 0x138 <OSCCAL_calibration+0x9e>
        }
        else if (temp < 6120)
     128:	88 5e       	subi	r24, 0xE8	; 232
     12a:	97 41       	sbci	r25, 0x17	; 23
     12c:	14 f0       	brlt	.+4      	; 0x132 <OSCCAL_calibration+0x98>
     12e:	81 e0       	ldi	r24, 0x01	; 1
     130:	06 c0       	rjmp	.+12     	; 0x13e <OSCCAL_calibration+0xa4>
        {
            OSCCAL++;   /// the internRC oscillator runs to slow, increase the OSCCAL
     132:	80 91 66 00 	lds	r24, 0x0066
     136:	8f 5f       	subi	r24, 0xFF	; 255
     138:	80 93 66 00 	sts	0x0066, r24
     13c:	80 e0       	ldi	r24, 0x00	; 0
        }
        else
            calibrate = 1;///TRUE;   // the interRC is correct
    
        TCCR1B = (1<<CS10); /// start timer1
     13e:	50 93 81 00 	sts	0x0081, r21

    while((ASSR & 0x01) | (ASSR & 0x04)); ///wait for TCN2UB and TCR2UB to be cleared

    Delay(1000);    /// wait for external crystal to stabilise
    
    while(!calibrate)
     142:	88 23       	and	r24, r24
     144:	79 f2       	breq	.-98     	; 0xe4 <OSCCAL_calibration+0x4a>
        else
            calibrate = 1;///TRUE;   // the interRC is correct
    
        TCCR1B = (1<<CS10); /// start timer1
    }
}
     146:	08 95       	ret

00000148 <butterfly_init>:
}

void butterfly_init(void)
{

    OSCCAL_calibration();   /// Calibrate the OSCCAL byte
     148:	0e 94 4d 00 	call	0x9a	; 0x9a <OSCCAL_calibration>

    ACSR = (1<<ACD);
     14c:	90 e8       	ldi	r25, 0x80	; 128
     14e:	90 bf       	out	0x30, r25	; 48

    /// Disable Digital input on PF0-2 (power save)
    DIDR1 = (7<<ADC0D);
     150:	87 e0       	ldi	r24, 0x07	; 7
     152:	80 93 7f 00 	sts	0x007F, r24

    PORTB = 0xFF;       /// Enable pullups on Ports B and E
     156:	8f ef       	ldi	r24, 0xFF	; 255
     158:	85 b9       	out	0x05, r24	; 5
    PORTE = 0xFF;
     15a:	8e b9       	out	0x0e, r24	; 14

// TODO 10/23/10
//    sei(); /// mt __enable_interrupt();
    
    /// mt PCMSK1 = (1<<PORTB6) | (1<<PORTB4);
	PCMSK1 = (1<<PINB6) | (1<<PINB4);       // set pin-change interrupt mask
     15c:	80 e5       	ldi	r24, 0x50	; 80
     15e:	80 93 6c 00 	sts	0x006C, r24
  	EIFR   = (1<<PCIF1);                    // clear external intterupt flag 1
     162:	9c bb       	out	0x1c, r25	; 28
	EIMSK  = (1<<PCIE1);   
     164:	9d bb       	out	0x1d, r25	; 29

}
     166:	08 95       	ret

00000168 <Delay>:
{
    unsigned char i; // mt int i;
    
    while (millisec--)
        for (i=0; i<125; i++);
}
     168:	08 95       	ret

0000016a <main>:


#include "c:\avrtoolbox\libavr\source\elementary\serial\serial.h" //"libserial\serial.h"

int main(void)
{
     16a:	bf 92       	push	r11
     16c:	cf 92       	push	r12
     16e:	df 92       	push	r13
     170:	ef 92       	push	r14
     172:	ff 92       	push	r15
     174:	0f 93       	push	r16
     176:	1f 93       	push	r17
     178:	df 93       	push	r29
     17a:	cf 93       	push	r28
     17c:	cd b7       	in	r28, 0x3d	; 61
     17e:	de b7       	in	r29, 0x3e	; 62
     180:	c5 54       	subi	r28, 0x45	; 69
     182:	d0 40       	sbci	r29, 0x00	; 0
     184:	0f b6       	in	r0, 0x3f	; 63
     186:	f8 94       	cli
     188:	de bf       	out	0x3e, r29	; 62
     18a:	0f be       	out	0x3f, r0	; 63
     18c:	cd bf       	out	0x3d, r28	; 61
	uint8_t count = 0;
	uint8_t buf[64];

	//#if defined(BUTTERFLY)
	butterfly_init();
     18e:	0e 94 a4 00 	call	0x148	; 0x148 <butterfly_init>
	//#endif

	// NOTE: If BUTTERFLY is defined then the serial_being() is bypassed
	// and the usart is set to 19200 regardless of what this says
	serial_begin(19200);
     192:	60 e0       	ldi	r22, 0x00	; 0
     194:	7b e4       	ldi	r23, 0x4B	; 75
     196:	80 e0       	ldi	r24, 0x00	; 0
     198:	90 e0       	ldi	r25, 0x00	; 0
     19a:	0e 94 99 01 	call	0x332	; 0x332 <serial_begin>

	serial_write(buf,6);
	// Insert a delay to keep this from stepping on the next statement
	delay(10);
*/
	serial_out("Hello Butterfly 002\n");//,0);
     19e:	00 d0       	rcall	.+0      	; 0x1a0 <main+0x36>
     1a0:	80 e0       	ldi	r24, 0x00	; 0
     1a2:	91 e0       	ldi	r25, 0x01	; 1
     1a4:	ad b7       	in	r26, 0x3d	; 61
     1a6:	be b7       	in	r27, 0x3e	; 62
     1a8:	12 96       	adiw	r26, 0x02	; 2
     1aa:	9c 93       	st	X, r25
     1ac:	8e 93       	st	-X, r24
     1ae:	11 97       	sbiw	r26, 0x01	; 1
     1b0:	0e 94 ff 04 	call	0x9fe	; 0x9fe <serial_out>

	// Send a bunch of stuff to see if it poops out
	serial_out("serial_out The quick brown fox jumped over the lazy dog.");
     1b4:	85 e1       	ldi	r24, 0x15	; 21
     1b6:	91 e0       	ldi	r25, 0x01	; 1
     1b8:	ed b7       	in	r30, 0x3d	; 61
     1ba:	fe b7       	in	r31, 0x3e	; 62
     1bc:	92 83       	std	Z+2, r25	; 0x02
     1be:	81 83       	std	Z+1, r24	; 0x01
     1c0:	0e 94 ff 04 	call	0x9fe	; 0x9fe <serial_out>

	serial_out("serial_out The quick brown fox jumped over the lazy dog.\n");
     1c4:	8e e4       	ldi	r24, 0x4E	; 78
     1c6:	91 e0       	ldi	r25, 0x01	; 1
     1c8:	ad b7       	in	r26, 0x3d	; 61
     1ca:	be b7       	in	r27, 0x3e	; 62
     1cc:	12 96       	adiw	r26, 0x02	; 2
     1ce:	9c 93       	st	X, r25
     1d0:	8e 93       	st	-X, r24
     1d2:	11 97       	sbiw	r26, 0x01	; 1
     1d4:	0e 94 ff 04 	call	0x9fe	; 0x9fe <serial_out>
	serial_out("1serial_out The quick brown fox jumped over the lazy dog.\n");
     1d8:	88 e8       	ldi	r24, 0x88	; 136
     1da:	91 e0       	ldi	r25, 0x01	; 1
     1dc:	ed b7       	in	r30, 0x3d	; 61
     1de:	fe b7       	in	r31, 0x3e	; 62
     1e0:	92 83       	std	Z+2, r25	; 0x02
     1e2:	81 83       	std	Z+1, r24	; 0x01
     1e4:	0e 94 ff 04 	call	0x9fe	; 0x9fe <serial_out>
	serial_out("2serial_out The quick brown fox jumped over the lazy dog.\n");
     1e8:	83 ec       	ldi	r24, 0xC3	; 195
     1ea:	91 e0       	ldi	r25, 0x01	; 1
     1ec:	ad b7       	in	r26, 0x3d	; 61
     1ee:	be b7       	in	r27, 0x3e	; 62
     1f0:	12 96       	adiw	r26, 0x02	; 2
     1f2:	9c 93       	st	X, r25
     1f4:	8e 93       	st	-X, r24
     1f6:	11 97       	sbiw	r26, 0x01	; 1
     1f8:	0e 94 ff 04 	call	0x9fe	; 0x9fe <serial_out>
	serial_out("3serial_out The quick brown fox jumped over the lazy dog.\n");
     1fc:	8e ef       	ldi	r24, 0xFE	; 254
     1fe:	91 e0       	ldi	r25, 0x01	; 1
     200:	ed b7       	in	r30, 0x3d	; 61
     202:	fe b7       	in	r31, 0x3e	; 62
     204:	92 83       	std	Z+2, r25	; 0x02
     206:	81 83       	std	Z+1, r24	; 0x01
     208:	0e 94 ff 04 	call	0x9fe	; 0x9fe <serial_out>
	serial_out("4serial_out The quick brown fox jumped over the lazy dog.\n");
     20c:	89 e3       	ldi	r24, 0x39	; 57
     20e:	92 e0       	ldi	r25, 0x02	; 2
     210:	ad b7       	in	r26, 0x3d	; 61
     212:	be b7       	in	r27, 0x3e	; 62
     214:	12 96       	adiw	r26, 0x02	; 2
     216:	9c 93       	st	X, r25
     218:	8e 93       	st	-X, r24
     21a:	11 97       	sbiw	r26, 0x01	; 1
     21c:	0e 94 ff 04 	call	0x9fe	; 0x9fe <serial_out>
	serial_out("5serial_out The quick brown fox jumped over the lazy dog.\n");
     220:	84 e7       	ldi	r24, 0x74	; 116
     222:	92 e0       	ldi	r25, 0x02	; 2
     224:	ed b7       	in	r30, 0x3d	; 61
     226:	fe b7       	in	r31, 0x3e	; 62
     228:	92 83       	std	Z+2, r25	; 0x02
     22a:	81 83       	std	Z+1, r24	; 0x01
     22c:	0e 94 ff 04 	call	0x9fe	; 0x9fe <serial_out>
/**/
	char c = 'A';
	uint8_t x = 0x22;
	uint16_t X = 0x1122;

	serial_out("Test character: %c\n", c);
     230:	00 d0       	rcall	.+0      	; 0x232 <main+0xc8>
     232:	8f ea       	ldi	r24, 0xAF	; 175
     234:	92 e0       	ldi	r25, 0x02	; 2
     236:	ad b7       	in	r26, 0x3d	; 61
     238:	be b7       	in	r27, 0x3e	; 62
     23a:	12 96       	adiw	r26, 0x02	; 2
     23c:	9c 93       	st	X, r25
     23e:	8e 93       	st	-X, r24
     240:	11 97       	sbiw	r26, 0x01	; 1
     242:	81 e4       	ldi	r24, 0x41	; 65
     244:	90 e0       	ldi	r25, 0x00	; 0
     246:	14 96       	adiw	r26, 0x04	; 4
     248:	9c 93       	st	X, r25
     24a:	8e 93       	st	-X, r24
     24c:	13 97       	sbiw	r26, 0x03	; 3
     24e:	0e 94 ff 04 	call	0x9fe	; 0x9fe <serial_out>

	serial_out("Test hexadecimal integer: %x\n", x);
     252:	83 ec       	ldi	r24, 0xC3	; 195
     254:	92 e0       	ldi	r25, 0x02	; 2
     256:	ed b7       	in	r30, 0x3d	; 61
     258:	fe b7       	in	r31, 0x3e	; 62
     25a:	92 83       	std	Z+2, r25	; 0x02
     25c:	81 83       	std	Z+1, r24	; 0x01
     25e:	82 e2       	ldi	r24, 0x22	; 34
     260:	90 e0       	ldi	r25, 0x00	; 0
     262:	94 83       	std	Z+4, r25	; 0x04
     264:	83 83       	std	Z+3, r24	; 0x03
     266:	0e 94 ff 04 	call	0x9fe	; 0x9fe <serial_out>

	serial_out("Test 16-bit hexadecimal integer: %x\n", X);
     26a:	81 ee       	ldi	r24, 0xE1	; 225
     26c:	92 e0       	ldi	r25, 0x02	; 2
     26e:	ad b7       	in	r26, 0x3d	; 61
     270:	be b7       	in	r27, 0x3e	; 62
     272:	12 96       	adiw	r26, 0x02	; 2
     274:	9c 93       	st	X, r25
     276:	8e 93       	st	-X, r24
     278:	11 97       	sbiw	r26, 0x01	; 1
     27a:	82 e2       	ldi	r24, 0x22	; 34
     27c:	91 e1       	ldi	r25, 0x11	; 17
     27e:	14 96       	adiw	r26, 0x04	; 4
     280:	9c 93       	st	X, r25
     282:	8e 93       	st	-X, r24
     284:	13 97       	sbiw	r26, 0x03	; 3
     286:	0e 94 ff 04 	call	0x9fe	; 0x9fe <serial_out>

	uint8_t  my_day = 21;
	uint8_t my_month[] = {"July"};
     28a:	de 01       	movw	r26, r28
     28c:	11 96       	adiw	r26, 0x01	; 1
     28e:	eb e3       	ldi	r30, 0x3B	; 59
     290:	f3 e0       	ldi	r31, 0x03	; 3
     292:	85 e0       	ldi	r24, 0x05	; 5
     294:	01 90       	ld	r0, Z+
     296:	0d 92       	st	X+, r0
     298:	81 50       	subi	r24, 0x01	; 1
     29a:	e1 f7       	brne	.-8      	; 0x294 <main+0x12a>
	uint16_t my_year = 1980;
	
	serial_out("Your date of birth is:\nDay: %d \nMonth: %s \nYear: %d.", my_day, my_month, my_year); 
     29c:	00 d0       	rcall	.+0      	; 0x29e <main+0x134>
     29e:	00 d0       	rcall	.+0      	; 0x2a0 <main+0x136>
     2a0:	ed b7       	in	r30, 0x3d	; 61
     2a2:	fe b7       	in	r31, 0x3e	; 62
     2a4:	31 96       	adiw	r30, 0x01	; 1
     2a6:	86 e0       	ldi	r24, 0x06	; 6
     2a8:	93 e0       	ldi	r25, 0x03	; 3
     2aa:	ad b7       	in	r26, 0x3d	; 61
     2ac:	be b7       	in	r27, 0x3e	; 62
     2ae:	12 96       	adiw	r26, 0x02	; 2
     2b0:	9c 93       	st	X, r25
     2b2:	8e 93       	st	-X, r24
     2b4:	11 97       	sbiw	r26, 0x01	; 1
     2b6:	85 e1       	ldi	r24, 0x15	; 21
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	93 83       	std	Z+3, r25	; 0x03
     2bc:	82 83       	std	Z+2, r24	; 0x02
     2be:	ce 01       	movw	r24, r28
     2c0:	01 96       	adiw	r24, 0x01	; 1
     2c2:	95 83       	std	Z+5, r25	; 0x05
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	8c eb       	ldi	r24, 0xBC	; 188
     2c8:	97 e0       	ldi	r25, 0x07	; 7
     2ca:	97 83       	std	Z+7, r25	; 0x07
     2cc:	86 83       	std	Z+6, r24	; 0x06
     2ce:	0e 94 ff 04 	call	0x9fe	; 0x9fe <serial_out>
     2d2:	ed b7       	in	r30, 0x3d	; 61
     2d4:	fe b7       	in	r31, 0x3e	; 62
     2d6:	38 96       	adiw	r30, 0x08	; 8
     2d8:	0f b6       	in	r0, 0x3f	; 63
     2da:	f8 94       	cli
     2dc:	fe bf       	out	0x3e, r31	; 62
     2de:	0f be       	out	0x3f, r0	; 63
     2e0:	ed bf       	out	0x3d, r30	; 61
		delay(1000);
		usart0_transmit_buffer_insert('#');	

		if(serial_available())
		{
			count = usart0_receive_buffer_inuse_count();
     2e2:	86 e0       	ldi	r24, 0x06	; 6
     2e4:	c8 2e       	mov	r12, r24
     2e6:	d1 2c       	mov	r13, r1
     2e8:	cc 0e       	add	r12, r28
     2ea:	dd 1e       	adc	r13, r29
	
	serial_out("Your date of birth is:\nDay: %d \nMonth: %s \nYear: %d.", my_day, my_month, my_year); 
	
	while(1)
	{
		delay(1000);
     2ec:	88 ee       	ldi	r24, 0xE8	; 232
     2ee:	93 e0       	ldi	r25, 0x03	; 3
     2f0:	0e 94 da 04 	call	0x9b4	; 0x9b4 <delay>
		usart0_transmit_buffer_insert('#');	
     2f4:	83 e2       	ldi	r24, 0x23	; 35
     2f6:	0e 94 9c 04 	call	0x938	; 0x938 <usart0_transmit_buffer_insert>

		if(serial_available())
     2fa:	0e 94 96 01 	call	0x32c	; 0x32c <serial_available>
     2fe:	88 23       	and	r24, r24
     300:	a9 f3       	breq	.-22     	; 0x2ec <main+0x182>
		{
			count = usart0_receive_buffer_inuse_count();
     302:	0e 94 6f 04 	call	0x8de	; 0x8de <usart0_receive_buffer_inuse_count>
     306:	b8 2e       	mov	r11, r24
     308:	86 01       	movw	r16, r12

			for(int i = 0 ; i < count; i++)
     30a:	76 01       	movw	r14, r12
     30c:	e8 0e       	add	r14, r24
     30e:	f1 1c       	adc	r15, r1
     310:	05 c0       	rjmp	.+10     	; 0x31c <main+0x1b2>
			{
				buf[i] = serial_in();
     312:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <serial_in>
     316:	d8 01       	movw	r26, r16
     318:	8d 93       	st	X+, r24
     31a:	8d 01       	movw	r16, r26

		if(serial_available())
		{
			count = usart0_receive_buffer_inuse_count();

			for(int i = 0 ; i < count; i++)
     31c:	0e 15       	cp	r16, r14
     31e:	1f 05       	cpc	r17, r15
     320:	c1 f7       	brne	.-16     	; 0x312 <main+0x1a8>
			{
				buf[i] = serial_in();
				//usart0_transmit_buffer_insert(serial_read());//usart0_receive_buffer_remove());
			}
			
			serial_write(buf,count);
     322:	c6 01       	movw	r24, r12
     324:	6b 2d       	mov	r22, r11
     326:	0e 94 21 05 	call	0xa42	; 0xa42 <serial_write>
     32a:	e0 cf       	rjmp	.-64     	; 0x2ec <main+0x182>

0000032c <serial_available>:
#include "serial.h"

uint8_t serial_available(void)
{
	return usart0_receive_buffer_inuse_count();	
     32c:	0e 94 6f 04 	call	0x8de	; 0x8de <usart0_receive_buffer_inuse_count>
}
     330:	08 95       	ret

00000332 <serial_begin>:
#include "serial.h"


void serial_begin(uint32_t baud)
{
     332:	8f 92       	push	r8
     334:	af 92       	push	r10
     336:	cf 92       	push	r12
     338:	ef 92       	push	r14
     33a:	0f 93       	push	r16
	cli();
     33c:	f8 94       	cli
	uint8_t databits = 8;
	uint8_t stopbits = 1;
	usart_parity_t parity = parity_none;
	usart_flow_control_t flow_control = flow_none;

	usart0_init(baud, F_CPU, mode,  databits, stopbits, parity, flow_control);
     33e:	20 e8       	ldi	r18, 0x80	; 128
     340:	34 e8       	ldi	r19, 0x84	; 132
     342:	4e e1       	ldi	r20, 0x1E	; 30
     344:	50 e0       	ldi	r21, 0x00	; 0
     346:	00 e0       	ldi	r16, 0x00	; 0
     348:	e8 e0       	ldi	r30, 0x08	; 8
     34a:	ee 2e       	mov	r14, r30
     34c:	cc 24       	eor	r12, r12
     34e:	c3 94       	inc	r12
     350:	aa 24       	eor	r10, r10
     352:	88 24       	eor	r8, r8
     354:	0e 94 3c 03 	call	0x678	; 0x678 <usart0_init>

	sei();
     358:	78 94       	sei

}
     35a:	0f 91       	pop	r16
     35c:	ef 90       	pop	r14
     35e:	cf 90       	pop	r12
     360:	af 90       	pop	r10
     362:	8f 90       	pop	r8
     364:	08 95       	ret

00000366 <serial_end>:
#include "serial.h"

void serial_end(void)
{
	usart0_uninit();
     366:	0e 94 c2 04 	call	0x984	; 0x984 <usart0_uninit>
}
     36a:	08 95       	ret

0000036c <serial_flush>:
#include "serial.h"

void serial_flush(void)
{
	cli();
     36c:	f8 94       	cli
	usart0_receive_buffer_clear();
     36e:	0e 94 5f 04 	call	0x8be	; 0x8be <usart0_receive_buffer_clear>
	usart0_transmit_buffer_clear();
     372:	0e 94 90 04 	call	0x920	; 0x920 <usart0_transmit_buffer_clear>
	sei();
     376:	78 94       	sei

}
     378:	08 95       	ret

0000037a <ring_above_highmark>:
#include <stdint.h>
#include "ring.h"

/** High mark is set once 3/4 of ring buffer is determined. */
bool ring_above_highmark(ring_t *r)
{
     37a:	fc 01       	movw	r30, r24
     37c:	30 e0       	ldi	r19, 0x00	; 0
     37e:	82 81       	ldd	r24, Z+2	; 0x02
     380:	23 e0       	ldi	r18, 0x03	; 3
     382:	82 9f       	mul	r24, r18
     384:	c0 01       	movw	r24, r0
     386:	11 24       	eor	r1, r1
     388:	96 95       	lsr	r25
     38a:	87 95       	ror	r24
     38c:	96 95       	lsr	r25
     38e:	87 95       	ror	r24
     390:	27 81       	ldd	r18, Z+7	; 0x07
     392:	28 17       	cp	r18, r24
     394:	08 f0       	brcs	.+2      	; 0x398 <ring_above_highmark+0x1e>
     396:	31 e0       	ldi	r19, 0x01	; 1
    // Highmark Buffer size equation
    return(r->count >= (uint8_t)(((uint16_t)(r->size) * 3)/4));
}
     398:	83 2f       	mov	r24, r19
     39a:	08 95       	ret

0000039c <ring_add>:
	\param data byte to add
	\return boolean result of attempt to add byte
	
*/
bool ring_add(ring_t *r, uint8_t data)
{
     39c:	dc 01       	movw	r26, r24
    // Get the next head index.
    ring_index_t temp_head = r->head_index + 1;
     39e:	13 96       	adiw	r26, 0x03	; 3
     3a0:	4d 91       	ld	r20, X+
     3a2:	5c 91       	ld	r21, X
     3a4:	14 97       	sbiw	r26, 0x04	; 4
    if(r->head_index >= r->size - 1)
     3a6:	12 96       	adiw	r26, 0x02	; 2
     3a8:	8c 91       	ld	r24, X
     3aa:	12 97       	sbiw	r26, 0x02	; 2
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	01 97       	sbiw	r24, 0x01	; 1
     3b0:	48 17       	cp	r20, r24
     3b2:	59 07       	cpc	r21, r25
     3b4:	18 f0       	brcs	.+6      	; 0x3bc <ring_add+0x20>
     3b6:	20 e0       	ldi	r18, 0x00	; 0
     3b8:	30 e0       	ldi	r19, 0x00	; 0
     3ba:	03 c0       	rjmp	.+6      	; 0x3c2 <ring_add+0x26>
	
*/
bool ring_add(ring_t *r, uint8_t data)
{
    // Get the next head index.
    ring_index_t temp_head = r->head_index + 1;
     3bc:	9a 01       	movw	r18, r20
     3be:	2f 5f       	subi	r18, 0xFF	; 255
     3c0:	3f 4f       	sbci	r19, 0xFF	; 255
    if(r->head_index >= r->size - 1)
    {
        temp_head = 0;
    }

    if(temp_head != r->tail_index)
     3c2:	15 96       	adiw	r26, 0x05	; 5
     3c4:	8d 91       	ld	r24, X+
     3c6:	9c 91       	ld	r25, X
     3c8:	16 97       	sbiw	r26, 0x06	; 6
     3ca:	28 17       	cp	r18, r24
     3cc:	39 07       	cpc	r19, r25
     3ce:	11 f4       	brne	.+4      	; 0x3d4 <ring_add+0x38>
     3d0:	80 e0       	ldi	r24, 0x00	; 0
     3d2:	08 95       	ret
    {
        r->buffer[r->head_index] = data;    // Buffer receives data
     3d4:	ed 91       	ld	r30, X+
     3d6:	fc 91       	ld	r31, X
     3d8:	11 97       	sbiw	r26, 0x01	; 1
     3da:	e4 0f       	add	r30, r20
     3dc:	f5 1f       	adc	r31, r21
     3de:	60 83       	st	Z, r22
        r->head_index = temp_head;
     3e0:	14 96       	adiw	r26, 0x04	; 4
     3e2:	3c 93       	st	X, r19
     3e4:	2e 93       	st	-X, r18
     3e6:	13 97       	sbiw	r26, 0x03	; 3
        r->count++;
     3e8:	17 96       	adiw	r26, 0x07	; 7
     3ea:	8c 91       	ld	r24, X
     3ec:	17 97       	sbiw	r26, 0x07	; 7
     3ee:	8f 5f       	subi	r24, 0xFF	; 255
     3f0:	17 96       	adiw	r26, 0x07	; 7
     3f2:	8c 93       	st	X, r24
     3f4:	81 e0       	ldi	r24, 0x01	; 1
        return(true);       // Return complete
    }

    return(false);          // Return incomplete
}
     3f6:	08 95       	ret

000003f8 <ring_below_lowmark>:

#include "ring.h"

/** Low mark is set once 1/4 of ring buffer is determined. */
bool ring_below_lowmark(ring_t *r)
{
     3f8:	fc 01       	movw	r30, r24
     3fa:	20 e0       	ldi	r18, 0x00	; 0
     3fc:	82 81       	ldd	r24, Z+2	; 0x02
     3fe:	86 95       	lsr	r24
     400:	86 95       	lsr	r24
     402:	97 81       	ldd	r25, Z+7	; 0x07
     404:	89 17       	cp	r24, r25
     406:	08 f0       	brcs	.+2      	; 0x40a <ring_below_lowmark+0x12>
     408:	21 e0       	ldi	r18, 0x01	; 1
    // Lowmark Buffer size equation
    return(r->count <= (r->size / 4));
}
     40a:	82 2f       	mov	r24, r18
     40c:	08 95       	ret

0000040e <ring_init>:
    
    \return boolean true if the ring buffer was initialized, false otherwise.
    todo: describe return value
*/
bool ring_init(ring_t *r, ring_buffer_t buffer, ring_size_t size)
{
     40e:	fc 01       	movw	r30, r24
    bool success = false;
    bool clear;
    if (size >= 2 && r != NULL && buffer != NULL)
     410:	42 30       	cpi	r20, 0x02	; 2
     412:	58 f0       	brcs	.+22     	; 0x42a <ring_init+0x1c>
     414:	00 97       	sbiw	r24, 0x00	; 0
     416:	49 f0       	breq	.+18     	; 0x42a <ring_init+0x1c>
     418:	61 15       	cp	r22, r1
     41a:	71 05       	cpc	r23, r1
     41c:	31 f0       	breq	.+12     	; 0x42a <ring_init+0x1c>
    {
        r->buffer = buffer;     // Set index pointers
     41e:	71 83       	std	Z+1, r23	; 0x01
     420:	60 83       	st	Z, r22
        r->size = size;
     422:	42 83       	std	Z+2, r20	; 0x02
        clear = ring_clear(r);  // Call ring_clear function
     424:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <ring_clear>
     428:	08 95       	ret
     42a:	80 e0       	ldi	r24, 0x00	; 0
        {
                success = true;
        }
    }
    return(success);
}
     42c:	08 95       	ret

0000042e <ring_peek>:
    \param count number of bytes to get.
    \return total bytes retrieved.
*/

uint8_t ring_peek(ring_t *r, uint8_t *buf, uint8_t count)
{
     42e:	cf 93       	push	r28
     430:	df 93       	push	r29
     432:	ec 01       	movw	r28, r24
    ring_index_t index;
    uint8_t total = 0;

    if (r != NULL && buf != NULL)
     434:	00 97       	sbiw	r24, 0x00	; 0
     436:	11 f1       	breq	.+68     	; 0x47c <ring_peek+0x4e>
     438:	61 15       	cp	r22, r1
     43a:	71 05       	cpc	r23, r1
     43c:	f9 f0       	breq	.+62     	; 0x47c <ring_peek+0x4e>
    {
        index = r->tail_index;
     43e:	2d 81       	ldd	r18, Y+5	; 0x05
     440:	3e 81       	ldd	r19, Y+6	; 0x06
     442:	db 01       	movw	r26, r22
     444:	11 c0       	rjmp	.+34     	; 0x468 <ring_peek+0x3a>
        // Compare the head index to the tail index
        while(count && index != r->head_index)
        {
            *buf++ = r->buffer[index++];    // Grab data requested and increment
     446:	e8 81       	ld	r30, Y
     448:	f9 81       	ldd	r31, Y+1	; 0x01
     44a:	e2 0f       	add	r30, r18
     44c:	f3 1f       	adc	r31, r19
     44e:	80 81       	ld	r24, Z
     450:	8c 93       	st	X, r24
     452:	2f 5f       	subi	r18, 0xFF	; 255
     454:	3f 4f       	sbci	r19, 0xFF	; 255
    
            if(index >= r->size)        // End of buffer determination
     456:	8a 81       	ldd	r24, Y+2	; 0x02
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	28 17       	cp	r18, r24
     45c:	39 07       	cpc	r19, r25
     45e:	10 f0       	brcs	.+4      	; 0x464 <ring_peek+0x36>
     460:	20 e0       	ldi	r18, 0x00	; 0
     462:	30 e0       	ldi	r19, 0x00	; 0
    {
        index = r->tail_index;
        // Compare the head index to the tail index
        while(count && index != r->head_index)
        {
            *buf++ = r->buffer[index++];    // Grab data requested and increment
     464:	11 96       	adiw	r26, 0x01	; 1
            if(index >= r->size)        // End of buffer determination
            {
                index = 0;
            }
    
            count--;
     466:	41 50       	subi	r20, 0x01	; 1
     468:	5a 2f       	mov	r21, r26
     46a:	56 1b       	sub	r21, r22

    if (r != NULL && buf != NULL)
    {
        index = r->tail_index;
        // Compare the head index to the tail index
        while(count && index != r->head_index)
     46c:	44 23       	and	r20, r20
     46e:	39 f0       	breq	.+14     	; 0x47e <ring_peek+0x50>
     470:	8b 81       	ldd	r24, Y+3	; 0x03
     472:	9c 81       	ldd	r25, Y+4	; 0x04
     474:	28 17       	cp	r18, r24
     476:	39 07       	cpc	r19, r25
     478:	31 f7       	brne	.-52     	; 0x446 <ring_peek+0x18>
     47a:	01 c0       	rjmp	.+2      	; 0x47e <ring_peek+0x50>
     47c:	50 e0       	ldi	r21, 0x00	; 0
            count--;
            total++;
        }
    }
    return(total);
}
     47e:	85 2f       	mov	r24, r21
     480:	df 91       	pop	r29
     482:	cf 91       	pop	r28
     484:	08 95       	ret

00000486 <ring_remove>:

#include <stdint.h>
#include "ring.h"

uint8_t ring_remove(ring_t *r)
{
     486:	dc 01       	movw	r26, r24
    uint8_t data = 0;

    // Compare the head index and the tail index
    if(r->head_index != r->tail_index)
     488:	15 96       	adiw	r26, 0x05	; 5
     48a:	2d 91       	ld	r18, X+
     48c:	3c 91       	ld	r19, X
     48e:	16 97       	sbiw	r26, 0x06	; 6
     490:	13 96       	adiw	r26, 0x03	; 3
     492:	8d 91       	ld	r24, X+
     494:	9c 91       	ld	r25, X
     496:	14 97       	sbiw	r26, 0x04	; 4
     498:	82 17       	cp	r24, r18
     49a:	93 07       	cpc	r25, r19
     49c:	11 f4       	brne	.+4      	; 0x4a2 <ring_remove+0x1c>
     49e:	e0 e0       	ldi	r30, 0x00	; 0
     4a0:	1d c0       	rjmp	.+58     	; 0x4dc <ring_remove+0x56>
    {
        // Get the Data from the buffer.
        data = r->buffer[r->tail_index];
     4a2:	ed 91       	ld	r30, X+
     4a4:	fc 91       	ld	r31, X
     4a6:	11 97       	sbiw	r26, 0x01	; 1
     4a8:	e2 0f       	add	r30, r18
     4aa:	f3 1f       	adc	r31, r19
     4ac:	e0 81       	ld	r30, Z

        // Get the next tail index.
        ring_index_t next_tail = r->tail_index + 1;
        if(r->tail_index >= r->size - 1)
     4ae:	12 96       	adiw	r26, 0x02	; 2
     4b0:	8c 91       	ld	r24, X
     4b2:	12 97       	sbiw	r26, 0x02	; 2
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	01 97       	sbiw	r24, 0x01	; 1
     4b8:	28 17       	cp	r18, r24
     4ba:	39 07       	cpc	r19, r25
     4bc:	18 f0       	brcs	.+6      	; 0x4c4 <ring_remove+0x3e>
     4be:	80 e0       	ldi	r24, 0x00	; 0
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	02 c0       	rjmp	.+4      	; 0x4c8 <ring_remove+0x42>
    {
        // Get the Data from the buffer.
        data = r->buffer[r->tail_index];

        // Get the next tail index.
        ring_index_t next_tail = r->tail_index + 1;
     4c4:	c9 01       	movw	r24, r18
     4c6:	01 96       	adiw	r24, 0x01	; 1
        if(r->tail_index >= r->size - 1)
        {
            next_tail = 0;
        }

        r->tail_index = next_tail;      // Move index
     4c8:	16 96       	adiw	r26, 0x06	; 6
     4ca:	9c 93       	st	X, r25
     4cc:	8e 93       	st	-X, r24
     4ce:	15 97       	sbiw	r26, 0x05	; 5
        r->count--;             // Decrement count
     4d0:	17 96       	adiw	r26, 0x07	; 7
     4d2:	8c 91       	ld	r24, X
     4d4:	17 97       	sbiw	r26, 0x07	; 7
     4d6:	81 50       	subi	r24, 0x01	; 1
     4d8:	17 96       	adiw	r26, 0x07	; 7
     4da:	8c 93       	st	X, r24
    }

    return(data);
}
     4dc:	8e 2f       	mov	r24, r30
     4de:	08 95       	ret

000004e0 <adelay>:


#include "util\delay.h"
void adelay(uint16_t ms);
void adelay(uint16_t ms)
{
     4e0:	20 e0       	ldi	r18, 0x00	; 0
     4e2:	30 e0       	ldi	r19, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     4e4:	44 ef       	ldi	r20, 0xF4	; 244
     4e6:	51 e0       	ldi	r21, 0x01	; 1
     4e8:	05 c0       	rjmp	.+10     	; 0x4f4 <adelay+0x14>
     4ea:	fa 01       	movw	r30, r20
     4ec:	31 97       	sbiw	r30, 0x01	; 1
     4ee:	f1 f7       	brne	.-4      	; 0x4ec <adelay+0xc>
	for(int i = 0 ; i < ms ; i++)
     4f0:	2f 5f       	subi	r18, 0xFF	; 255
     4f2:	3f 4f       	sbci	r19, 0xFF	; 255
     4f4:	28 17       	cp	r18, r24
     4f6:	39 07       	cpc	r19, r25
     4f8:	c0 f3       	brcs	.-16     	; 0x4ea <adelay+0xa>
	{
		_delay_ms(1);
	}
}
     4fa:	08 95       	ret

000004fc <usart0_baud_set>:
	return;
}

// 3/18/11 JWP removed magic number for clock and added freq_cpu
void usart0_baud_set(uint32_t baudrate, uint32_t freq_cpu)
{
     4fc:	ef 92       	push	r14
     4fe:	ff 92       	push	r15
     500:	0f 93       	push	r16
     502:	1f 93       	push	r17
     504:	7b 01       	movw	r14, r22
     506:	8c 01       	movw	r16, r24
	uint16_t setting;
	
	setting = usart_baudrate2setting(freq_cpu,baudrate);
     508:	84 e0       	ldi	r24, 0x04	; 4
     50a:	ee 0c       	add	r14, r14
     50c:	ff 1c       	adc	r15, r15
     50e:	00 1f       	adc	r16, r16
     510:	11 1f       	adc	r17, r17
     512:	8a 95       	dec	r24
     514:	d1 f7       	brne	.-12     	; 0x50a <__stack+0xb>
     516:	ca 01       	movw	r24, r20
     518:	b9 01       	movw	r22, r18
     51a:	a8 01       	movw	r20, r16
     51c:	97 01       	movw	r18, r14
     51e:	0e 94 3e 05 	call	0xa7c	; 0xa7c <__udivmodsi4>
     522:	21 50       	subi	r18, 0x01	; 1
     524:	30 40       	sbci	r19, 0x00	; 0
	
	// Write hi byte first as writing lo byte will trigger immediate update of baud prescaler.
	UART_BAUD_RATE_HIGH = hi_byte(setting);
     526:	30 93 c5 00 	sts	0x00C5, r19
	UART_BAUD_RATE_LOW= lo_byte(setting);
     52a:	20 93 c4 00 	sts	0x00C4, r18
	
	return;
}
     52e:	1f 91       	pop	r17
     530:	0f 91       	pop	r16
     532:	ff 90       	pop	r15
     534:	ef 90       	pop	r14
     536:	08 95       	ret

00000538 <usart0_parity_set>:

void usart0_parity_set(usart_parity_t parity)
{
    if(parity > 0)
     538:	81 11       	cpse	r24, r1
    {
        parity++;
     53a:	8f 5f       	subi	r24, 0xFF	; 255
    }
    bit_write(bit_read(parity, BIT(0)), UART_CONTROL_STATUS_REG_C, BIT(UART_PARITY_MODE_0));
     53c:	98 2f       	mov	r25, r24
     53e:	80 ff       	sbrs	r24, 0
     540:	04 c0       	rjmp	.+8      	; 0x54a <usart0_parity_set+0x12>
     542:	80 91 c2 00 	lds	r24, 0x00C2
     546:	80 61       	ori	r24, 0x10	; 16
     548:	03 c0       	rjmp	.+6      	; 0x550 <usart0_parity_set+0x18>
     54a:	80 91 c2 00 	lds	r24, 0x00C2
     54e:	8f 7e       	andi	r24, 0xEF	; 239
     550:	80 93 c2 00 	sts	0x00C2, r24
     554:	80 91 c2 00 	lds	r24, 0x00C2
    bit_write(bit_read(parity, BIT(1)), UART_CONTROL_STATUS_REG_C, BIT(UART_PARITY_MODE_1));
     558:	91 ff       	sbrs	r25, 1
     55a:	04 c0       	rjmp	.+8      	; 0x564 <usart0_parity_set+0x2c>
     55c:	80 91 c2 00 	lds	r24, 0x00C2
     560:	80 62       	ori	r24, 0x20	; 32
     562:	03 c0       	rjmp	.+6      	; 0x56a <usart0_parity_set+0x32>
     564:	80 91 c2 00 	lds	r24, 0x00C2
     568:	8f 7d       	andi	r24, 0xDF	; 223
     56a:	80 93 c2 00 	sts	0x00C2, r24
     56e:	80 91 c2 00 	lds	r24, 0x00C2
     572:	08 95       	ret

00000574 <usart0_transmit_check>:
    register uint8_t count;

	// JWP 3/27/11 added this to prevent buffer overruns (?)
//  	loop_until_bit_is_set(UART_CONTROL_STATUS_REG_A, UART_READY_TO_TRANSMIT);//UCSR0A, UDRE); // wait for UDR to be clear 

    sreg = SREG;
     574:	8f b7       	in	r24, 0x3f	; 63
    cli();
     576:	f8 94       	cli
    count = usart0_transmit_ring.count;
    SREG = sreg;
     578:	8f bf       	out	0x3f, r24	; 63

    if (count > 0 && flow.flow_out)
     57a:	80 91 d8 03 	lds	r24, 0x03D8
     57e:	88 23       	and	r24, r24
     580:	41 f0       	breq	.+16     	; 0x592 <usart0_transmit_check+0x1e>
     582:	80 91 4f 03 	lds	r24, 0x034F
     586:	88 23       	and	r24, r24
     588:	21 f0       	breq	.+8      	; 0x592 <usart0_transmit_check+0x1e>
    {
        usart0_data_register_empty_interrupt_enable();
     58a:	80 91 c1 00 	lds	r24, 0x00C1
     58e:	80 62       	ori	r24, 0x20	; 32
     590:	03 c0       	rjmp	.+6      	; 0x598 <usart0_transmit_check+0x24>
    }
    else
    {
        usart0_data_register_empty_interrupt_disable();
     592:	80 91 c1 00 	lds	r24, 0x00C1
     596:	8f 7d       	andi	r24, 0xDF	; 223
     598:	80 93 c1 00 	sts	0x00C1, r24
     59c:	08 95       	ret

0000059e <__vector_13>:
}

//--------- Receiver routines

usart0_receive_interrupt_service_routine
{
     59e:	1f 92       	push	r1
     5a0:	0f 92       	push	r0
     5a2:	0f b6       	in	r0, 0x3f	; 63
     5a4:	0f 92       	push	r0
     5a6:	11 24       	eor	r1, r1
     5a8:	2f 93       	push	r18
     5aa:	3f 93       	push	r19
     5ac:	4f 93       	push	r20
     5ae:	5f 93       	push	r21
     5b0:	6f 93       	push	r22
     5b2:	7f 93       	push	r23
     5b4:	8f 93       	push	r24
     5b6:	9f 93       	push	r25
     5b8:	af 93       	push	r26
     5ba:	bf 93       	push	r27
     5bc:	ef 93       	push	r30
     5be:	ff 93       	push	r31
	register uint8_t data;
	register uint8_t parity_error = false;
	register uint8_t frame_error = false;

	// Get error conditions before getting the data.
	frame_error = usart0_frame_error();
     5c0:	80 91 c0 00 	lds	r24, 0x00C0
	parity_error = usart0_parity_error();
     5c4:	90 91 c0 00 	lds	r25, 0x00C0
	
	data = UART_DATA_REG;
     5c8:	60 91 c6 00 	lds	r22, 0x00C6
    
	if(!frame_error && !parity_error)
     5cc:	84 fd       	sbrc	r24, 4
     5ce:	06 c0       	rjmp	.+12     	; 0x5dc <__vector_13+0x3e>
     5d0:	92 fd       	sbrc	r25, 2
     5d2:	04 c0       	rjmp	.+8      	; 0x5dc <__vector_13+0x3e>
                return;
            }
        }
    	*/
		// Store data in ring buffer.
        ring_add(&usart0_receive_ring, data);
     5d4:	89 ed       	ldi	r24, 0xD9	; 217
     5d6:	93 e0       	ldi	r25, 0x03	; 3
     5d8:	0e 94 ce 01 	call	0x39c	; 0x39c <ring_add>
        }
		*/
	}

	return;
}
     5dc:	ff 91       	pop	r31
     5de:	ef 91       	pop	r30
     5e0:	bf 91       	pop	r27
     5e2:	af 91       	pop	r26
     5e4:	9f 91       	pop	r25
     5e6:	8f 91       	pop	r24
     5e8:	7f 91       	pop	r23
     5ea:	6f 91       	pop	r22
     5ec:	5f 91       	pop	r21
     5ee:	4f 91       	pop	r20
     5f0:	3f 91       	pop	r19
     5f2:	2f 91       	pop	r18
     5f4:	0f 90       	pop	r0
     5f6:	0f be       	out	0x3f, r0	; 63
     5f8:	0f 90       	pop	r0
     5fa:	1f 90       	pop	r1
     5fc:	18 95       	reti

000005fe <__vector_14>:
*/
//------------- Transmit routines


usart0_transmit_interrupt_service_routine
{
     5fe:	1f 92       	push	r1
     600:	0f 92       	push	r0
     602:	0f b6       	in	r0, 0x3f	; 63
     604:	0f 92       	push	r0
     606:	11 24       	eor	r1, r1
     608:	2f 93       	push	r18
     60a:	3f 93       	push	r19
     60c:	4f 93       	push	r20
     60e:	5f 93       	push	r21
     610:	6f 93       	push	r22
     612:	7f 93       	push	r23
     614:	8f 93       	push	r24
     616:	9f 93       	push	r25
     618:	af 93       	push	r26
     61a:	bf 93       	push	r27
     61c:	ef 93       	push	r30
     61e:	ff 93       	push	r31
	
    if(usart0_transmit_ring.count)
     620:	80 91 d8 03 	lds	r24, 0x03D8
     624:	88 23       	and	r24, r24
     626:	31 f0       	breq	.+12     	; 0x634 <__vector_14+0x36>
    {
        UART_DATA_REG = ring_remove(&usart0_transmit_ring);
     628:	81 ed       	ldi	r24, 0xD1	; 209
     62a:	93 e0       	ldi	r25, 0x03	; 3
     62c:	0e 94 43 02 	call	0x486	; 0x486 <ring_remove>
     630:	80 93 c6 00 	sts	0x00C6, r24
    }

    if (usart0_transmit_ring.count > 0 && flow.flow_out)
     634:	80 91 d8 03 	lds	r24, 0x03D8
     638:	88 23       	and	r24, r24
     63a:	41 f0       	breq	.+16     	; 0x64c <__vector_14+0x4e>
     63c:	80 91 4f 03 	lds	r24, 0x034F
     640:	88 23       	and	r24, r24
     642:	21 f0       	breq	.+8      	; 0x64c <__vector_14+0x4e>
    {
        usart0_data_register_empty_interrupt_enable();
     644:	80 91 c1 00 	lds	r24, 0x00C1
     648:	80 62       	ori	r24, 0x20	; 32
     64a:	03 c0       	rjmp	.+6      	; 0x652 <__vector_14+0x54>
    }
    else
    {
        usart0_data_register_empty_interrupt_disable();
     64c:	80 91 c1 00 	lds	r24, 0x00C1
     650:	8f 7d       	andi	r24, 0xDF	; 223
     652:	80 93 c1 00 	sts	0x00C1, r24
    }
    
    return;
}
     656:	ff 91       	pop	r31
     658:	ef 91       	pop	r30
     65a:	bf 91       	pop	r27
     65c:	af 91       	pop	r26
     65e:	9f 91       	pop	r25
     660:	8f 91       	pop	r24
     662:	7f 91       	pop	r23
     664:	6f 91       	pop	r22
     666:	5f 91       	pop	r21
     668:	4f 91       	pop	r20
     66a:	3f 91       	pop	r19
     66c:	2f 91       	pop	r18
     66e:	0f 90       	pop	r0
     670:	0f be       	out	0x3f, r0	; 63
     672:	0f 90       	pop	r0
     674:	1f 90       	pop	r1
     676:	18 95       	reti

00000678 <usart0_init>:
}



void usart0_init(uint32_t baud, uint32_t freq_cpu, usart_mode_t mode, usart_databits_t databits, usart_stopbits_t stopbits, usart_parity_t parity, usart_flow_control_t flow_control)
{
     678:	4f 92       	push	r4
     67a:	5f 92       	push	r5
     67c:	6f 92       	push	r6
     67e:	7f 92       	push	r7
     680:	8f 92       	push	r8
     682:	af 92       	push	r10
     684:	cf 92       	push	r12
     686:	ef 92       	push	r14
     688:	0f 93       	push	r16
     68a:	1f 93       	push	r17
     68c:	df 93       	push	r29
     68e:	cf 93       	push	r28
     690:	cd b7       	in	r28, 0x3d	; 61
     692:	de b7       	in	r29, 0x3e	; 62
     694:	2b 01       	movw	r4, r22
     696:	3c 01       	movw	r6, r24
     698:	1e 2d       	mov	r17, r14
     69a:	ec 2c       	mov	r14, r12

   	stdout = &mystdout;    //set the output stream 
     69c:	80 e4       	ldi	r24, 0x40	; 64
     69e:	93 e0       	ldi	r25, 0x03	; 3
     6a0:	90 93 24 04 	sts	0x0424, r25
     6a4:	80 93 23 04 	sts	0x0423, r24

    flow.flow_control = flow_control;
     6a8:	80 92 4e 03 	sts	0x034E, r8
    flow.flow_out = true;
     6ac:	81 e0       	ldi	r24, 0x01	; 1
     6ae:	80 93 4f 03 	sts	0x034F, r24
    flow.flow_in = true;
     6b2:	80 93 50 03 	sts	0x0350, r24
    // flow_out_tcb.run_interval = 0;
    // flow_out_tcb.enabled = false;
    // task_add(&flow_out_tcb);


	usart0_receive_disable();
     6b6:	80 91 c1 00 	lds	r24, 0x00C1
     6ba:	8f 7e       	andi	r24, 0xEF	; 239
     6bc:	80 93 c1 00 	sts	0x00C1, r24
	usart0_transmit_disable();
     6c0:	80 91 c1 00 	lds	r24, 0x00C1
     6c4:	87 7f       	andi	r24, 0xF7	; 247
     6c6:	80 93 c1 00 	sts	0x00C1, r24

    usart0_receive_complete_interrupt_disable();
     6ca:	80 91 c1 00 	lds	r24, 0x00C1
     6ce:	8f 77       	andi	r24, 0x7F	; 127
     6d0:	80 93 c1 00 	sts	0x00C1, r24
	usart0_data_register_empty_interrupt_disable();
     6d4:	80 91 c1 00 	lds	r24, 0x00C1
     6d8:	8f 7d       	andi	r24, 0xDF	; 223
     6da:	80 93 c1 00 	sts	0x00C1, r24
    
	usart0_mode(mode);
     6de:	00 23       	and	r16, r16
     6e0:	21 f0       	breq	.+8      	; 0x6ea <usart0_init+0x72>
     6e2:	80 91 c2 00 	lds	r24, 0x00C2
     6e6:	80 64       	ori	r24, 0x40	; 64
     6e8:	03 c0       	rjmp	.+6      	; 0x6f0 <usart0_init+0x78>
     6ea:	80 91 c2 00 	lds	r24, 0x00C2
     6ee:	8f 7b       	andi	r24, 0xBF	; 191
     6f0:	80 93 c2 00 	sts	0x00C2, r24
     6f4:	80 91 c2 00 	lds	r24, 0x00C2
 	usart0_baud_set(baud, freq_cpu);
     6f8:	c3 01       	movw	r24, r6
     6fa:	b2 01       	movw	r22, r4
     6fc:	0e 94 7e 02 	call	0x4fc	; 0x4fc <usart0_baud_set>
    usart0_data_bits_set(databits);
     700:	81 2f       	mov	r24, r17
     702:	85 50       	subi	r24, 0x05	; 5
     704:	84 30       	cpi	r24, 0x04	; 4
     706:	18 f5       	brcc	.+70     	; 0x74e <usart0_init+0xd6>
     708:	21 2f       	mov	r18, r17
     70a:	30 e0       	ldi	r19, 0x00	; 0
     70c:	25 50       	subi	r18, 0x05	; 5
     70e:	30 40       	sbci	r19, 0x00	; 0
     710:	20 ff       	sbrs	r18, 0
     712:	04 c0       	rjmp	.+8      	; 0x71c <usart0_init+0xa4>
     714:	80 91 c2 00 	lds	r24, 0x00C2
     718:	82 60       	ori	r24, 0x02	; 2
     71a:	03 c0       	rjmp	.+6      	; 0x722 <usart0_init+0xaa>
     71c:	80 91 c2 00 	lds	r24, 0x00C2
     720:	8d 7f       	andi	r24, 0xFD	; 253
     722:	80 93 c2 00 	sts	0x00C2, r24
     726:	80 91 c2 00 	lds	r24, 0x00C2
     72a:	21 ff       	sbrs	r18, 1
     72c:	04 c0       	rjmp	.+8      	; 0x736 <usart0_init+0xbe>
     72e:	80 91 c2 00 	lds	r24, 0x00C2
     732:	84 60       	ori	r24, 0x04	; 4
     734:	03 c0       	rjmp	.+6      	; 0x73c <usart0_init+0xc4>
     736:	80 91 c2 00 	lds	r24, 0x00C2
     73a:	8b 7f       	andi	r24, 0xFB	; 251
     73c:	80 93 c2 00 	sts	0x00C2, r24
     740:	80 91 c2 00 	lds	r24, 0x00C2
     744:	80 91 c1 00 	lds	r24, 0x00C1
     748:	8b 7f       	andi	r24, 0xFB	; 251
     74a:	80 93 c1 00 	sts	0x00C1, r24
     74e:	19 30       	cpi	r17, 0x09	; 9
     750:	79 f4       	brne	.+30     	; 0x770 <usart0_init+0xf8>
     752:	80 91 c2 00 	lds	r24, 0x00C2
     756:	82 60       	ori	r24, 0x02	; 2
     758:	80 93 c2 00 	sts	0x00C2, r24
     75c:	80 91 c2 00 	lds	r24, 0x00C2
     760:	84 60       	ori	r24, 0x04	; 4
     762:	80 93 c2 00 	sts	0x00C2, r24
     766:	80 91 c1 00 	lds	r24, 0x00C1
     76a:	84 60       	ori	r24, 0x04	; 4
     76c:	80 93 c1 00 	sts	0x00C1, r24
    usart0_stop_bits_set(stopbits);
     770:	8e 2d       	mov	r24, r14
     772:	81 50       	subi	r24, 0x01	; 1
     774:	82 30       	cpi	r24, 0x02	; 2
     776:	70 f4       	brcc	.+28     	; 0x794 <usart0_init+0x11c>
     778:	81 e0       	ldi	r24, 0x01	; 1
     77a:	e8 16       	cp	r14, r24
     77c:	21 f0       	breq	.+8      	; 0x786 <usart0_init+0x10e>
     77e:	80 91 c2 00 	lds	r24, 0x00C2
     782:	88 60       	ori	r24, 0x08	; 8
     784:	03 c0       	rjmp	.+6      	; 0x78c <usart0_init+0x114>
     786:	80 91 c2 00 	lds	r24, 0x00C2
     78a:	87 7f       	andi	r24, 0xF7	; 247
     78c:	80 93 c2 00 	sts	0x00C2, r24
     790:	80 91 c2 00 	lds	r24, 0x00C2
    usart0_parity_set(parity);
     794:	8a 2d       	mov	r24, r10
     796:	0e 94 9c 02 	call	0x538	; 0x538 <usart0_parity_set>
//#if defined(BUTTERFLY)
	//butterfly_uart_init();
	// Butterfly specific 

	/// boost IntRC to 2Mhz to achieve 19200 baudrate
    CLKPR = (1<<CLKPCE);        /// set Clock Prescaler Change Enable
     79a:	80 e8       	ldi	r24, 0x80	; 128
     79c:	80 93 61 00 	sts	0x0061, r24
    /// set prescaler = 4, Inter RC 8Mhz / 4 = 2Mhz
    CLKPR = (1<<CLKPS1);  
     7a0:	82 e0       	ldi	r24, 0x02	; 2
     7a2:	80 93 61 00 	sts	0x0061, r24

    /// Enable 2x speed
    UART_CONTROL_STATUS_REG_A = (1<<UART_DOUBLE_SPEED);
     7a6:	80 93 c0 00 	sts	0x00C0, r24

	/// At this point you have doubled the F_CPU and doubled the 
	/// uart speed so the Butterfly F_CPU 1000000 is for baudrate
	/// purposes 4000000 thus the *4
	UART_BAUD_RATE_HIGH = 0;//((F_CPU*4)/(baudrate*16L)-1) >> 8;
     7aa:	10 92 c5 00 	sts	0x00C5, r1
	UART_BAUD_RATE_LOW = 12;//(uint8_t)((F_CPU*4)/(baudrate*16L)-1);
     7ae:	8c e0       	ldi	r24, 0x0C	; 12
     7b0:	80 93 c4 00 	sts	0x00C4, r24

    /// Enable receiver and transmitter
	// JWP added | 10/22/10
	UART_CONTROL_STATUS_REG_B |= (1 << UART_ENABLE_RECEIVER) | (1 << UART_ENABLE_TRANSMITTER);
     7b4:	80 91 c1 00 	lds	r24, 0x00C1
     7b8:	88 61       	ori	r24, 0x18	; 24
     7ba:	80 93 c1 00 	sts	0x00C1, r24

    /// Async. mode, 8N1
	UART_CONTROL_STATUS_REG_C |= (1 << UART_CHARACTER_SIZE_0) | (1 << UART_CHARACTER_SIZE_1);
     7be:	80 91 c2 00 	lds	r24, 0x00C2
     7c2:	86 60       	ori	r24, 0x06	; 6
     7c4:	80 93 c2 00 	sts	0x00C2, r24
//#endif


	ring_init(&usart0_receive_ring, usart0_receive_buffer, USART0_RECEIVE_BUFFER_LEN);
     7c8:	89 ed       	ldi	r24, 0xD9	; 217
     7ca:	93 e0       	ldi	r25, 0x03	; 3
     7cc:	61 ee       	ldi	r22, 0xE1	; 225
     7ce:	73 e0       	ldi	r23, 0x03	; 3
     7d0:	40 e4       	ldi	r20, 0x40	; 64
     7d2:	0e 94 07 02 	call	0x40e	; 0x40e <ring_init>
    ring_init(&usart0_transmit_ring, usart0_transmit_buffer, USART0_TRANSMIT_BUFFER_LEN);
     7d6:	81 ed       	ldi	r24, 0xD1	; 209
     7d8:	93 e0       	ldi	r25, 0x03	; 3
     7da:	61 e5       	ldi	r22, 0x51	; 81
     7dc:	73 e0       	ldi	r23, 0x03	; 3
     7de:	40 e8       	ldi	r20, 0x80	; 128
     7e0:	0e 94 07 02 	call	0x40e	; 0x40e <ring_init>

    usart0_receive_complete_interrupt_enable();
     7e4:	80 91 c1 00 	lds	r24, 0x00C1
     7e8:	80 68       	ori	r24, 0x80	; 128
     7ea:	80 93 c1 00 	sts	0x00C1, r24
    usart0_data_register_empty_interrupt_enable();
     7ee:	80 91 c1 00 	lds	r24, 0x00C1
     7f2:	80 62       	ori	r24, 0x20	; 32
     7f4:	80 93 c1 00 	sts	0x00C1, r24
    
    usart0_receive_enable();
     7f8:	80 91 c1 00 	lds	r24, 0x00C1
     7fc:	80 61       	ori	r24, 0x10	; 16
     7fe:	80 93 c1 00 	sts	0x00C1, r24
	usart0_transmit_enable();
     802:	80 91 c1 00 	lds	r24, 0x00C1
     806:	88 60       	ori	r24, 0x08	; 8
     808:	80 93 c1 00 	sts	0x00C1, r24

	// JWP 3/27/11 the following was already commented out in Eric's code.
    //usart0_rts_init();
    //usart0_cts_init();

	sei();
     80c:	78 94       	sei

	return;
}
     80e:	cf 91       	pop	r28
     810:	df 91       	pop	r29
     812:	1f 91       	pop	r17
     814:	0f 91       	pop	r16
     816:	ef 90       	pop	r14
     818:	cf 90       	pop	r12
     81a:	af 90       	pop	r10
     81c:	8f 90       	pop	r8
     81e:	7f 90       	pop	r7
     820:	6f 90       	pop	r6
     822:	5f 90       	pop	r5
     824:	4f 90       	pop	r4
     826:	08 95       	ret

00000828 <usart0_transmit_buffer_fill>:
   	
   	return 0; 
} 

bool usart0_transmit_buffer_fill(uint8_t c)
{
     828:	68 2f       	mov	r22, r24
    register bool result;
    result = usart0_buffer_insert(&usart0_transmit_ring, c);
     82a:	81 ed       	ldi	r24, 0xD1	; 209
     82c:	93 e0       	ldi	r25, 0x03	; 3
     82e:	0e 94 41 04 	call	0x882	; 0x882 <usart0_buffer_insert>

    return(result);

}
     832:	08 95       	ret

00000834 <usart_put_char>:
FILE mystdout = FDEV_SETUP_STREAM(usart_put_char, NULL, _FDEV_SETUP_WRITE);
#include "c:\avrtoolbox\libavr\source\general\util\util.h"
#include "c:\avrtoolbox\libavr\source\elementary\serial\serial.h"

int usart_put_char(char c, FILE *stream) 
{ 
     834:	1f 93       	push	r17
     836:	18 2f       	mov	r17, r24
	if (c == '\n') usart_put_char('\r', stream);
     838:	8a 30       	cpi	r24, 0x0A	; 10
     83a:	41 f4       	brne	.+16     	; 0x84c <usart_put_char+0x18>
     83c:	8d e0       	ldi	r24, 0x0D	; 13
     83e:	0e 94 1a 04 	call	0x834	; 0x834 <usart_put_char>
     842:	04 c0       	rjmp	.+8      	; 0x84c <usart_put_char+0x18>
	//if(usart0_transmit_buffer_inuse_count() > ((2*USART0_TRANSMIT_BUFFER_LEN)/3)) delay(BUFFER_DELAY);
	//while(usart0_transmit_buffer_inuse_count() > ((2*USART0_TRANSMIT_BUFFER_LEN)/3)) delay(1);

	//TODO: wouldn't a while loop with 1 ms delay be better?
	//if(usart0_transmit_buffer_inuse_count() > ((2*USART0_TRANSMIT_BUFFER_LEN)/3)) delay(BUFFER_DELAY);
	while(usart0_transmit_buffer_inuse_count() > ((2*USART0_TRANSMIT_BUFFER_LEN)/3)) delay(1);
     844:	81 e0       	ldi	r24, 0x01	; 1
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	0e 94 da 04 	call	0x9b4	; 0x9b4 <delay>
     84c:	0e 94 aa 04 	call	0x954	; 0x954 <usart0_transmit_buffer_inuse_count>
     850:	86 35       	cpi	r24, 0x56	; 86
     852:	c0 f7       	brcc	.-16     	; 0x844 <usart_put_char+0x10>



	usart0_transmit_buffer_insert((uint8_t)c);
     854:	81 2f       	mov	r24, r17
     856:	0e 94 9c 04 	call	0x938	; 0x938 <usart0_transmit_buffer_insert>
   	
   	return 0; 
} 
     85a:	80 e0       	ldi	r24, 0x00	; 0
     85c:	90 e0       	ldi	r25, 0x00	; 0
     85e:	1f 91       	pop	r17
     860:	08 95       	ret

00000862 <usart0_buffer_clear>:
#include "usart.h"
#include "usart0.h"


void usart0_buffer_clear(ring_t *ring)
{
     862:	1f 93       	push	r17
    register uint8_t sreg;
    
    sreg = SREG;
     864:	1f b7       	in	r17, 0x3f	; 63
    cli();
     866:	f8 94       	cli
    ring_clear(ring);
     868:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <ring_clear>
    SREG = sreg;
     86c:	1f bf       	out	0x3f, r17	; 63
    return;
}
     86e:	1f 91       	pop	r17
     870:	08 95       	ret

00000872 <usart0_buffer_free_count>:

#include "usart.h"
#include "usart0.h"

uint8_t usart0_buffer_free_count(ring_t *ring)
{
     872:	fc 01       	movw	r30, r24
    register uint8_t result;
    register uint8_t sreg;
    
    sreg = SREG;
     874:	8f b7       	in	r24, 0x3f	; 63
    cli();
     876:	f8 94       	cli
    result = ring_free_count(ring);
    SREG = sreg;
     878:	8f bf       	out	0x3f, r24	; 63
     87a:	82 81       	ldd	r24, Z+2	; 0x02
     87c:	97 81       	ldd	r25, Z+7	; 0x07
    return(result);
}
     87e:	89 1b       	sub	r24, r25
     880:	08 95       	ret

00000882 <usart0_buffer_insert>:
#include "c:\avrtoolbox\libavr\source\general\ring\ring.h" 
#include "usart.h"
#include "usart0.h"

bool usart0_buffer_insert(ring_t *ring, uint8_t c)
{
     882:	1f 93       	push	r17
    register bool result;
    register uint8_t sreg;
    
    sreg = SREG;
     884:	1f b7       	in	r17, 0x3f	; 63
    cli();
     886:	f8 94       	cli
    result = ring_add(ring, c);
     888:	0e 94 ce 01 	call	0x39c	; 0x39c <ring_add>
    SREG = sreg;
     88c:	1f bf       	out	0x3f, r17	; 63
    return(result);
}
     88e:	1f 91       	pop	r17
     890:	08 95       	ret

00000892 <usart0_buffer_inuse_count>:

#include "usart.h"
#include "usart0.h"

uint8_t usart0_buffer_inuse_count(ring_t *ring)
{
     892:	fc 01       	movw	r30, r24
    register uint8_t result;
    register uint8_t sreg;
    
    sreg = SREG;
     894:	8f b7       	in	r24, 0x3f	; 63
    cli();
     896:	f8 94       	cli
    result = ring->count;
    SREG = sreg;
     898:	8f bf       	out	0x3f, r24	; 63
    return(result);
}
     89a:	87 81       	ldd	r24, Z+7	; 0x07
     89c:	08 95       	ret

0000089e <usart0_buffer_peek>:
#include "usart.h"
#include "usart0.h"


uint8_t usart0_buffer_peek(ring_t *ring, uint8_t *buf, uint8_t count)
{
     89e:	1f 93       	push	r17
    register uint8_t result;
    register uint8_t sreg;
    
    sreg = SREG;
     8a0:	1f b7       	in	r17, 0x3f	; 63
    cli();
     8a2:	f8 94       	cli
    result = ring_peek(ring, buf, count);
     8a4:	0e 94 17 02 	call	0x42e	; 0x42e <ring_peek>
    SREG = sreg;
     8a8:	1f bf       	out	0x3f, r17	; 63
    return(result);
}
     8aa:	1f 91       	pop	r17
     8ac:	08 95       	ret

000008ae <usart0_buffer_remove>:
#include "usart.h"
#include "usart0.h"


uint8_t usart0_buffer_remove(ring_t *ring)
{
     8ae:	1f 93       	push	r17
    register uint8_t result;
    register uint8_t sreg;
    
    sreg = SREG;
     8b0:	1f b7       	in	r17, 0x3f	; 63
    cli();
     8b2:	f8 94       	cli
    result = ring_remove(ring);
     8b4:	0e 94 43 02 	call	0x486	; 0x486 <ring_remove>
    SREG = sreg;
     8b8:	1f bf       	out	0x3f, r17	; 63
    return(result);
}
     8ba:	1f 91       	pop	r17
     8bc:	08 95       	ret

000008be <usart0_receive_buffer_clear>:
#include "usart0.h"


void usart0_receive_buffer_clear(void)
{
    usart0_buffer_clear(&usart0_receive_ring);
     8be:	89 ed       	ldi	r24, 0xD9	; 217
     8c0:	93 e0       	ldi	r25, 0x03	; 3
     8c2:	0e 94 31 04 	call	0x862	; 0x862 <usart0_buffer_clear>
	return;
}
     8c6:	08 95       	ret

000008c8 <usart0_receive_buffer_free_count>:
#include "usart.h"
#include "usart0.h"

uint8_t usart0_receive_buffer_free_count(void)
{
    return(usart0_buffer_free_count(&usart0_receive_ring));
     8c8:	89 ed       	ldi	r24, 0xD9	; 217
     8ca:	93 e0       	ldi	r25, 0x03	; 3
     8cc:	0e 94 39 04 	call	0x872	; 0x872 <usart0_buffer_free_count>
}
     8d0:	08 95       	ret

000008d2 <usart0_receive_buffer_insert>:
#include "usart.h"
#include "usart0.h"


bool usart0_receive_buffer_insert(uint8_t c)
{
     8d2:	68 2f       	mov	r22, r24
    return(usart0_buffer_insert(&usart0_receive_ring, c));
     8d4:	89 ed       	ldi	r24, 0xD9	; 217
     8d6:	93 e0       	ldi	r25, 0x03	; 3
     8d8:	0e 94 41 04 	call	0x882	; 0x882 <usart0_buffer_insert>
}
     8dc:	08 95       	ret

000008de <usart0_receive_buffer_inuse_count>:
#include "usart.h"
#include "usart0.h"

uint8_t usart0_receive_buffer_inuse_count(void)
{
    return(usart0_buffer_inuse_count(&usart0_receive_ring));
     8de:	89 ed       	ldi	r24, 0xD9	; 217
     8e0:	93 e0       	ldi	r25, 0x03	; 3
     8e2:	0e 94 49 04 	call	0x892	; 0x892 <usart0_buffer_inuse_count>
}
     8e6:	08 95       	ret

000008e8 <usart0_receive_buffer_peek>:
#include "usart0.h"



uint8_t usart0_receive_buffer_peek(uint8_t *buf, uint8_t count)
{
     8e8:	9c 01       	movw	r18, r24
     8ea:	46 2f       	mov	r20, r22
    return(usart0_buffer_peek(&usart0_receive_ring, buf, count));
     8ec:	89 ed       	ldi	r24, 0xD9	; 217
     8ee:	93 e0       	ldi	r25, 0x03	; 3
     8f0:	b9 01       	movw	r22, r18
     8f2:	0e 94 4f 04 	call	0x89e	; 0x89e <usart0_buffer_peek>
}
     8f6:	08 95       	ret

000008f8 <usart0_receive_buffer_remove>:

uint8_t usart0_receive_buffer_remove(void)
{
    uint8_t data;
    
    data = usart0_buffer_remove(&usart0_receive_ring);
     8f8:	89 ed       	ldi	r24, 0xD9	; 217
     8fa:	93 e0       	ldi	r25, 0x03	; 3
     8fc:	0e 94 57 04 	call	0x8ae	; 0x8ae <usart0_buffer_remove>
            usart0_flow_in_enable();
        }
    }
	*/
    return(data);
}
     900:	08 95       	ret

00000902 <usart0_receive_peek>:
#include "usart.h"
#include "usart0.h"


uint8_t usart0_receive_peek(void)
{
     902:	df 93       	push	r29
     904:	cf 93       	push	r28
     906:	0f 92       	push	r0
     908:	cd b7       	in	r28, 0x3d	; 61
     90a:	de b7       	in	r29, 0x3e	; 62
	uint8_t data;
	usart0_receive_buffer_peek(&data, 1);
     90c:	ce 01       	movw	r24, r28
     90e:	01 96       	adiw	r24, 0x01	; 1
     910:	61 e0       	ldi	r22, 0x01	; 1
     912:	0e 94 74 04 	call	0x8e8	; 0x8e8 <usart0_receive_buffer_peek>
	return(data);
}
     916:	89 81       	ldd	r24, Y+1	; 0x01
     918:	0f 90       	pop	r0
     91a:	cf 91       	pop	r28
     91c:	df 91       	pop	r29
     91e:	08 95       	ret

00000920 <usart0_transmit_buffer_clear>:
#include "usart0.h"


void usart0_transmit_buffer_clear(void)
{
    usart0_buffer_clear(&usart0_transmit_ring);
     920:	81 ed       	ldi	r24, 0xD1	; 209
     922:	93 e0       	ldi	r25, 0x03	; 3
     924:	0e 94 31 04 	call	0x862	; 0x862 <usart0_buffer_clear>
    usart0_transmit_check();
     928:	0e 94 ba 02 	call	0x574	; 0x574 <usart0_transmit_check>
	return;
}
     92c:	08 95       	ret

0000092e <usart0_transmit_buffer_free_count>:
#include "usart.h"
#include "usart0.h"

uint8_t usart0_transmit_buffer_free_count(void)
{
    return(usart0_buffer_free_count(&usart0_transmit_ring));
     92e:	81 ed       	ldi	r24, 0xD1	; 209
     930:	93 e0       	ldi	r25, 0x03	; 3
     932:	0e 94 39 04 	call	0x872	; 0x872 <usart0_buffer_free_count>
}
     936:	08 95       	ret

00000938 <usart0_transmit_buffer_insert>:
#include "usart.h"
#include "usart0.h"


bool usart0_transmit_buffer_insert(uint8_t c)
{
     938:	1f 93       	push	r17
     93a:	68 2f       	mov	r22, r24
    register bool result;
    result = usart0_buffer_insert(&usart0_transmit_ring, c);
     93c:	81 ed       	ldi	r24, 0xD1	; 209
     93e:	93 e0       	ldi	r25, 0x03	; 3
     940:	0e 94 41 04 	call	0x882	; 0x882 <usart0_buffer_insert>
     944:	18 2f       	mov	r17, r24
    if(result == true) usart0_transmit_check();
     946:	88 23       	and	r24, r24
     948:	11 f0       	breq	.+4      	; 0x94e <usart0_transmit_buffer_insert+0x16>
     94a:	0e 94 ba 02 	call	0x574	; 0x574 <usart0_transmit_check>

    return(result);
}
     94e:	81 2f       	mov	r24, r17
     950:	1f 91       	pop	r17
     952:	08 95       	ret

00000954 <usart0_transmit_buffer_inuse_count>:
#include "usart.h"
#include "usart0.h"

uint8_t usart0_transmit_buffer_inuse_count(void)
{
    return(usart0_buffer_inuse_count(&usart0_transmit_ring));
     954:	81 ed       	ldi	r24, 0xD1	; 209
     956:	93 e0       	ldi	r25, 0x03	; 3
     958:	0e 94 49 04 	call	0x892	; 0x892 <usart0_buffer_inuse_count>
}
     95c:	08 95       	ret

0000095e <usart0_transmit_buffer_peek>:
#include "usart.h"
#include "usart0.h"


uint8_t usart0_transmit_buffer_peek(uint8_t *buf, uint8_t count)
{
     95e:	9c 01       	movw	r18, r24
     960:	46 2f       	mov	r20, r22
    return(usart0_buffer_peek(&usart0_transmit_ring, buf, count));
     962:	81 ed       	ldi	r24, 0xD1	; 209
     964:	93 e0       	ldi	r25, 0x03	; 3
     966:	b9 01       	movw	r22, r18
     968:	0e 94 4f 04 	call	0x89e	; 0x89e <usart0_buffer_peek>
}
     96c:	08 95       	ret

0000096e <usart0_transmit_buffer_remove>:
#include "usart.h"
#include "usart0.h"


uint8_t usart0_transmit_buffer_remove(void)
{
     96e:	1f 93       	push	r17
    register uint8_t result;
    result = usart0_buffer_remove(&usart0_transmit_ring);
     970:	81 ed       	ldi	r24, 0xD1	; 209
     972:	93 e0       	ldi	r25, 0x03	; 3
     974:	0e 94 57 04 	call	0x8ae	; 0x8ae <usart0_buffer_remove>
     978:	18 2f       	mov	r17, r24
    usart0_transmit_check();
     97a:	0e 94 ba 02 	call	0x574	; 0x574 <usart0_transmit_check>
    return(result);
}
     97e:	81 2f       	mov	r24, r17
     980:	1f 91       	pop	r17
     982:	08 95       	ret

00000984 <usart0_uninit>:


void usart0_uninit(void)
{
	// restore to datasheet defaults
	UART_CONTROL_STATUS_REG_A = 0x20;
     984:	80 e2       	ldi	r24, 0x20	; 32
     986:	80 93 c0 00 	sts	0x00C0, r24
	UART_CONTROL_STATUS_REG_B = 0;
     98a:	10 92 c1 00 	sts	0x00C1, r1
	UART_CONTROL_STATUS_REG_C = 0x06;
     98e:	86 e0       	ldi	r24, 0x06	; 6
     990:	80 93 c2 00 	sts	0x00C2, r24
}
     994:	08 95       	ret

00000996 <usart0_transmit_peek>:
#include "usart.h"
#include "usart0.h"


uint8_t usart0_transmit_peek(void)
{
     996:	df 93       	push	r29
     998:	cf 93       	push	r28
     99a:	0f 92       	push	r0
     99c:	cd b7       	in	r28, 0x3d	; 61
     99e:	de b7       	in	r29, 0x3e	; 62
	uint8_t data;
	usart0_transmit_buffer_peek(&data, 1);
     9a0:	ce 01       	movw	r24, r28
     9a2:	01 96       	adiw	r24, 0x01	; 1
     9a4:	61 e0       	ldi	r22, 0x01	; 1
     9a6:	0e 94 af 04 	call	0x95e	; 0x95e <usart0_transmit_buffer_peek>
	return(data);
}
     9aa:	89 81       	ldd	r24, Y+1	; 0x01
     9ac:	0f 90       	pop	r0
     9ae:	cf 91       	pop	r28
     9b0:	df 91       	pop	r29
     9b2:	08 95       	ret

000009b4 <delay>:
#include <util\delay.h>

void delay(uint16_t ms);

void delay(uint16_t ms)
{
     9b4:	20 e0       	ldi	r18, 0x00	; 0
     9b6:	30 e0       	ldi	r19, 0x00	; 0
     9b8:	44 ef       	ldi	r20, 0xF4	; 244
     9ba:	51 e0       	ldi	r21, 0x01	; 1
     9bc:	05 c0       	rjmp	.+10     	; 0x9c8 <delay+0x14>
     9be:	fa 01       	movw	r30, r20
     9c0:	31 97       	sbiw	r30, 0x01	; 1
     9c2:	f1 f7       	brne	.-4      	; 0x9c0 <delay+0xc>
	for(int i = 0 ; i < ms ; i++)
     9c4:	2f 5f       	subi	r18, 0xFF	; 255
     9c6:	3f 4f       	sbci	r19, 0xFF	; 255
     9c8:	28 17       	cp	r18, r24
     9ca:	39 07       	cpc	r19, r25
     9cc:	c0 f3       	brcs	.-16     	; 0x9be <delay+0xa>
	{
		_delay_ms(1);
	}
}
     9ce:	08 95       	ret

000009d0 <ring_clear>:

	/param *r pointer to ring buffer
	/return boolean result of attempt to add byte	
*/
bool ring_clear(ring_t *r)
{
     9d0:	fc 01       	movw	r30, r24
    bool success = false;
    if (r != NULL)
     9d2:	00 97       	sbiw	r24, 0x00	; 0
     9d4:	11 f4       	brne	.+4      	; 0x9da <ring_clear+0xa>
     9d6:	80 e0       	ldi	r24, 0x00	; 0
     9d8:	08 95       	ret
    {
        r->head_index = 0;
     9da:	14 82       	std	Z+4, r1	; 0x04
     9dc:	13 82       	std	Z+3, r1	; 0x03
        r->tail_index = 0;          // Assign new values
     9de:	16 82       	std	Z+6, r1	; 0x06
     9e0:	15 82       	std	Z+5, r1	; 0x05
        r->count = 0;
     9e2:	17 82       	std	Z+7, r1	; 0x07
        memset((void *)r->buffer, 0, r->size); // Clear out memory
     9e4:	42 81       	ldd	r20, Z+2	; 0x02
     9e6:	80 81       	ld	r24, Z
     9e8:	91 81       	ldd	r25, Z+1	; 0x01
     9ea:	60 e0       	ldi	r22, 0x00	; 0
     9ec:	70 e0       	ldi	r23, 0x00	; 0
     9ee:	50 e0       	ldi	r21, 0x00	; 0
     9f0:	0e 94 60 05 	call	0xac0	; 0xac0 <memset>
     9f4:	81 e0       	ldi	r24, 0x01	; 1
        success = true;
    }
    return(success);
}
     9f6:	08 95       	ret

000009f8 <serial_in>:
#include "serial.h"

uint8_t serial_in(void)
{
	return usart0_receive_buffer_remove();
     9f8:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <usart0_receive_buffer_remove>
}
     9fc:	08 95       	ret

000009fe <serial_out>:

// The delay is added to prevent buffer overrun
// The variadic (va_) stuff is magic 
//void serial_out(const char *fmt, ...)
void serial_out(const char *fmt, ...)
{
     9fe:	ef 92       	push	r14
     a00:	ff 92       	push	r15
     a02:	0f 93       	push	r16
     a04:	1f 93       	push	r17
     a06:	df 93       	push	r29
     a08:	cf 93       	push	r28
     a0a:	cd b7       	in	r28, 0x3d	; 61
     a0c:	de b7       	in	r29, 0x3e	; 62
     a0e:	fe 01       	movw	r30, r28
     a10:	39 96       	adiw	r30, 0x09	; 9
     a12:	01 91       	ld	r16, Z+
     a14:	11 91       	ld	r17, Z+
     a16:	fe 2e       	mov	r15, r30
     a18:	ef 2e       	mov	r14, r31
	va_list arg;
	va_start(arg, fmt);
	if(usart0_transmit_buffer_inuse_count() > ((2*USART0_TRANSMIT_BUFFER_LEN)/3)) delay(BUFFER_DELAY);
     a1a:	0e 94 aa 04 	call	0x954	; 0x954 <usart0_transmit_buffer_inuse_count>
     a1e:	86 35       	cpi	r24, 0x56	; 86
     a20:	20 f0       	brcs	.+8      	; 0xa2a <serial_out+0x2c>
     a22:	84 e1       	ldi	r24, 0x14	; 20
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	0e 94 da 04 	call	0x9b4	; 0x9b4 <delay>
	vprintf(fmt, arg);
     a2a:	c8 01       	movw	r24, r16
     a2c:	6f 2d       	mov	r22, r15
     a2e:	7e 2d       	mov	r23, r14
     a30:	0e 94 67 05 	call	0xace	; 0xace <vprintf>
	va_end(arg);
}
     a34:	cf 91       	pop	r28
     a36:	df 91       	pop	r29
     a38:	1f 91       	pop	r17
     a3a:	0f 91       	pop	r16
     a3c:	ff 90       	pop	r15
     a3e:	ef 90       	pop	r14
     a40:	08 95       	ret

00000a42 <serial_write>:
#include "serial.h"

void serial_write(uint8_t *buff, uint8_t size)
{
     a42:	ef 92       	push	r14
     a44:	ff 92       	push	r15
     a46:	0f 93       	push	r16
     a48:	1f 93       	push	r17
     a4a:	cf 93       	push	r28
     a4c:	df 93       	push	r29
     a4e:	7c 01       	movw	r14, r24
     a50:	c0 e0       	ldi	r28, 0x00	; 0
     a52:	d0 e0       	ldi	r29, 0x00	; 0
	for(int i = 0; i < size; i++)
     a54:	06 2f       	mov	r16, r22
     a56:	10 e0       	ldi	r17, 0x00	; 0
     a58:	07 c0       	rjmp	.+14     	; 0xa68 <serial_write+0x26>
	{
		usart0_transmit_buffer_insert(buff[i]);
     a5a:	f7 01       	movw	r30, r14
     a5c:	ec 0f       	add	r30, r28
     a5e:	fd 1f       	adc	r31, r29
     a60:	80 81       	ld	r24, Z
     a62:	0e 94 9c 04 	call	0x938	; 0x938 <usart0_transmit_buffer_insert>
#include "serial.h"

void serial_write(uint8_t *buff, uint8_t size)
{
	for(int i = 0; i < size; i++)
     a66:	21 96       	adiw	r28, 0x01	; 1
     a68:	c0 17       	cp	r28, r16
     a6a:	d1 07       	cpc	r29, r17
     a6c:	b4 f3       	brlt	.-20     	; 0xa5a <serial_write+0x18>
	{
		usart0_transmit_buffer_insert(buff[i]);
	}
}
     a6e:	df 91       	pop	r29
     a70:	cf 91       	pop	r28
     a72:	1f 91       	pop	r17
     a74:	0f 91       	pop	r16
     a76:	ff 90       	pop	r15
     a78:	ef 90       	pop	r14
     a7a:	08 95       	ret

00000a7c <__udivmodsi4>:
     a7c:	a1 e2       	ldi	r26, 0x21	; 33
     a7e:	1a 2e       	mov	r1, r26
     a80:	aa 1b       	sub	r26, r26
     a82:	bb 1b       	sub	r27, r27
     a84:	fd 01       	movw	r30, r26
     a86:	0d c0       	rjmp	.+26     	; 0xaa2 <__udivmodsi4_ep>

00000a88 <__udivmodsi4_loop>:
     a88:	aa 1f       	adc	r26, r26
     a8a:	bb 1f       	adc	r27, r27
     a8c:	ee 1f       	adc	r30, r30
     a8e:	ff 1f       	adc	r31, r31
     a90:	a2 17       	cp	r26, r18
     a92:	b3 07       	cpc	r27, r19
     a94:	e4 07       	cpc	r30, r20
     a96:	f5 07       	cpc	r31, r21
     a98:	20 f0       	brcs	.+8      	; 0xaa2 <__udivmodsi4_ep>
     a9a:	a2 1b       	sub	r26, r18
     a9c:	b3 0b       	sbc	r27, r19
     a9e:	e4 0b       	sbc	r30, r20
     aa0:	f5 0b       	sbc	r31, r21

00000aa2 <__udivmodsi4_ep>:
     aa2:	66 1f       	adc	r22, r22
     aa4:	77 1f       	adc	r23, r23
     aa6:	88 1f       	adc	r24, r24
     aa8:	99 1f       	adc	r25, r25
     aaa:	1a 94       	dec	r1
     aac:	69 f7       	brne	.-38     	; 0xa88 <__udivmodsi4_loop>
     aae:	60 95       	com	r22
     ab0:	70 95       	com	r23
     ab2:	80 95       	com	r24
     ab4:	90 95       	com	r25
     ab6:	9b 01       	movw	r18, r22
     ab8:	ac 01       	movw	r20, r24
     aba:	bd 01       	movw	r22, r26
     abc:	cf 01       	movw	r24, r30
     abe:	08 95       	ret

00000ac0 <memset>:
     ac0:	dc 01       	movw	r26, r24
     ac2:	01 c0       	rjmp	.+2      	; 0xac6 <memset+0x6>
     ac4:	6d 93       	st	X+, r22
     ac6:	41 50       	subi	r20, 0x01	; 1
     ac8:	50 40       	sbci	r21, 0x00	; 0
     aca:	e0 f7       	brcc	.-8      	; 0xac4 <memset+0x4>
     acc:	08 95       	ret

00000ace <vprintf>:
     ace:	9c 01       	movw	r18, r24
     ad0:	ab 01       	movw	r20, r22
     ad2:	80 91 23 04 	lds	r24, 0x0423
     ad6:	90 91 24 04 	lds	r25, 0x0424
     ada:	b9 01       	movw	r22, r18
     adc:	0e 94 71 05 	call	0xae2	; 0xae2 <vfprintf>
     ae0:	08 95       	ret

00000ae2 <vfprintf>:
     ae2:	ab e0       	ldi	r26, 0x0B	; 11
     ae4:	b0 e0       	ldi	r27, 0x00	; 0
     ae6:	e7 e7       	ldi	r30, 0x77	; 119
     ae8:	f5 e0       	ldi	r31, 0x05	; 5
     aea:	0c 94 ee 07 	jmp	0xfdc	; 0xfdc <__prologue_saves__>
     aee:	3c 01       	movw	r6, r24
     af0:	2b 01       	movw	r4, r22
     af2:	5a 01       	movw	r10, r20
     af4:	fc 01       	movw	r30, r24
     af6:	17 82       	std	Z+7, r1	; 0x07
     af8:	16 82       	std	Z+6, r1	; 0x06
     afa:	83 81       	ldd	r24, Z+3	; 0x03
     afc:	81 fd       	sbrc	r24, 1
     afe:	03 c0       	rjmp	.+6      	; 0xb06 <vfprintf+0x24>
     b00:	6f ef       	ldi	r22, 0xFF	; 255
     b02:	7f ef       	ldi	r23, 0xFF	; 255
     b04:	c6 c1       	rjmp	.+908    	; 0xe92 <vfprintf+0x3b0>
     b06:	9a e0       	ldi	r25, 0x0A	; 10
     b08:	89 2e       	mov	r8, r25
     b0a:	1e 01       	movw	r2, r28
     b0c:	08 94       	sec
     b0e:	21 1c       	adc	r2, r1
     b10:	31 1c       	adc	r3, r1
     b12:	f3 01       	movw	r30, r6
     b14:	23 81       	ldd	r18, Z+3	; 0x03
     b16:	f2 01       	movw	r30, r4
     b18:	23 fd       	sbrc	r18, 3
     b1a:	85 91       	lpm	r24, Z+
     b1c:	23 ff       	sbrs	r18, 3
     b1e:	81 91       	ld	r24, Z+
     b20:	2f 01       	movw	r4, r30
     b22:	88 23       	and	r24, r24
     b24:	09 f4       	brne	.+2      	; 0xb28 <vfprintf+0x46>
     b26:	b2 c1       	rjmp	.+868    	; 0xe8c <vfprintf+0x3aa>
     b28:	85 32       	cpi	r24, 0x25	; 37
     b2a:	39 f4       	brne	.+14     	; 0xb3a <vfprintf+0x58>
     b2c:	23 fd       	sbrc	r18, 3
     b2e:	85 91       	lpm	r24, Z+
     b30:	23 ff       	sbrs	r18, 3
     b32:	81 91       	ld	r24, Z+
     b34:	2f 01       	movw	r4, r30
     b36:	85 32       	cpi	r24, 0x25	; 37
     b38:	29 f4       	brne	.+10     	; 0xb44 <vfprintf+0x62>
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	b3 01       	movw	r22, r6
     b3e:	0e 94 64 07 	call	0xec8	; 0xec8 <fputc>
     b42:	e7 cf       	rjmp	.-50     	; 0xb12 <vfprintf+0x30>
     b44:	98 2f       	mov	r25, r24
     b46:	ff 24       	eor	r15, r15
     b48:	ee 24       	eor	r14, r14
     b4a:	99 24       	eor	r9, r9
     b4c:	ff e1       	ldi	r31, 0x1F	; 31
     b4e:	ff 15       	cp	r31, r15
     b50:	d0 f0       	brcs	.+52     	; 0xb86 <vfprintf+0xa4>
     b52:	9b 32       	cpi	r25, 0x2B	; 43
     b54:	69 f0       	breq	.+26     	; 0xb70 <vfprintf+0x8e>
     b56:	9c 32       	cpi	r25, 0x2C	; 44
     b58:	28 f4       	brcc	.+10     	; 0xb64 <vfprintf+0x82>
     b5a:	90 32       	cpi	r25, 0x20	; 32
     b5c:	59 f0       	breq	.+22     	; 0xb74 <vfprintf+0x92>
     b5e:	93 32       	cpi	r25, 0x23	; 35
     b60:	91 f4       	brne	.+36     	; 0xb86 <vfprintf+0xa4>
     b62:	0e c0       	rjmp	.+28     	; 0xb80 <vfprintf+0x9e>
     b64:	9d 32       	cpi	r25, 0x2D	; 45
     b66:	49 f0       	breq	.+18     	; 0xb7a <vfprintf+0x98>
     b68:	90 33       	cpi	r25, 0x30	; 48
     b6a:	69 f4       	brne	.+26     	; 0xb86 <vfprintf+0xa4>
     b6c:	41 e0       	ldi	r20, 0x01	; 1
     b6e:	24 c0       	rjmp	.+72     	; 0xbb8 <vfprintf+0xd6>
     b70:	52 e0       	ldi	r21, 0x02	; 2
     b72:	f5 2a       	or	r15, r21
     b74:	84 e0       	ldi	r24, 0x04	; 4
     b76:	f8 2a       	or	r15, r24
     b78:	28 c0       	rjmp	.+80     	; 0xbca <vfprintf+0xe8>
     b7a:	98 e0       	ldi	r25, 0x08	; 8
     b7c:	f9 2a       	or	r15, r25
     b7e:	25 c0       	rjmp	.+74     	; 0xbca <vfprintf+0xe8>
     b80:	e0 e1       	ldi	r30, 0x10	; 16
     b82:	fe 2a       	or	r15, r30
     b84:	22 c0       	rjmp	.+68     	; 0xbca <vfprintf+0xe8>
     b86:	f7 fc       	sbrc	r15, 7
     b88:	29 c0       	rjmp	.+82     	; 0xbdc <vfprintf+0xfa>
     b8a:	89 2f       	mov	r24, r25
     b8c:	80 53       	subi	r24, 0x30	; 48
     b8e:	8a 30       	cpi	r24, 0x0A	; 10
     b90:	70 f4       	brcc	.+28     	; 0xbae <vfprintf+0xcc>
     b92:	f6 fe       	sbrs	r15, 6
     b94:	05 c0       	rjmp	.+10     	; 0xba0 <vfprintf+0xbe>
     b96:	98 9c       	mul	r9, r8
     b98:	90 2c       	mov	r9, r0
     b9a:	11 24       	eor	r1, r1
     b9c:	98 0e       	add	r9, r24
     b9e:	15 c0       	rjmp	.+42     	; 0xbca <vfprintf+0xe8>
     ba0:	e8 9c       	mul	r14, r8
     ba2:	e0 2c       	mov	r14, r0
     ba4:	11 24       	eor	r1, r1
     ba6:	e8 0e       	add	r14, r24
     ba8:	f0 e2       	ldi	r31, 0x20	; 32
     baa:	ff 2a       	or	r15, r31
     bac:	0e c0       	rjmp	.+28     	; 0xbca <vfprintf+0xe8>
     bae:	9e 32       	cpi	r25, 0x2E	; 46
     bb0:	29 f4       	brne	.+10     	; 0xbbc <vfprintf+0xda>
     bb2:	f6 fc       	sbrc	r15, 6
     bb4:	6b c1       	rjmp	.+726    	; 0xe8c <vfprintf+0x3aa>
     bb6:	40 e4       	ldi	r20, 0x40	; 64
     bb8:	f4 2a       	or	r15, r20
     bba:	07 c0       	rjmp	.+14     	; 0xbca <vfprintf+0xe8>
     bbc:	9c 36       	cpi	r25, 0x6C	; 108
     bbe:	19 f4       	brne	.+6      	; 0xbc6 <vfprintf+0xe4>
     bc0:	50 e8       	ldi	r21, 0x80	; 128
     bc2:	f5 2a       	or	r15, r21
     bc4:	02 c0       	rjmp	.+4      	; 0xbca <vfprintf+0xe8>
     bc6:	98 36       	cpi	r25, 0x68	; 104
     bc8:	49 f4       	brne	.+18     	; 0xbdc <vfprintf+0xfa>
     bca:	f2 01       	movw	r30, r4
     bcc:	23 fd       	sbrc	r18, 3
     bce:	95 91       	lpm	r25, Z+
     bd0:	23 ff       	sbrs	r18, 3
     bd2:	91 91       	ld	r25, Z+
     bd4:	2f 01       	movw	r4, r30
     bd6:	99 23       	and	r25, r25
     bd8:	09 f0       	breq	.+2      	; 0xbdc <vfprintf+0xfa>
     bda:	b8 cf       	rjmp	.-144    	; 0xb4c <vfprintf+0x6a>
     bdc:	89 2f       	mov	r24, r25
     bde:	85 54       	subi	r24, 0x45	; 69
     be0:	83 30       	cpi	r24, 0x03	; 3
     be2:	18 f0       	brcs	.+6      	; 0xbea <vfprintf+0x108>
     be4:	80 52       	subi	r24, 0x20	; 32
     be6:	83 30       	cpi	r24, 0x03	; 3
     be8:	38 f4       	brcc	.+14     	; 0xbf8 <vfprintf+0x116>
     bea:	44 e0       	ldi	r20, 0x04	; 4
     bec:	50 e0       	ldi	r21, 0x00	; 0
     bee:	a4 0e       	add	r10, r20
     bf0:	b5 1e       	adc	r11, r21
     bf2:	5f e3       	ldi	r21, 0x3F	; 63
     bf4:	59 83       	std	Y+1, r21	; 0x01
     bf6:	0f c0       	rjmp	.+30     	; 0xc16 <vfprintf+0x134>
     bf8:	93 36       	cpi	r25, 0x63	; 99
     bfa:	31 f0       	breq	.+12     	; 0xc08 <vfprintf+0x126>
     bfc:	93 37       	cpi	r25, 0x73	; 115
     bfe:	79 f0       	breq	.+30     	; 0xc1e <vfprintf+0x13c>
     c00:	93 35       	cpi	r25, 0x53	; 83
     c02:	09 f0       	breq	.+2      	; 0xc06 <vfprintf+0x124>
     c04:	56 c0       	rjmp	.+172    	; 0xcb2 <vfprintf+0x1d0>
     c06:	20 c0       	rjmp	.+64     	; 0xc48 <vfprintf+0x166>
     c08:	f5 01       	movw	r30, r10
     c0a:	80 81       	ld	r24, Z
     c0c:	89 83       	std	Y+1, r24	; 0x01
     c0e:	42 e0       	ldi	r20, 0x02	; 2
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	a4 0e       	add	r10, r20
     c14:	b5 1e       	adc	r11, r21
     c16:	61 01       	movw	r12, r2
     c18:	01 e0       	ldi	r16, 0x01	; 1
     c1a:	10 e0       	ldi	r17, 0x00	; 0
     c1c:	12 c0       	rjmp	.+36     	; 0xc42 <vfprintf+0x160>
     c1e:	f5 01       	movw	r30, r10
     c20:	c0 80       	ld	r12, Z
     c22:	d1 80       	ldd	r13, Z+1	; 0x01
     c24:	f6 fc       	sbrc	r15, 6
     c26:	03 c0       	rjmp	.+6      	; 0xc2e <vfprintf+0x14c>
     c28:	6f ef       	ldi	r22, 0xFF	; 255
     c2a:	7f ef       	ldi	r23, 0xFF	; 255
     c2c:	02 c0       	rjmp	.+4      	; 0xc32 <vfprintf+0x150>
     c2e:	69 2d       	mov	r22, r9
     c30:	70 e0       	ldi	r23, 0x00	; 0
     c32:	42 e0       	ldi	r20, 0x02	; 2
     c34:	50 e0       	ldi	r21, 0x00	; 0
     c36:	a4 0e       	add	r10, r20
     c38:	b5 1e       	adc	r11, r21
     c3a:	c6 01       	movw	r24, r12
     c3c:	0e 94 59 07 	call	0xeb2	; 0xeb2 <strnlen>
     c40:	8c 01       	movw	r16, r24
     c42:	5f e7       	ldi	r21, 0x7F	; 127
     c44:	f5 22       	and	r15, r21
     c46:	14 c0       	rjmp	.+40     	; 0xc70 <vfprintf+0x18e>
     c48:	f5 01       	movw	r30, r10
     c4a:	c0 80       	ld	r12, Z
     c4c:	d1 80       	ldd	r13, Z+1	; 0x01
     c4e:	f6 fc       	sbrc	r15, 6
     c50:	03 c0       	rjmp	.+6      	; 0xc58 <vfprintf+0x176>
     c52:	6f ef       	ldi	r22, 0xFF	; 255
     c54:	7f ef       	ldi	r23, 0xFF	; 255
     c56:	02 c0       	rjmp	.+4      	; 0xc5c <vfprintf+0x17a>
     c58:	69 2d       	mov	r22, r9
     c5a:	70 e0       	ldi	r23, 0x00	; 0
     c5c:	42 e0       	ldi	r20, 0x02	; 2
     c5e:	50 e0       	ldi	r21, 0x00	; 0
     c60:	a4 0e       	add	r10, r20
     c62:	b5 1e       	adc	r11, r21
     c64:	c6 01       	movw	r24, r12
     c66:	0e 94 4e 07 	call	0xe9c	; 0xe9c <strnlen_P>
     c6a:	8c 01       	movw	r16, r24
     c6c:	50 e8       	ldi	r21, 0x80	; 128
     c6e:	f5 2a       	or	r15, r21
     c70:	f3 fe       	sbrs	r15, 3
     c72:	07 c0       	rjmp	.+14     	; 0xc82 <vfprintf+0x1a0>
     c74:	1a c0       	rjmp	.+52     	; 0xcaa <vfprintf+0x1c8>
     c76:	80 e2       	ldi	r24, 0x20	; 32
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	b3 01       	movw	r22, r6
     c7c:	0e 94 64 07 	call	0xec8	; 0xec8 <fputc>
     c80:	ea 94       	dec	r14
     c82:	8e 2d       	mov	r24, r14
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	08 17       	cp	r16, r24
     c88:	19 07       	cpc	r17, r25
     c8a:	a8 f3       	brcs	.-22     	; 0xc76 <vfprintf+0x194>
     c8c:	0e c0       	rjmp	.+28     	; 0xcaa <vfprintf+0x1c8>
     c8e:	f6 01       	movw	r30, r12
     c90:	f7 fc       	sbrc	r15, 7
     c92:	85 91       	lpm	r24, Z+
     c94:	f7 fe       	sbrs	r15, 7
     c96:	81 91       	ld	r24, Z+
     c98:	6f 01       	movw	r12, r30
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	b3 01       	movw	r22, r6
     c9e:	0e 94 64 07 	call	0xec8	; 0xec8 <fputc>
     ca2:	e1 10       	cpse	r14, r1
     ca4:	ea 94       	dec	r14
     ca6:	01 50       	subi	r16, 0x01	; 1
     ca8:	10 40       	sbci	r17, 0x00	; 0
     caa:	01 15       	cp	r16, r1
     cac:	11 05       	cpc	r17, r1
     cae:	79 f7       	brne	.-34     	; 0xc8e <vfprintf+0x1ac>
     cb0:	ea c0       	rjmp	.+468    	; 0xe86 <vfprintf+0x3a4>
     cb2:	94 36       	cpi	r25, 0x64	; 100
     cb4:	11 f0       	breq	.+4      	; 0xcba <vfprintf+0x1d8>
     cb6:	99 36       	cpi	r25, 0x69	; 105
     cb8:	69 f5       	brne	.+90     	; 0xd14 <vfprintf+0x232>
     cba:	f7 fe       	sbrs	r15, 7
     cbc:	08 c0       	rjmp	.+16     	; 0xcce <vfprintf+0x1ec>
     cbe:	f5 01       	movw	r30, r10
     cc0:	20 81       	ld	r18, Z
     cc2:	31 81       	ldd	r19, Z+1	; 0x01
     cc4:	42 81       	ldd	r20, Z+2	; 0x02
     cc6:	53 81       	ldd	r21, Z+3	; 0x03
     cc8:	84 e0       	ldi	r24, 0x04	; 4
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	0a c0       	rjmp	.+20     	; 0xce2 <vfprintf+0x200>
     cce:	f5 01       	movw	r30, r10
     cd0:	80 81       	ld	r24, Z
     cd2:	91 81       	ldd	r25, Z+1	; 0x01
     cd4:	9c 01       	movw	r18, r24
     cd6:	44 27       	eor	r20, r20
     cd8:	37 fd       	sbrc	r19, 7
     cda:	40 95       	com	r20
     cdc:	54 2f       	mov	r21, r20
     cde:	82 e0       	ldi	r24, 0x02	; 2
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	a8 0e       	add	r10, r24
     ce4:	b9 1e       	adc	r11, r25
     ce6:	9f e6       	ldi	r25, 0x6F	; 111
     ce8:	f9 22       	and	r15, r25
     cea:	57 ff       	sbrs	r21, 7
     cec:	09 c0       	rjmp	.+18     	; 0xd00 <vfprintf+0x21e>
     cee:	50 95       	com	r21
     cf0:	40 95       	com	r20
     cf2:	30 95       	com	r19
     cf4:	21 95       	neg	r18
     cf6:	3f 4f       	sbci	r19, 0xFF	; 255
     cf8:	4f 4f       	sbci	r20, 0xFF	; 255
     cfa:	5f 4f       	sbci	r21, 0xFF	; 255
     cfc:	e0 e8       	ldi	r30, 0x80	; 128
     cfe:	fe 2a       	or	r15, r30
     d00:	ca 01       	movw	r24, r20
     d02:	b9 01       	movw	r22, r18
     d04:	a1 01       	movw	r20, r2
     d06:	2a e0       	ldi	r18, 0x0A	; 10
     d08:	30 e0       	ldi	r19, 0x00	; 0
     d0a:	0e 94 90 07 	call	0xf20	; 0xf20 <__ultoa_invert>
     d0e:	d8 2e       	mov	r13, r24
     d10:	d2 18       	sub	r13, r2
     d12:	40 c0       	rjmp	.+128    	; 0xd94 <vfprintf+0x2b2>
     d14:	95 37       	cpi	r25, 0x75	; 117
     d16:	29 f4       	brne	.+10     	; 0xd22 <vfprintf+0x240>
     d18:	1f 2d       	mov	r17, r15
     d1a:	1f 7e       	andi	r17, 0xEF	; 239
     d1c:	2a e0       	ldi	r18, 0x0A	; 10
     d1e:	30 e0       	ldi	r19, 0x00	; 0
     d20:	1d c0       	rjmp	.+58     	; 0xd5c <vfprintf+0x27a>
     d22:	1f 2d       	mov	r17, r15
     d24:	19 7f       	andi	r17, 0xF9	; 249
     d26:	9f 36       	cpi	r25, 0x6F	; 111
     d28:	61 f0       	breq	.+24     	; 0xd42 <vfprintf+0x260>
     d2a:	90 37       	cpi	r25, 0x70	; 112
     d2c:	20 f4       	brcc	.+8      	; 0xd36 <vfprintf+0x254>
     d2e:	98 35       	cpi	r25, 0x58	; 88
     d30:	09 f0       	breq	.+2      	; 0xd34 <vfprintf+0x252>
     d32:	ac c0       	rjmp	.+344    	; 0xe8c <vfprintf+0x3aa>
     d34:	0f c0       	rjmp	.+30     	; 0xd54 <vfprintf+0x272>
     d36:	90 37       	cpi	r25, 0x70	; 112
     d38:	39 f0       	breq	.+14     	; 0xd48 <vfprintf+0x266>
     d3a:	98 37       	cpi	r25, 0x78	; 120
     d3c:	09 f0       	breq	.+2      	; 0xd40 <vfprintf+0x25e>
     d3e:	a6 c0       	rjmp	.+332    	; 0xe8c <vfprintf+0x3aa>
     d40:	04 c0       	rjmp	.+8      	; 0xd4a <vfprintf+0x268>
     d42:	28 e0       	ldi	r18, 0x08	; 8
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	0a c0       	rjmp	.+20     	; 0xd5c <vfprintf+0x27a>
     d48:	10 61       	ori	r17, 0x10	; 16
     d4a:	14 fd       	sbrc	r17, 4
     d4c:	14 60       	ori	r17, 0x04	; 4
     d4e:	20 e1       	ldi	r18, 0x10	; 16
     d50:	30 e0       	ldi	r19, 0x00	; 0
     d52:	04 c0       	rjmp	.+8      	; 0xd5c <vfprintf+0x27a>
     d54:	14 fd       	sbrc	r17, 4
     d56:	16 60       	ori	r17, 0x06	; 6
     d58:	20 e1       	ldi	r18, 0x10	; 16
     d5a:	32 e0       	ldi	r19, 0x02	; 2
     d5c:	17 ff       	sbrs	r17, 7
     d5e:	08 c0       	rjmp	.+16     	; 0xd70 <vfprintf+0x28e>
     d60:	f5 01       	movw	r30, r10
     d62:	60 81       	ld	r22, Z
     d64:	71 81       	ldd	r23, Z+1	; 0x01
     d66:	82 81       	ldd	r24, Z+2	; 0x02
     d68:	93 81       	ldd	r25, Z+3	; 0x03
     d6a:	44 e0       	ldi	r20, 0x04	; 4
     d6c:	50 e0       	ldi	r21, 0x00	; 0
     d6e:	08 c0       	rjmp	.+16     	; 0xd80 <vfprintf+0x29e>
     d70:	f5 01       	movw	r30, r10
     d72:	80 81       	ld	r24, Z
     d74:	91 81       	ldd	r25, Z+1	; 0x01
     d76:	bc 01       	movw	r22, r24
     d78:	80 e0       	ldi	r24, 0x00	; 0
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	42 e0       	ldi	r20, 0x02	; 2
     d7e:	50 e0       	ldi	r21, 0x00	; 0
     d80:	a4 0e       	add	r10, r20
     d82:	b5 1e       	adc	r11, r21
     d84:	a1 01       	movw	r20, r2
     d86:	0e 94 90 07 	call	0xf20	; 0xf20 <__ultoa_invert>
     d8a:	d8 2e       	mov	r13, r24
     d8c:	d2 18       	sub	r13, r2
     d8e:	8f e7       	ldi	r24, 0x7F	; 127
     d90:	f8 2e       	mov	r15, r24
     d92:	f1 22       	and	r15, r17
     d94:	f6 fe       	sbrs	r15, 6
     d96:	0b c0       	rjmp	.+22     	; 0xdae <vfprintf+0x2cc>
     d98:	5e ef       	ldi	r21, 0xFE	; 254
     d9a:	f5 22       	and	r15, r21
     d9c:	d9 14       	cp	r13, r9
     d9e:	38 f4       	brcc	.+14     	; 0xdae <vfprintf+0x2cc>
     da0:	f4 fe       	sbrs	r15, 4
     da2:	07 c0       	rjmp	.+14     	; 0xdb2 <vfprintf+0x2d0>
     da4:	f2 fc       	sbrc	r15, 2
     da6:	05 c0       	rjmp	.+10     	; 0xdb2 <vfprintf+0x2d0>
     da8:	8f ee       	ldi	r24, 0xEF	; 239
     daa:	f8 22       	and	r15, r24
     dac:	02 c0       	rjmp	.+4      	; 0xdb2 <vfprintf+0x2d0>
     dae:	1d 2d       	mov	r17, r13
     db0:	01 c0       	rjmp	.+2      	; 0xdb4 <vfprintf+0x2d2>
     db2:	19 2d       	mov	r17, r9
     db4:	f4 fe       	sbrs	r15, 4
     db6:	0d c0       	rjmp	.+26     	; 0xdd2 <vfprintf+0x2f0>
     db8:	fe 01       	movw	r30, r28
     dba:	ed 0d       	add	r30, r13
     dbc:	f1 1d       	adc	r31, r1
     dbe:	80 81       	ld	r24, Z
     dc0:	80 33       	cpi	r24, 0x30	; 48
     dc2:	19 f4       	brne	.+6      	; 0xdca <vfprintf+0x2e8>
     dc4:	99 ee       	ldi	r25, 0xE9	; 233
     dc6:	f9 22       	and	r15, r25
     dc8:	08 c0       	rjmp	.+16     	; 0xdda <vfprintf+0x2f8>
     dca:	1f 5f       	subi	r17, 0xFF	; 255
     dcc:	f2 fe       	sbrs	r15, 2
     dce:	05 c0       	rjmp	.+10     	; 0xdda <vfprintf+0x2f8>
     dd0:	03 c0       	rjmp	.+6      	; 0xdd8 <vfprintf+0x2f6>
     dd2:	8f 2d       	mov	r24, r15
     dd4:	86 78       	andi	r24, 0x86	; 134
     dd6:	09 f0       	breq	.+2      	; 0xdda <vfprintf+0x2f8>
     dd8:	1f 5f       	subi	r17, 0xFF	; 255
     dda:	0f 2d       	mov	r16, r15
     ddc:	f3 fc       	sbrc	r15, 3
     dde:	14 c0       	rjmp	.+40     	; 0xe08 <vfprintf+0x326>
     de0:	f0 fe       	sbrs	r15, 0
     de2:	0f c0       	rjmp	.+30     	; 0xe02 <vfprintf+0x320>
     de4:	1e 15       	cp	r17, r14
     de6:	10 f0       	brcs	.+4      	; 0xdec <vfprintf+0x30a>
     de8:	9d 2c       	mov	r9, r13
     dea:	0b c0       	rjmp	.+22     	; 0xe02 <vfprintf+0x320>
     dec:	9d 2c       	mov	r9, r13
     dee:	9e 0c       	add	r9, r14
     df0:	91 1a       	sub	r9, r17
     df2:	1e 2d       	mov	r17, r14
     df4:	06 c0       	rjmp	.+12     	; 0xe02 <vfprintf+0x320>
     df6:	80 e2       	ldi	r24, 0x20	; 32
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	b3 01       	movw	r22, r6
     dfc:	0e 94 64 07 	call	0xec8	; 0xec8 <fputc>
     e00:	1f 5f       	subi	r17, 0xFF	; 255
     e02:	1e 15       	cp	r17, r14
     e04:	c0 f3       	brcs	.-16     	; 0xdf6 <vfprintf+0x314>
     e06:	04 c0       	rjmp	.+8      	; 0xe10 <vfprintf+0x32e>
     e08:	1e 15       	cp	r17, r14
     e0a:	10 f4       	brcc	.+4      	; 0xe10 <vfprintf+0x32e>
     e0c:	e1 1a       	sub	r14, r17
     e0e:	01 c0       	rjmp	.+2      	; 0xe12 <vfprintf+0x330>
     e10:	ee 24       	eor	r14, r14
     e12:	04 ff       	sbrs	r16, 4
     e14:	0f c0       	rjmp	.+30     	; 0xe34 <vfprintf+0x352>
     e16:	80 e3       	ldi	r24, 0x30	; 48
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	b3 01       	movw	r22, r6
     e1c:	0e 94 64 07 	call	0xec8	; 0xec8 <fputc>
     e20:	02 ff       	sbrs	r16, 2
     e22:	1d c0       	rjmp	.+58     	; 0xe5e <vfprintf+0x37c>
     e24:	01 fd       	sbrc	r16, 1
     e26:	03 c0       	rjmp	.+6      	; 0xe2e <vfprintf+0x34c>
     e28:	88 e7       	ldi	r24, 0x78	; 120
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	0e c0       	rjmp	.+28     	; 0xe4a <vfprintf+0x368>
     e2e:	88 e5       	ldi	r24, 0x58	; 88
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	0b c0       	rjmp	.+22     	; 0xe4a <vfprintf+0x368>
     e34:	80 2f       	mov	r24, r16
     e36:	86 78       	andi	r24, 0x86	; 134
     e38:	91 f0       	breq	.+36     	; 0xe5e <vfprintf+0x37c>
     e3a:	01 ff       	sbrs	r16, 1
     e3c:	02 c0       	rjmp	.+4      	; 0xe42 <vfprintf+0x360>
     e3e:	8b e2       	ldi	r24, 0x2B	; 43
     e40:	01 c0       	rjmp	.+2      	; 0xe44 <vfprintf+0x362>
     e42:	80 e2       	ldi	r24, 0x20	; 32
     e44:	f7 fc       	sbrc	r15, 7
     e46:	8d e2       	ldi	r24, 0x2D	; 45
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	b3 01       	movw	r22, r6
     e4c:	0e 94 64 07 	call	0xec8	; 0xec8 <fputc>
     e50:	06 c0       	rjmp	.+12     	; 0xe5e <vfprintf+0x37c>
     e52:	80 e3       	ldi	r24, 0x30	; 48
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	b3 01       	movw	r22, r6
     e58:	0e 94 64 07 	call	0xec8	; 0xec8 <fputc>
     e5c:	9a 94       	dec	r9
     e5e:	d9 14       	cp	r13, r9
     e60:	c0 f3       	brcs	.-16     	; 0xe52 <vfprintf+0x370>
     e62:	da 94       	dec	r13
     e64:	f1 01       	movw	r30, r2
     e66:	ed 0d       	add	r30, r13
     e68:	f1 1d       	adc	r31, r1
     e6a:	80 81       	ld	r24, Z
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	b3 01       	movw	r22, r6
     e70:	0e 94 64 07 	call	0xec8	; 0xec8 <fputc>
     e74:	dd 20       	and	r13, r13
     e76:	a9 f7       	brne	.-22     	; 0xe62 <vfprintf+0x380>
     e78:	06 c0       	rjmp	.+12     	; 0xe86 <vfprintf+0x3a4>
     e7a:	80 e2       	ldi	r24, 0x20	; 32
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	b3 01       	movw	r22, r6
     e80:	0e 94 64 07 	call	0xec8	; 0xec8 <fputc>
     e84:	ea 94       	dec	r14
     e86:	ee 20       	and	r14, r14
     e88:	c1 f7       	brne	.-16     	; 0xe7a <vfprintf+0x398>
     e8a:	43 ce       	rjmp	.-890    	; 0xb12 <vfprintf+0x30>
     e8c:	f3 01       	movw	r30, r6
     e8e:	66 81       	ldd	r22, Z+6	; 0x06
     e90:	77 81       	ldd	r23, Z+7	; 0x07
     e92:	cb 01       	movw	r24, r22
     e94:	2b 96       	adiw	r28, 0x0b	; 11
     e96:	e2 e1       	ldi	r30, 0x12	; 18
     e98:	0c 94 0a 08 	jmp	0x1014	; 0x1014 <__epilogue_restores__>

00000e9c <strnlen_P>:
     e9c:	fc 01       	movw	r30, r24
     e9e:	05 90       	lpm	r0, Z+
     ea0:	61 50       	subi	r22, 0x01	; 1
     ea2:	70 40       	sbci	r23, 0x00	; 0
     ea4:	01 10       	cpse	r0, r1
     ea6:	d8 f7       	brcc	.-10     	; 0xe9e <strnlen_P+0x2>
     ea8:	80 95       	com	r24
     eaa:	90 95       	com	r25
     eac:	8e 0f       	add	r24, r30
     eae:	9f 1f       	adc	r25, r31
     eb0:	08 95       	ret

00000eb2 <strnlen>:
     eb2:	fc 01       	movw	r30, r24
     eb4:	61 50       	subi	r22, 0x01	; 1
     eb6:	70 40       	sbci	r23, 0x00	; 0
     eb8:	01 90       	ld	r0, Z+
     eba:	01 10       	cpse	r0, r1
     ebc:	d8 f7       	brcc	.-10     	; 0xeb4 <strnlen+0x2>
     ebe:	80 95       	com	r24
     ec0:	90 95       	com	r25
     ec2:	8e 0f       	add	r24, r30
     ec4:	9f 1f       	adc	r25, r31
     ec6:	08 95       	ret

00000ec8 <fputc>:
     ec8:	0f 93       	push	r16
     eca:	1f 93       	push	r17
     ecc:	cf 93       	push	r28
     ece:	df 93       	push	r29
     ed0:	8c 01       	movw	r16, r24
     ed2:	eb 01       	movw	r28, r22
     ed4:	8b 81       	ldd	r24, Y+3	; 0x03
     ed6:	81 ff       	sbrs	r24, 1
     ed8:	1b c0       	rjmp	.+54     	; 0xf10 <fputc+0x48>
     eda:	82 ff       	sbrs	r24, 2
     edc:	0d c0       	rjmp	.+26     	; 0xef8 <fputc+0x30>
     ede:	2e 81       	ldd	r18, Y+6	; 0x06
     ee0:	3f 81       	ldd	r19, Y+7	; 0x07
     ee2:	8c 81       	ldd	r24, Y+4	; 0x04
     ee4:	9d 81       	ldd	r25, Y+5	; 0x05
     ee6:	28 17       	cp	r18, r24
     ee8:	39 07       	cpc	r19, r25
     eea:	64 f4       	brge	.+24     	; 0xf04 <fputc+0x3c>
     eec:	e8 81       	ld	r30, Y
     eee:	f9 81       	ldd	r31, Y+1	; 0x01
     ef0:	01 93       	st	Z+, r16
     ef2:	f9 83       	std	Y+1, r31	; 0x01
     ef4:	e8 83       	st	Y, r30
     ef6:	06 c0       	rjmp	.+12     	; 0xf04 <fputc+0x3c>
     ef8:	e8 85       	ldd	r30, Y+8	; 0x08
     efa:	f9 85       	ldd	r31, Y+9	; 0x09
     efc:	80 2f       	mov	r24, r16
     efe:	09 95       	icall
     f00:	89 2b       	or	r24, r25
     f02:	31 f4       	brne	.+12     	; 0xf10 <fputc+0x48>
     f04:	8e 81       	ldd	r24, Y+6	; 0x06
     f06:	9f 81       	ldd	r25, Y+7	; 0x07
     f08:	01 96       	adiw	r24, 0x01	; 1
     f0a:	9f 83       	std	Y+7, r25	; 0x07
     f0c:	8e 83       	std	Y+6, r24	; 0x06
     f0e:	02 c0       	rjmp	.+4      	; 0xf14 <fputc+0x4c>
     f10:	0f ef       	ldi	r16, 0xFF	; 255
     f12:	1f ef       	ldi	r17, 0xFF	; 255
     f14:	c8 01       	movw	r24, r16
     f16:	df 91       	pop	r29
     f18:	cf 91       	pop	r28
     f1a:	1f 91       	pop	r17
     f1c:	0f 91       	pop	r16
     f1e:	08 95       	ret

00000f20 <__ultoa_invert>:
     f20:	fa 01       	movw	r30, r20
     f22:	aa 27       	eor	r26, r26
     f24:	28 30       	cpi	r18, 0x08	; 8
     f26:	51 f1       	breq	.+84     	; 0xf7c <__ultoa_invert+0x5c>
     f28:	20 31       	cpi	r18, 0x10	; 16
     f2a:	81 f1       	breq	.+96     	; 0xf8c <__ultoa_invert+0x6c>
     f2c:	e8 94       	clt
     f2e:	6f 93       	push	r22
     f30:	6e 7f       	andi	r22, 0xFE	; 254
     f32:	6e 5f       	subi	r22, 0xFE	; 254
     f34:	7f 4f       	sbci	r23, 0xFF	; 255
     f36:	8f 4f       	sbci	r24, 0xFF	; 255
     f38:	9f 4f       	sbci	r25, 0xFF	; 255
     f3a:	af 4f       	sbci	r26, 0xFF	; 255
     f3c:	b1 e0       	ldi	r27, 0x01	; 1
     f3e:	3e d0       	rcall	.+124    	; 0xfbc <__ultoa_invert+0x9c>
     f40:	b4 e0       	ldi	r27, 0x04	; 4
     f42:	3c d0       	rcall	.+120    	; 0xfbc <__ultoa_invert+0x9c>
     f44:	67 0f       	add	r22, r23
     f46:	78 1f       	adc	r23, r24
     f48:	89 1f       	adc	r24, r25
     f4a:	9a 1f       	adc	r25, r26
     f4c:	a1 1d       	adc	r26, r1
     f4e:	68 0f       	add	r22, r24
     f50:	79 1f       	adc	r23, r25
     f52:	8a 1f       	adc	r24, r26
     f54:	91 1d       	adc	r25, r1
     f56:	a1 1d       	adc	r26, r1
     f58:	6a 0f       	add	r22, r26
     f5a:	71 1d       	adc	r23, r1
     f5c:	81 1d       	adc	r24, r1
     f5e:	91 1d       	adc	r25, r1
     f60:	a1 1d       	adc	r26, r1
     f62:	20 d0       	rcall	.+64     	; 0xfa4 <__ultoa_invert+0x84>
     f64:	09 f4       	brne	.+2      	; 0xf68 <__ultoa_invert+0x48>
     f66:	68 94       	set
     f68:	3f 91       	pop	r19
     f6a:	2a e0       	ldi	r18, 0x0A	; 10
     f6c:	26 9f       	mul	r18, r22
     f6e:	11 24       	eor	r1, r1
     f70:	30 19       	sub	r19, r0
     f72:	30 5d       	subi	r19, 0xD0	; 208
     f74:	31 93       	st	Z+, r19
     f76:	de f6       	brtc	.-74     	; 0xf2e <__ultoa_invert+0xe>
     f78:	cf 01       	movw	r24, r30
     f7a:	08 95       	ret
     f7c:	46 2f       	mov	r20, r22
     f7e:	47 70       	andi	r20, 0x07	; 7
     f80:	40 5d       	subi	r20, 0xD0	; 208
     f82:	41 93       	st	Z+, r20
     f84:	b3 e0       	ldi	r27, 0x03	; 3
     f86:	0f d0       	rcall	.+30     	; 0xfa6 <__ultoa_invert+0x86>
     f88:	c9 f7       	brne	.-14     	; 0xf7c <__ultoa_invert+0x5c>
     f8a:	f6 cf       	rjmp	.-20     	; 0xf78 <__ultoa_invert+0x58>
     f8c:	46 2f       	mov	r20, r22
     f8e:	4f 70       	andi	r20, 0x0F	; 15
     f90:	40 5d       	subi	r20, 0xD0	; 208
     f92:	4a 33       	cpi	r20, 0x3A	; 58
     f94:	18 f0       	brcs	.+6      	; 0xf9c <__ultoa_invert+0x7c>
     f96:	49 5d       	subi	r20, 0xD9	; 217
     f98:	31 fd       	sbrc	r19, 1
     f9a:	40 52       	subi	r20, 0x20	; 32
     f9c:	41 93       	st	Z+, r20
     f9e:	02 d0       	rcall	.+4      	; 0xfa4 <__ultoa_invert+0x84>
     fa0:	a9 f7       	brne	.-22     	; 0xf8c <__ultoa_invert+0x6c>
     fa2:	ea cf       	rjmp	.-44     	; 0xf78 <__ultoa_invert+0x58>
     fa4:	b4 e0       	ldi	r27, 0x04	; 4
     fa6:	a6 95       	lsr	r26
     fa8:	97 95       	ror	r25
     faa:	87 95       	ror	r24
     fac:	77 95       	ror	r23
     fae:	67 95       	ror	r22
     fb0:	ba 95       	dec	r27
     fb2:	c9 f7       	brne	.-14     	; 0xfa6 <__ultoa_invert+0x86>
     fb4:	00 97       	sbiw	r24, 0x00	; 0
     fb6:	61 05       	cpc	r22, r1
     fb8:	71 05       	cpc	r23, r1
     fba:	08 95       	ret
     fbc:	9b 01       	movw	r18, r22
     fbe:	ac 01       	movw	r20, r24
     fc0:	0a 2e       	mov	r0, r26
     fc2:	06 94       	lsr	r0
     fc4:	57 95       	ror	r21
     fc6:	47 95       	ror	r20
     fc8:	37 95       	ror	r19
     fca:	27 95       	ror	r18
     fcc:	ba 95       	dec	r27
     fce:	c9 f7       	brne	.-14     	; 0xfc2 <__ultoa_invert+0xa2>
     fd0:	62 0f       	add	r22, r18
     fd2:	73 1f       	adc	r23, r19
     fd4:	84 1f       	adc	r24, r20
     fd6:	95 1f       	adc	r25, r21
     fd8:	a0 1d       	adc	r26, r0
     fda:	08 95       	ret

00000fdc <__prologue_saves__>:
     fdc:	2f 92       	push	r2
     fde:	3f 92       	push	r3
     fe0:	4f 92       	push	r4
     fe2:	5f 92       	push	r5
     fe4:	6f 92       	push	r6
     fe6:	7f 92       	push	r7
     fe8:	8f 92       	push	r8
     fea:	9f 92       	push	r9
     fec:	af 92       	push	r10
     fee:	bf 92       	push	r11
     ff0:	cf 92       	push	r12
     ff2:	df 92       	push	r13
     ff4:	ef 92       	push	r14
     ff6:	ff 92       	push	r15
     ff8:	0f 93       	push	r16
     ffa:	1f 93       	push	r17
     ffc:	cf 93       	push	r28
     ffe:	df 93       	push	r29
    1000:	cd b7       	in	r28, 0x3d	; 61
    1002:	de b7       	in	r29, 0x3e	; 62
    1004:	ca 1b       	sub	r28, r26
    1006:	db 0b       	sbc	r29, r27
    1008:	0f b6       	in	r0, 0x3f	; 63
    100a:	f8 94       	cli
    100c:	de bf       	out	0x3e, r29	; 62
    100e:	0f be       	out	0x3f, r0	; 63
    1010:	cd bf       	out	0x3d, r28	; 61
    1012:	09 94       	ijmp

00001014 <__epilogue_restores__>:
    1014:	2a 88       	ldd	r2, Y+18	; 0x12
    1016:	39 88       	ldd	r3, Y+17	; 0x11
    1018:	48 88       	ldd	r4, Y+16	; 0x10
    101a:	5f 84       	ldd	r5, Y+15	; 0x0f
    101c:	6e 84       	ldd	r6, Y+14	; 0x0e
    101e:	7d 84       	ldd	r7, Y+13	; 0x0d
    1020:	8c 84       	ldd	r8, Y+12	; 0x0c
    1022:	9b 84       	ldd	r9, Y+11	; 0x0b
    1024:	aa 84       	ldd	r10, Y+10	; 0x0a
    1026:	b9 84       	ldd	r11, Y+9	; 0x09
    1028:	c8 84       	ldd	r12, Y+8	; 0x08
    102a:	df 80       	ldd	r13, Y+7	; 0x07
    102c:	ee 80       	ldd	r14, Y+6	; 0x06
    102e:	fd 80       	ldd	r15, Y+5	; 0x05
    1030:	0c 81       	ldd	r16, Y+4	; 0x04
    1032:	1b 81       	ldd	r17, Y+3	; 0x03
    1034:	aa 81       	ldd	r26, Y+2	; 0x02
    1036:	b9 81       	ldd	r27, Y+1	; 0x01
    1038:	ce 0f       	add	r28, r30
    103a:	d1 1d       	adc	r29, r1
    103c:	0f b6       	in	r0, 0x3f	; 63
    103e:	f8 94       	cli
    1040:	de bf       	out	0x3e, r29	; 62
    1042:	0f be       	out	0x3f, r0	; 63
    1044:	cd bf       	out	0x3d, r28	; 61
    1046:	ed 01       	movw	r28, r26
    1048:	08 95       	ret

0000104a <_exit>:
    104a:	f8 94       	cli

0000104c <__stop_program>:
    104c:	ff cf       	rjmp	.-2      	; 0x104c <__stop_program>
