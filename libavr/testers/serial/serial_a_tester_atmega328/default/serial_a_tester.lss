
serial_a_tester.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000020c  00800100  00000d1e  00000db2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d1e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d8  0080030c  0080030c  00000fbe  2**0
                  ALLOC
  3 .debug_aranges 00000260  00000000  00000000  00000fbe  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000bd9  00000000  00000000  0000121e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000244a  00000000  00000000  00001df7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000edb  00000000  00000000  00004241  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000179e  00000000  00000000  0000511c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002d0  00000000  00000000  000068bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000093c  00000000  00000000  00006b8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000053f  00000000  00000000  000074c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 a5 01 	jmp	0x34a	; 0x34a <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 d5 01 	jmp	0x3aa	; 0x3aa <__vector_20>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	13 e0       	ldi	r17, 0x03	; 3
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e1       	ldi	r30, 0x1E	; 30
  7c:	fd e0       	ldi	r31, 0x0D	; 13
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	13 e0       	ldi	r17, 0x03	; 3
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b3 e0       	ldi	r27, 0x03	; 3
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 3e       	cpi	r26, 0xE4	; 228
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 8d 06 	jmp	0xd1a	; 0xd1a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include "c:\avrtoolbox\libavr\source\elementary\serial\serial.h" //"libserial\serial.h"

int main(void)
{
  a6:	bf 92       	push	r11
  a8:	cf 92       	push	r12
  aa:	df 92       	push	r13
  ac:	ef 92       	push	r14
  ae:	ff 92       	push	r15
  b0:	0f 93       	push	r16
  b2:	1f 93       	push	r17
  b4:	df 93       	push	r29
  b6:	cf 93       	push	r28
  b8:	cd b7       	in	r28, 0x3d	; 61
  ba:	de b7       	in	r29, 0x3e	; 62
  bc:	c0 54       	subi	r28, 0x40	; 64
  be:	d0 40       	sbci	r29, 0x00	; 0
  c0:	0f b6       	in	r0, 0x3f	; 63
  c2:	f8 94       	cli
  c4:	de bf       	out	0x3e, r29	; 62
  c6:	0f be       	out	0x3f, r0	; 63
  c8:	cd bf       	out	0x3d, r28	; 61
	butterfly_init();
	#endif

	// NOTE: If BUTTERFLY is defined then the serial_being() is bypassed
	// and the usart is set to 19200 regardless of what this says
	serial_begin(57600);
  ca:	60 e0       	ldi	r22, 0x00	; 0
  cc:	71 ee       	ldi	r23, 0xE1	; 225
  ce:	80 e0       	ldi	r24, 0x00	; 0
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	0e 94 16 01 	call	0x22c	; 0x22c <serial_begin>

	serial_write(buf,6);
	// Insert a delay to keep this from stepping on the next statement
	delay(10);
*/
	serial_out("Hello70");
  d6:	00 d0       	rcall	.+0      	; 0xd8 <main+0x32>
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	91 e0       	ldi	r25, 0x01	; 1
  dc:	ed b7       	in	r30, 0x3d	; 61
  de:	fe b7       	in	r31, 0x3e	; 62
  e0:	92 83       	std	Z+2, r25	; 0x02
  e2:	81 83       	std	Z+1, r24	; 0x01
  e4:	0e 94 33 01 	call	0x266	; 0x266 <serial_out>

	// Send a bunch of stuff to see if it poops out
	serial_out("serial_println The quick brown fox jumped over the lazy dog.");
  e8:	88 e0       	ldi	r24, 0x08	; 8
  ea:	91 e0       	ldi	r25, 0x01	; 1
  ec:	ed b7       	in	r30, 0x3d	; 61
  ee:	fe b7       	in	r31, 0x3e	; 62
  f0:	92 83       	std	Z+2, r25	; 0x02
  f2:	81 83       	std	Z+1, r24	; 0x01
  f4:	0e 94 33 01 	call	0x266	; 0x266 <serial_out>

	serial_out("serial_out The quick brown fox jumped over the lazy dog.\n",0);
  f8:	00 d0       	rcall	.+0      	; 0xfa <main+0x54>
  fa:	85 e4       	ldi	r24, 0x45	; 69
  fc:	91 e0       	ldi	r25, 0x01	; 1
  fe:	ed b7       	in	r30, 0x3d	; 61
 100:	fe b7       	in	r31, 0x3e	; 62
 102:	92 83       	std	Z+2, r25	; 0x02
 104:	81 83       	std	Z+1, r24	; 0x01
 106:	14 82       	std	Z+4, r1	; 0x04
 108:	13 82       	std	Z+3, r1	; 0x03
 10a:	0e 94 33 01 	call	0x266	; 0x266 <serial_out>
	serial_out("1serial_out The quick brown fox jumped over the lazy dog.\n",0);
 10e:	8f e7       	ldi	r24, 0x7F	; 127
 110:	91 e0       	ldi	r25, 0x01	; 1
 112:	ed b7       	in	r30, 0x3d	; 61
 114:	fe b7       	in	r31, 0x3e	; 62
 116:	92 83       	std	Z+2, r25	; 0x02
 118:	81 83       	std	Z+1, r24	; 0x01
 11a:	14 82       	std	Z+4, r1	; 0x04
 11c:	13 82       	std	Z+3, r1	; 0x03
 11e:	0e 94 33 01 	call	0x266	; 0x266 <serial_out>
	serial_out("2serial_out The quick brown fox jumped over the lazy dog.\n",0);
 122:	8a eb       	ldi	r24, 0xBA	; 186
 124:	91 e0       	ldi	r25, 0x01	; 1
 126:	ed b7       	in	r30, 0x3d	; 61
 128:	fe b7       	in	r31, 0x3e	; 62
 12a:	92 83       	std	Z+2, r25	; 0x02
 12c:	81 83       	std	Z+1, r24	; 0x01
 12e:	14 82       	std	Z+4, r1	; 0x04
 130:	13 82       	std	Z+3, r1	; 0x03
 132:	0e 94 33 01 	call	0x266	; 0x266 <serial_out>
	serial_out("3serial_out The quick brown fox jumped over the lazy dog.\n",0);
 136:	85 ef       	ldi	r24, 0xF5	; 245
 138:	91 e0       	ldi	r25, 0x01	; 1
 13a:	ed b7       	in	r30, 0x3d	; 61
 13c:	fe b7       	in	r31, 0x3e	; 62
 13e:	92 83       	std	Z+2, r25	; 0x02
 140:	81 83       	std	Z+1, r24	; 0x01
 142:	14 82       	std	Z+4, r1	; 0x04
 144:	13 82       	std	Z+3, r1	; 0x03
 146:	0e 94 33 01 	call	0x266	; 0x266 <serial_out>
	serial_out("4serial_out The quick brown fox jumped over the lazy dog.\n",0);
 14a:	80 e3       	ldi	r24, 0x30	; 48
 14c:	92 e0       	ldi	r25, 0x02	; 2
 14e:	ed b7       	in	r30, 0x3d	; 61
 150:	fe b7       	in	r31, 0x3e	; 62
 152:	92 83       	std	Z+2, r25	; 0x02
 154:	81 83       	std	Z+1, r24	; 0x01
 156:	14 82       	std	Z+4, r1	; 0x04
 158:	13 82       	std	Z+3, r1	; 0x03
 15a:	0e 94 33 01 	call	0x266	; 0x266 <serial_out>
	serial_out("5serial_out The quick brown fox jumped over the lazy dog.\n",0);
 15e:	8b e6       	ldi	r24, 0x6B	; 107
 160:	92 e0       	ldi	r25, 0x02	; 2
 162:	ed b7       	in	r30, 0x3d	; 61
 164:	fe b7       	in	r31, 0x3e	; 62
 166:	92 83       	std	Z+2, r25	; 0x02
 168:	81 83       	std	Z+1, r24	; 0x01
 16a:	14 82       	std	Z+4, r1	; 0x04
 16c:	13 82       	std	Z+3, r1	; 0x03
 16e:	0e 94 33 01 	call	0x266	; 0x266 <serial_out>

	char c = 'A';
	uint8_t x = 0x22;
	uint16_t X = 0x1122;

	serial_out("Test character: %c\n", c);
 172:	86 ea       	ldi	r24, 0xA6	; 166
 174:	92 e0       	ldi	r25, 0x02	; 2
 176:	ed b7       	in	r30, 0x3d	; 61
 178:	fe b7       	in	r31, 0x3e	; 62
 17a:	92 83       	std	Z+2, r25	; 0x02
 17c:	81 83       	std	Z+1, r24	; 0x01
 17e:	81 e4       	ldi	r24, 0x41	; 65
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	94 83       	std	Z+4, r25	; 0x04
 184:	83 83       	std	Z+3, r24	; 0x03
 186:	0e 94 33 01 	call	0x266	; 0x266 <serial_out>

	serial_out("Test hexadecimal integer: %x\n", x);
 18a:	8a eb       	ldi	r24, 0xBA	; 186
 18c:	92 e0       	ldi	r25, 0x02	; 2
 18e:	ed b7       	in	r30, 0x3d	; 61
 190:	fe b7       	in	r31, 0x3e	; 62
 192:	92 83       	std	Z+2, r25	; 0x02
 194:	81 83       	std	Z+1, r24	; 0x01
 196:	82 e2       	ldi	r24, 0x22	; 34
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	94 83       	std	Z+4, r25	; 0x04
 19c:	83 83       	std	Z+3, r24	; 0x03
 19e:	0e 94 33 01 	call	0x266	; 0x266 <serial_out>

	serial_out("Test 16-bit hexadecimal integer: %x\n", X);
 1a2:	88 ed       	ldi	r24, 0xD8	; 216
 1a4:	92 e0       	ldi	r25, 0x02	; 2
 1a6:	ed b7       	in	r30, 0x3d	; 61
 1a8:	fe b7       	in	r31, 0x3e	; 62
 1aa:	92 83       	std	Z+2, r25	; 0x02
 1ac:	81 83       	std	Z+1, r24	; 0x01
 1ae:	82 e2       	ldi	r24, 0x22	; 34
 1b0:	91 e1       	ldi	r25, 0x11	; 17
 1b2:	94 83       	std	Z+4, r25	; 0x04
 1b4:	83 83       	std	Z+3, r24	; 0x03
 1b6:	0e 94 33 01 	call	0x266	; 0x266 <serial_out>
 1ba:	0f 90       	pop	r0
 1bc:	0f 90       	pop	r0
 1be:	0f 90       	pop	r0
 1c0:	0f 90       	pop	r0
		delay(1000);
		usart0_transmit_buffer_insert('#');	

		if(serial_available())
		{
			count = usart0_receive_buffer_inuse_count();
 1c2:	6e 01       	movw	r12, r28
 1c4:	08 94       	sec
 1c6:	c1 1c       	adc	r12, r1
 1c8:	d1 1c       	adc	r13, r1

	serial_out("Test 16-bit hexadecimal integer: %x\n", X);

	while(1)
	{
		delay(1000);
 1ca:	88 ee       	ldi	r24, 0xE8	; 232
 1cc:	93 e0       	ldi	r25, 0x03	; 3
 1ce:	0e 94 05 01 	call	0x20a	; 0x20a <delay>
		usart0_transmit_buffer_insert('#');	
 1d2:	83 e2       	ldi	r24, 0x23	; 35
 1d4:	0e 94 00 03 	call	0x600	; 0x600 <usart0_transmit_buffer_insert>

		if(serial_available())
 1d8:	0e 94 13 01 	call	0x226	; 0x226 <serial_available>
 1dc:	88 23       	and	r24, r24
 1de:	a9 f3       	breq	.-22     	; 0x1ca <main+0x124>
		{
			count = usart0_receive_buffer_inuse_count();
 1e0:	0e 94 f6 02 	call	0x5ec	; 0x5ec <usart0_receive_buffer_inuse_count>
 1e4:	b8 2e       	mov	r11, r24
 1e6:	86 01       	movw	r16, r12

			for(int i = 0 ; i < count; i++)
 1e8:	76 01       	movw	r14, r12
 1ea:	e8 0e       	add	r14, r24
 1ec:	f1 1c       	adc	r15, r1
 1ee:	05 c0       	rjmp	.+10     	; 0x1fa <main+0x154>
			{
				buf[i] = serial_in();
 1f0:	0e 94 30 01 	call	0x260	; 0x260 <serial_in>
 1f4:	f8 01       	movw	r30, r16
 1f6:	81 93       	st	Z+, r24
 1f8:	8f 01       	movw	r16, r30

		if(serial_available())
		{
			count = usart0_receive_buffer_inuse_count();

			for(int i = 0 ; i < count; i++)
 1fa:	0e 15       	cp	r16, r14
 1fc:	1f 05       	cpc	r17, r15
 1fe:	c1 f7       	brne	.-16     	; 0x1f0 <main+0x14a>
			{
				buf[i] = serial_in();
				//usart0_transmit_buffer_insert(serial_read());//usart0_receive_buffer_remove());
			}
			
			serial_write(buf,count);
 200:	c6 01       	movw	r24, r12
 202:	6b 2d       	mov	r22, r11
 204:	0e 94 41 01 	call	0x282	; 0x282 <serial_write>
 208:	e0 cf       	rjmp	.-64     	; 0x1ca <main+0x124>

0000020a <delay>:
#include <util\delay.h>

void delay(uint16_t ms);

void delay(uint16_t ms)
{
 20a:	20 e0       	ldi	r18, 0x00	; 0
 20c:	30 e0       	ldi	r19, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 20e:	40 ea       	ldi	r20, 0xA0	; 160
 210:	5f e0       	ldi	r21, 0x0F	; 15
 212:	05 c0       	rjmp	.+10     	; 0x21e <delay+0x14>
 214:	fa 01       	movw	r30, r20
 216:	31 97       	sbiw	r30, 0x01	; 1
 218:	f1 f7       	brne	.-4      	; 0x216 <delay+0xc>
	for(int i = 0 ; i < ms ; i++)
 21a:	2f 5f       	subi	r18, 0xFF	; 255
 21c:	3f 4f       	sbci	r19, 0xFF	; 255
 21e:	28 17       	cp	r18, r24
 220:	39 07       	cpc	r19, r25
 222:	c0 f3       	brcs	.-16     	; 0x214 <delay+0xa>
	{
		_delay_ms(1);
	}
}
 224:	08 95       	ret

00000226 <serial_available>:

#include "serial.h"

uint8_t serial_available(void)
{
	return usart0_receive_buffer_inuse_count();	
 226:	0e 94 f6 02 	call	0x5ec	; 0x5ec <usart0_receive_buffer_inuse_count>
}
 22a:	08 95       	ret

0000022c <serial_begin>:
 // please contact me with details so that I may correct the situation. #include "serial.h"

#include "serial.h"

void serial_begin(uint32_t baud)
{
 22c:	8f 92       	push	r8
 22e:	af 92       	push	r10
 230:	cf 92       	push	r12
 232:	ef 92       	push	r14
 234:	0f 93       	push	r16
	cli();
 236:	f8 94       	cli
	uint8_t databits = 8;
	uint8_t stopbits = 1;
	usart_parity_t parity = parity_none;
	usart_flow_control_t flow_control = flow_none;

	usart0_init(baud, F_CPU, mode,  databits, stopbits, parity, flow_control);
 238:	20 e0       	ldi	r18, 0x00	; 0
 23a:	34 e2       	ldi	r19, 0x24	; 36
 23c:	44 ef       	ldi	r20, 0xF4	; 244
 23e:	50 e0       	ldi	r21, 0x00	; 0
 240:	00 e0       	ldi	r16, 0x00	; 0
 242:	e8 e0       	ldi	r30, 0x08	; 8
 244:	ee 2e       	mov	r14, r30
 246:	cc 24       	eor	r12, r12
 248:	c3 94       	inc	r12
 24a:	aa 24       	eor	r10, r10
 24c:	88 24       	eor	r8, r8
 24e:	0e 94 1b 02 	call	0x436	; 0x436 <usart0_init>

	sei();
 252:	78 94       	sei

}
 254:	0f 91       	pop	r16
 256:	ef 90       	pop	r14
 258:	cf 90       	pop	r12
 25a:	af 90       	pop	r10
 25c:	8f 90       	pop	r8
 25e:	08 95       	ret

00000260 <serial_in>:

#include "serial.h"

uint8_t serial_in(void)
{
	return usart0_receive_buffer_remove();
 260:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <usart0_receive_buffer_remove>
}
 264:	08 95       	ret

00000266 <serial_out>:
#include <stdarg.h>

// The variadic (va_) stuff is magic 
//void serial_out(const char *fmt, ...)
void serial_out(const char *fmt, ...)
{
 266:	df 93       	push	r29
 268:	cf 93       	push	r28
 26a:	cd b7       	in	r28, 0x3d	; 61
 26c:	de b7       	in	r29, 0x3e	; 62
 26e:	fe 01       	movw	r30, r28
 270:	35 96       	adiw	r30, 0x05	; 5
	va_list arg;
	va_start(arg, fmt);
	vprintf(fmt, arg);
 272:	81 91       	ld	r24, Z+
 274:	91 91       	ld	r25, Z+
 276:	bf 01       	movw	r22, r30
 278:	0e 94 cf 03 	call	0x79e	; 0x79e <vprintf>
	va_end(arg);
}
 27c:	cf 91       	pop	r28
 27e:	df 91       	pop	r29
 280:	08 95       	ret

00000282 <serial_write>:
 // please contact me with details so that I may correct the situation. #include "serial.h"

#include "serial.h"

void serial_write(uint8_t *buff, uint8_t size)
{
 282:	ef 92       	push	r14
 284:	ff 92       	push	r15
 286:	0f 93       	push	r16
 288:	1f 93       	push	r17
 28a:	cf 93       	push	r28
 28c:	df 93       	push	r29
 28e:	7c 01       	movw	r14, r24
 290:	c0 e0       	ldi	r28, 0x00	; 0
 292:	d0 e0       	ldi	r29, 0x00	; 0
	for(int i = 0; i < size; i++)
 294:	06 2f       	mov	r16, r22
 296:	10 e0       	ldi	r17, 0x00	; 0
 298:	07 c0       	rjmp	.+14     	; 0x2a8 <serial_write+0x26>
	{
		usart0_transmit_buffer_insert(buff[i]);
 29a:	f7 01       	movw	r30, r14
 29c:	ec 0f       	add	r30, r28
 29e:	fd 1f       	adc	r31, r29
 2a0:	80 81       	ld	r24, Z
 2a2:	0e 94 00 03 	call	0x600	; 0x600 <usart0_transmit_buffer_insert>

#include "serial.h"

void serial_write(uint8_t *buff, uint8_t size)
{
	for(int i = 0; i < size; i++)
 2a6:	21 96       	adiw	r28, 0x01	; 1
 2a8:	c0 17       	cp	r28, r16
 2aa:	d1 07       	cpc	r29, r17
 2ac:	b4 f3       	brlt	.-20     	; 0x29a <serial_write+0x18>
	{
		usart0_transmit_buffer_insert(buff[i]);
	}
	usart0_send();
 2ae:	0e 94 0b 02 	call	0x416	; 0x416 <usart0_send>
}
 2b2:	df 91       	pop	r29
 2b4:	cf 91       	pop	r28
 2b6:	1f 91       	pop	r17
 2b8:	0f 91       	pop	r16
 2ba:	ff 90       	pop	r15
 2bc:	ef 90       	pop	r14
 2be:	08 95       	ret

000002c0 <usart0_uninit>:
	setting = usart_baudrate_to_setting(freq_cpu,baudrate);
	
	// Write hi byte first as writing lo byte will trigger immediate update of baud prescaler.
	UART_BAUD_RATE_HIGH = hi_byte(setting);
	UART_BAUD_RATE_LOW= lo_byte(setting);
	
 2c0:	80 e2       	ldi	r24, 0x20	; 32
 2c2:	80 93 c0 00 	sts	0x00C0, r24
	return;
 2c6:	10 92 c1 00 	sts	0x00C1, r1
}
 2ca:	86 e0       	ldi	r24, 0x06	; 6
 2cc:	80 93 c2 00 	sts	0x00C2, r24

 2d0:	08 95       	ret

000002d2 <usart0_baud_set>:
		//if(usart0_transmit_ring.count)// Alternate technique
		if(usart0_transmit_buffer_inuse_count())// Is there data in the buffer?
		{
			// Send next byte in the buffer.
 	       UART_DATA_REG = ring_remove(&usart0_transmit_ring);
		}
 2d2:	ef 92       	push	r14
 2d4:	ff 92       	push	r15
 2d6:	0f 93       	push	r16
 2d8:	1f 93       	push	r17
 2da:	7b 01       	movw	r14, r22
 2dc:	8c 01       	movw	r16, r24
		else
		{
			// The buffer is empty
 2de:	84 e0       	ldi	r24, 0x04	; 4
 2e0:	ee 0c       	add	r14, r14
 2e2:	ff 1c       	adc	r15, r15
 2e4:	00 1f       	adc	r16, r16
 2e6:	11 1f       	adc	r17, r17
 2e8:	8a 95       	dec	r24
 2ea:	d1 f7       	brne	.-12     	; 0x2e0 <usart0_baud_set+0xe>
 2ec:	ca 01       	movw	r24, r20
 2ee:	b9 01       	movw	r22, r18
 2f0:	a8 01       	movw	r20, r16
 2f2:	97 01       	movw	r18, r14
 2f4:	0e 94 a6 03 	call	0x74c	; 0x74c <__udivmodsi4>
 2f8:	21 50       	subi	r18, 0x01	; 1
 2fa:	30 40       	sbci	r19, 0x00	; 0
			usart_buffered_tx_flag = false;
			// Set the ready flag
			usart_tx_ready_flag = true;
 2fc:	30 93 c5 00 	sts	0x00C5, r19
		}
 300:	20 93 c4 00 	sts	0x00C4, r18
	}
	else // Not buffered so transmited single byte
	{
 304:	1f 91       	pop	r17
 306:	0f 91       	pop	r16
 308:	ff 90       	pop	r15
 30a:	ef 90       	pop	r14
 30c:	08 95       	ret

0000030e <usart0_parity_set>:
		// Set transmit ready flag
		usart_tx_ready_flag = true;
	}
	
 30e:	81 11       	cpse	r24, r1
    return;
}
 310:	8f 5f       	subi	r24, 0xFF	; 255


 312:	98 2f       	mov	r25, r24
 314:	80 ff       	sbrs	r24, 0
 316:	04 c0       	rjmp	.+8      	; 0x320 <usart0_parity_set+0x12>
 318:	80 91 c2 00 	lds	r24, 0x00C2
 31c:	80 61       	ori	r24, 0x10	; 16
 31e:	03 c0       	rjmp	.+6      	; 0x326 <usart0_parity_set+0x18>
 320:	80 91 c2 00 	lds	r24, 0x00C2
 324:	8f 7e       	andi	r24, 0xEF	; 239
 326:	80 93 c2 00 	sts	0x00C2, r24
 32a:	80 91 c2 00 	lds	r24, 0x00C2
// The interrupt service routines are included in the initialization .c file 
 32e:	91 ff       	sbrs	r25, 1
 330:	04 c0       	rjmp	.+8      	; 0x33a <usart0_parity_set+0x2c>
 332:	80 91 c2 00 	lds	r24, 0x00C2
 336:	80 62       	ori	r24, 0x20	; 32
 338:	03 c0       	rjmp	.+6      	; 0x340 <usart0_parity_set+0x32>
 33a:	80 91 c2 00 	lds	r24, 0x00C2
 33e:	8f 7d       	andi	r24, 0xDF	; 223
 340:	80 93 c2 00 	sts	0x00C2, r24
 344:	80 91 c2 00 	lds	r24, 0x00C2
 348:	08 95       	ret

0000034a <__vector_18>:
 34a:	1f 92       	push	r1
 34c:	0f 92       	push	r0
 34e:	0f b6       	in	r0, 0x3f	; 63
 350:	0f 92       	push	r0
 352:	11 24       	eor	r1, r1
 354:	2f 93       	push	r18
 356:	3f 93       	push	r19
 358:	4f 93       	push	r20
 35a:	5f 93       	push	r21
 35c:	6f 93       	push	r22
 35e:	7f 93       	push	r23
 360:	8f 93       	push	r24
 362:	9f 93       	push	r25
 364:	af 93       	push	r26
 366:	bf 93       	push	r27
 368:	ef 93       	push	r30
 36a:	ff 93       	push	r31
 36c:	80 91 c0 00 	lds	r24, 0x00C0
 370:	90 91 c0 00 	lds	r25, 0x00C0
 374:	60 91 c6 00 	lds	r22, 0x00C6
 378:	84 fd       	sbrc	r24, 4
 37a:	06 c0       	rjmp	.+12     	; 0x388 <__vector_18+0x3e>
 37c:	92 fd       	sbrc	r25, 2
 37e:	04 c0       	rjmp	.+8      	; 0x388 <__vector_18+0x3e>
 380:	84 e9       	ldi	r24, 0x94	; 148
 382:	93 e0       	ldi	r25, 0x03	; 3
 384:	0e 94 0b 03 	call	0x616	; 0x616 <ring_add>
 388:	ff 91       	pop	r31
 38a:	ef 91       	pop	r30
 38c:	bf 91       	pop	r27
 38e:	af 91       	pop	r26
 390:	9f 91       	pop	r25
 392:	8f 91       	pop	r24
 394:	7f 91       	pop	r23
 396:	6f 91       	pop	r22
 398:	5f 91       	pop	r21
 39a:	4f 91       	pop	r20
 39c:	3f 91       	pop	r19
 39e:	2f 91       	pop	r18
 3a0:	0f 90       	pop	r0
 3a2:	0f be       	out	0x3f, r0	; 63
 3a4:	0f 90       	pop	r0
 3a6:	1f 90       	pop	r1
 3a8:	18 95       	reti

000003aa <__vector_20>:
	register uint8_t data;
	register uint8_t parity_error = false;
	register uint8_t frame_error = false;

	// Get error conditions before getting the data.
	frame_error = usart0_frame_error();
 3aa:	1f 92       	push	r1
 3ac:	0f 92       	push	r0
 3ae:	0f b6       	in	r0, 0x3f	; 63
 3b0:	0f 92       	push	r0
 3b2:	11 24       	eor	r1, r1
 3b4:	2f 93       	push	r18
 3b6:	3f 93       	push	r19
 3b8:	4f 93       	push	r20
 3ba:	5f 93       	push	r21
 3bc:	6f 93       	push	r22
 3be:	7f 93       	push	r23
 3c0:	8f 93       	push	r24
 3c2:	9f 93       	push	r25
 3c4:	af 93       	push	r26
 3c6:	bf 93       	push	r27
 3c8:	ef 93       	push	r30
 3ca:	ff 93       	push	r31
	parity_error = usart0_parity_error();
	
	data = UART_DATA_REG;
 3cc:	80 91 dc 03 	lds	r24, 0x03DC
 3d0:	88 23       	and	r24, r24
 3d2:	69 f0       	breq	.+26     	; 0x3ee <__vector_20+0x44>
    
	if(!frame_error && !parity_error)
	{
 3d4:	0e 94 06 03 	call	0x60c	; 0x60c <usart0_transmit_buffer_inuse_count>
 3d8:	88 23       	and	r24, r24
 3da:	39 f0       	breq	.+14     	; 0x3ea <__vector_20+0x40>
		// Store data in ring buffer.
        ring_add(&usart0_receive_ring, data);
	}
 3dc:	8c e8       	ldi	r24, 0x8C	; 140
 3de:	93 e0       	ldi	r25, 0x03	; 3
 3e0:	0e 94 5d 03 	call	0x6ba	; 0x6ba <ring_remove>
 3e4:	80 93 c6 00 	sts	0x00C6, r24
 3e8:	05 c0       	rjmp	.+10     	; 0x3f4 <__vector_20+0x4a>

	return;
}


 3ea:	10 92 dc 03 	sts	0x03DC, r1
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	80 93 dd 03 	sts	0x03DD, r24
 3f4:	ff 91       	pop	r31
 3f6:	ef 91       	pop	r30
 3f8:	bf 91       	pop	r27
 3fa:	af 91       	pop	r26
 3fc:	9f 91       	pop	r25
 3fe:	8f 91       	pop	r24
 400:	7f 91       	pop	r23
 402:	6f 91       	pop	r22
 404:	5f 91       	pop	r21
 406:	4f 91       	pop	r20
 408:	3f 91       	pop	r19
 40a:	2f 91       	pop	r18
 40c:	0f 90       	pop	r0
 40e:	0f be       	out	0x3f, r0	; 63
 410:	0f 90       	pop	r0
 412:	1f 90       	pop	r1
 414:	18 95       	reti

00000416 <usart0_send>:
    bit_write(bit_read(parity, BIT(0)), UART_CONTROL_STATUS_REG_C, BIT(UART_PARITY_MODE_0));
    bit_write(bit_read(parity, BIT(1)), UART_CONTROL_STATUS_REG_C, BIT(UART_PARITY_MODE_1));
    return;
}

// JWP 6/16/11 rewrote transmit interrupt to use TX complete vector
 416:	80 91 dd 03 	lds	r24, 0x03DD
 41a:	88 23       	and	r24, r24
 41c:	e1 f3       	breq	.-8      	; 0x416 <usart0_send>
// rather than the Data Register Empty vector
// The interrupt service routines are included in the initialization .c file 
// since they must be associated with a .c file for the compiler
 41e:	81 e0       	ldi	r24, 0x01	; 1
 420:	80 93 dc 03 	sts	0x03DC, r24
usart0_transmit_interrupt_service_routine
{

 424:	8c e8       	ldi	r24, 0x8C	; 140
 426:	93 e0       	ldi	r25, 0x03	; 3
 428:	0e 94 5d 03 	call	0x6ba	; 0x6ba <ring_remove>
 42c:	80 93 c6 00 	sts	0x00C6, r24
	// Is buffered transmission enabled?
	if(usart_buffered_tx_flag)
	{		
 430:	10 92 dd 03 	sts	0x03DD, r1
		//if(usart0_transmit_ring.count)// Alternate technique
 434:	08 95       	ret

00000436 <usart0_init>:
    //flow.flow_out = true;
    //flow.flow_in = true;

	// JWP 3/27/11 the following was already commented out in xxx code
    // Initialize hw flow control task.
    // flow_out_tcb.handler = usart0_flow_out_hw_task;
 436:	2f 92       	push	r2
 438:	3f 92       	push	r3
 43a:	4f 92       	push	r4
 43c:	5f 92       	push	r5
 43e:	6f 92       	push	r6
 440:	7f 92       	push	r7
 442:	8f 92       	push	r8
 444:	9f 92       	push	r9
 446:	af 92       	push	r10
 448:	cf 92       	push	r12
 44a:	ef 92       	push	r14
 44c:	0f 93       	push	r16
 44e:	1f 93       	push	r17
 450:	df 93       	push	r29
 452:	cf 93       	push	r28
 454:	cd b7       	in	r28, 0x3d	; 61
 456:	de b7       	in	r29, 0x3e	; 62
 458:	3b 01       	movw	r6, r22
 45a:	4c 01       	movw	r8, r24
 45c:	19 01       	movw	r2, r18
 45e:	2a 01       	movw	r4, r20
 460:	1e 2d       	mov	r17, r14
 462:	ec 2c       	mov	r14, r12
    // flow_out_tcb.absolute_timing = false;
    // flow_out_tcb.run_interval = 0;
 464:	f8 94       	cli
    // flow_out_tcb.enabled = false;
    // task_add(&flow_out_tcb);
 466:	8d ef       	ldi	r24, 0xFD	; 253
 468:	92 e0       	ldi	r25, 0x02	; 2
 46a:	90 93 e1 03 	sts	0x03E1, r25
 46e:	80 93 e0 03 	sts	0x03E0, r24
//	usart0_mode(mode);
 	usart0_baud_set(baud, freq_cpu);
    usart0_data_bits_set(databits);
    usart0_stop_bits_set(stopbits);
    usart0_parity_set(parity);
 
 472:	80 91 c1 00 	lds	r24, 0x00C1
 476:	87 7f       	andi	r24, 0xF7	; 247
 478:	80 93 c1 00 	sts	0x00C1, r24
 	usart0_baud_set(baud, freq_cpu);
 47c:	80 91 c1 00 	lds	r24, 0x00C1
 480:	8f 7e       	andi	r24, 0xEF	; 239
 482:	80 93 c1 00 	sts	0x00C1, r24

 486:	80 91 c1 00 	lds	r24, 0x00C1
 48a:	8f 7b       	andi	r24, 0xBF	; 191
 48c:	80 93 c1 00 	sts	0x00C1, r24
//JWP 6/16/11 The Butterfly requires special code for clock and baud
 490:	80 91 c1 00 	lds	r24, 0x00C1
 494:	8f 77       	andi	r24, 0x7F	; 127
 496:	80 93 c1 00 	sts	0x00C1, r24
#if defined(__AVR_ATmega169__) // Assume Butterfly
	butterfly_init();
#endif
 49a:	80 91 c2 00 	lds	r24, 0x00C2
 49e:	02 95       	swap	r16
 4a0:	00 0f       	add	r16, r16
 4a2:	00 0f       	add	r16, r16
 4a4:	00 7c       	andi	r16, 0xC0	; 192
 4a6:	8f 73       	andi	r24, 0x3F	; 63
 4a8:	80 2b       	or	r24, r16
 4aa:	80 93 c2 00 	sts	0x00C2, r24

 4ae:	c4 01       	movw	r24, r8
 4b0:	b3 01       	movw	r22, r6
 4b2:	0e 94 69 01 	call	0x2d2	; 0x2d2 <usart0_baud_set>

 4b6:	81 2f       	mov	r24, r17
 4b8:	85 50       	subi	r24, 0x05	; 5
 4ba:	84 30       	cpi	r24, 0x04	; 4
 4bc:	18 f5       	brcc	.+70     	; 0x504 <usart0_init+0xce>
 4be:	21 2f       	mov	r18, r17
 4c0:	30 e0       	ldi	r19, 0x00	; 0
 4c2:	25 50       	subi	r18, 0x05	; 5
 4c4:	30 40       	sbci	r19, 0x00	; 0
 4c6:	20 ff       	sbrs	r18, 0
 4c8:	04 c0       	rjmp	.+8      	; 0x4d2 <usart0_init+0x9c>
 4ca:	80 91 c2 00 	lds	r24, 0x00C2
 4ce:	82 60       	ori	r24, 0x02	; 2
 4d0:	03 c0       	rjmp	.+6      	; 0x4d8 <usart0_init+0xa2>
 4d2:	80 91 c2 00 	lds	r24, 0x00C2
 4d6:	8d 7f       	andi	r24, 0xFD	; 253
 4d8:	80 93 c2 00 	sts	0x00C2, r24
 4dc:	80 91 c2 00 	lds	r24, 0x00C2
 4e0:	21 ff       	sbrs	r18, 1
 4e2:	04 c0       	rjmp	.+8      	; 0x4ec <usart0_init+0xb6>
 4e4:	80 91 c2 00 	lds	r24, 0x00C2
 4e8:	84 60       	ori	r24, 0x04	; 4
 4ea:	03 c0       	rjmp	.+6      	; 0x4f2 <usart0_init+0xbc>
 4ec:	80 91 c2 00 	lds	r24, 0x00C2
 4f0:	8b 7f       	andi	r24, 0xFB	; 251
 4f2:	80 93 c2 00 	sts	0x00C2, r24
 4f6:	80 91 c2 00 	lds	r24, 0x00C2
 4fa:	80 91 c1 00 	lds	r24, 0x00C1
 4fe:	8b 7f       	andi	r24, 0xFB	; 251
 500:	80 93 c1 00 	sts	0x00C1, r24
 504:	19 30       	cpi	r17, 0x09	; 9
 506:	79 f4       	brne	.+30     	; 0x526 <usart0_init+0xf0>
 508:	80 91 c2 00 	lds	r24, 0x00C2
 50c:	82 60       	ori	r24, 0x02	; 2
 50e:	80 93 c2 00 	sts	0x00C2, r24
 512:	80 91 c2 00 	lds	r24, 0x00C2
 516:	84 60       	ori	r24, 0x04	; 4
 518:	80 93 c2 00 	sts	0x00C2, r24
 51c:	80 91 c1 00 	lds	r24, 0x00C1
 520:	84 60       	ori	r24, 0x04	; 4
 522:	80 93 c1 00 	sts	0x00C1, r24
	ring_init(&usart0_receive_ring, usart0_receive_buffer, USART0_RECEIVE_BUFFER_LEN);
 526:	8e 2d       	mov	r24, r14
 528:	81 50       	subi	r24, 0x01	; 1
 52a:	82 30       	cpi	r24, 0x02	; 2
 52c:	70 f4       	brcc	.+28     	; 0x54a <usart0_init+0x114>
 52e:	81 e0       	ldi	r24, 0x01	; 1
 530:	e8 16       	cp	r14, r24
 532:	21 f0       	breq	.+8      	; 0x53c <usart0_init+0x106>
 534:	80 91 c2 00 	lds	r24, 0x00C2
 538:	88 60       	ori	r24, 0x08	; 8
 53a:	03 c0       	rjmp	.+6      	; 0x542 <usart0_init+0x10c>
 53c:	80 91 c2 00 	lds	r24, 0x00C2
 540:	87 7f       	andi	r24, 0xF7	; 247
 542:	80 93 c2 00 	sts	0x00C2, r24
 546:	80 91 c2 00 	lds	r24, 0x00C2
    ring_init(&usart0_transmit_ring, usart0_transmit_buffer, USART0_TRANSMIT_BUFFER_LEN);
 54a:	8a 2d       	mov	r24, r10
 54c:	0e 94 87 01 	call	0x30e	; 0x30e <usart0_parity_set>

	// JWP 6/16/11 
 550:	c4 01       	movw	r24, r8
 552:	b3 01       	movw	r22, r6
 554:	a2 01       	movw	r20, r4
 556:	91 01       	movw	r18, r2
 558:	0e 94 69 01 	call	0x2d2	; 0x2d2 <usart0_baud_set>
// JWP 6/16/11 added to change transmission logic.
// this function waits until a pending transmission is complete
// then sends a byte. If the usart_buffered_TX_flag is set true
// then the ISR continues to send until the buffer is empty, otherwise
// the ISR just sends the byte. 
void usart0_send(void)
 55c:	84 e9       	ldi	r24, 0x94	; 148
 55e:	93 e0       	ldi	r25, 0x03	; 3
 560:	6c e9       	ldi	r22, 0x9C	; 156
 562:	73 e0       	ldi	r23, 0x03	; 3
 564:	40 e4       	ldi	r20, 0x40	; 64
 566:	0e 94 39 03 	call	0x672	; 0x672 <ring_init>
{
 56a:	8c e8       	ldi	r24, 0x8C	; 140
 56c:	93 e0       	ldi	r25, 0x03	; 3
 56e:	6c e0       	ldi	r22, 0x0C	; 12
 570:	73 e0       	ldi	r23, 0x03	; 3
 572:	40 e8       	ldi	r20, 0x80	; 128
 574:	0e 94 39 03 	call	0x672	; 0x672 <ring_init>

	// Wait until the transmitter is ready
	while(!usart_tx_ready_flag);

	// Set flag for ISR
	usart_buffered_tx_flag = true;
 578:	80 91 c1 00 	lds	r24, 0x00C1
 57c:	88 60       	ori	r24, 0x08	; 8
 57e:	80 93 c1 00 	sts	0x00C1, r24
	
 582:	80 91 c1 00 	lds	r24, 0x00C1
 586:	80 61       	ori	r24, 0x10	; 16
 588:	80 93 c1 00 	sts	0x00C1, r24
	// Send the byte
 58c:	80 91 c1 00 	lds	r24, 0x00C1
 590:	80 64       	ori	r24, 0x40	; 64
 592:	80 93 c1 00 	sts	0x00C1, r24
	UART_DATA_REG = ring_remove(&usart0_transmit_ring);
 596:	80 91 c1 00 	lds	r24, 0x00C1
 59a:	80 68       	ori	r24, 0x80	; 128
 59c:	80 93 c1 00 	sts	0x00C1, r24

	// Set the ready flag to false
	usart_tx_ready_flag = false;
}

 5a0:	10 92 dc 03 	sts	0x03DC, r1

 5a4:	81 e0       	ldi	r24, 0x01	; 1
 5a6:	80 93 dd 03 	sts	0x03DD, r24
// 3/18/11 JWP removed magic number for clock and added freq_cpu
void usart0_baud_set(uint32_t baudrate, uint32_t freq_cpu)
 5aa:	78 94       	sei
{
	uint16_t setting;
	
 5ac:	cf 91       	pop	r28
 5ae:	df 91       	pop	r29
 5b0:	1f 91       	pop	r17
 5b2:	0f 91       	pop	r16
 5b4:	ef 90       	pop	r14
 5b6:	cf 90       	pop	r12
 5b8:	af 90       	pop	r10
 5ba:	9f 90       	pop	r9
 5bc:	8f 90       	pop	r8
 5be:	7f 90       	pop	r7
 5c0:	6f 90       	pop	r6
 5c2:	5f 90       	pop	r5
 5c4:	4f 90       	pop	r4
 5c6:	3f 90       	pop	r3
 5c8:	2f 90       	pop	r2
 5ca:	08 95       	ret

000005cc <usart0_put_char_stream>:
   	return 0; 
} 

void usart0_init(uint32_t baud, uint32_t freq_cpu, usart_mode_t mode, usart_databits_t databits, usart_stopbits_t stopbits, usart_parity_t parity, usart_flow_control_t flow_control)
{

 5cc:	1f 93       	push	r17
 5ce:	18 2f       	mov	r17, r24
	cli();
 5d0:	8a 30       	cpi	r24, 0x0A	; 10
 5d2:	19 f4       	brne	.+6      	; 0x5da <usart0_put_char_stream+0xe>
 5d4:	8d e0       	ldi	r24, 0x0D	; 13
 5d6:	0e 94 e6 02 	call	0x5cc	; 0x5cc <usart0_put_char_stream>

   	stdout = &mystdout;    //set the output stream 
 5da:	81 2f       	mov	r24, r17
 5dc:	0e 94 00 03 	call	0x600	; 0x600 <usart0_transmit_buffer_insert>

    //flow.flow_control = flow_control;
 5e0:	0e 94 0b 02 	call	0x416	; 0x416 <usart0_send>
    //flow.flow_out = true;
    //flow.flow_in = true;

 5e4:	80 e0       	ldi	r24, 0x00	; 0
 5e6:	90 e0       	ldi	r25, 0x00	; 0
 5e8:	1f 91       	pop	r17
 5ea:	08 95       	ret

000005ec <usart0_receive_buffer_inuse_count>:
 
#include "usart.h"

uint8_t usart0_receive_buffer_inuse_count(void)
{
    return(usart0_buffer_inuse_count(&usart0_receive_ring));
 5ec:	84 e9       	ldi	r24, 0x94	; 148
 5ee:	93 e0       	ldi	r25, 0x03	; 3
 5f0:	0e 94 98 03 	call	0x730	; 0x730 <usart0_buffer_inuse_count>
}
 5f4:	08 95       	ret

000005f6 <usart0_receive_buffer_remove>:

uint8_t usart0_receive_buffer_remove(void)
{
    uint8_t data;
    
    data = usart0_buffer_remove(&usart0_receive_ring);
 5f6:	84 e9       	ldi	r24, 0x94	; 148
 5f8:	93 e0       	ldi	r25, 0x03	; 3
 5fa:	0e 94 9e 03 	call	0x73c	; 0x73c <usart0_buffer_remove>
            usart0_flow_in_enable();
        }
    }
	*/
    return(data);
}
 5fe:	08 95       	ret

00000600 <usart0_transmit_buffer_insert>:
 // please contact me with details so that I may correct the situation. 
 
#include "usart.h"

bool usart0_transmit_buffer_insert(uint8_t c)
{
 600:	68 2f       	mov	r22, r24
    register bool result;
    result = usart0_buffer_insert(&usart0_transmit_ring, c);
 602:	8c e8       	ldi	r24, 0x8C	; 140
 604:	93 e0       	ldi	r25, 0x03	; 3
 606:	0e 94 8a 03 	call	0x714	; 0x714 <usart0_buffer_insert>
	// JWP 6/14/11 don't automatically send. Use usart0_transmit_send when 
	// 		you have finished loading what you want to send in the buffer
	//if(result == true) usart0_transmit_check();

    return(result);
}
 60a:	08 95       	ret

0000060c <usart0_transmit_buffer_inuse_count>:
 
#include "usart.h"

uint8_t usart0_transmit_buffer_inuse_count(void)
{
    return(usart0_buffer_inuse_count(&usart0_transmit_ring));
 60c:	8c e8       	ldi	r24, 0x8C	; 140
 60e:	93 e0       	ldi	r25, 0x03	; 3
 610:	0e 94 98 03 	call	0x730	; 0x730 <usart0_buffer_inuse_count>
}
 614:	08 95       	ret

00000616 <ring_add>:
#include <stdbool.h>
#include <stdint.h>
#include "ring.h"

bool ring_add(ring_t *r, uint8_t data)
{
 616:	dc 01       	movw	r26, r24
    // Get the next head index.
    ring_index_t temp_head = r->head_index + 1;
 618:	13 96       	adiw	r26, 0x03	; 3
 61a:	4d 91       	ld	r20, X+
 61c:	5c 91       	ld	r21, X
 61e:	14 97       	sbiw	r26, 0x04	; 4
    if(r->head_index >= r->size - 1)
 620:	12 96       	adiw	r26, 0x02	; 2
 622:	8c 91       	ld	r24, X
 624:	12 97       	sbiw	r26, 0x02	; 2
 626:	90 e0       	ldi	r25, 0x00	; 0
 628:	01 97       	sbiw	r24, 0x01	; 1
 62a:	48 17       	cp	r20, r24
 62c:	59 07       	cpc	r21, r25
 62e:	18 f0       	brcs	.+6      	; 0x636 <ring_add+0x20>
 630:	20 e0       	ldi	r18, 0x00	; 0
 632:	30 e0       	ldi	r19, 0x00	; 0
 634:	03 c0       	rjmp	.+6      	; 0x63c <ring_add+0x26>
#include "ring.h"

bool ring_add(ring_t *r, uint8_t data)
{
    // Get the next head index.
    ring_index_t temp_head = r->head_index + 1;
 636:	9a 01       	movw	r18, r20
 638:	2f 5f       	subi	r18, 0xFF	; 255
 63a:	3f 4f       	sbci	r19, 0xFF	; 255
    if(r->head_index >= r->size - 1)
    {
        temp_head = 0;
    }

    if(temp_head != r->tail_index)
 63c:	15 96       	adiw	r26, 0x05	; 5
 63e:	8d 91       	ld	r24, X+
 640:	9c 91       	ld	r25, X
 642:	16 97       	sbiw	r26, 0x06	; 6
 644:	28 17       	cp	r18, r24
 646:	39 07       	cpc	r19, r25
 648:	11 f4       	brne	.+4      	; 0x64e <ring_add+0x38>
 64a:	80 e0       	ldi	r24, 0x00	; 0
 64c:	08 95       	ret
    {
        r->buffer[r->head_index] = data;    // Buffer receives data
 64e:	ed 91       	ld	r30, X+
 650:	fc 91       	ld	r31, X
 652:	11 97       	sbiw	r26, 0x01	; 1
 654:	e4 0f       	add	r30, r20
 656:	f5 1f       	adc	r31, r21
 658:	60 83       	st	Z, r22
        r->head_index = temp_head;
 65a:	14 96       	adiw	r26, 0x04	; 4
 65c:	3c 93       	st	X, r19
 65e:	2e 93       	st	-X, r18
 660:	13 97       	sbiw	r26, 0x03	; 3
        r->count++;
 662:	17 96       	adiw	r26, 0x07	; 7
 664:	8c 91       	ld	r24, X
 666:	17 97       	sbiw	r26, 0x07	; 7
 668:	8f 5f       	subi	r24, 0xFF	; 255
 66a:	17 96       	adiw	r26, 0x07	; 7
 66c:	8c 93       	st	X, r24
 66e:	81 e0       	ldi	r24, 0x01	; 1
        return(true);       // Return complete
    }

    return(false);          // Return incomplete
}
 670:	08 95       	ret

00000672 <ring_init>:
#include <stdbool.h>
#include <stdlib.h>
#include "ring.h"

bool ring_init(ring_t *r, ring_buffer_t buffer, ring_size_t size)
{
 672:	fc 01       	movw	r30, r24
    bool success = false;
    bool clear;
    if (size >= 2 && r != NULL && buffer != NULL)
 674:	42 30       	cpi	r20, 0x02	; 2
 676:	58 f0       	brcs	.+22     	; 0x68e <ring_init+0x1c>
 678:	00 97       	sbiw	r24, 0x00	; 0
 67a:	49 f0       	breq	.+18     	; 0x68e <ring_init+0x1c>
 67c:	61 15       	cp	r22, r1
 67e:	71 05       	cpc	r23, r1
 680:	31 f0       	breq	.+12     	; 0x68e <ring_init+0x1c>
    {
        r->buffer = buffer;     // Set index pointers
 682:	71 83       	std	Z+1, r23	; 0x01
 684:	60 83       	st	Z, r22
        r->size = size;
 686:	42 83       	std	Z+2, r20	; 0x02
        clear = ring_clear(r);  // Call ring_clear function
 688:	0e 94 49 03 	call	0x692	; 0x692 <ring_clear>
 68c:	08 95       	ret
 68e:	80 e0       	ldi	r24, 0x00	; 0
        {
                success = true;
        }
    }
    return(success);
}
 690:	08 95       	ret

00000692 <ring_clear>:
#include <stdlib.h>
#include <string.h>
#include "ring.h"

bool ring_clear(ring_t *r)
{
 692:	fc 01       	movw	r30, r24
    bool success = false;
    if (r != NULL)
 694:	00 97       	sbiw	r24, 0x00	; 0
 696:	11 f4       	brne	.+4      	; 0x69c <ring_clear+0xa>
 698:	80 e0       	ldi	r24, 0x00	; 0
 69a:	08 95       	ret
    {
        r->head_index = 0;
 69c:	14 82       	std	Z+4, r1	; 0x04
 69e:	13 82       	std	Z+3, r1	; 0x03
        r->tail_index = 0;          // Assign new values
 6a0:	16 82       	std	Z+6, r1	; 0x06
 6a2:	15 82       	std	Z+5, r1	; 0x05
        r->count = 0;
 6a4:	17 82       	std	Z+7, r1	; 0x07
        memset((void *)r->buffer, 0, r->size); // Clear out memory
 6a6:	42 81       	ldd	r20, Z+2	; 0x02
 6a8:	80 81       	ld	r24, Z
 6aa:	91 81       	ldd	r25, Z+1	; 0x01
 6ac:	60 e0       	ldi	r22, 0x00	; 0
 6ae:	70 e0       	ldi	r23, 0x00	; 0
 6b0:	50 e0       	ldi	r21, 0x00	; 0
 6b2:	0e 94 c8 03 	call	0x790	; 0x790 <memset>
 6b6:	81 e0       	ldi	r24, 0x01	; 1
        success = true;
    }
    return(success);
}
 6b8:	08 95       	ret

000006ba <ring_remove>:

#include <stdint.h>
#include "ring.h"

uint8_t ring_remove(ring_t *r)
{
 6ba:	dc 01       	movw	r26, r24
    uint8_t data = 0;

    // Compare the head index and the tail index
    if(r->head_index != r->tail_index)
 6bc:	15 96       	adiw	r26, 0x05	; 5
 6be:	2d 91       	ld	r18, X+
 6c0:	3c 91       	ld	r19, X
 6c2:	16 97       	sbiw	r26, 0x06	; 6
 6c4:	13 96       	adiw	r26, 0x03	; 3
 6c6:	8d 91       	ld	r24, X+
 6c8:	9c 91       	ld	r25, X
 6ca:	14 97       	sbiw	r26, 0x04	; 4
 6cc:	82 17       	cp	r24, r18
 6ce:	93 07       	cpc	r25, r19
 6d0:	11 f4       	brne	.+4      	; 0x6d6 <ring_remove+0x1c>
 6d2:	e0 e0       	ldi	r30, 0x00	; 0
 6d4:	1d c0       	rjmp	.+58     	; 0x710 <ring_remove+0x56>
    {
        // Get the Data from the buffer.
        data = r->buffer[r->tail_index];
 6d6:	ed 91       	ld	r30, X+
 6d8:	fc 91       	ld	r31, X
 6da:	11 97       	sbiw	r26, 0x01	; 1
 6dc:	e2 0f       	add	r30, r18
 6de:	f3 1f       	adc	r31, r19
 6e0:	e0 81       	ld	r30, Z

        // Get the next tail index.
        ring_index_t next_tail = r->tail_index + 1;
        if(r->tail_index >= r->size - 1)
 6e2:	12 96       	adiw	r26, 0x02	; 2
 6e4:	8c 91       	ld	r24, X
 6e6:	12 97       	sbiw	r26, 0x02	; 2
 6e8:	90 e0       	ldi	r25, 0x00	; 0
 6ea:	01 97       	sbiw	r24, 0x01	; 1
 6ec:	28 17       	cp	r18, r24
 6ee:	39 07       	cpc	r19, r25
 6f0:	18 f0       	brcs	.+6      	; 0x6f8 <ring_remove+0x3e>
 6f2:	80 e0       	ldi	r24, 0x00	; 0
 6f4:	90 e0       	ldi	r25, 0x00	; 0
 6f6:	02 c0       	rjmp	.+4      	; 0x6fc <ring_remove+0x42>
    {
        // Get the Data from the buffer.
        data = r->buffer[r->tail_index];

        // Get the next tail index.
        ring_index_t next_tail = r->tail_index + 1;
 6f8:	c9 01       	movw	r24, r18
 6fa:	01 96       	adiw	r24, 0x01	; 1
        if(r->tail_index >= r->size - 1)
        {
            next_tail = 0;
        }

        r->tail_index = next_tail;      // Move index
 6fc:	16 96       	adiw	r26, 0x06	; 6
 6fe:	9c 93       	st	X, r25
 700:	8e 93       	st	-X, r24
 702:	15 97       	sbiw	r26, 0x05	; 5
        r->count--;             // Decrement count
 704:	17 96       	adiw	r26, 0x07	; 7
 706:	8c 91       	ld	r24, X
 708:	17 97       	sbiw	r26, 0x07	; 7
 70a:	81 50       	subi	r24, 0x01	; 1
 70c:	17 96       	adiw	r26, 0x07	; 7
 70e:	8c 93       	st	X, r24
    }

    return(data);
}
 710:	8e 2f       	mov	r24, r30
 712:	08 95       	ret

00000714 <usart0_buffer_insert>:
 // please contact me with details so that I may correct the situation. 
 
#include "usart.h"

bool usart0_buffer_insert(ring_t *ring, uint8_t c)
{
 714:	1f 93       	push	r17
 716:	9c 01       	movw	r18, r24
    register bool result;
    register uint8_t sreg;
   
   	// Do not load buffer while transmitting from buffer
	while(usart_buffered_tx_flag);
 718:	80 91 dc 03 	lds	r24, 0x03DC
 71c:	88 23       	and	r24, r24
 71e:	e1 f7       	brne	.-8      	; 0x718 <usart0_buffer_insert+0x4>
    
    sreg = SREG;
 720:	1f b7       	in	r17, 0x3f	; 63
    cli();
 722:	f8 94       	cli
    result = ring_add(ring, c);
 724:	c9 01       	movw	r24, r18
 726:	0e 94 0b 03 	call	0x616	; 0x616 <ring_add>
    SREG = sreg;
 72a:	1f bf       	out	0x3f, r17	; 63
    return(result);
}
 72c:	1f 91       	pop	r17
 72e:	08 95       	ret

00000730 <usart0_buffer_inuse_count>:
 // please contact me with details so that I may correct the situation. 
 
#include "usart.h"

uint8_t usart0_buffer_inuse_count(ring_t *ring)
{
 730:	fc 01       	movw	r30, r24
    register uint8_t result;
    register uint8_t sreg;
    
    sreg = SREG;
 732:	8f b7       	in	r24, 0x3f	; 63
    cli();
 734:	f8 94       	cli
    result = ring->count;
    SREG = sreg;
 736:	8f bf       	out	0x3f, r24	; 63
    return(result);
}
 738:	87 81       	ldd	r24, Z+7	; 0x07
 73a:	08 95       	ret

0000073c <usart0_buffer_remove>:
 // please contact me with details so that I may correct the situation. 
 
#include "usart.h"

uint8_t usart0_buffer_remove(ring_t *ring)
{
 73c:	1f 93       	push	r17
    register uint8_t result;
    register uint8_t sreg;
    
    sreg = SREG;
 73e:	1f b7       	in	r17, 0x3f	; 63
    cli();
 740:	f8 94       	cli
    result = ring_remove(ring);
 742:	0e 94 5d 03 	call	0x6ba	; 0x6ba <ring_remove>
    SREG = sreg;
 746:	1f bf       	out	0x3f, r17	; 63
    return(result);
}
 748:	1f 91       	pop	r17
 74a:	08 95       	ret

0000074c <__udivmodsi4>:
 74c:	a1 e2       	ldi	r26, 0x21	; 33
 74e:	1a 2e       	mov	r1, r26
 750:	aa 1b       	sub	r26, r26
 752:	bb 1b       	sub	r27, r27
 754:	fd 01       	movw	r30, r26
 756:	0d c0       	rjmp	.+26     	; 0x772 <__udivmodsi4_ep>

00000758 <__udivmodsi4_loop>:
 758:	aa 1f       	adc	r26, r26
 75a:	bb 1f       	adc	r27, r27
 75c:	ee 1f       	adc	r30, r30
 75e:	ff 1f       	adc	r31, r31
 760:	a2 17       	cp	r26, r18
 762:	b3 07       	cpc	r27, r19
 764:	e4 07       	cpc	r30, r20
 766:	f5 07       	cpc	r31, r21
 768:	20 f0       	brcs	.+8      	; 0x772 <__udivmodsi4_ep>
 76a:	a2 1b       	sub	r26, r18
 76c:	b3 0b       	sbc	r27, r19
 76e:	e4 0b       	sbc	r30, r20
 770:	f5 0b       	sbc	r31, r21

00000772 <__udivmodsi4_ep>:
 772:	66 1f       	adc	r22, r22
 774:	77 1f       	adc	r23, r23
 776:	88 1f       	adc	r24, r24
 778:	99 1f       	adc	r25, r25
 77a:	1a 94       	dec	r1
 77c:	69 f7       	brne	.-38     	; 0x758 <__udivmodsi4_loop>
 77e:	60 95       	com	r22
 780:	70 95       	com	r23
 782:	80 95       	com	r24
 784:	90 95       	com	r25
 786:	9b 01       	movw	r18, r22
 788:	ac 01       	movw	r20, r24
 78a:	bd 01       	movw	r22, r26
 78c:	cf 01       	movw	r24, r30
 78e:	08 95       	ret

00000790 <memset>:
 790:	dc 01       	movw	r26, r24
 792:	01 c0       	rjmp	.+2      	; 0x796 <memset+0x6>
 794:	6d 93       	st	X+, r22
 796:	41 50       	subi	r20, 0x01	; 1
 798:	50 40       	sbci	r21, 0x00	; 0
 79a:	e0 f7       	brcc	.-8      	; 0x794 <memset+0x4>
 79c:	08 95       	ret

0000079e <vprintf>:
 79e:	9c 01       	movw	r18, r24
 7a0:	ab 01       	movw	r20, r22
 7a2:	80 91 e0 03 	lds	r24, 0x03E0
 7a6:	90 91 e1 03 	lds	r25, 0x03E1
 7aa:	b9 01       	movw	r22, r18
 7ac:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <vfprintf>
 7b0:	08 95       	ret

000007b2 <vfprintf>:
 7b2:	ab e0       	ldi	r26, 0x0B	; 11
 7b4:	b0 e0       	ldi	r27, 0x00	; 0
 7b6:	ef ed       	ldi	r30, 0xDF	; 223
 7b8:	f3 e0       	ldi	r31, 0x03	; 3
 7ba:	0c 94 56 06 	jmp	0xcac	; 0xcac <__prologue_saves__>
 7be:	3c 01       	movw	r6, r24
 7c0:	2b 01       	movw	r4, r22
 7c2:	5a 01       	movw	r10, r20
 7c4:	fc 01       	movw	r30, r24
 7c6:	17 82       	std	Z+7, r1	; 0x07
 7c8:	16 82       	std	Z+6, r1	; 0x06
 7ca:	83 81       	ldd	r24, Z+3	; 0x03
 7cc:	81 fd       	sbrc	r24, 1
 7ce:	03 c0       	rjmp	.+6      	; 0x7d6 <vfprintf+0x24>
 7d0:	6f ef       	ldi	r22, 0xFF	; 255
 7d2:	7f ef       	ldi	r23, 0xFF	; 255
 7d4:	c6 c1       	rjmp	.+908    	; 0xb62 <__stack+0x263>
 7d6:	9a e0       	ldi	r25, 0x0A	; 10
 7d8:	89 2e       	mov	r8, r25
 7da:	1e 01       	movw	r2, r28
 7dc:	08 94       	sec
 7de:	21 1c       	adc	r2, r1
 7e0:	31 1c       	adc	r3, r1
 7e2:	f3 01       	movw	r30, r6
 7e4:	23 81       	ldd	r18, Z+3	; 0x03
 7e6:	f2 01       	movw	r30, r4
 7e8:	23 fd       	sbrc	r18, 3
 7ea:	85 91       	lpm	r24, Z+
 7ec:	23 ff       	sbrs	r18, 3
 7ee:	81 91       	ld	r24, Z+
 7f0:	2f 01       	movw	r4, r30
 7f2:	88 23       	and	r24, r24
 7f4:	09 f4       	brne	.+2      	; 0x7f8 <vfprintf+0x46>
 7f6:	b2 c1       	rjmp	.+868    	; 0xb5c <__stack+0x25d>
 7f8:	85 32       	cpi	r24, 0x25	; 37
 7fa:	39 f4       	brne	.+14     	; 0x80a <vfprintf+0x58>
 7fc:	23 fd       	sbrc	r18, 3
 7fe:	85 91       	lpm	r24, Z+
 800:	23 ff       	sbrs	r18, 3
 802:	81 91       	ld	r24, Z+
 804:	2f 01       	movw	r4, r30
 806:	85 32       	cpi	r24, 0x25	; 37
 808:	29 f4       	brne	.+10     	; 0x814 <vfprintf+0x62>
 80a:	90 e0       	ldi	r25, 0x00	; 0
 80c:	b3 01       	movw	r22, r6
 80e:	0e 94 cc 05 	call	0xb98	; 0xb98 <fputc>
 812:	e7 cf       	rjmp	.-50     	; 0x7e2 <vfprintf+0x30>
 814:	98 2f       	mov	r25, r24
 816:	ff 24       	eor	r15, r15
 818:	ee 24       	eor	r14, r14
 81a:	99 24       	eor	r9, r9
 81c:	ff e1       	ldi	r31, 0x1F	; 31
 81e:	ff 15       	cp	r31, r15
 820:	d0 f0       	brcs	.+52     	; 0x856 <vfprintf+0xa4>
 822:	9b 32       	cpi	r25, 0x2B	; 43
 824:	69 f0       	breq	.+26     	; 0x840 <vfprintf+0x8e>
 826:	9c 32       	cpi	r25, 0x2C	; 44
 828:	28 f4       	brcc	.+10     	; 0x834 <vfprintf+0x82>
 82a:	90 32       	cpi	r25, 0x20	; 32
 82c:	59 f0       	breq	.+22     	; 0x844 <vfprintf+0x92>
 82e:	93 32       	cpi	r25, 0x23	; 35
 830:	91 f4       	brne	.+36     	; 0x856 <vfprintf+0xa4>
 832:	0e c0       	rjmp	.+28     	; 0x850 <vfprintf+0x9e>
 834:	9d 32       	cpi	r25, 0x2D	; 45
 836:	49 f0       	breq	.+18     	; 0x84a <vfprintf+0x98>
 838:	90 33       	cpi	r25, 0x30	; 48
 83a:	69 f4       	brne	.+26     	; 0x856 <vfprintf+0xa4>
 83c:	41 e0       	ldi	r20, 0x01	; 1
 83e:	24 c0       	rjmp	.+72     	; 0x888 <vfprintf+0xd6>
 840:	52 e0       	ldi	r21, 0x02	; 2
 842:	f5 2a       	or	r15, r21
 844:	84 e0       	ldi	r24, 0x04	; 4
 846:	f8 2a       	or	r15, r24
 848:	28 c0       	rjmp	.+80     	; 0x89a <vfprintf+0xe8>
 84a:	98 e0       	ldi	r25, 0x08	; 8
 84c:	f9 2a       	or	r15, r25
 84e:	25 c0       	rjmp	.+74     	; 0x89a <vfprintf+0xe8>
 850:	e0 e1       	ldi	r30, 0x10	; 16
 852:	fe 2a       	or	r15, r30
 854:	22 c0       	rjmp	.+68     	; 0x89a <vfprintf+0xe8>
 856:	f7 fc       	sbrc	r15, 7
 858:	29 c0       	rjmp	.+82     	; 0x8ac <vfprintf+0xfa>
 85a:	89 2f       	mov	r24, r25
 85c:	80 53       	subi	r24, 0x30	; 48
 85e:	8a 30       	cpi	r24, 0x0A	; 10
 860:	70 f4       	brcc	.+28     	; 0x87e <vfprintf+0xcc>
 862:	f6 fe       	sbrs	r15, 6
 864:	05 c0       	rjmp	.+10     	; 0x870 <vfprintf+0xbe>
 866:	98 9c       	mul	r9, r8
 868:	90 2c       	mov	r9, r0
 86a:	11 24       	eor	r1, r1
 86c:	98 0e       	add	r9, r24
 86e:	15 c0       	rjmp	.+42     	; 0x89a <vfprintf+0xe8>
 870:	e8 9c       	mul	r14, r8
 872:	e0 2c       	mov	r14, r0
 874:	11 24       	eor	r1, r1
 876:	e8 0e       	add	r14, r24
 878:	f0 e2       	ldi	r31, 0x20	; 32
 87a:	ff 2a       	or	r15, r31
 87c:	0e c0       	rjmp	.+28     	; 0x89a <vfprintf+0xe8>
 87e:	9e 32       	cpi	r25, 0x2E	; 46
 880:	29 f4       	brne	.+10     	; 0x88c <vfprintf+0xda>
 882:	f6 fc       	sbrc	r15, 6
 884:	6b c1       	rjmp	.+726    	; 0xb5c <__stack+0x25d>
 886:	40 e4       	ldi	r20, 0x40	; 64
 888:	f4 2a       	or	r15, r20
 88a:	07 c0       	rjmp	.+14     	; 0x89a <vfprintf+0xe8>
 88c:	9c 36       	cpi	r25, 0x6C	; 108
 88e:	19 f4       	brne	.+6      	; 0x896 <vfprintf+0xe4>
 890:	50 e8       	ldi	r21, 0x80	; 128
 892:	f5 2a       	or	r15, r21
 894:	02 c0       	rjmp	.+4      	; 0x89a <vfprintf+0xe8>
 896:	98 36       	cpi	r25, 0x68	; 104
 898:	49 f4       	brne	.+18     	; 0x8ac <vfprintf+0xfa>
 89a:	f2 01       	movw	r30, r4
 89c:	23 fd       	sbrc	r18, 3
 89e:	95 91       	lpm	r25, Z+
 8a0:	23 ff       	sbrs	r18, 3
 8a2:	91 91       	ld	r25, Z+
 8a4:	2f 01       	movw	r4, r30
 8a6:	99 23       	and	r25, r25
 8a8:	09 f0       	breq	.+2      	; 0x8ac <vfprintf+0xfa>
 8aa:	b8 cf       	rjmp	.-144    	; 0x81c <vfprintf+0x6a>
 8ac:	89 2f       	mov	r24, r25
 8ae:	85 54       	subi	r24, 0x45	; 69
 8b0:	83 30       	cpi	r24, 0x03	; 3
 8b2:	18 f0       	brcs	.+6      	; 0x8ba <vfprintf+0x108>
 8b4:	80 52       	subi	r24, 0x20	; 32
 8b6:	83 30       	cpi	r24, 0x03	; 3
 8b8:	38 f4       	brcc	.+14     	; 0x8c8 <vfprintf+0x116>
 8ba:	44 e0       	ldi	r20, 0x04	; 4
 8bc:	50 e0       	ldi	r21, 0x00	; 0
 8be:	a4 0e       	add	r10, r20
 8c0:	b5 1e       	adc	r11, r21
 8c2:	5f e3       	ldi	r21, 0x3F	; 63
 8c4:	59 83       	std	Y+1, r21	; 0x01
 8c6:	0f c0       	rjmp	.+30     	; 0x8e6 <vfprintf+0x134>
 8c8:	93 36       	cpi	r25, 0x63	; 99
 8ca:	31 f0       	breq	.+12     	; 0x8d8 <vfprintf+0x126>
 8cc:	93 37       	cpi	r25, 0x73	; 115
 8ce:	79 f0       	breq	.+30     	; 0x8ee <vfprintf+0x13c>
 8d0:	93 35       	cpi	r25, 0x53	; 83
 8d2:	09 f0       	breq	.+2      	; 0x8d6 <vfprintf+0x124>
 8d4:	56 c0       	rjmp	.+172    	; 0x982 <__stack+0x83>
 8d6:	20 c0       	rjmp	.+64     	; 0x918 <__stack+0x19>
 8d8:	f5 01       	movw	r30, r10
 8da:	80 81       	ld	r24, Z
 8dc:	89 83       	std	Y+1, r24	; 0x01
 8de:	42 e0       	ldi	r20, 0x02	; 2
 8e0:	50 e0       	ldi	r21, 0x00	; 0
 8e2:	a4 0e       	add	r10, r20
 8e4:	b5 1e       	adc	r11, r21
 8e6:	61 01       	movw	r12, r2
 8e8:	01 e0       	ldi	r16, 0x01	; 1
 8ea:	10 e0       	ldi	r17, 0x00	; 0
 8ec:	12 c0       	rjmp	.+36     	; 0x912 <__stack+0x13>
 8ee:	f5 01       	movw	r30, r10
 8f0:	c0 80       	ld	r12, Z
 8f2:	d1 80       	ldd	r13, Z+1	; 0x01
 8f4:	f6 fc       	sbrc	r15, 6
 8f6:	03 c0       	rjmp	.+6      	; 0x8fe <vfprintf+0x14c>
 8f8:	6f ef       	ldi	r22, 0xFF	; 255
 8fa:	7f ef       	ldi	r23, 0xFF	; 255
 8fc:	02 c0       	rjmp	.+4      	; 0x902 <__stack+0x3>
 8fe:	69 2d       	mov	r22, r9
 900:	70 e0       	ldi	r23, 0x00	; 0
 902:	42 e0       	ldi	r20, 0x02	; 2
 904:	50 e0       	ldi	r21, 0x00	; 0
 906:	a4 0e       	add	r10, r20
 908:	b5 1e       	adc	r11, r21
 90a:	c6 01       	movw	r24, r12
 90c:	0e 94 c1 05 	call	0xb82	; 0xb82 <strnlen>
 910:	8c 01       	movw	r16, r24
 912:	5f e7       	ldi	r21, 0x7F	; 127
 914:	f5 22       	and	r15, r21
 916:	14 c0       	rjmp	.+40     	; 0x940 <__stack+0x41>
 918:	f5 01       	movw	r30, r10
 91a:	c0 80       	ld	r12, Z
 91c:	d1 80       	ldd	r13, Z+1	; 0x01
 91e:	f6 fc       	sbrc	r15, 6
 920:	03 c0       	rjmp	.+6      	; 0x928 <__stack+0x29>
 922:	6f ef       	ldi	r22, 0xFF	; 255
 924:	7f ef       	ldi	r23, 0xFF	; 255
 926:	02 c0       	rjmp	.+4      	; 0x92c <__stack+0x2d>
 928:	69 2d       	mov	r22, r9
 92a:	70 e0       	ldi	r23, 0x00	; 0
 92c:	42 e0       	ldi	r20, 0x02	; 2
 92e:	50 e0       	ldi	r21, 0x00	; 0
 930:	a4 0e       	add	r10, r20
 932:	b5 1e       	adc	r11, r21
 934:	c6 01       	movw	r24, r12
 936:	0e 94 b6 05 	call	0xb6c	; 0xb6c <strnlen_P>
 93a:	8c 01       	movw	r16, r24
 93c:	50 e8       	ldi	r21, 0x80	; 128
 93e:	f5 2a       	or	r15, r21
 940:	f3 fe       	sbrs	r15, 3
 942:	07 c0       	rjmp	.+14     	; 0x952 <__stack+0x53>
 944:	1a c0       	rjmp	.+52     	; 0x97a <__stack+0x7b>
 946:	80 e2       	ldi	r24, 0x20	; 32
 948:	90 e0       	ldi	r25, 0x00	; 0
 94a:	b3 01       	movw	r22, r6
 94c:	0e 94 cc 05 	call	0xb98	; 0xb98 <fputc>
 950:	ea 94       	dec	r14
 952:	8e 2d       	mov	r24, r14
 954:	90 e0       	ldi	r25, 0x00	; 0
 956:	08 17       	cp	r16, r24
 958:	19 07       	cpc	r17, r25
 95a:	a8 f3       	brcs	.-22     	; 0x946 <__stack+0x47>
 95c:	0e c0       	rjmp	.+28     	; 0x97a <__stack+0x7b>
 95e:	f6 01       	movw	r30, r12
 960:	f7 fc       	sbrc	r15, 7
 962:	85 91       	lpm	r24, Z+
 964:	f7 fe       	sbrs	r15, 7
 966:	81 91       	ld	r24, Z+
 968:	6f 01       	movw	r12, r30
 96a:	90 e0       	ldi	r25, 0x00	; 0
 96c:	b3 01       	movw	r22, r6
 96e:	0e 94 cc 05 	call	0xb98	; 0xb98 <fputc>
 972:	e1 10       	cpse	r14, r1
 974:	ea 94       	dec	r14
 976:	01 50       	subi	r16, 0x01	; 1
 978:	10 40       	sbci	r17, 0x00	; 0
 97a:	01 15       	cp	r16, r1
 97c:	11 05       	cpc	r17, r1
 97e:	79 f7       	brne	.-34     	; 0x95e <__stack+0x5f>
 980:	ea c0       	rjmp	.+468    	; 0xb56 <__stack+0x257>
 982:	94 36       	cpi	r25, 0x64	; 100
 984:	11 f0       	breq	.+4      	; 0x98a <__stack+0x8b>
 986:	99 36       	cpi	r25, 0x69	; 105
 988:	69 f5       	brne	.+90     	; 0x9e4 <__stack+0xe5>
 98a:	f7 fe       	sbrs	r15, 7
 98c:	08 c0       	rjmp	.+16     	; 0x99e <__stack+0x9f>
 98e:	f5 01       	movw	r30, r10
 990:	20 81       	ld	r18, Z
 992:	31 81       	ldd	r19, Z+1	; 0x01
 994:	42 81       	ldd	r20, Z+2	; 0x02
 996:	53 81       	ldd	r21, Z+3	; 0x03
 998:	84 e0       	ldi	r24, 0x04	; 4
 99a:	90 e0       	ldi	r25, 0x00	; 0
 99c:	0a c0       	rjmp	.+20     	; 0x9b2 <__stack+0xb3>
 99e:	f5 01       	movw	r30, r10
 9a0:	80 81       	ld	r24, Z
 9a2:	91 81       	ldd	r25, Z+1	; 0x01
 9a4:	9c 01       	movw	r18, r24
 9a6:	44 27       	eor	r20, r20
 9a8:	37 fd       	sbrc	r19, 7
 9aa:	40 95       	com	r20
 9ac:	54 2f       	mov	r21, r20
 9ae:	82 e0       	ldi	r24, 0x02	; 2
 9b0:	90 e0       	ldi	r25, 0x00	; 0
 9b2:	a8 0e       	add	r10, r24
 9b4:	b9 1e       	adc	r11, r25
 9b6:	9f e6       	ldi	r25, 0x6F	; 111
 9b8:	f9 22       	and	r15, r25
 9ba:	57 ff       	sbrs	r21, 7
 9bc:	09 c0       	rjmp	.+18     	; 0x9d0 <__stack+0xd1>
 9be:	50 95       	com	r21
 9c0:	40 95       	com	r20
 9c2:	30 95       	com	r19
 9c4:	21 95       	neg	r18
 9c6:	3f 4f       	sbci	r19, 0xFF	; 255
 9c8:	4f 4f       	sbci	r20, 0xFF	; 255
 9ca:	5f 4f       	sbci	r21, 0xFF	; 255
 9cc:	e0 e8       	ldi	r30, 0x80	; 128
 9ce:	fe 2a       	or	r15, r30
 9d0:	ca 01       	movw	r24, r20
 9d2:	b9 01       	movw	r22, r18
 9d4:	a1 01       	movw	r20, r2
 9d6:	2a e0       	ldi	r18, 0x0A	; 10
 9d8:	30 e0       	ldi	r19, 0x00	; 0
 9da:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__ultoa_invert>
 9de:	d8 2e       	mov	r13, r24
 9e0:	d2 18       	sub	r13, r2
 9e2:	40 c0       	rjmp	.+128    	; 0xa64 <__stack+0x165>
 9e4:	95 37       	cpi	r25, 0x75	; 117
 9e6:	29 f4       	brne	.+10     	; 0x9f2 <__stack+0xf3>
 9e8:	1f 2d       	mov	r17, r15
 9ea:	1f 7e       	andi	r17, 0xEF	; 239
 9ec:	2a e0       	ldi	r18, 0x0A	; 10
 9ee:	30 e0       	ldi	r19, 0x00	; 0
 9f0:	1d c0       	rjmp	.+58     	; 0xa2c <__stack+0x12d>
 9f2:	1f 2d       	mov	r17, r15
 9f4:	19 7f       	andi	r17, 0xF9	; 249
 9f6:	9f 36       	cpi	r25, 0x6F	; 111
 9f8:	61 f0       	breq	.+24     	; 0xa12 <__stack+0x113>
 9fa:	90 37       	cpi	r25, 0x70	; 112
 9fc:	20 f4       	brcc	.+8      	; 0xa06 <__stack+0x107>
 9fe:	98 35       	cpi	r25, 0x58	; 88
 a00:	09 f0       	breq	.+2      	; 0xa04 <__stack+0x105>
 a02:	ac c0       	rjmp	.+344    	; 0xb5c <__stack+0x25d>
 a04:	0f c0       	rjmp	.+30     	; 0xa24 <__stack+0x125>
 a06:	90 37       	cpi	r25, 0x70	; 112
 a08:	39 f0       	breq	.+14     	; 0xa18 <__stack+0x119>
 a0a:	98 37       	cpi	r25, 0x78	; 120
 a0c:	09 f0       	breq	.+2      	; 0xa10 <__stack+0x111>
 a0e:	a6 c0       	rjmp	.+332    	; 0xb5c <__stack+0x25d>
 a10:	04 c0       	rjmp	.+8      	; 0xa1a <__stack+0x11b>
 a12:	28 e0       	ldi	r18, 0x08	; 8
 a14:	30 e0       	ldi	r19, 0x00	; 0
 a16:	0a c0       	rjmp	.+20     	; 0xa2c <__stack+0x12d>
 a18:	10 61       	ori	r17, 0x10	; 16
 a1a:	14 fd       	sbrc	r17, 4
 a1c:	14 60       	ori	r17, 0x04	; 4
 a1e:	20 e1       	ldi	r18, 0x10	; 16
 a20:	30 e0       	ldi	r19, 0x00	; 0
 a22:	04 c0       	rjmp	.+8      	; 0xa2c <__stack+0x12d>
 a24:	14 fd       	sbrc	r17, 4
 a26:	16 60       	ori	r17, 0x06	; 6
 a28:	20 e1       	ldi	r18, 0x10	; 16
 a2a:	32 e0       	ldi	r19, 0x02	; 2
 a2c:	17 ff       	sbrs	r17, 7
 a2e:	08 c0       	rjmp	.+16     	; 0xa40 <__stack+0x141>
 a30:	f5 01       	movw	r30, r10
 a32:	60 81       	ld	r22, Z
 a34:	71 81       	ldd	r23, Z+1	; 0x01
 a36:	82 81       	ldd	r24, Z+2	; 0x02
 a38:	93 81       	ldd	r25, Z+3	; 0x03
 a3a:	44 e0       	ldi	r20, 0x04	; 4
 a3c:	50 e0       	ldi	r21, 0x00	; 0
 a3e:	08 c0       	rjmp	.+16     	; 0xa50 <__stack+0x151>
 a40:	f5 01       	movw	r30, r10
 a42:	80 81       	ld	r24, Z
 a44:	91 81       	ldd	r25, Z+1	; 0x01
 a46:	bc 01       	movw	r22, r24
 a48:	80 e0       	ldi	r24, 0x00	; 0
 a4a:	90 e0       	ldi	r25, 0x00	; 0
 a4c:	42 e0       	ldi	r20, 0x02	; 2
 a4e:	50 e0       	ldi	r21, 0x00	; 0
 a50:	a4 0e       	add	r10, r20
 a52:	b5 1e       	adc	r11, r21
 a54:	a1 01       	movw	r20, r2
 a56:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__ultoa_invert>
 a5a:	d8 2e       	mov	r13, r24
 a5c:	d2 18       	sub	r13, r2
 a5e:	8f e7       	ldi	r24, 0x7F	; 127
 a60:	f8 2e       	mov	r15, r24
 a62:	f1 22       	and	r15, r17
 a64:	f6 fe       	sbrs	r15, 6
 a66:	0b c0       	rjmp	.+22     	; 0xa7e <__stack+0x17f>
 a68:	5e ef       	ldi	r21, 0xFE	; 254
 a6a:	f5 22       	and	r15, r21
 a6c:	d9 14       	cp	r13, r9
 a6e:	38 f4       	brcc	.+14     	; 0xa7e <__stack+0x17f>
 a70:	f4 fe       	sbrs	r15, 4
 a72:	07 c0       	rjmp	.+14     	; 0xa82 <__stack+0x183>
 a74:	f2 fc       	sbrc	r15, 2
 a76:	05 c0       	rjmp	.+10     	; 0xa82 <__stack+0x183>
 a78:	8f ee       	ldi	r24, 0xEF	; 239
 a7a:	f8 22       	and	r15, r24
 a7c:	02 c0       	rjmp	.+4      	; 0xa82 <__stack+0x183>
 a7e:	1d 2d       	mov	r17, r13
 a80:	01 c0       	rjmp	.+2      	; 0xa84 <__stack+0x185>
 a82:	19 2d       	mov	r17, r9
 a84:	f4 fe       	sbrs	r15, 4
 a86:	0d c0       	rjmp	.+26     	; 0xaa2 <__stack+0x1a3>
 a88:	fe 01       	movw	r30, r28
 a8a:	ed 0d       	add	r30, r13
 a8c:	f1 1d       	adc	r31, r1
 a8e:	80 81       	ld	r24, Z
 a90:	80 33       	cpi	r24, 0x30	; 48
 a92:	19 f4       	brne	.+6      	; 0xa9a <__stack+0x19b>
 a94:	99 ee       	ldi	r25, 0xE9	; 233
 a96:	f9 22       	and	r15, r25
 a98:	08 c0       	rjmp	.+16     	; 0xaaa <__stack+0x1ab>
 a9a:	1f 5f       	subi	r17, 0xFF	; 255
 a9c:	f2 fe       	sbrs	r15, 2
 a9e:	05 c0       	rjmp	.+10     	; 0xaaa <__stack+0x1ab>
 aa0:	03 c0       	rjmp	.+6      	; 0xaa8 <__stack+0x1a9>
 aa2:	8f 2d       	mov	r24, r15
 aa4:	86 78       	andi	r24, 0x86	; 134
 aa6:	09 f0       	breq	.+2      	; 0xaaa <__stack+0x1ab>
 aa8:	1f 5f       	subi	r17, 0xFF	; 255
 aaa:	0f 2d       	mov	r16, r15
 aac:	f3 fc       	sbrc	r15, 3
 aae:	14 c0       	rjmp	.+40     	; 0xad8 <__stack+0x1d9>
 ab0:	f0 fe       	sbrs	r15, 0
 ab2:	0f c0       	rjmp	.+30     	; 0xad2 <__stack+0x1d3>
 ab4:	1e 15       	cp	r17, r14
 ab6:	10 f0       	brcs	.+4      	; 0xabc <__stack+0x1bd>
 ab8:	9d 2c       	mov	r9, r13
 aba:	0b c0       	rjmp	.+22     	; 0xad2 <__stack+0x1d3>
 abc:	9d 2c       	mov	r9, r13
 abe:	9e 0c       	add	r9, r14
 ac0:	91 1a       	sub	r9, r17
 ac2:	1e 2d       	mov	r17, r14
 ac4:	06 c0       	rjmp	.+12     	; 0xad2 <__stack+0x1d3>
 ac6:	80 e2       	ldi	r24, 0x20	; 32
 ac8:	90 e0       	ldi	r25, 0x00	; 0
 aca:	b3 01       	movw	r22, r6
 acc:	0e 94 cc 05 	call	0xb98	; 0xb98 <fputc>
 ad0:	1f 5f       	subi	r17, 0xFF	; 255
 ad2:	1e 15       	cp	r17, r14
 ad4:	c0 f3       	brcs	.-16     	; 0xac6 <__stack+0x1c7>
 ad6:	04 c0       	rjmp	.+8      	; 0xae0 <__stack+0x1e1>
 ad8:	1e 15       	cp	r17, r14
 ada:	10 f4       	brcc	.+4      	; 0xae0 <__stack+0x1e1>
 adc:	e1 1a       	sub	r14, r17
 ade:	01 c0       	rjmp	.+2      	; 0xae2 <__stack+0x1e3>
 ae0:	ee 24       	eor	r14, r14
 ae2:	04 ff       	sbrs	r16, 4
 ae4:	0f c0       	rjmp	.+30     	; 0xb04 <__stack+0x205>
 ae6:	80 e3       	ldi	r24, 0x30	; 48
 ae8:	90 e0       	ldi	r25, 0x00	; 0
 aea:	b3 01       	movw	r22, r6
 aec:	0e 94 cc 05 	call	0xb98	; 0xb98 <fputc>
 af0:	02 ff       	sbrs	r16, 2
 af2:	1d c0       	rjmp	.+58     	; 0xb2e <__stack+0x22f>
 af4:	01 fd       	sbrc	r16, 1
 af6:	03 c0       	rjmp	.+6      	; 0xafe <__stack+0x1ff>
 af8:	88 e7       	ldi	r24, 0x78	; 120
 afa:	90 e0       	ldi	r25, 0x00	; 0
 afc:	0e c0       	rjmp	.+28     	; 0xb1a <__stack+0x21b>
 afe:	88 e5       	ldi	r24, 0x58	; 88
 b00:	90 e0       	ldi	r25, 0x00	; 0
 b02:	0b c0       	rjmp	.+22     	; 0xb1a <__stack+0x21b>
 b04:	80 2f       	mov	r24, r16
 b06:	86 78       	andi	r24, 0x86	; 134
 b08:	91 f0       	breq	.+36     	; 0xb2e <__stack+0x22f>
 b0a:	01 ff       	sbrs	r16, 1
 b0c:	02 c0       	rjmp	.+4      	; 0xb12 <__stack+0x213>
 b0e:	8b e2       	ldi	r24, 0x2B	; 43
 b10:	01 c0       	rjmp	.+2      	; 0xb14 <__stack+0x215>
 b12:	80 e2       	ldi	r24, 0x20	; 32
 b14:	f7 fc       	sbrc	r15, 7
 b16:	8d e2       	ldi	r24, 0x2D	; 45
 b18:	90 e0       	ldi	r25, 0x00	; 0
 b1a:	b3 01       	movw	r22, r6
 b1c:	0e 94 cc 05 	call	0xb98	; 0xb98 <fputc>
 b20:	06 c0       	rjmp	.+12     	; 0xb2e <__stack+0x22f>
 b22:	80 e3       	ldi	r24, 0x30	; 48
 b24:	90 e0       	ldi	r25, 0x00	; 0
 b26:	b3 01       	movw	r22, r6
 b28:	0e 94 cc 05 	call	0xb98	; 0xb98 <fputc>
 b2c:	9a 94       	dec	r9
 b2e:	d9 14       	cp	r13, r9
 b30:	c0 f3       	brcs	.-16     	; 0xb22 <__stack+0x223>
 b32:	da 94       	dec	r13
 b34:	f1 01       	movw	r30, r2
 b36:	ed 0d       	add	r30, r13
 b38:	f1 1d       	adc	r31, r1
 b3a:	80 81       	ld	r24, Z
 b3c:	90 e0       	ldi	r25, 0x00	; 0
 b3e:	b3 01       	movw	r22, r6
 b40:	0e 94 cc 05 	call	0xb98	; 0xb98 <fputc>
 b44:	dd 20       	and	r13, r13
 b46:	a9 f7       	brne	.-22     	; 0xb32 <__stack+0x233>
 b48:	06 c0       	rjmp	.+12     	; 0xb56 <__stack+0x257>
 b4a:	80 e2       	ldi	r24, 0x20	; 32
 b4c:	90 e0       	ldi	r25, 0x00	; 0
 b4e:	b3 01       	movw	r22, r6
 b50:	0e 94 cc 05 	call	0xb98	; 0xb98 <fputc>
 b54:	ea 94       	dec	r14
 b56:	ee 20       	and	r14, r14
 b58:	c1 f7       	brne	.-16     	; 0xb4a <__stack+0x24b>
 b5a:	43 ce       	rjmp	.-890    	; 0x7e2 <vfprintf+0x30>
 b5c:	f3 01       	movw	r30, r6
 b5e:	66 81       	ldd	r22, Z+6	; 0x06
 b60:	77 81       	ldd	r23, Z+7	; 0x07
 b62:	cb 01       	movw	r24, r22
 b64:	2b 96       	adiw	r28, 0x0b	; 11
 b66:	e2 e1       	ldi	r30, 0x12	; 18
 b68:	0c 94 72 06 	jmp	0xce4	; 0xce4 <__epilogue_restores__>

00000b6c <strnlen_P>:
 b6c:	fc 01       	movw	r30, r24
 b6e:	05 90       	lpm	r0, Z+
 b70:	61 50       	subi	r22, 0x01	; 1
 b72:	70 40       	sbci	r23, 0x00	; 0
 b74:	01 10       	cpse	r0, r1
 b76:	d8 f7       	brcc	.-10     	; 0xb6e <strnlen_P+0x2>
 b78:	80 95       	com	r24
 b7a:	90 95       	com	r25
 b7c:	8e 0f       	add	r24, r30
 b7e:	9f 1f       	adc	r25, r31
 b80:	08 95       	ret

00000b82 <strnlen>:
 b82:	fc 01       	movw	r30, r24
 b84:	61 50       	subi	r22, 0x01	; 1
 b86:	70 40       	sbci	r23, 0x00	; 0
 b88:	01 90       	ld	r0, Z+
 b8a:	01 10       	cpse	r0, r1
 b8c:	d8 f7       	brcc	.-10     	; 0xb84 <strnlen+0x2>
 b8e:	80 95       	com	r24
 b90:	90 95       	com	r25
 b92:	8e 0f       	add	r24, r30
 b94:	9f 1f       	adc	r25, r31
 b96:	08 95       	ret

00000b98 <fputc>:
 b98:	0f 93       	push	r16
 b9a:	1f 93       	push	r17
 b9c:	cf 93       	push	r28
 b9e:	df 93       	push	r29
 ba0:	8c 01       	movw	r16, r24
 ba2:	eb 01       	movw	r28, r22
 ba4:	8b 81       	ldd	r24, Y+3	; 0x03
 ba6:	81 ff       	sbrs	r24, 1
 ba8:	1b c0       	rjmp	.+54     	; 0xbe0 <fputc+0x48>
 baa:	82 ff       	sbrs	r24, 2
 bac:	0d c0       	rjmp	.+26     	; 0xbc8 <fputc+0x30>
 bae:	2e 81       	ldd	r18, Y+6	; 0x06
 bb0:	3f 81       	ldd	r19, Y+7	; 0x07
 bb2:	8c 81       	ldd	r24, Y+4	; 0x04
 bb4:	9d 81       	ldd	r25, Y+5	; 0x05
 bb6:	28 17       	cp	r18, r24
 bb8:	39 07       	cpc	r19, r25
 bba:	64 f4       	brge	.+24     	; 0xbd4 <fputc+0x3c>
 bbc:	e8 81       	ld	r30, Y
 bbe:	f9 81       	ldd	r31, Y+1	; 0x01
 bc0:	01 93       	st	Z+, r16
 bc2:	f9 83       	std	Y+1, r31	; 0x01
 bc4:	e8 83       	st	Y, r30
 bc6:	06 c0       	rjmp	.+12     	; 0xbd4 <fputc+0x3c>
 bc8:	e8 85       	ldd	r30, Y+8	; 0x08
 bca:	f9 85       	ldd	r31, Y+9	; 0x09
 bcc:	80 2f       	mov	r24, r16
 bce:	09 95       	icall
 bd0:	89 2b       	or	r24, r25
 bd2:	31 f4       	brne	.+12     	; 0xbe0 <fputc+0x48>
 bd4:	8e 81       	ldd	r24, Y+6	; 0x06
 bd6:	9f 81       	ldd	r25, Y+7	; 0x07
 bd8:	01 96       	adiw	r24, 0x01	; 1
 bda:	9f 83       	std	Y+7, r25	; 0x07
 bdc:	8e 83       	std	Y+6, r24	; 0x06
 bde:	02 c0       	rjmp	.+4      	; 0xbe4 <fputc+0x4c>
 be0:	0f ef       	ldi	r16, 0xFF	; 255
 be2:	1f ef       	ldi	r17, 0xFF	; 255
 be4:	c8 01       	movw	r24, r16
 be6:	df 91       	pop	r29
 be8:	cf 91       	pop	r28
 bea:	1f 91       	pop	r17
 bec:	0f 91       	pop	r16
 bee:	08 95       	ret

00000bf0 <__ultoa_invert>:
 bf0:	fa 01       	movw	r30, r20
 bf2:	aa 27       	eor	r26, r26
 bf4:	28 30       	cpi	r18, 0x08	; 8
 bf6:	51 f1       	breq	.+84     	; 0xc4c <__ultoa_invert+0x5c>
 bf8:	20 31       	cpi	r18, 0x10	; 16
 bfa:	81 f1       	breq	.+96     	; 0xc5c <__ultoa_invert+0x6c>
 bfc:	e8 94       	clt
 bfe:	6f 93       	push	r22
 c00:	6e 7f       	andi	r22, 0xFE	; 254
 c02:	6e 5f       	subi	r22, 0xFE	; 254
 c04:	7f 4f       	sbci	r23, 0xFF	; 255
 c06:	8f 4f       	sbci	r24, 0xFF	; 255
 c08:	9f 4f       	sbci	r25, 0xFF	; 255
 c0a:	af 4f       	sbci	r26, 0xFF	; 255
 c0c:	b1 e0       	ldi	r27, 0x01	; 1
 c0e:	3e d0       	rcall	.+124    	; 0xc8c <__ultoa_invert+0x9c>
 c10:	b4 e0       	ldi	r27, 0x04	; 4
 c12:	3c d0       	rcall	.+120    	; 0xc8c <__ultoa_invert+0x9c>
 c14:	67 0f       	add	r22, r23
 c16:	78 1f       	adc	r23, r24
 c18:	89 1f       	adc	r24, r25
 c1a:	9a 1f       	adc	r25, r26
 c1c:	a1 1d       	adc	r26, r1
 c1e:	68 0f       	add	r22, r24
 c20:	79 1f       	adc	r23, r25
 c22:	8a 1f       	adc	r24, r26
 c24:	91 1d       	adc	r25, r1
 c26:	a1 1d       	adc	r26, r1
 c28:	6a 0f       	add	r22, r26
 c2a:	71 1d       	adc	r23, r1
 c2c:	81 1d       	adc	r24, r1
 c2e:	91 1d       	adc	r25, r1
 c30:	a1 1d       	adc	r26, r1
 c32:	20 d0       	rcall	.+64     	; 0xc74 <__ultoa_invert+0x84>
 c34:	09 f4       	brne	.+2      	; 0xc38 <__ultoa_invert+0x48>
 c36:	68 94       	set
 c38:	3f 91       	pop	r19
 c3a:	2a e0       	ldi	r18, 0x0A	; 10
 c3c:	26 9f       	mul	r18, r22
 c3e:	11 24       	eor	r1, r1
 c40:	30 19       	sub	r19, r0
 c42:	30 5d       	subi	r19, 0xD0	; 208
 c44:	31 93       	st	Z+, r19
 c46:	de f6       	brtc	.-74     	; 0xbfe <__ultoa_invert+0xe>
 c48:	cf 01       	movw	r24, r30
 c4a:	08 95       	ret
 c4c:	46 2f       	mov	r20, r22
 c4e:	47 70       	andi	r20, 0x07	; 7
 c50:	40 5d       	subi	r20, 0xD0	; 208
 c52:	41 93       	st	Z+, r20
 c54:	b3 e0       	ldi	r27, 0x03	; 3
 c56:	0f d0       	rcall	.+30     	; 0xc76 <__ultoa_invert+0x86>
 c58:	c9 f7       	brne	.-14     	; 0xc4c <__ultoa_invert+0x5c>
 c5a:	f6 cf       	rjmp	.-20     	; 0xc48 <__ultoa_invert+0x58>
 c5c:	46 2f       	mov	r20, r22
 c5e:	4f 70       	andi	r20, 0x0F	; 15
 c60:	40 5d       	subi	r20, 0xD0	; 208
 c62:	4a 33       	cpi	r20, 0x3A	; 58
 c64:	18 f0       	brcs	.+6      	; 0xc6c <__ultoa_invert+0x7c>
 c66:	49 5d       	subi	r20, 0xD9	; 217
 c68:	31 fd       	sbrc	r19, 1
 c6a:	40 52       	subi	r20, 0x20	; 32
 c6c:	41 93       	st	Z+, r20
 c6e:	02 d0       	rcall	.+4      	; 0xc74 <__ultoa_invert+0x84>
 c70:	a9 f7       	brne	.-22     	; 0xc5c <__ultoa_invert+0x6c>
 c72:	ea cf       	rjmp	.-44     	; 0xc48 <__ultoa_invert+0x58>
 c74:	b4 e0       	ldi	r27, 0x04	; 4
 c76:	a6 95       	lsr	r26
 c78:	97 95       	ror	r25
 c7a:	87 95       	ror	r24
 c7c:	77 95       	ror	r23
 c7e:	67 95       	ror	r22
 c80:	ba 95       	dec	r27
 c82:	c9 f7       	brne	.-14     	; 0xc76 <__ultoa_invert+0x86>
 c84:	00 97       	sbiw	r24, 0x00	; 0
 c86:	61 05       	cpc	r22, r1
 c88:	71 05       	cpc	r23, r1
 c8a:	08 95       	ret
 c8c:	9b 01       	movw	r18, r22
 c8e:	ac 01       	movw	r20, r24
 c90:	0a 2e       	mov	r0, r26
 c92:	06 94       	lsr	r0
 c94:	57 95       	ror	r21
 c96:	47 95       	ror	r20
 c98:	37 95       	ror	r19
 c9a:	27 95       	ror	r18
 c9c:	ba 95       	dec	r27
 c9e:	c9 f7       	brne	.-14     	; 0xc92 <__ultoa_invert+0xa2>
 ca0:	62 0f       	add	r22, r18
 ca2:	73 1f       	adc	r23, r19
 ca4:	84 1f       	adc	r24, r20
 ca6:	95 1f       	adc	r25, r21
 ca8:	a0 1d       	adc	r26, r0
 caa:	08 95       	ret

00000cac <__prologue_saves__>:
 cac:	2f 92       	push	r2
 cae:	3f 92       	push	r3
 cb0:	4f 92       	push	r4
 cb2:	5f 92       	push	r5
 cb4:	6f 92       	push	r6
 cb6:	7f 92       	push	r7
 cb8:	8f 92       	push	r8
 cba:	9f 92       	push	r9
 cbc:	af 92       	push	r10
 cbe:	bf 92       	push	r11
 cc0:	cf 92       	push	r12
 cc2:	df 92       	push	r13
 cc4:	ef 92       	push	r14
 cc6:	ff 92       	push	r15
 cc8:	0f 93       	push	r16
 cca:	1f 93       	push	r17
 ccc:	cf 93       	push	r28
 cce:	df 93       	push	r29
 cd0:	cd b7       	in	r28, 0x3d	; 61
 cd2:	de b7       	in	r29, 0x3e	; 62
 cd4:	ca 1b       	sub	r28, r26
 cd6:	db 0b       	sbc	r29, r27
 cd8:	0f b6       	in	r0, 0x3f	; 63
 cda:	f8 94       	cli
 cdc:	de bf       	out	0x3e, r29	; 62
 cde:	0f be       	out	0x3f, r0	; 63
 ce0:	cd bf       	out	0x3d, r28	; 61
 ce2:	09 94       	ijmp

00000ce4 <__epilogue_restores__>:
 ce4:	2a 88       	ldd	r2, Y+18	; 0x12
 ce6:	39 88       	ldd	r3, Y+17	; 0x11
 ce8:	48 88       	ldd	r4, Y+16	; 0x10
 cea:	5f 84       	ldd	r5, Y+15	; 0x0f
 cec:	6e 84       	ldd	r6, Y+14	; 0x0e
 cee:	7d 84       	ldd	r7, Y+13	; 0x0d
 cf0:	8c 84       	ldd	r8, Y+12	; 0x0c
 cf2:	9b 84       	ldd	r9, Y+11	; 0x0b
 cf4:	aa 84       	ldd	r10, Y+10	; 0x0a
 cf6:	b9 84       	ldd	r11, Y+9	; 0x09
 cf8:	c8 84       	ldd	r12, Y+8	; 0x08
 cfa:	df 80       	ldd	r13, Y+7	; 0x07
 cfc:	ee 80       	ldd	r14, Y+6	; 0x06
 cfe:	fd 80       	ldd	r15, Y+5	; 0x05
 d00:	0c 81       	ldd	r16, Y+4	; 0x04
 d02:	1b 81       	ldd	r17, Y+3	; 0x03
 d04:	aa 81       	ldd	r26, Y+2	; 0x02
 d06:	b9 81       	ldd	r27, Y+1	; 0x01
 d08:	ce 0f       	add	r28, r30
 d0a:	d1 1d       	adc	r29, r1
 d0c:	0f b6       	in	r0, 0x3f	; 63
 d0e:	f8 94       	cli
 d10:	de bf       	out	0x3e, r29	; 62
 d12:	0f be       	out	0x3f, r0	; 63
 d14:	cd bf       	out	0x3d, r28	; 61
 d16:	ed 01       	movw	r28, r26
 d18:	08 95       	ret

00000d1a <_exit>:
 d1a:	f8 94       	cli

00000d1c <__stop_program>:
 d1c:	ff cf       	rjmp	.-2      	; 0xd1c <__stop_program>
