
serial_a_tester.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000020c  00800100  00000d4c  00000de0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d4c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d9  0080030c  0080030c  00000fec  2**0
                  ALLOC
  3 .debug_aranges 00000260  00000000  00000000  00000fec  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000009a8  00000000  00000000  0000124c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002938  00000000  00000000  00001bf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000fe3  00000000  00000000  0000452c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000019f5  00000000  00000000  0000550f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002e0  00000000  00000000  00006f04  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000094c  00000000  00000000  000071e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005cb  00000000  00000000  00007b30  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__vector_18>
  4c:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	13 e0       	ldi	r17, 0x03	; 3
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e4       	ldi	r30, 0x4C	; 76
  7c:	fd e0       	ldi	r31, 0x0D	; 13
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	13 e0       	ldi	r17, 0x03	; 3
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b3 e0       	ldi	r27, 0x03	; 3
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 3e       	cpi	r26, 0xE5	; 229
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 a4 06 	jmp	0xd48	; 0xd48 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include "c:\avrtoolbox\libavr\source\elementary\serial\serial.h" //"libserial\serial.h"

int main(void)
{
  a6:	bf 92       	push	r11
  a8:	cf 92       	push	r12
  aa:	df 92       	push	r13
  ac:	ef 92       	push	r14
  ae:	ff 92       	push	r15
  b0:	0f 93       	push	r16
  b2:	1f 93       	push	r17
  b4:	df 93       	push	r29
  b6:	cf 93       	push	r28
  b8:	cd b7       	in	r28, 0x3d	; 61
  ba:	de b7       	in	r29, 0x3e	; 62
  bc:	c0 54       	subi	r28, 0x40	; 64
  be:	d0 40       	sbci	r29, 0x00	; 0
  c0:	0f b6       	in	r0, 0x3f	; 63
  c2:	f8 94       	cli
  c4:	de bf       	out	0x3e, r29	; 62
  c6:	0f be       	out	0x3f, r0	; 63
  c8:	cd bf       	out	0x3d, r28	; 61
	butterfly_init();
	#endif

	// NOTE: If BUTTERFLY is defined then the serial_being() is bypassed
	// and the usart is set to 19200 regardless of what this says
	serial_begin(57600);
  ca:	60 e0       	ldi	r22, 0x00	; 0
  cc:	71 ee       	ldi	r23, 0xE1	; 225
  ce:	80 e0       	ldi	r24, 0x00	; 0
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	0e 94 08 01 	call	0x210	; 0x210 <serial_begin>

	serial_write(buf,6);
	// Insert a delay to keep this from stepping on the next statement
	delay(10);
*/
	serial_out("Hello70");
  d6:	00 d0       	rcall	.+0      	; 0xd8 <main+0x32>
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	91 e0       	ldi	r25, 0x01	; 1
  dc:	ed b7       	in	r30, 0x3d	; 61
  de:	fe b7       	in	r31, 0x3e	; 62
  e0:	92 83       	std	Z+2, r25	; 0x02
  e2:	81 83       	std	Z+1, r24	; 0x01
  e4:	0e 94 25 01 	call	0x24a	; 0x24a <serial_out>

	// Send a bunch of stuff to see if it poops out
	serial_out("serial_println The quick brown fox jumped over the lazy dog.");
  e8:	88 e0       	ldi	r24, 0x08	; 8
  ea:	91 e0       	ldi	r25, 0x01	; 1
  ec:	ed b7       	in	r30, 0x3d	; 61
  ee:	fe b7       	in	r31, 0x3e	; 62
  f0:	92 83       	std	Z+2, r25	; 0x02
  f2:	81 83       	std	Z+1, r24	; 0x01
  f4:	0e 94 25 01 	call	0x24a	; 0x24a <serial_out>

	serial_out("serial_out The quick brown fox jumped over the lazy dog.\n",0);
  f8:	00 d0       	rcall	.+0      	; 0xfa <main+0x54>
  fa:	85 e4       	ldi	r24, 0x45	; 69
  fc:	91 e0       	ldi	r25, 0x01	; 1
  fe:	ed b7       	in	r30, 0x3d	; 61
 100:	fe b7       	in	r31, 0x3e	; 62
 102:	92 83       	std	Z+2, r25	; 0x02
 104:	81 83       	std	Z+1, r24	; 0x01
 106:	14 82       	std	Z+4, r1	; 0x04
 108:	13 82       	std	Z+3, r1	; 0x03
 10a:	0e 94 25 01 	call	0x24a	; 0x24a <serial_out>
	serial_out("1serial_out The quick brown fox jumped over the lazy dog.\n",0);
 10e:	8f e7       	ldi	r24, 0x7F	; 127
 110:	91 e0       	ldi	r25, 0x01	; 1
 112:	ed b7       	in	r30, 0x3d	; 61
 114:	fe b7       	in	r31, 0x3e	; 62
 116:	92 83       	std	Z+2, r25	; 0x02
 118:	81 83       	std	Z+1, r24	; 0x01
 11a:	14 82       	std	Z+4, r1	; 0x04
 11c:	13 82       	std	Z+3, r1	; 0x03
 11e:	0e 94 25 01 	call	0x24a	; 0x24a <serial_out>
	serial_out("2serial_out The quick brown fox jumped over the lazy dog.\n",0);
 122:	8a eb       	ldi	r24, 0xBA	; 186
 124:	91 e0       	ldi	r25, 0x01	; 1
 126:	ed b7       	in	r30, 0x3d	; 61
 128:	fe b7       	in	r31, 0x3e	; 62
 12a:	92 83       	std	Z+2, r25	; 0x02
 12c:	81 83       	std	Z+1, r24	; 0x01
 12e:	14 82       	std	Z+4, r1	; 0x04
 130:	13 82       	std	Z+3, r1	; 0x03
 132:	0e 94 25 01 	call	0x24a	; 0x24a <serial_out>
	serial_out("3serial_out The quick brown fox jumped over the lazy dog.\n",0);
 136:	85 ef       	ldi	r24, 0xF5	; 245
 138:	91 e0       	ldi	r25, 0x01	; 1
 13a:	ed b7       	in	r30, 0x3d	; 61
 13c:	fe b7       	in	r31, 0x3e	; 62
 13e:	92 83       	std	Z+2, r25	; 0x02
 140:	81 83       	std	Z+1, r24	; 0x01
 142:	14 82       	std	Z+4, r1	; 0x04
 144:	13 82       	std	Z+3, r1	; 0x03
 146:	0e 94 25 01 	call	0x24a	; 0x24a <serial_out>
	serial_out("4serial_out The quick brown fox jumped over the lazy dog.\n",0);
 14a:	80 e3       	ldi	r24, 0x30	; 48
 14c:	92 e0       	ldi	r25, 0x02	; 2
 14e:	ed b7       	in	r30, 0x3d	; 61
 150:	fe b7       	in	r31, 0x3e	; 62
 152:	92 83       	std	Z+2, r25	; 0x02
 154:	81 83       	std	Z+1, r24	; 0x01
 156:	14 82       	std	Z+4, r1	; 0x04
 158:	13 82       	std	Z+3, r1	; 0x03
 15a:	0e 94 25 01 	call	0x24a	; 0x24a <serial_out>
	serial_out("5serial_out The quick brown fox jumped over the lazy dog.\n",0);
 15e:	8b e6       	ldi	r24, 0x6B	; 107
 160:	92 e0       	ldi	r25, 0x02	; 2
 162:	ed b7       	in	r30, 0x3d	; 61
 164:	fe b7       	in	r31, 0x3e	; 62
 166:	92 83       	std	Z+2, r25	; 0x02
 168:	81 83       	std	Z+1, r24	; 0x01
 16a:	14 82       	std	Z+4, r1	; 0x04
 16c:	13 82       	std	Z+3, r1	; 0x03
 16e:	0e 94 25 01 	call	0x24a	; 0x24a <serial_out>

	char c = 'A';
	uint8_t x = 0x22;
	uint16_t X = 0x1122;

	serial_out("Test character: %c\n", c);
 172:	86 ea       	ldi	r24, 0xA6	; 166
 174:	92 e0       	ldi	r25, 0x02	; 2
 176:	ed b7       	in	r30, 0x3d	; 61
 178:	fe b7       	in	r31, 0x3e	; 62
 17a:	92 83       	std	Z+2, r25	; 0x02
 17c:	81 83       	std	Z+1, r24	; 0x01
 17e:	81 e4       	ldi	r24, 0x41	; 65
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	94 83       	std	Z+4, r25	; 0x04
 184:	83 83       	std	Z+3, r24	; 0x03
 186:	0e 94 25 01 	call	0x24a	; 0x24a <serial_out>

	serial_out("Test hexadecimal integer: %x\n", x);
 18a:	8a eb       	ldi	r24, 0xBA	; 186
 18c:	92 e0       	ldi	r25, 0x02	; 2
 18e:	ed b7       	in	r30, 0x3d	; 61
 190:	fe b7       	in	r31, 0x3e	; 62
 192:	92 83       	std	Z+2, r25	; 0x02
 194:	81 83       	std	Z+1, r24	; 0x01
 196:	82 e2       	ldi	r24, 0x22	; 34
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	94 83       	std	Z+4, r25	; 0x04
 19c:	83 83       	std	Z+3, r24	; 0x03
 19e:	0e 94 25 01 	call	0x24a	; 0x24a <serial_out>

	serial_out("Test 16-bit hexadecimal integer: %x\n", X);
 1a2:	88 ed       	ldi	r24, 0xD8	; 216
 1a4:	92 e0       	ldi	r25, 0x02	; 2
 1a6:	ed b7       	in	r30, 0x3d	; 61
 1a8:	fe b7       	in	r31, 0x3e	; 62
 1aa:	92 83       	std	Z+2, r25	; 0x02
 1ac:	81 83       	std	Z+1, r24	; 0x01
 1ae:	82 e2       	ldi	r24, 0x22	; 34
 1b0:	91 e1       	ldi	r25, 0x11	; 17
 1b2:	94 83       	std	Z+4, r25	; 0x04
 1b4:	83 83       	std	Z+3, r24	; 0x03
 1b6:	0e 94 25 01 	call	0x24a	; 0x24a <serial_out>
 1ba:	0f 90       	pop	r0
 1bc:	0f 90       	pop	r0
 1be:	0f 90       	pop	r0
 1c0:	0f 90       	pop	r0
		delay(1000);
		usart0_transmit_buffer_insert('#');	

		if(serial_available())
		{
			count = usart0_receive_buffer_inuse_count();
 1c2:	6e 01       	movw	r12, r28
 1c4:	08 94       	sec
 1c6:	c1 1c       	adc	r12, r1
 1c8:	d1 1c       	adc	r13, r1

	serial_out("Test 16-bit hexadecimal integer: %x\n", X);

	while(1)
	{
		delay(1000);
 1ca:	88 ee       	ldi	r24, 0xE8	; 232
 1cc:	93 e0       	ldi	r25, 0x03	; 3
 1ce:	0e 94 06 03 	call	0x60c	; 0x60c <delay>
		usart0_transmit_buffer_insert('#');	
 1d2:	83 e2       	ldi	r24, 0x23	; 35
 1d4:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <usart0_transmit_buffer_insert>

		if(serial_available())
 1d8:	0e 94 05 01 	call	0x20a	; 0x20a <serial_available>
 1dc:	88 23       	and	r24, r24
 1de:	a9 f3       	breq	.-22     	; 0x1ca <main+0x124>
		{
			count = usart0_receive_buffer_inuse_count();
 1e0:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <usart0_receive_buffer_inuse_count>
 1e4:	b8 2e       	mov	r11, r24
 1e6:	86 01       	movw	r16, r12

			for(int i = 0 ; i < count; i++)
 1e8:	76 01       	movw	r14, r12
 1ea:	e8 0e       	add	r14, r24
 1ec:	f1 1c       	adc	r15, r1
 1ee:	05 c0       	rjmp	.+10     	; 0x1fa <main+0x154>
			{
				buf[i] = serial_in();
 1f0:	0e 94 22 01 	call	0x244	; 0x244 <serial_in>
 1f4:	f8 01       	movw	r30, r16
 1f6:	81 93       	st	Z+, r24
 1f8:	8f 01       	movw	r16, r30

		if(serial_available())
		{
			count = usart0_receive_buffer_inuse_count();

			for(int i = 0 ; i < count; i++)
 1fa:	0e 15       	cp	r16, r14
 1fc:	1f 05       	cpc	r17, r15
 1fe:	c1 f7       	brne	.-16     	; 0x1f0 <main+0x14a>
			{
				buf[i] = serial_in();
				//usart0_transmit_buffer_insert(serial_read());//usart0_receive_buffer_remove());
			}
			
			serial_write(buf,count);
 200:	c6 01       	movw	r24, r12
 202:	6b 2d       	mov	r22, r11
 204:	0e 94 14 03 	call	0x628	; 0x628 <serial_write>
 208:	e0 cf       	rjmp	.-64     	; 0x1ca <main+0x124>

0000020a <serial_available>:
#include "serial.h"

uint8_t serial_available(void)
{
	return usart0_receive_buffer_inuse_count();	
 20a:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <usart0_receive_buffer_inuse_count>
}
 20e:	08 95       	ret

00000210 <serial_begin>:
#include "serial.h"


void serial_begin(uint32_t baud)
{
 210:	8f 92       	push	r8
 212:	af 92       	push	r10
 214:	cf 92       	push	r12
 216:	ef 92       	push	r14
 218:	0f 93       	push	r16
	cli();
 21a:	f8 94       	cli
	uint8_t databits = 8;
	uint8_t stopbits = 1;
	usart_parity_t parity = parity_none;
	usart_flow_control_t flow_control = flow_none;

	usart0_init(baud, F_CPU, mode,  databits, stopbits, parity, flow_control);
 21c:	20 e0       	ldi	r18, 0x00	; 0
 21e:	34 e2       	ldi	r19, 0x24	; 36
 220:	44 ef       	ldi	r20, 0xF4	; 244
 222:	50 e0       	ldi	r21, 0x00	; 0
 224:	00 e0       	ldi	r16, 0x00	; 0
 226:	e8 e0       	ldi	r30, 0x08	; 8
 228:	ee 2e       	mov	r14, r30
 22a:	cc 24       	eor	r12, r12
 22c:	c3 94       	inc	r12
 22e:	aa 24       	eor	r10, r10
 230:	88 24       	eor	r8, r8
 232:	0e 94 13 02 	call	0x426	; 0x426 <usart0_init>

	sei();
 236:	78 94       	sei

}
 238:	0f 91       	pop	r16
 23a:	ef 90       	pop	r14
 23c:	cf 90       	pop	r12
 23e:	af 90       	pop	r10
 240:	8f 90       	pop	r8
 242:	08 95       	ret

00000244 <serial_in>:
#include "serial.h"

uint8_t serial_in(void)
{
	return usart0_receive_buffer_remove();
 244:	0e 94 ee 02 	call	0x5dc	; 0x5dc <usart0_receive_buffer_remove>
}
 248:	08 95       	ret

0000024a <serial_out>:

// The delay is added to prevent buffer overrun
// The variadic (va_) stuff is magic 
//void serial_out(const char *fmt, ...)
void serial_out(const char *fmt, ...)
{
 24a:	ef 92       	push	r14
 24c:	ff 92       	push	r15
 24e:	0f 93       	push	r16
 250:	1f 93       	push	r17
 252:	df 93       	push	r29
 254:	cf 93       	push	r28
 256:	cd b7       	in	r28, 0x3d	; 61
 258:	de b7       	in	r29, 0x3e	; 62
 25a:	fe 01       	movw	r30, r28
 25c:	39 96       	adiw	r30, 0x09	; 9
 25e:	01 91       	ld	r16, Z+
 260:	11 91       	ld	r17, Z+
 262:	fe 2e       	mov	r15, r30
 264:	ef 2e       	mov	r14, r31
	va_list arg;
	va_start(arg, fmt);
	if(usart0_transmit_buffer_inuse_count() > ((2*USART0_TRANSMIT_BUFFER_LEN)/3)) delay(BUFFER_DELAY);
 266:	0e 94 01 03 	call	0x602	; 0x602 <usart0_transmit_buffer_inuse_count>
 26a:	86 35       	cpi	r24, 0x56	; 86
 26c:	20 f0       	brcs	.+8      	; 0x276 <serial_out+0x2c>
 26e:	84 e1       	ldi	r24, 0x14	; 20
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	0e 94 06 03 	call	0x60c	; 0x60c <delay>
	vprintf(fmt, arg);
 276:	c8 01       	movw	r24, r16
 278:	6f 2d       	mov	r22, r15
 27a:	7e 2d       	mov	r23, r14
 27c:	0e 94 e6 03 	call	0x7cc	; 0x7cc <vprintf>
	va_end(arg);
}
 280:	cf 91       	pop	r28
 282:	df 91       	pop	r29
 284:	1f 91       	pop	r17
 286:	0f 91       	pop	r16
 288:	ff 90       	pop	r15
 28a:	ef 90       	pop	r14
 28c:	08 95       	ret

0000028e <adelay>:


#include "util\delay.h"
void adelay(uint16_t ms);
void adelay(uint16_t ms)
{
 28e:	20 e0       	ldi	r18, 0x00	; 0
 290:	30 e0       	ldi	r19, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 292:	40 ea       	ldi	r20, 0xA0	; 160
 294:	5f e0       	ldi	r21, 0x0F	; 15
 296:	05 c0       	rjmp	.+10     	; 0x2a2 <adelay+0x14>
 298:	fa 01       	movw	r30, r20
 29a:	31 97       	sbiw	r30, 0x01	; 1
 29c:	f1 f7       	brne	.-4      	; 0x29a <adelay+0xc>
	for(int i = 0 ; i < ms ; i++)
 29e:	2f 5f       	subi	r18, 0xFF	; 255
 2a0:	3f 4f       	sbci	r19, 0xFF	; 255
 2a2:	28 17       	cp	r18, r24
 2a4:	39 07       	cpc	r19, r25
 2a6:	c0 f3       	brcs	.-16     	; 0x298 <adelay+0xa>
	{
		_delay_ms(1);
	}
}
 2a8:	08 95       	ret

000002aa <usart0_baud_set>:
	return;
}

// 3/18/11 JWP removed magic number for clock and added freq_cpu
void usart0_baud_set(uint32_t baudrate, uint32_t freq_cpu)
{
 2aa:	ef 92       	push	r14
 2ac:	ff 92       	push	r15
 2ae:	0f 93       	push	r16
 2b0:	1f 93       	push	r17
 2b2:	7b 01       	movw	r14, r22
 2b4:	8c 01       	movw	r16, r24
	uint16_t setting;
	
	setting = usart_baudrate2setting(freq_cpu,baudrate);
 2b6:	84 e0       	ldi	r24, 0x04	; 4
 2b8:	ee 0c       	add	r14, r14
 2ba:	ff 1c       	adc	r15, r15
 2bc:	00 1f       	adc	r16, r16
 2be:	11 1f       	adc	r17, r17
 2c0:	8a 95       	dec	r24
 2c2:	d1 f7       	brne	.-12     	; 0x2b8 <usart0_baud_set+0xe>
 2c4:	ca 01       	movw	r24, r20
 2c6:	b9 01       	movw	r22, r18
 2c8:	a8 01       	movw	r20, r16
 2ca:	97 01       	movw	r18, r14
 2cc:	0e 94 c4 03 	call	0x788	; 0x788 <__udivmodsi4>
 2d0:	21 50       	subi	r18, 0x01	; 1
 2d2:	30 40       	sbci	r19, 0x00	; 0
	
	// Write hi byte first as writing lo byte will trigger immediate update of baud prescaler.
	UART_BAUD_RATE_HIGH = hi_byte(setting);
 2d4:	30 93 c5 00 	sts	0x00C5, r19
	UART_BAUD_RATE_LOW= lo_byte(setting);
 2d8:	20 93 c4 00 	sts	0x00C4, r18
	
	return;
}
 2dc:	1f 91       	pop	r17
 2de:	0f 91       	pop	r16
 2e0:	ff 90       	pop	r15
 2e2:	ef 90       	pop	r14
 2e4:	08 95       	ret

000002e6 <usart0_parity_set>:

void usart0_parity_set(usart_parity_t parity)
{
    if(parity > 0)
 2e6:	81 11       	cpse	r24, r1
    {
        parity++;
 2e8:	8f 5f       	subi	r24, 0xFF	; 255
    }
    bit_write(bit_read(parity, BIT(0)), UART_CONTROL_STATUS_REG_C, BIT(UART_PARITY_MODE_0));
 2ea:	98 2f       	mov	r25, r24
 2ec:	80 ff       	sbrs	r24, 0
 2ee:	04 c0       	rjmp	.+8      	; 0x2f8 <usart0_parity_set+0x12>
 2f0:	80 91 c2 00 	lds	r24, 0x00C2
 2f4:	80 61       	ori	r24, 0x10	; 16
 2f6:	03 c0       	rjmp	.+6      	; 0x2fe <usart0_parity_set+0x18>
 2f8:	80 91 c2 00 	lds	r24, 0x00C2
 2fc:	8f 7e       	andi	r24, 0xEF	; 239
 2fe:	80 93 c2 00 	sts	0x00C2, r24
 302:	80 91 c2 00 	lds	r24, 0x00C2
    bit_write(bit_read(parity, BIT(1)), UART_CONTROL_STATUS_REG_C, BIT(UART_PARITY_MODE_1));
 306:	91 ff       	sbrs	r25, 1
 308:	04 c0       	rjmp	.+8      	; 0x312 <usart0_parity_set+0x2c>
 30a:	80 91 c2 00 	lds	r24, 0x00C2
 30e:	80 62       	ori	r24, 0x20	; 32
 310:	03 c0       	rjmp	.+6      	; 0x318 <usart0_parity_set+0x32>
 312:	80 91 c2 00 	lds	r24, 0x00C2
 316:	8f 7d       	andi	r24, 0xDF	; 223
 318:	80 93 c2 00 	sts	0x00C2, r24
 31c:	80 91 c2 00 	lds	r24, 0x00C2
 320:	08 95       	ret

00000322 <usart0_transmit_check>:
    register uint8_t count;

	// JWP 3/27/11 added this to prevent buffer overruns (?)
//  	loop_until_bit_is_set(UART_CONTROL_STATUS_REG_A, UART_READY_TO_TRANSMIT);//UCSR0A, UDRE); // wait for UDR to be clear 

    sreg = SREG;
 322:	8f b7       	in	r24, 0x3f	; 63
    cli();
 324:	f8 94       	cli
    count = usart0_transmit_ring.count;
    SREG = sreg;
 326:	8f bf       	out	0x3f, r24	; 63

    if (count > 0 && flow.flow_out)
 328:	80 91 96 03 	lds	r24, 0x0396
 32c:	88 23       	and	r24, r24
 32e:	41 f0       	breq	.+16     	; 0x340 <usart0_transmit_check+0x1e>
 330:	80 91 0d 03 	lds	r24, 0x030D
 334:	88 23       	and	r24, r24
 336:	21 f0       	breq	.+8      	; 0x340 <usart0_transmit_check+0x1e>
    {
        usart0_data_register_empty_interrupt_enable();
 338:	80 91 c1 00 	lds	r24, 0x00C1
 33c:	80 62       	ori	r24, 0x20	; 32
 33e:	03 c0       	rjmp	.+6      	; 0x346 <usart0_transmit_check+0x24>
    }
    else
    {
        usart0_data_register_empty_interrupt_disable();
 340:	80 91 c1 00 	lds	r24, 0x00C1
 344:	8f 7d       	andi	r24, 0xDF	; 223
 346:	80 93 c1 00 	sts	0x00C1, r24
 34a:	08 95       	ret

0000034c <__vector_18>:
}

//--------- Receiver routines

usart0_receive_interrupt_service_routine
{
 34c:	1f 92       	push	r1
 34e:	0f 92       	push	r0
 350:	0f b6       	in	r0, 0x3f	; 63
 352:	0f 92       	push	r0
 354:	11 24       	eor	r1, r1
 356:	2f 93       	push	r18
 358:	3f 93       	push	r19
 35a:	4f 93       	push	r20
 35c:	5f 93       	push	r21
 35e:	6f 93       	push	r22
 360:	7f 93       	push	r23
 362:	8f 93       	push	r24
 364:	9f 93       	push	r25
 366:	af 93       	push	r26
 368:	bf 93       	push	r27
 36a:	ef 93       	push	r30
 36c:	ff 93       	push	r31
	register uint8_t data;
	register uint8_t parity_error = false;
	register uint8_t frame_error = false;

	// Get error conditions before getting the data.
	frame_error = usart0_frame_error();
 36e:	80 91 c0 00 	lds	r24, 0x00C0
	parity_error = usart0_parity_error();
 372:	90 91 c0 00 	lds	r25, 0x00C0
	
	data = UART_DATA_REG;
 376:	60 91 c6 00 	lds	r22, 0x00C6
    
	if(!frame_error && !parity_error)
 37a:	84 fd       	sbrc	r24, 4
 37c:	06 c0       	rjmp	.+12     	; 0x38a <__vector_18+0x3e>
 37e:	92 fd       	sbrc	r25, 2
 380:	04 c0       	rjmp	.+8      	; 0x38a <__vector_18+0x3e>
                return;
            }
        }
    	*/
		// Store data in ring buffer.
        ring_add(&usart0_receive_ring, data);
 382:	87 e9       	ldi	r24, 0x97	; 151
 384:	93 e0       	ldi	r25, 0x03	; 3
 386:	0e 94 31 03 	call	0x662	; 0x662 <ring_add>
        }
		*/
	}

	return;
}
 38a:	ff 91       	pop	r31
 38c:	ef 91       	pop	r30
 38e:	bf 91       	pop	r27
 390:	af 91       	pop	r26
 392:	9f 91       	pop	r25
 394:	8f 91       	pop	r24
 396:	7f 91       	pop	r23
 398:	6f 91       	pop	r22
 39a:	5f 91       	pop	r21
 39c:	4f 91       	pop	r20
 39e:	3f 91       	pop	r19
 3a0:	2f 91       	pop	r18
 3a2:	0f 90       	pop	r0
 3a4:	0f be       	out	0x3f, r0	; 63
 3a6:	0f 90       	pop	r0
 3a8:	1f 90       	pop	r1
 3aa:	18 95       	reti

000003ac <__vector_19>:
*/
//------------- Transmit routines


usart0_transmit_interrupt_service_routine
{
 3ac:	1f 92       	push	r1
 3ae:	0f 92       	push	r0
 3b0:	0f b6       	in	r0, 0x3f	; 63
 3b2:	0f 92       	push	r0
 3b4:	11 24       	eor	r1, r1
 3b6:	2f 93       	push	r18
 3b8:	3f 93       	push	r19
 3ba:	4f 93       	push	r20
 3bc:	5f 93       	push	r21
 3be:	6f 93       	push	r22
 3c0:	7f 93       	push	r23
 3c2:	8f 93       	push	r24
 3c4:	9f 93       	push	r25
 3c6:	af 93       	push	r26
 3c8:	bf 93       	push	r27
 3ca:	ef 93       	push	r30
 3cc:	ff 93       	push	r31
	
    if(usart0_transmit_ring.count)
 3ce:	80 91 96 03 	lds	r24, 0x0396
 3d2:	88 23       	and	r24, r24
 3d4:	31 f0       	breq	.+12     	; 0x3e2 <__vector_19+0x36>
    {
        UART_DATA_REG = ring_remove(&usart0_transmit_ring);
 3d6:	8f e8       	ldi	r24, 0x8F	; 143
 3d8:	93 e0       	ldi	r25, 0x03	; 3
 3da:	0e 94 6f 03 	call	0x6de	; 0x6de <ring_remove>
 3de:	80 93 c6 00 	sts	0x00C6, r24
    }

    if (usart0_transmit_ring.count > 0 && flow.flow_out)
 3e2:	80 91 96 03 	lds	r24, 0x0396
 3e6:	88 23       	and	r24, r24
 3e8:	41 f0       	breq	.+16     	; 0x3fa <__vector_19+0x4e>
 3ea:	80 91 0d 03 	lds	r24, 0x030D
 3ee:	88 23       	and	r24, r24
 3f0:	21 f0       	breq	.+8      	; 0x3fa <__vector_19+0x4e>
    {
        usart0_data_register_empty_interrupt_enable();
 3f2:	80 91 c1 00 	lds	r24, 0x00C1
 3f6:	80 62       	ori	r24, 0x20	; 32
 3f8:	03 c0       	rjmp	.+6      	; 0x400 <__vector_19+0x54>
    }
    else
    {
        usart0_data_register_empty_interrupt_disable();
 3fa:	80 91 c1 00 	lds	r24, 0x00C1
 3fe:	8f 7d       	andi	r24, 0xDF	; 223
 400:	80 93 c1 00 	sts	0x00C1, r24
    }
    
    return;
}
 404:	ff 91       	pop	r31
 406:	ef 91       	pop	r30
 408:	bf 91       	pop	r27
 40a:	af 91       	pop	r26
 40c:	9f 91       	pop	r25
 40e:	8f 91       	pop	r24
 410:	7f 91       	pop	r23
 412:	6f 91       	pop	r22
 414:	5f 91       	pop	r21
 416:	4f 91       	pop	r20
 418:	3f 91       	pop	r19
 41a:	2f 91       	pop	r18
 41c:	0f 90       	pop	r0
 41e:	0f be       	out	0x3f, r0	; 63
 420:	0f 90       	pop	r0
 422:	1f 90       	pop	r1
 424:	18 95       	reti

00000426 <usart0_init>:
}



void usart0_init(uint32_t baud, uint32_t freq_cpu, usart_mode_t mode, usart_databits_t databits, usart_stopbits_t stopbits, usart_parity_t parity, usart_flow_control_t flow_control)
{
 426:	8f 92       	push	r8
 428:	af 92       	push	r10
 42a:	cf 92       	push	r12
 42c:	ef 92       	push	r14
 42e:	0f 93       	push	r16
 430:	1f 93       	push	r17
 432:	df 93       	push	r29
 434:	cf 93       	push	r28
 436:	cd b7       	in	r28, 0x3d	; 61
 438:	de b7       	in	r29, 0x3e	; 62
 43a:	1e 2d       	mov	r17, r14
 43c:	ec 2c       	mov	r14, r12

   	stdout = &mystdout;    //set the output stream 
 43e:	ed ef       	ldi	r30, 0xFD	; 253
 440:	f2 e0       	ldi	r31, 0x02	; 2
 442:	f0 93 e2 03 	sts	0x03E2, r31
 446:	e0 93 e1 03 	sts	0x03E1, r30

    flow.flow_control = flow_control;
 44a:	80 92 0c 03 	sts	0x030C, r8
    flow.flow_out = true;
 44e:	e1 e0       	ldi	r30, 0x01	; 1
 450:	e0 93 0d 03 	sts	0x030D, r30
    flow.flow_in = true;
 454:	e0 93 0e 03 	sts	0x030E, r30
    // flow_out_tcb.run_interval = 0;
    // flow_out_tcb.enabled = false;
    // task_add(&flow_out_tcb);


	usart0_receive_disable();
 458:	e0 91 c1 00 	lds	r30, 0x00C1
 45c:	ef 7e       	andi	r30, 0xEF	; 239
 45e:	e0 93 c1 00 	sts	0x00C1, r30
	usart0_transmit_disable();
 462:	e0 91 c1 00 	lds	r30, 0x00C1
 466:	e7 7f       	andi	r30, 0xF7	; 247
 468:	e0 93 c1 00 	sts	0x00C1, r30

    usart0_receive_complete_interrupt_disable();
 46c:	e0 91 c1 00 	lds	r30, 0x00C1
 470:	ef 77       	andi	r30, 0x7F	; 127
 472:	e0 93 c1 00 	sts	0x00C1, r30
	usart0_data_register_empty_interrupt_disable();
 476:	e0 91 c1 00 	lds	r30, 0x00C1
 47a:	ef 7d       	andi	r30, 0xDF	; 223
 47c:	e0 93 c1 00 	sts	0x00C1, r30
    
	usart0_mode(mode);
 480:	e0 91 c2 00 	lds	r30, 0x00C2
 484:	02 95       	swap	r16
 486:	00 0f       	add	r16, r16
 488:	00 0f       	add	r16, r16
 48a:	00 7c       	andi	r16, 0xC0	; 192
 48c:	ef 73       	andi	r30, 0x3F	; 63
 48e:	e0 2b       	or	r30, r16
 490:	e0 93 c2 00 	sts	0x00C2, r30
 	usart0_baud_set(baud, freq_cpu);
 494:	0e 94 55 01 	call	0x2aa	; 0x2aa <usart0_baud_set>
    usart0_data_bits_set(databits);
 498:	81 2f       	mov	r24, r17
 49a:	85 50       	subi	r24, 0x05	; 5
 49c:	84 30       	cpi	r24, 0x04	; 4
 49e:	18 f5       	brcc	.+70     	; 0x4e6 <usart0_init+0xc0>
 4a0:	21 2f       	mov	r18, r17
 4a2:	30 e0       	ldi	r19, 0x00	; 0
 4a4:	25 50       	subi	r18, 0x05	; 5
 4a6:	30 40       	sbci	r19, 0x00	; 0
 4a8:	20 ff       	sbrs	r18, 0
 4aa:	04 c0       	rjmp	.+8      	; 0x4b4 <usart0_init+0x8e>
 4ac:	80 91 c2 00 	lds	r24, 0x00C2
 4b0:	82 60       	ori	r24, 0x02	; 2
 4b2:	03 c0       	rjmp	.+6      	; 0x4ba <usart0_init+0x94>
 4b4:	80 91 c2 00 	lds	r24, 0x00C2
 4b8:	8d 7f       	andi	r24, 0xFD	; 253
 4ba:	80 93 c2 00 	sts	0x00C2, r24
 4be:	80 91 c2 00 	lds	r24, 0x00C2
 4c2:	21 ff       	sbrs	r18, 1
 4c4:	04 c0       	rjmp	.+8      	; 0x4ce <usart0_init+0xa8>
 4c6:	80 91 c2 00 	lds	r24, 0x00C2
 4ca:	84 60       	ori	r24, 0x04	; 4
 4cc:	03 c0       	rjmp	.+6      	; 0x4d4 <usart0_init+0xae>
 4ce:	80 91 c2 00 	lds	r24, 0x00C2
 4d2:	8b 7f       	andi	r24, 0xFB	; 251
 4d4:	80 93 c2 00 	sts	0x00C2, r24
 4d8:	80 91 c2 00 	lds	r24, 0x00C2
 4dc:	80 91 c1 00 	lds	r24, 0x00C1
 4e0:	8b 7f       	andi	r24, 0xFB	; 251
 4e2:	80 93 c1 00 	sts	0x00C1, r24
 4e6:	19 30       	cpi	r17, 0x09	; 9
 4e8:	79 f4       	brne	.+30     	; 0x508 <usart0_init+0xe2>
 4ea:	80 91 c2 00 	lds	r24, 0x00C2
 4ee:	82 60       	ori	r24, 0x02	; 2
 4f0:	80 93 c2 00 	sts	0x00C2, r24
 4f4:	80 91 c2 00 	lds	r24, 0x00C2
 4f8:	84 60       	ori	r24, 0x04	; 4
 4fa:	80 93 c2 00 	sts	0x00C2, r24
 4fe:	80 91 c1 00 	lds	r24, 0x00C1
 502:	84 60       	ori	r24, 0x04	; 4
 504:	80 93 c1 00 	sts	0x00C1, r24
    usart0_stop_bits_set(stopbits);
 508:	8e 2d       	mov	r24, r14
 50a:	81 50       	subi	r24, 0x01	; 1
 50c:	82 30       	cpi	r24, 0x02	; 2
 50e:	70 f4       	brcc	.+28     	; 0x52c <usart0_init+0x106>
 510:	81 e0       	ldi	r24, 0x01	; 1
 512:	e8 16       	cp	r14, r24
 514:	21 f0       	breq	.+8      	; 0x51e <usart0_init+0xf8>
 516:	80 91 c2 00 	lds	r24, 0x00C2
 51a:	88 60       	ori	r24, 0x08	; 8
 51c:	03 c0       	rjmp	.+6      	; 0x524 <usart0_init+0xfe>
 51e:	80 91 c2 00 	lds	r24, 0x00C2
 522:	87 7f       	andi	r24, 0xF7	; 247
 524:	80 93 c2 00 	sts	0x00C2, r24
 528:	80 91 c2 00 	lds	r24, 0x00C2
    usart0_parity_set(parity);
 52c:	8a 2d       	mov	r24, r10
 52e:	0e 94 73 01 	call	0x2e6	; 0x2e6 <usart0_parity_set>
#if defined(BUTTERFLY)
	butterfly_uart_init();
#endif


	ring_init(&usart0_receive_ring, usart0_receive_buffer, USART0_RECEIVE_BUFFER_LEN);
 532:	87 e9       	ldi	r24, 0x97	; 151
 534:	93 e0       	ldi	r25, 0x03	; 3
 536:	6f e9       	ldi	r22, 0x9F	; 159
 538:	73 e0       	ldi	r23, 0x03	; 3
 53a:	40 e4       	ldi	r20, 0x40	; 64
 53c:	0e 94 5f 03 	call	0x6be	; 0x6be <ring_init>
    ring_init(&usart0_transmit_ring, usart0_transmit_buffer, USART0_TRANSMIT_BUFFER_LEN);
 540:	8f e8       	ldi	r24, 0x8F	; 143
 542:	93 e0       	ldi	r25, 0x03	; 3
 544:	6f e0       	ldi	r22, 0x0F	; 15
 546:	73 e0       	ldi	r23, 0x03	; 3
 548:	40 e8       	ldi	r20, 0x80	; 128
 54a:	0e 94 5f 03 	call	0x6be	; 0x6be <ring_init>

    usart0_receive_complete_interrupt_enable();
 54e:	80 91 c1 00 	lds	r24, 0x00C1
 552:	80 68       	ori	r24, 0x80	; 128
 554:	80 93 c1 00 	sts	0x00C1, r24
    usart0_data_register_empty_interrupt_enable();
 558:	80 91 c1 00 	lds	r24, 0x00C1
 55c:	80 62       	ori	r24, 0x20	; 32
 55e:	80 93 c1 00 	sts	0x00C1, r24
    
    usart0_receive_enable();
 562:	80 91 c1 00 	lds	r24, 0x00C1
 566:	80 61       	ori	r24, 0x10	; 16
 568:	80 93 c1 00 	sts	0x00C1, r24
	usart0_transmit_enable();
 56c:	80 91 c1 00 	lds	r24, 0x00C1
 570:	88 60       	ori	r24, 0x08	; 8
 572:	80 93 c1 00 	sts	0x00C1, r24

	// JWP 3/27/11 the following was already commented out in Eric's code.
    //usart0_rts_init();
    //usart0_cts_init();

	sei();
 576:	78 94       	sei

	return;
}
 578:	cf 91       	pop	r28
 57a:	df 91       	pop	r29
 57c:	1f 91       	pop	r17
 57e:	0f 91       	pop	r16
 580:	ef 90       	pop	r14
 582:	cf 90       	pop	r12
 584:	af 90       	pop	r10
 586:	8f 90       	pop	r8
 588:	08 95       	ret

0000058a <usart0_transmit_buffer_fill>:
   	
   	return 0; 
} 

bool usart0_transmit_buffer_fill(uint8_t c)
{
 58a:	68 2f       	mov	r22, r24
    register bool result;
    result = usart0_buffer_insert(&usart0_transmit_ring, c);
 58c:	8f e8       	ldi	r24, 0x8F	; 143
 58e:	93 e0       	ldi	r25, 0x03	; 3
 590:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <usart0_buffer_insert>

    return(result);

}
 594:	08 95       	ret

00000596 <usart_put_char>:
FILE mystdout = FDEV_SETUP_STREAM(usart_put_char, NULL, _FDEV_SETUP_WRITE);
#include "c:\avrtoolbox\libavr\source\general\util\util.h"
#include "c:\avrtoolbox\libavr\source\elementary\serial\serial.h"

int usart_put_char(char c, FILE *stream) 
{ 
 596:	1f 93       	push	r17
 598:	18 2f       	mov	r17, r24
	if (c == '\n') usart_put_char('\r', stream);
 59a:	8a 30       	cpi	r24, 0x0A	; 10
 59c:	19 f4       	brne	.+6      	; 0x5a4 <usart_put_char+0xe>
 59e:	8d e0       	ldi	r24, 0x0D	; 13
 5a0:	0e 94 cb 02 	call	0x596	; 0x596 <usart_put_char>

	// Only insert a character if the buffer has room
	// Waiting 1 ms prevents overrun.
	// If this is a problem either send shorter strings or increase the buffer size
	//if(usart0_transmit_buffer_inuse_count() > USART0_TRANSMIT_BUFFER_LEN - 1) adelay(100);
	if(usart0_transmit_buffer_inuse_count() > ((2*USART0_TRANSMIT_BUFFER_LEN)/3)) delay(BUFFER_DELAY);
 5a4:	0e 94 01 03 	call	0x602	; 0x602 <usart0_transmit_buffer_inuse_count>
 5a8:	86 35       	cpi	r24, 0x56	; 86
 5aa:	20 f0       	brcs	.+8      	; 0x5b4 <usart_put_char+0x1e>
 5ac:	84 e1       	ldi	r24, 0x14	; 20
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	0e 94 06 03 	call	0x60c	; 0x60c <delay>

	usart0_transmit_buffer_insert((uint8_t)c);
 5b4:	81 2f       	mov	r24, r17
 5b6:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <usart0_transmit_buffer_insert>
   	
   	return 0; 
} 
 5ba:	80 e0       	ldi	r24, 0x00	; 0
 5bc:	90 e0       	ldi	r25, 0x00	; 0
 5be:	1f 91       	pop	r17
 5c0:	08 95       	ret

000005c2 <usart0_buffer_insert>:
#include "c:\avrtoolbox\libavr\source\general\ring\ring.h" 
#include "usart.h"
#include "usart0.h"

bool usart0_buffer_insert(ring_t *ring, uint8_t c)
{
 5c2:	1f 93       	push	r17
    register bool result;
    register uint8_t sreg;
    
    sreg = SREG;
 5c4:	1f b7       	in	r17, 0x3f	; 63
    cli();
 5c6:	f8 94       	cli
    result = ring_add(ring, c);
 5c8:	0e 94 31 03 	call	0x662	; 0x662 <ring_add>
    SREG = sreg;
 5cc:	1f bf       	out	0x3f, r17	; 63
    return(result);
}
 5ce:	1f 91       	pop	r17
 5d0:	08 95       	ret

000005d2 <usart0_receive_buffer_inuse_count>:
#include "usart.h"
#include "usart0.h"

uint8_t usart0_receive_buffer_inuse_count(void)
{
    return(usart0_buffer_inuse_count(&usart0_receive_ring));
 5d2:	87 e9       	ldi	r24, 0x97	; 151
 5d4:	93 e0       	ldi	r25, 0x03	; 3
 5d6:	0e 94 9c 03 	call	0x738	; 0x738 <usart0_buffer_inuse_count>
}
 5da:	08 95       	ret

000005dc <usart0_receive_buffer_remove>:

uint8_t usart0_receive_buffer_remove(void)
{
    uint8_t data;
    
    data = usart0_buffer_remove(&usart0_receive_ring);
 5dc:	87 e9       	ldi	r24, 0x97	; 151
 5de:	93 e0       	ldi	r25, 0x03	; 3
 5e0:	0e 94 a2 03 	call	0x744	; 0x744 <usart0_buffer_remove>
            usart0_flow_in_enable();
        }
    }
	*/
    return(data);
}
 5e4:	08 95       	ret

000005e6 <usart0_transmit_buffer_insert>:
#include "usart.h"
#include "usart0.h"


bool usart0_transmit_buffer_insert(uint8_t c)
{
 5e6:	1f 93       	push	r17
 5e8:	68 2f       	mov	r22, r24
    register bool result;
    result = usart0_buffer_insert(&usart0_transmit_ring, c);
 5ea:	8f e8       	ldi	r24, 0x8F	; 143
 5ec:	93 e0       	ldi	r25, 0x03	; 3
 5ee:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <usart0_buffer_insert>
 5f2:	18 2f       	mov	r17, r24
    if(result == true) usart0_transmit_check();
 5f4:	88 23       	and	r24, r24
 5f6:	11 f0       	breq	.+4      	; 0x5fc <usart0_transmit_buffer_insert+0x16>
 5f8:	0e 94 91 01 	call	0x322	; 0x322 <usart0_transmit_check>

    return(result);
}
 5fc:	81 2f       	mov	r24, r17
 5fe:	1f 91       	pop	r17
 600:	08 95       	ret

00000602 <usart0_transmit_buffer_inuse_count>:
#include "usart.h"
#include "usart0.h"

uint8_t usart0_transmit_buffer_inuse_count(void)
{
    return(usart0_buffer_inuse_count(&usart0_transmit_ring));
 602:	8f e8       	ldi	r24, 0x8F	; 143
 604:	93 e0       	ldi	r25, 0x03	; 3
 606:	0e 94 9c 03 	call	0x738	; 0x738 <usart0_buffer_inuse_count>
}
 60a:	08 95       	ret

0000060c <delay>:
#include <util\delay.h>

void delay(uint16_t ms);

void delay(uint16_t ms)
{
 60c:	20 e0       	ldi	r18, 0x00	; 0
 60e:	30 e0       	ldi	r19, 0x00	; 0
 610:	40 ea       	ldi	r20, 0xA0	; 160
 612:	5f e0       	ldi	r21, 0x0F	; 15
 614:	05 c0       	rjmp	.+10     	; 0x620 <delay+0x14>
 616:	fa 01       	movw	r30, r20
 618:	31 97       	sbiw	r30, 0x01	; 1
 61a:	f1 f7       	brne	.-4      	; 0x618 <delay+0xc>
	for(int i = 0 ; i < ms ; i++)
 61c:	2f 5f       	subi	r18, 0xFF	; 255
 61e:	3f 4f       	sbci	r19, 0xFF	; 255
 620:	28 17       	cp	r18, r24
 622:	39 07       	cpc	r19, r25
 624:	c0 f3       	brcs	.-16     	; 0x616 <delay+0xa>
	{
		_delay_ms(1);
	}
}
 626:	08 95       	ret

00000628 <serial_write>:
#include "serial.h"

void serial_write(uint8_t *buff, uint8_t size)
{
 628:	ef 92       	push	r14
 62a:	ff 92       	push	r15
 62c:	0f 93       	push	r16
 62e:	1f 93       	push	r17
 630:	cf 93       	push	r28
 632:	df 93       	push	r29
 634:	7c 01       	movw	r14, r24
 636:	c0 e0       	ldi	r28, 0x00	; 0
 638:	d0 e0       	ldi	r29, 0x00	; 0
	for(int i = 0; i < size; i++)
 63a:	06 2f       	mov	r16, r22
 63c:	10 e0       	ldi	r17, 0x00	; 0
 63e:	07 c0       	rjmp	.+14     	; 0x64e <serial_write+0x26>
	{
		usart0_transmit_buffer_insert(buff[i]);
 640:	f7 01       	movw	r30, r14
 642:	ec 0f       	add	r30, r28
 644:	fd 1f       	adc	r31, r29
 646:	80 81       	ld	r24, Z
 648:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <usart0_transmit_buffer_insert>
#include "serial.h"

void serial_write(uint8_t *buff, uint8_t size)
{
	for(int i = 0; i < size; i++)
 64c:	21 96       	adiw	r28, 0x01	; 1
 64e:	c0 17       	cp	r28, r16
 650:	d1 07       	cpc	r29, r17
 652:	b4 f3       	brlt	.-20     	; 0x640 <serial_write+0x18>
	{
		usart0_transmit_buffer_insert(buff[i]);
	}
}
 654:	df 91       	pop	r29
 656:	cf 91       	pop	r28
 658:	1f 91       	pop	r17
 65a:	0f 91       	pop	r16
 65c:	ff 90       	pop	r15
 65e:	ef 90       	pop	r14
 660:	08 95       	ret

00000662 <ring_add>:
	\param data byte to add
	\return boolean result of attempt to add byte
	
*/
bool ring_add(ring_t *r, uint8_t data)
{
 662:	dc 01       	movw	r26, r24
    // Get the next head index.
    ring_index_t temp_head = r->head_index + 1;
 664:	13 96       	adiw	r26, 0x03	; 3
 666:	4d 91       	ld	r20, X+
 668:	5c 91       	ld	r21, X
 66a:	14 97       	sbiw	r26, 0x04	; 4
    if(r->head_index >= r->size - 1)
 66c:	12 96       	adiw	r26, 0x02	; 2
 66e:	8c 91       	ld	r24, X
 670:	12 97       	sbiw	r26, 0x02	; 2
 672:	90 e0       	ldi	r25, 0x00	; 0
 674:	01 97       	sbiw	r24, 0x01	; 1
 676:	48 17       	cp	r20, r24
 678:	59 07       	cpc	r21, r25
 67a:	18 f0       	brcs	.+6      	; 0x682 <ring_add+0x20>
 67c:	20 e0       	ldi	r18, 0x00	; 0
 67e:	30 e0       	ldi	r19, 0x00	; 0
 680:	03 c0       	rjmp	.+6      	; 0x688 <ring_add+0x26>
	
*/
bool ring_add(ring_t *r, uint8_t data)
{
    // Get the next head index.
    ring_index_t temp_head = r->head_index + 1;
 682:	9a 01       	movw	r18, r20
 684:	2f 5f       	subi	r18, 0xFF	; 255
 686:	3f 4f       	sbci	r19, 0xFF	; 255
    if(r->head_index >= r->size - 1)
    {
        temp_head = 0;
    }

    if(temp_head != r->tail_index)
 688:	15 96       	adiw	r26, 0x05	; 5
 68a:	8d 91       	ld	r24, X+
 68c:	9c 91       	ld	r25, X
 68e:	16 97       	sbiw	r26, 0x06	; 6
 690:	28 17       	cp	r18, r24
 692:	39 07       	cpc	r19, r25
 694:	11 f4       	brne	.+4      	; 0x69a <ring_add+0x38>
 696:	80 e0       	ldi	r24, 0x00	; 0
 698:	08 95       	ret
    {
        r->buffer[r->head_index] = data;    // Buffer receives data
 69a:	ed 91       	ld	r30, X+
 69c:	fc 91       	ld	r31, X
 69e:	11 97       	sbiw	r26, 0x01	; 1
 6a0:	e4 0f       	add	r30, r20
 6a2:	f5 1f       	adc	r31, r21
 6a4:	60 83       	st	Z, r22
        r->head_index = temp_head;
 6a6:	14 96       	adiw	r26, 0x04	; 4
 6a8:	3c 93       	st	X, r19
 6aa:	2e 93       	st	-X, r18
 6ac:	13 97       	sbiw	r26, 0x03	; 3
        r->count++;
 6ae:	17 96       	adiw	r26, 0x07	; 7
 6b0:	8c 91       	ld	r24, X
 6b2:	17 97       	sbiw	r26, 0x07	; 7
 6b4:	8f 5f       	subi	r24, 0xFF	; 255
 6b6:	17 96       	adiw	r26, 0x07	; 7
 6b8:	8c 93       	st	X, r24
 6ba:	81 e0       	ldi	r24, 0x01	; 1
        return(true);       // Return complete
    }

    return(false);          // Return incomplete
}
 6bc:	08 95       	ret

000006be <ring_init>:
    
    \return boolean true if the ring buffer was initialized, false otherwise.
    todo: describe return value
*/
bool ring_init(ring_t *r, ring_buffer_t buffer, ring_size_t size)
{
 6be:	fc 01       	movw	r30, r24
    bool success = false;
    bool clear;
    if (size >= 2 && r != NULL && buffer != NULL)
 6c0:	42 30       	cpi	r20, 0x02	; 2
 6c2:	58 f0       	brcs	.+22     	; 0x6da <ring_init+0x1c>
 6c4:	00 97       	sbiw	r24, 0x00	; 0
 6c6:	49 f0       	breq	.+18     	; 0x6da <ring_init+0x1c>
 6c8:	61 15       	cp	r22, r1
 6ca:	71 05       	cpc	r23, r1
 6cc:	31 f0       	breq	.+12     	; 0x6da <ring_init+0x1c>
    {
        r->buffer = buffer;     // Set index pointers
 6ce:	71 83       	std	Z+1, r23	; 0x01
 6d0:	60 83       	st	Z, r22
        r->size = size;
 6d2:	42 83       	std	Z+2, r20	; 0x02
        clear = ring_clear(r);  // Call ring_clear function
 6d4:	0e 94 aa 03 	call	0x754	; 0x754 <ring_clear>
 6d8:	08 95       	ret
 6da:	80 e0       	ldi	r24, 0x00	; 0
        {
                success = true;
        }
    }
    return(success);
}
 6dc:	08 95       	ret

000006de <ring_remove>:

#include <stdint.h>
#include "ring.h"

uint8_t ring_remove(ring_t *r)
{
 6de:	dc 01       	movw	r26, r24
    uint8_t data = 0;

    // Compare the head index and the tail index
    if(r->head_index != r->tail_index)
 6e0:	15 96       	adiw	r26, 0x05	; 5
 6e2:	2d 91       	ld	r18, X+
 6e4:	3c 91       	ld	r19, X
 6e6:	16 97       	sbiw	r26, 0x06	; 6
 6e8:	13 96       	adiw	r26, 0x03	; 3
 6ea:	8d 91       	ld	r24, X+
 6ec:	9c 91       	ld	r25, X
 6ee:	14 97       	sbiw	r26, 0x04	; 4
 6f0:	82 17       	cp	r24, r18
 6f2:	93 07       	cpc	r25, r19
 6f4:	11 f4       	brne	.+4      	; 0x6fa <ring_remove+0x1c>
 6f6:	e0 e0       	ldi	r30, 0x00	; 0
 6f8:	1d c0       	rjmp	.+58     	; 0x734 <ring_remove+0x56>
    {
        // Get the Data from the buffer.
        data = r->buffer[r->tail_index];
 6fa:	ed 91       	ld	r30, X+
 6fc:	fc 91       	ld	r31, X
 6fe:	11 97       	sbiw	r26, 0x01	; 1
 700:	e2 0f       	add	r30, r18
 702:	f3 1f       	adc	r31, r19
 704:	e0 81       	ld	r30, Z

        // Get the next tail index.
        ring_index_t next_tail = r->tail_index + 1;
        if(r->tail_index >= r->size - 1)
 706:	12 96       	adiw	r26, 0x02	; 2
 708:	8c 91       	ld	r24, X
 70a:	12 97       	sbiw	r26, 0x02	; 2
 70c:	90 e0       	ldi	r25, 0x00	; 0
 70e:	01 97       	sbiw	r24, 0x01	; 1
 710:	28 17       	cp	r18, r24
 712:	39 07       	cpc	r19, r25
 714:	18 f0       	brcs	.+6      	; 0x71c <ring_remove+0x3e>
 716:	80 e0       	ldi	r24, 0x00	; 0
 718:	90 e0       	ldi	r25, 0x00	; 0
 71a:	02 c0       	rjmp	.+4      	; 0x720 <ring_remove+0x42>
    {
        // Get the Data from the buffer.
        data = r->buffer[r->tail_index];

        // Get the next tail index.
        ring_index_t next_tail = r->tail_index + 1;
 71c:	c9 01       	movw	r24, r18
 71e:	01 96       	adiw	r24, 0x01	; 1
        if(r->tail_index >= r->size - 1)
        {
            next_tail = 0;
        }

        r->tail_index = next_tail;      // Move index
 720:	16 96       	adiw	r26, 0x06	; 6
 722:	9c 93       	st	X, r25
 724:	8e 93       	st	-X, r24
 726:	15 97       	sbiw	r26, 0x05	; 5
        r->count--;             // Decrement count
 728:	17 96       	adiw	r26, 0x07	; 7
 72a:	8c 91       	ld	r24, X
 72c:	17 97       	sbiw	r26, 0x07	; 7
 72e:	81 50       	subi	r24, 0x01	; 1
 730:	17 96       	adiw	r26, 0x07	; 7
 732:	8c 93       	st	X, r24
    }

    return(data);
}
 734:	8e 2f       	mov	r24, r30
 736:	08 95       	ret

00000738 <usart0_buffer_inuse_count>:

#include "usart.h"
#include "usart0.h"

uint8_t usart0_buffer_inuse_count(ring_t *ring)
{
 738:	fc 01       	movw	r30, r24
    register uint8_t result;
    register uint8_t sreg;
    
    sreg = SREG;
 73a:	8f b7       	in	r24, 0x3f	; 63
    cli();
 73c:	f8 94       	cli
    result = ring->count;
    SREG = sreg;
 73e:	8f bf       	out	0x3f, r24	; 63
    return(result);
}
 740:	87 81       	ldd	r24, Z+7	; 0x07
 742:	08 95       	ret

00000744 <usart0_buffer_remove>:
#include "usart.h"
#include "usart0.h"


uint8_t usart0_buffer_remove(ring_t *ring)
{
 744:	1f 93       	push	r17
    register uint8_t result;
    register uint8_t sreg;
    
    sreg = SREG;
 746:	1f b7       	in	r17, 0x3f	; 63
    cli();
 748:	f8 94       	cli
    result = ring_remove(ring);
 74a:	0e 94 6f 03 	call	0x6de	; 0x6de <ring_remove>
    SREG = sreg;
 74e:	1f bf       	out	0x3f, r17	; 63
    return(result);
}
 750:	1f 91       	pop	r17
 752:	08 95       	ret

00000754 <ring_clear>:

	/param *r pointer to ring buffer
	/return boolean result of attempt to add byte	
*/
bool ring_clear(ring_t *r)
{
 754:	dc 01       	movw	r26, r24
    bool success = false;
    if (r != NULL)
 756:	00 97       	sbiw	r24, 0x00	; 0
 758:	11 f4       	brne	.+4      	; 0x75e <ring_clear+0xa>
 75a:	80 e0       	ldi	r24, 0x00	; 0
 75c:	08 95       	ret
    {
        r->head_index = 0;
 75e:	14 96       	adiw	r26, 0x04	; 4
 760:	1c 92       	st	X, r1
 762:	1e 92       	st	-X, r1
 764:	13 97       	sbiw	r26, 0x03	; 3
        r->tail_index = 0;          // Assign new values
 766:	16 96       	adiw	r26, 0x06	; 6
 768:	1c 92       	st	X, r1
 76a:	1e 92       	st	-X, r1
 76c:	15 97       	sbiw	r26, 0x05	; 5
        r->count = 0;
 76e:	17 96       	adiw	r26, 0x07	; 7
 770:	1c 92       	st	X, r1
 772:	17 97       	sbiw	r26, 0x07	; 7
        memset((void *)r->buffer, 0,10);      // Clear out memory
 774:	ec 91       	ld	r30, X
 776:	11 96       	adiw	r26, 0x01	; 1
 778:	fc 91       	ld	r31, X
 77a:	8a e0       	ldi	r24, 0x0A	; 10
 77c:	df 01       	movw	r26, r30
 77e:	1d 92       	st	X+, r1
 780:	8a 95       	dec	r24
 782:	e9 f7       	brne	.-6      	; 0x77e <ring_clear+0x2a>
 784:	81 e0       	ldi	r24, 0x01	; 1
        success = true;
    }
    return(success);
}
 786:	08 95       	ret

00000788 <__udivmodsi4>:
 788:	a1 e2       	ldi	r26, 0x21	; 33
 78a:	1a 2e       	mov	r1, r26
 78c:	aa 1b       	sub	r26, r26
 78e:	bb 1b       	sub	r27, r27
 790:	fd 01       	movw	r30, r26
 792:	0d c0       	rjmp	.+26     	; 0x7ae <__udivmodsi4_ep>

00000794 <__udivmodsi4_loop>:
 794:	aa 1f       	adc	r26, r26
 796:	bb 1f       	adc	r27, r27
 798:	ee 1f       	adc	r30, r30
 79a:	ff 1f       	adc	r31, r31
 79c:	a2 17       	cp	r26, r18
 79e:	b3 07       	cpc	r27, r19
 7a0:	e4 07       	cpc	r30, r20
 7a2:	f5 07       	cpc	r31, r21
 7a4:	20 f0       	brcs	.+8      	; 0x7ae <__udivmodsi4_ep>
 7a6:	a2 1b       	sub	r26, r18
 7a8:	b3 0b       	sbc	r27, r19
 7aa:	e4 0b       	sbc	r30, r20
 7ac:	f5 0b       	sbc	r31, r21

000007ae <__udivmodsi4_ep>:
 7ae:	66 1f       	adc	r22, r22
 7b0:	77 1f       	adc	r23, r23
 7b2:	88 1f       	adc	r24, r24
 7b4:	99 1f       	adc	r25, r25
 7b6:	1a 94       	dec	r1
 7b8:	69 f7       	brne	.-38     	; 0x794 <__udivmodsi4_loop>
 7ba:	60 95       	com	r22
 7bc:	70 95       	com	r23
 7be:	80 95       	com	r24
 7c0:	90 95       	com	r25
 7c2:	9b 01       	movw	r18, r22
 7c4:	ac 01       	movw	r20, r24
 7c6:	bd 01       	movw	r22, r26
 7c8:	cf 01       	movw	r24, r30
 7ca:	08 95       	ret

000007cc <vprintf>:
 7cc:	9c 01       	movw	r18, r24
 7ce:	ab 01       	movw	r20, r22
 7d0:	80 91 e1 03 	lds	r24, 0x03E1
 7d4:	90 91 e2 03 	lds	r25, 0x03E2
 7d8:	b9 01       	movw	r22, r18
 7da:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <vfprintf>
 7de:	08 95       	ret

000007e0 <vfprintf>:
 7e0:	ab e0       	ldi	r26, 0x0B	; 11
 7e2:	b0 e0       	ldi	r27, 0x00	; 0
 7e4:	e6 ef       	ldi	r30, 0xF6	; 246
 7e6:	f3 e0       	ldi	r31, 0x03	; 3
 7e8:	0c 94 6d 06 	jmp	0xcda	; 0xcda <__prologue_saves__>
 7ec:	3c 01       	movw	r6, r24
 7ee:	2b 01       	movw	r4, r22
 7f0:	5a 01       	movw	r10, r20
 7f2:	fc 01       	movw	r30, r24
 7f4:	17 82       	std	Z+7, r1	; 0x07
 7f6:	16 82       	std	Z+6, r1	; 0x06
 7f8:	83 81       	ldd	r24, Z+3	; 0x03
 7fa:	81 fd       	sbrc	r24, 1
 7fc:	03 c0       	rjmp	.+6      	; 0x804 <vfprintf+0x24>
 7fe:	6f ef       	ldi	r22, 0xFF	; 255
 800:	7f ef       	ldi	r23, 0xFF	; 255
 802:	c6 c1       	rjmp	.+908    	; 0xb90 <__stack+0x291>
 804:	9a e0       	ldi	r25, 0x0A	; 10
 806:	89 2e       	mov	r8, r25
 808:	1e 01       	movw	r2, r28
 80a:	08 94       	sec
 80c:	21 1c       	adc	r2, r1
 80e:	31 1c       	adc	r3, r1
 810:	f3 01       	movw	r30, r6
 812:	23 81       	ldd	r18, Z+3	; 0x03
 814:	f2 01       	movw	r30, r4
 816:	23 fd       	sbrc	r18, 3
 818:	85 91       	lpm	r24, Z+
 81a:	23 ff       	sbrs	r18, 3
 81c:	81 91       	ld	r24, Z+
 81e:	2f 01       	movw	r4, r30
 820:	88 23       	and	r24, r24
 822:	09 f4       	brne	.+2      	; 0x826 <vfprintf+0x46>
 824:	b2 c1       	rjmp	.+868    	; 0xb8a <__stack+0x28b>
 826:	85 32       	cpi	r24, 0x25	; 37
 828:	39 f4       	brne	.+14     	; 0x838 <vfprintf+0x58>
 82a:	23 fd       	sbrc	r18, 3
 82c:	85 91       	lpm	r24, Z+
 82e:	23 ff       	sbrs	r18, 3
 830:	81 91       	ld	r24, Z+
 832:	2f 01       	movw	r4, r30
 834:	85 32       	cpi	r24, 0x25	; 37
 836:	29 f4       	brne	.+10     	; 0x842 <vfprintf+0x62>
 838:	90 e0       	ldi	r25, 0x00	; 0
 83a:	b3 01       	movw	r22, r6
 83c:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <fputc>
 840:	e7 cf       	rjmp	.-50     	; 0x810 <vfprintf+0x30>
 842:	98 2f       	mov	r25, r24
 844:	ff 24       	eor	r15, r15
 846:	ee 24       	eor	r14, r14
 848:	99 24       	eor	r9, r9
 84a:	ff e1       	ldi	r31, 0x1F	; 31
 84c:	ff 15       	cp	r31, r15
 84e:	d0 f0       	brcs	.+52     	; 0x884 <vfprintf+0xa4>
 850:	9b 32       	cpi	r25, 0x2B	; 43
 852:	69 f0       	breq	.+26     	; 0x86e <vfprintf+0x8e>
 854:	9c 32       	cpi	r25, 0x2C	; 44
 856:	28 f4       	brcc	.+10     	; 0x862 <vfprintf+0x82>
 858:	90 32       	cpi	r25, 0x20	; 32
 85a:	59 f0       	breq	.+22     	; 0x872 <vfprintf+0x92>
 85c:	93 32       	cpi	r25, 0x23	; 35
 85e:	91 f4       	brne	.+36     	; 0x884 <vfprintf+0xa4>
 860:	0e c0       	rjmp	.+28     	; 0x87e <vfprintf+0x9e>
 862:	9d 32       	cpi	r25, 0x2D	; 45
 864:	49 f0       	breq	.+18     	; 0x878 <vfprintf+0x98>
 866:	90 33       	cpi	r25, 0x30	; 48
 868:	69 f4       	brne	.+26     	; 0x884 <vfprintf+0xa4>
 86a:	41 e0       	ldi	r20, 0x01	; 1
 86c:	24 c0       	rjmp	.+72     	; 0x8b6 <vfprintf+0xd6>
 86e:	52 e0       	ldi	r21, 0x02	; 2
 870:	f5 2a       	or	r15, r21
 872:	84 e0       	ldi	r24, 0x04	; 4
 874:	f8 2a       	or	r15, r24
 876:	28 c0       	rjmp	.+80     	; 0x8c8 <vfprintf+0xe8>
 878:	98 e0       	ldi	r25, 0x08	; 8
 87a:	f9 2a       	or	r15, r25
 87c:	25 c0       	rjmp	.+74     	; 0x8c8 <vfprintf+0xe8>
 87e:	e0 e1       	ldi	r30, 0x10	; 16
 880:	fe 2a       	or	r15, r30
 882:	22 c0       	rjmp	.+68     	; 0x8c8 <vfprintf+0xe8>
 884:	f7 fc       	sbrc	r15, 7
 886:	29 c0       	rjmp	.+82     	; 0x8da <vfprintf+0xfa>
 888:	89 2f       	mov	r24, r25
 88a:	80 53       	subi	r24, 0x30	; 48
 88c:	8a 30       	cpi	r24, 0x0A	; 10
 88e:	70 f4       	brcc	.+28     	; 0x8ac <vfprintf+0xcc>
 890:	f6 fe       	sbrs	r15, 6
 892:	05 c0       	rjmp	.+10     	; 0x89e <vfprintf+0xbe>
 894:	98 9c       	mul	r9, r8
 896:	90 2c       	mov	r9, r0
 898:	11 24       	eor	r1, r1
 89a:	98 0e       	add	r9, r24
 89c:	15 c0       	rjmp	.+42     	; 0x8c8 <vfprintf+0xe8>
 89e:	e8 9c       	mul	r14, r8
 8a0:	e0 2c       	mov	r14, r0
 8a2:	11 24       	eor	r1, r1
 8a4:	e8 0e       	add	r14, r24
 8a6:	f0 e2       	ldi	r31, 0x20	; 32
 8a8:	ff 2a       	or	r15, r31
 8aa:	0e c0       	rjmp	.+28     	; 0x8c8 <vfprintf+0xe8>
 8ac:	9e 32       	cpi	r25, 0x2E	; 46
 8ae:	29 f4       	brne	.+10     	; 0x8ba <vfprintf+0xda>
 8b0:	f6 fc       	sbrc	r15, 6
 8b2:	6b c1       	rjmp	.+726    	; 0xb8a <__stack+0x28b>
 8b4:	40 e4       	ldi	r20, 0x40	; 64
 8b6:	f4 2a       	or	r15, r20
 8b8:	07 c0       	rjmp	.+14     	; 0x8c8 <vfprintf+0xe8>
 8ba:	9c 36       	cpi	r25, 0x6C	; 108
 8bc:	19 f4       	brne	.+6      	; 0x8c4 <vfprintf+0xe4>
 8be:	50 e8       	ldi	r21, 0x80	; 128
 8c0:	f5 2a       	or	r15, r21
 8c2:	02 c0       	rjmp	.+4      	; 0x8c8 <vfprintf+0xe8>
 8c4:	98 36       	cpi	r25, 0x68	; 104
 8c6:	49 f4       	brne	.+18     	; 0x8da <vfprintf+0xfa>
 8c8:	f2 01       	movw	r30, r4
 8ca:	23 fd       	sbrc	r18, 3
 8cc:	95 91       	lpm	r25, Z+
 8ce:	23 ff       	sbrs	r18, 3
 8d0:	91 91       	ld	r25, Z+
 8d2:	2f 01       	movw	r4, r30
 8d4:	99 23       	and	r25, r25
 8d6:	09 f0       	breq	.+2      	; 0x8da <vfprintf+0xfa>
 8d8:	b8 cf       	rjmp	.-144    	; 0x84a <vfprintf+0x6a>
 8da:	89 2f       	mov	r24, r25
 8dc:	85 54       	subi	r24, 0x45	; 69
 8de:	83 30       	cpi	r24, 0x03	; 3
 8e0:	18 f0       	brcs	.+6      	; 0x8e8 <vfprintf+0x108>
 8e2:	80 52       	subi	r24, 0x20	; 32
 8e4:	83 30       	cpi	r24, 0x03	; 3
 8e6:	38 f4       	brcc	.+14     	; 0x8f6 <vfprintf+0x116>
 8e8:	44 e0       	ldi	r20, 0x04	; 4
 8ea:	50 e0       	ldi	r21, 0x00	; 0
 8ec:	a4 0e       	add	r10, r20
 8ee:	b5 1e       	adc	r11, r21
 8f0:	5f e3       	ldi	r21, 0x3F	; 63
 8f2:	59 83       	std	Y+1, r21	; 0x01
 8f4:	0f c0       	rjmp	.+30     	; 0x914 <__stack+0x15>
 8f6:	93 36       	cpi	r25, 0x63	; 99
 8f8:	31 f0       	breq	.+12     	; 0x906 <__stack+0x7>
 8fa:	93 37       	cpi	r25, 0x73	; 115
 8fc:	79 f0       	breq	.+30     	; 0x91c <__stack+0x1d>
 8fe:	93 35       	cpi	r25, 0x53	; 83
 900:	09 f0       	breq	.+2      	; 0x904 <__stack+0x5>
 902:	56 c0       	rjmp	.+172    	; 0x9b0 <__stack+0xb1>
 904:	20 c0       	rjmp	.+64     	; 0x946 <__stack+0x47>
 906:	f5 01       	movw	r30, r10
 908:	80 81       	ld	r24, Z
 90a:	89 83       	std	Y+1, r24	; 0x01
 90c:	42 e0       	ldi	r20, 0x02	; 2
 90e:	50 e0       	ldi	r21, 0x00	; 0
 910:	a4 0e       	add	r10, r20
 912:	b5 1e       	adc	r11, r21
 914:	61 01       	movw	r12, r2
 916:	01 e0       	ldi	r16, 0x01	; 1
 918:	10 e0       	ldi	r17, 0x00	; 0
 91a:	12 c0       	rjmp	.+36     	; 0x940 <__stack+0x41>
 91c:	f5 01       	movw	r30, r10
 91e:	c0 80       	ld	r12, Z
 920:	d1 80       	ldd	r13, Z+1	; 0x01
 922:	f6 fc       	sbrc	r15, 6
 924:	03 c0       	rjmp	.+6      	; 0x92c <__stack+0x2d>
 926:	6f ef       	ldi	r22, 0xFF	; 255
 928:	7f ef       	ldi	r23, 0xFF	; 255
 92a:	02 c0       	rjmp	.+4      	; 0x930 <__stack+0x31>
 92c:	69 2d       	mov	r22, r9
 92e:	70 e0       	ldi	r23, 0x00	; 0
 930:	42 e0       	ldi	r20, 0x02	; 2
 932:	50 e0       	ldi	r21, 0x00	; 0
 934:	a4 0e       	add	r10, r20
 936:	b5 1e       	adc	r11, r21
 938:	c6 01       	movw	r24, r12
 93a:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <strnlen>
 93e:	8c 01       	movw	r16, r24
 940:	5f e7       	ldi	r21, 0x7F	; 127
 942:	f5 22       	and	r15, r21
 944:	14 c0       	rjmp	.+40     	; 0x96e <__stack+0x6f>
 946:	f5 01       	movw	r30, r10
 948:	c0 80       	ld	r12, Z
 94a:	d1 80       	ldd	r13, Z+1	; 0x01
 94c:	f6 fc       	sbrc	r15, 6
 94e:	03 c0       	rjmp	.+6      	; 0x956 <__stack+0x57>
 950:	6f ef       	ldi	r22, 0xFF	; 255
 952:	7f ef       	ldi	r23, 0xFF	; 255
 954:	02 c0       	rjmp	.+4      	; 0x95a <__stack+0x5b>
 956:	69 2d       	mov	r22, r9
 958:	70 e0       	ldi	r23, 0x00	; 0
 95a:	42 e0       	ldi	r20, 0x02	; 2
 95c:	50 e0       	ldi	r21, 0x00	; 0
 95e:	a4 0e       	add	r10, r20
 960:	b5 1e       	adc	r11, r21
 962:	c6 01       	movw	r24, r12
 964:	0e 94 cd 05 	call	0xb9a	; 0xb9a <strnlen_P>
 968:	8c 01       	movw	r16, r24
 96a:	50 e8       	ldi	r21, 0x80	; 128
 96c:	f5 2a       	or	r15, r21
 96e:	f3 fe       	sbrs	r15, 3
 970:	07 c0       	rjmp	.+14     	; 0x980 <__stack+0x81>
 972:	1a c0       	rjmp	.+52     	; 0x9a8 <__stack+0xa9>
 974:	80 e2       	ldi	r24, 0x20	; 32
 976:	90 e0       	ldi	r25, 0x00	; 0
 978:	b3 01       	movw	r22, r6
 97a:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <fputc>
 97e:	ea 94       	dec	r14
 980:	8e 2d       	mov	r24, r14
 982:	90 e0       	ldi	r25, 0x00	; 0
 984:	08 17       	cp	r16, r24
 986:	19 07       	cpc	r17, r25
 988:	a8 f3       	brcs	.-22     	; 0x974 <__stack+0x75>
 98a:	0e c0       	rjmp	.+28     	; 0x9a8 <__stack+0xa9>
 98c:	f6 01       	movw	r30, r12
 98e:	f7 fc       	sbrc	r15, 7
 990:	85 91       	lpm	r24, Z+
 992:	f7 fe       	sbrs	r15, 7
 994:	81 91       	ld	r24, Z+
 996:	6f 01       	movw	r12, r30
 998:	90 e0       	ldi	r25, 0x00	; 0
 99a:	b3 01       	movw	r22, r6
 99c:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <fputc>
 9a0:	e1 10       	cpse	r14, r1
 9a2:	ea 94       	dec	r14
 9a4:	01 50       	subi	r16, 0x01	; 1
 9a6:	10 40       	sbci	r17, 0x00	; 0
 9a8:	01 15       	cp	r16, r1
 9aa:	11 05       	cpc	r17, r1
 9ac:	79 f7       	brne	.-34     	; 0x98c <__stack+0x8d>
 9ae:	ea c0       	rjmp	.+468    	; 0xb84 <__stack+0x285>
 9b0:	94 36       	cpi	r25, 0x64	; 100
 9b2:	11 f0       	breq	.+4      	; 0x9b8 <__stack+0xb9>
 9b4:	99 36       	cpi	r25, 0x69	; 105
 9b6:	69 f5       	brne	.+90     	; 0xa12 <__stack+0x113>
 9b8:	f7 fe       	sbrs	r15, 7
 9ba:	08 c0       	rjmp	.+16     	; 0x9cc <__stack+0xcd>
 9bc:	f5 01       	movw	r30, r10
 9be:	20 81       	ld	r18, Z
 9c0:	31 81       	ldd	r19, Z+1	; 0x01
 9c2:	42 81       	ldd	r20, Z+2	; 0x02
 9c4:	53 81       	ldd	r21, Z+3	; 0x03
 9c6:	84 e0       	ldi	r24, 0x04	; 4
 9c8:	90 e0       	ldi	r25, 0x00	; 0
 9ca:	0a c0       	rjmp	.+20     	; 0x9e0 <__stack+0xe1>
 9cc:	f5 01       	movw	r30, r10
 9ce:	80 81       	ld	r24, Z
 9d0:	91 81       	ldd	r25, Z+1	; 0x01
 9d2:	9c 01       	movw	r18, r24
 9d4:	44 27       	eor	r20, r20
 9d6:	37 fd       	sbrc	r19, 7
 9d8:	40 95       	com	r20
 9da:	54 2f       	mov	r21, r20
 9dc:	82 e0       	ldi	r24, 0x02	; 2
 9de:	90 e0       	ldi	r25, 0x00	; 0
 9e0:	a8 0e       	add	r10, r24
 9e2:	b9 1e       	adc	r11, r25
 9e4:	9f e6       	ldi	r25, 0x6F	; 111
 9e6:	f9 22       	and	r15, r25
 9e8:	57 ff       	sbrs	r21, 7
 9ea:	09 c0       	rjmp	.+18     	; 0x9fe <__stack+0xff>
 9ec:	50 95       	com	r21
 9ee:	40 95       	com	r20
 9f0:	30 95       	com	r19
 9f2:	21 95       	neg	r18
 9f4:	3f 4f       	sbci	r19, 0xFF	; 255
 9f6:	4f 4f       	sbci	r20, 0xFF	; 255
 9f8:	5f 4f       	sbci	r21, 0xFF	; 255
 9fa:	e0 e8       	ldi	r30, 0x80	; 128
 9fc:	fe 2a       	or	r15, r30
 9fe:	ca 01       	movw	r24, r20
 a00:	b9 01       	movw	r22, r18
 a02:	a1 01       	movw	r20, r2
 a04:	2a e0       	ldi	r18, 0x0A	; 10
 a06:	30 e0       	ldi	r19, 0x00	; 0
 a08:	0e 94 0f 06 	call	0xc1e	; 0xc1e <__ultoa_invert>
 a0c:	d8 2e       	mov	r13, r24
 a0e:	d2 18       	sub	r13, r2
 a10:	40 c0       	rjmp	.+128    	; 0xa92 <__stack+0x193>
 a12:	95 37       	cpi	r25, 0x75	; 117
 a14:	29 f4       	brne	.+10     	; 0xa20 <__stack+0x121>
 a16:	1f 2d       	mov	r17, r15
 a18:	1f 7e       	andi	r17, 0xEF	; 239
 a1a:	2a e0       	ldi	r18, 0x0A	; 10
 a1c:	30 e0       	ldi	r19, 0x00	; 0
 a1e:	1d c0       	rjmp	.+58     	; 0xa5a <__stack+0x15b>
 a20:	1f 2d       	mov	r17, r15
 a22:	19 7f       	andi	r17, 0xF9	; 249
 a24:	9f 36       	cpi	r25, 0x6F	; 111
 a26:	61 f0       	breq	.+24     	; 0xa40 <__stack+0x141>
 a28:	90 37       	cpi	r25, 0x70	; 112
 a2a:	20 f4       	brcc	.+8      	; 0xa34 <__stack+0x135>
 a2c:	98 35       	cpi	r25, 0x58	; 88
 a2e:	09 f0       	breq	.+2      	; 0xa32 <__stack+0x133>
 a30:	ac c0       	rjmp	.+344    	; 0xb8a <__stack+0x28b>
 a32:	0f c0       	rjmp	.+30     	; 0xa52 <__stack+0x153>
 a34:	90 37       	cpi	r25, 0x70	; 112
 a36:	39 f0       	breq	.+14     	; 0xa46 <__stack+0x147>
 a38:	98 37       	cpi	r25, 0x78	; 120
 a3a:	09 f0       	breq	.+2      	; 0xa3e <__stack+0x13f>
 a3c:	a6 c0       	rjmp	.+332    	; 0xb8a <__stack+0x28b>
 a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__stack+0x149>
 a40:	28 e0       	ldi	r18, 0x08	; 8
 a42:	30 e0       	ldi	r19, 0x00	; 0
 a44:	0a c0       	rjmp	.+20     	; 0xa5a <__stack+0x15b>
 a46:	10 61       	ori	r17, 0x10	; 16
 a48:	14 fd       	sbrc	r17, 4
 a4a:	14 60       	ori	r17, 0x04	; 4
 a4c:	20 e1       	ldi	r18, 0x10	; 16
 a4e:	30 e0       	ldi	r19, 0x00	; 0
 a50:	04 c0       	rjmp	.+8      	; 0xa5a <__stack+0x15b>
 a52:	14 fd       	sbrc	r17, 4
 a54:	16 60       	ori	r17, 0x06	; 6
 a56:	20 e1       	ldi	r18, 0x10	; 16
 a58:	32 e0       	ldi	r19, 0x02	; 2
 a5a:	17 ff       	sbrs	r17, 7
 a5c:	08 c0       	rjmp	.+16     	; 0xa6e <__stack+0x16f>
 a5e:	f5 01       	movw	r30, r10
 a60:	60 81       	ld	r22, Z
 a62:	71 81       	ldd	r23, Z+1	; 0x01
 a64:	82 81       	ldd	r24, Z+2	; 0x02
 a66:	93 81       	ldd	r25, Z+3	; 0x03
 a68:	44 e0       	ldi	r20, 0x04	; 4
 a6a:	50 e0       	ldi	r21, 0x00	; 0
 a6c:	08 c0       	rjmp	.+16     	; 0xa7e <__stack+0x17f>
 a6e:	f5 01       	movw	r30, r10
 a70:	80 81       	ld	r24, Z
 a72:	91 81       	ldd	r25, Z+1	; 0x01
 a74:	bc 01       	movw	r22, r24
 a76:	80 e0       	ldi	r24, 0x00	; 0
 a78:	90 e0       	ldi	r25, 0x00	; 0
 a7a:	42 e0       	ldi	r20, 0x02	; 2
 a7c:	50 e0       	ldi	r21, 0x00	; 0
 a7e:	a4 0e       	add	r10, r20
 a80:	b5 1e       	adc	r11, r21
 a82:	a1 01       	movw	r20, r2
 a84:	0e 94 0f 06 	call	0xc1e	; 0xc1e <__ultoa_invert>
 a88:	d8 2e       	mov	r13, r24
 a8a:	d2 18       	sub	r13, r2
 a8c:	8f e7       	ldi	r24, 0x7F	; 127
 a8e:	f8 2e       	mov	r15, r24
 a90:	f1 22       	and	r15, r17
 a92:	f6 fe       	sbrs	r15, 6
 a94:	0b c0       	rjmp	.+22     	; 0xaac <__stack+0x1ad>
 a96:	5e ef       	ldi	r21, 0xFE	; 254
 a98:	f5 22       	and	r15, r21
 a9a:	d9 14       	cp	r13, r9
 a9c:	38 f4       	brcc	.+14     	; 0xaac <__stack+0x1ad>
 a9e:	f4 fe       	sbrs	r15, 4
 aa0:	07 c0       	rjmp	.+14     	; 0xab0 <__stack+0x1b1>
 aa2:	f2 fc       	sbrc	r15, 2
 aa4:	05 c0       	rjmp	.+10     	; 0xab0 <__stack+0x1b1>
 aa6:	8f ee       	ldi	r24, 0xEF	; 239
 aa8:	f8 22       	and	r15, r24
 aaa:	02 c0       	rjmp	.+4      	; 0xab0 <__stack+0x1b1>
 aac:	1d 2d       	mov	r17, r13
 aae:	01 c0       	rjmp	.+2      	; 0xab2 <__stack+0x1b3>
 ab0:	19 2d       	mov	r17, r9
 ab2:	f4 fe       	sbrs	r15, 4
 ab4:	0d c0       	rjmp	.+26     	; 0xad0 <__stack+0x1d1>
 ab6:	fe 01       	movw	r30, r28
 ab8:	ed 0d       	add	r30, r13
 aba:	f1 1d       	adc	r31, r1
 abc:	80 81       	ld	r24, Z
 abe:	80 33       	cpi	r24, 0x30	; 48
 ac0:	19 f4       	brne	.+6      	; 0xac8 <__stack+0x1c9>
 ac2:	99 ee       	ldi	r25, 0xE9	; 233
 ac4:	f9 22       	and	r15, r25
 ac6:	08 c0       	rjmp	.+16     	; 0xad8 <__stack+0x1d9>
 ac8:	1f 5f       	subi	r17, 0xFF	; 255
 aca:	f2 fe       	sbrs	r15, 2
 acc:	05 c0       	rjmp	.+10     	; 0xad8 <__stack+0x1d9>
 ace:	03 c0       	rjmp	.+6      	; 0xad6 <__stack+0x1d7>
 ad0:	8f 2d       	mov	r24, r15
 ad2:	86 78       	andi	r24, 0x86	; 134
 ad4:	09 f0       	breq	.+2      	; 0xad8 <__stack+0x1d9>
 ad6:	1f 5f       	subi	r17, 0xFF	; 255
 ad8:	0f 2d       	mov	r16, r15
 ada:	f3 fc       	sbrc	r15, 3
 adc:	14 c0       	rjmp	.+40     	; 0xb06 <__stack+0x207>
 ade:	f0 fe       	sbrs	r15, 0
 ae0:	0f c0       	rjmp	.+30     	; 0xb00 <__stack+0x201>
 ae2:	1e 15       	cp	r17, r14
 ae4:	10 f0       	brcs	.+4      	; 0xaea <__stack+0x1eb>
 ae6:	9d 2c       	mov	r9, r13
 ae8:	0b c0       	rjmp	.+22     	; 0xb00 <__stack+0x201>
 aea:	9d 2c       	mov	r9, r13
 aec:	9e 0c       	add	r9, r14
 aee:	91 1a       	sub	r9, r17
 af0:	1e 2d       	mov	r17, r14
 af2:	06 c0       	rjmp	.+12     	; 0xb00 <__stack+0x201>
 af4:	80 e2       	ldi	r24, 0x20	; 32
 af6:	90 e0       	ldi	r25, 0x00	; 0
 af8:	b3 01       	movw	r22, r6
 afa:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <fputc>
 afe:	1f 5f       	subi	r17, 0xFF	; 255
 b00:	1e 15       	cp	r17, r14
 b02:	c0 f3       	brcs	.-16     	; 0xaf4 <__stack+0x1f5>
 b04:	04 c0       	rjmp	.+8      	; 0xb0e <__stack+0x20f>
 b06:	1e 15       	cp	r17, r14
 b08:	10 f4       	brcc	.+4      	; 0xb0e <__stack+0x20f>
 b0a:	e1 1a       	sub	r14, r17
 b0c:	01 c0       	rjmp	.+2      	; 0xb10 <__stack+0x211>
 b0e:	ee 24       	eor	r14, r14
 b10:	04 ff       	sbrs	r16, 4
 b12:	0f c0       	rjmp	.+30     	; 0xb32 <__stack+0x233>
 b14:	80 e3       	ldi	r24, 0x30	; 48
 b16:	90 e0       	ldi	r25, 0x00	; 0
 b18:	b3 01       	movw	r22, r6
 b1a:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <fputc>
 b1e:	02 ff       	sbrs	r16, 2
 b20:	1d c0       	rjmp	.+58     	; 0xb5c <__stack+0x25d>
 b22:	01 fd       	sbrc	r16, 1
 b24:	03 c0       	rjmp	.+6      	; 0xb2c <__stack+0x22d>
 b26:	88 e7       	ldi	r24, 0x78	; 120
 b28:	90 e0       	ldi	r25, 0x00	; 0
 b2a:	0e c0       	rjmp	.+28     	; 0xb48 <__stack+0x249>
 b2c:	88 e5       	ldi	r24, 0x58	; 88
 b2e:	90 e0       	ldi	r25, 0x00	; 0
 b30:	0b c0       	rjmp	.+22     	; 0xb48 <__stack+0x249>
 b32:	80 2f       	mov	r24, r16
 b34:	86 78       	andi	r24, 0x86	; 134
 b36:	91 f0       	breq	.+36     	; 0xb5c <__stack+0x25d>
 b38:	01 ff       	sbrs	r16, 1
 b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__stack+0x241>
 b3c:	8b e2       	ldi	r24, 0x2B	; 43
 b3e:	01 c0       	rjmp	.+2      	; 0xb42 <__stack+0x243>
 b40:	80 e2       	ldi	r24, 0x20	; 32
 b42:	f7 fc       	sbrc	r15, 7
 b44:	8d e2       	ldi	r24, 0x2D	; 45
 b46:	90 e0       	ldi	r25, 0x00	; 0
 b48:	b3 01       	movw	r22, r6
 b4a:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <fputc>
 b4e:	06 c0       	rjmp	.+12     	; 0xb5c <__stack+0x25d>
 b50:	80 e3       	ldi	r24, 0x30	; 48
 b52:	90 e0       	ldi	r25, 0x00	; 0
 b54:	b3 01       	movw	r22, r6
 b56:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <fputc>
 b5a:	9a 94       	dec	r9
 b5c:	d9 14       	cp	r13, r9
 b5e:	c0 f3       	brcs	.-16     	; 0xb50 <__stack+0x251>
 b60:	da 94       	dec	r13
 b62:	f1 01       	movw	r30, r2
 b64:	ed 0d       	add	r30, r13
 b66:	f1 1d       	adc	r31, r1
 b68:	80 81       	ld	r24, Z
 b6a:	90 e0       	ldi	r25, 0x00	; 0
 b6c:	b3 01       	movw	r22, r6
 b6e:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <fputc>
 b72:	dd 20       	and	r13, r13
 b74:	a9 f7       	brne	.-22     	; 0xb60 <__stack+0x261>
 b76:	06 c0       	rjmp	.+12     	; 0xb84 <__stack+0x285>
 b78:	80 e2       	ldi	r24, 0x20	; 32
 b7a:	90 e0       	ldi	r25, 0x00	; 0
 b7c:	b3 01       	movw	r22, r6
 b7e:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <fputc>
 b82:	ea 94       	dec	r14
 b84:	ee 20       	and	r14, r14
 b86:	c1 f7       	brne	.-16     	; 0xb78 <__stack+0x279>
 b88:	43 ce       	rjmp	.-890    	; 0x810 <vfprintf+0x30>
 b8a:	f3 01       	movw	r30, r6
 b8c:	66 81       	ldd	r22, Z+6	; 0x06
 b8e:	77 81       	ldd	r23, Z+7	; 0x07
 b90:	cb 01       	movw	r24, r22
 b92:	2b 96       	adiw	r28, 0x0b	; 11
 b94:	e2 e1       	ldi	r30, 0x12	; 18
 b96:	0c 94 89 06 	jmp	0xd12	; 0xd12 <__epilogue_restores__>

00000b9a <strnlen_P>:
 b9a:	fc 01       	movw	r30, r24
 b9c:	05 90       	lpm	r0, Z+
 b9e:	61 50       	subi	r22, 0x01	; 1
 ba0:	70 40       	sbci	r23, 0x00	; 0
 ba2:	01 10       	cpse	r0, r1
 ba4:	d8 f7       	brcc	.-10     	; 0xb9c <strnlen_P+0x2>
 ba6:	80 95       	com	r24
 ba8:	90 95       	com	r25
 baa:	8e 0f       	add	r24, r30
 bac:	9f 1f       	adc	r25, r31
 bae:	08 95       	ret

00000bb0 <strnlen>:
 bb0:	fc 01       	movw	r30, r24
 bb2:	61 50       	subi	r22, 0x01	; 1
 bb4:	70 40       	sbci	r23, 0x00	; 0
 bb6:	01 90       	ld	r0, Z+
 bb8:	01 10       	cpse	r0, r1
 bba:	d8 f7       	brcc	.-10     	; 0xbb2 <strnlen+0x2>
 bbc:	80 95       	com	r24
 bbe:	90 95       	com	r25
 bc0:	8e 0f       	add	r24, r30
 bc2:	9f 1f       	adc	r25, r31
 bc4:	08 95       	ret

00000bc6 <fputc>:
 bc6:	0f 93       	push	r16
 bc8:	1f 93       	push	r17
 bca:	cf 93       	push	r28
 bcc:	df 93       	push	r29
 bce:	8c 01       	movw	r16, r24
 bd0:	eb 01       	movw	r28, r22
 bd2:	8b 81       	ldd	r24, Y+3	; 0x03
 bd4:	81 ff       	sbrs	r24, 1
 bd6:	1b c0       	rjmp	.+54     	; 0xc0e <fputc+0x48>
 bd8:	82 ff       	sbrs	r24, 2
 bda:	0d c0       	rjmp	.+26     	; 0xbf6 <fputc+0x30>
 bdc:	2e 81       	ldd	r18, Y+6	; 0x06
 bde:	3f 81       	ldd	r19, Y+7	; 0x07
 be0:	8c 81       	ldd	r24, Y+4	; 0x04
 be2:	9d 81       	ldd	r25, Y+5	; 0x05
 be4:	28 17       	cp	r18, r24
 be6:	39 07       	cpc	r19, r25
 be8:	64 f4       	brge	.+24     	; 0xc02 <fputc+0x3c>
 bea:	e8 81       	ld	r30, Y
 bec:	f9 81       	ldd	r31, Y+1	; 0x01
 bee:	01 93       	st	Z+, r16
 bf0:	f9 83       	std	Y+1, r31	; 0x01
 bf2:	e8 83       	st	Y, r30
 bf4:	06 c0       	rjmp	.+12     	; 0xc02 <fputc+0x3c>
 bf6:	e8 85       	ldd	r30, Y+8	; 0x08
 bf8:	f9 85       	ldd	r31, Y+9	; 0x09
 bfa:	80 2f       	mov	r24, r16
 bfc:	09 95       	icall
 bfe:	89 2b       	or	r24, r25
 c00:	31 f4       	brne	.+12     	; 0xc0e <fputc+0x48>
 c02:	8e 81       	ldd	r24, Y+6	; 0x06
 c04:	9f 81       	ldd	r25, Y+7	; 0x07
 c06:	01 96       	adiw	r24, 0x01	; 1
 c08:	9f 83       	std	Y+7, r25	; 0x07
 c0a:	8e 83       	std	Y+6, r24	; 0x06
 c0c:	02 c0       	rjmp	.+4      	; 0xc12 <fputc+0x4c>
 c0e:	0f ef       	ldi	r16, 0xFF	; 255
 c10:	1f ef       	ldi	r17, 0xFF	; 255
 c12:	c8 01       	movw	r24, r16
 c14:	df 91       	pop	r29
 c16:	cf 91       	pop	r28
 c18:	1f 91       	pop	r17
 c1a:	0f 91       	pop	r16
 c1c:	08 95       	ret

00000c1e <__ultoa_invert>:
 c1e:	fa 01       	movw	r30, r20
 c20:	aa 27       	eor	r26, r26
 c22:	28 30       	cpi	r18, 0x08	; 8
 c24:	51 f1       	breq	.+84     	; 0xc7a <__ultoa_invert+0x5c>
 c26:	20 31       	cpi	r18, 0x10	; 16
 c28:	81 f1       	breq	.+96     	; 0xc8a <__ultoa_invert+0x6c>
 c2a:	e8 94       	clt
 c2c:	6f 93       	push	r22
 c2e:	6e 7f       	andi	r22, 0xFE	; 254
 c30:	6e 5f       	subi	r22, 0xFE	; 254
 c32:	7f 4f       	sbci	r23, 0xFF	; 255
 c34:	8f 4f       	sbci	r24, 0xFF	; 255
 c36:	9f 4f       	sbci	r25, 0xFF	; 255
 c38:	af 4f       	sbci	r26, 0xFF	; 255
 c3a:	b1 e0       	ldi	r27, 0x01	; 1
 c3c:	3e d0       	rcall	.+124    	; 0xcba <__ultoa_invert+0x9c>
 c3e:	b4 e0       	ldi	r27, 0x04	; 4
 c40:	3c d0       	rcall	.+120    	; 0xcba <__ultoa_invert+0x9c>
 c42:	67 0f       	add	r22, r23
 c44:	78 1f       	adc	r23, r24
 c46:	89 1f       	adc	r24, r25
 c48:	9a 1f       	adc	r25, r26
 c4a:	a1 1d       	adc	r26, r1
 c4c:	68 0f       	add	r22, r24
 c4e:	79 1f       	adc	r23, r25
 c50:	8a 1f       	adc	r24, r26
 c52:	91 1d       	adc	r25, r1
 c54:	a1 1d       	adc	r26, r1
 c56:	6a 0f       	add	r22, r26
 c58:	71 1d       	adc	r23, r1
 c5a:	81 1d       	adc	r24, r1
 c5c:	91 1d       	adc	r25, r1
 c5e:	a1 1d       	adc	r26, r1
 c60:	20 d0       	rcall	.+64     	; 0xca2 <__ultoa_invert+0x84>
 c62:	09 f4       	brne	.+2      	; 0xc66 <__ultoa_invert+0x48>
 c64:	68 94       	set
 c66:	3f 91       	pop	r19
 c68:	2a e0       	ldi	r18, 0x0A	; 10
 c6a:	26 9f       	mul	r18, r22
 c6c:	11 24       	eor	r1, r1
 c6e:	30 19       	sub	r19, r0
 c70:	30 5d       	subi	r19, 0xD0	; 208
 c72:	31 93       	st	Z+, r19
 c74:	de f6       	brtc	.-74     	; 0xc2c <__ultoa_invert+0xe>
 c76:	cf 01       	movw	r24, r30
 c78:	08 95       	ret
 c7a:	46 2f       	mov	r20, r22
 c7c:	47 70       	andi	r20, 0x07	; 7
 c7e:	40 5d       	subi	r20, 0xD0	; 208
 c80:	41 93       	st	Z+, r20
 c82:	b3 e0       	ldi	r27, 0x03	; 3
 c84:	0f d0       	rcall	.+30     	; 0xca4 <__ultoa_invert+0x86>
 c86:	c9 f7       	brne	.-14     	; 0xc7a <__ultoa_invert+0x5c>
 c88:	f6 cf       	rjmp	.-20     	; 0xc76 <__ultoa_invert+0x58>
 c8a:	46 2f       	mov	r20, r22
 c8c:	4f 70       	andi	r20, 0x0F	; 15
 c8e:	40 5d       	subi	r20, 0xD0	; 208
 c90:	4a 33       	cpi	r20, 0x3A	; 58
 c92:	18 f0       	brcs	.+6      	; 0xc9a <__ultoa_invert+0x7c>
 c94:	49 5d       	subi	r20, 0xD9	; 217
 c96:	31 fd       	sbrc	r19, 1
 c98:	40 52       	subi	r20, 0x20	; 32
 c9a:	41 93       	st	Z+, r20
 c9c:	02 d0       	rcall	.+4      	; 0xca2 <__ultoa_invert+0x84>
 c9e:	a9 f7       	brne	.-22     	; 0xc8a <__ultoa_invert+0x6c>
 ca0:	ea cf       	rjmp	.-44     	; 0xc76 <__ultoa_invert+0x58>
 ca2:	b4 e0       	ldi	r27, 0x04	; 4
 ca4:	a6 95       	lsr	r26
 ca6:	97 95       	ror	r25
 ca8:	87 95       	ror	r24
 caa:	77 95       	ror	r23
 cac:	67 95       	ror	r22
 cae:	ba 95       	dec	r27
 cb0:	c9 f7       	brne	.-14     	; 0xca4 <__ultoa_invert+0x86>
 cb2:	00 97       	sbiw	r24, 0x00	; 0
 cb4:	61 05       	cpc	r22, r1
 cb6:	71 05       	cpc	r23, r1
 cb8:	08 95       	ret
 cba:	9b 01       	movw	r18, r22
 cbc:	ac 01       	movw	r20, r24
 cbe:	0a 2e       	mov	r0, r26
 cc0:	06 94       	lsr	r0
 cc2:	57 95       	ror	r21
 cc4:	47 95       	ror	r20
 cc6:	37 95       	ror	r19
 cc8:	27 95       	ror	r18
 cca:	ba 95       	dec	r27
 ccc:	c9 f7       	brne	.-14     	; 0xcc0 <__ultoa_invert+0xa2>
 cce:	62 0f       	add	r22, r18
 cd0:	73 1f       	adc	r23, r19
 cd2:	84 1f       	adc	r24, r20
 cd4:	95 1f       	adc	r25, r21
 cd6:	a0 1d       	adc	r26, r0
 cd8:	08 95       	ret

00000cda <__prologue_saves__>:
 cda:	2f 92       	push	r2
 cdc:	3f 92       	push	r3
 cde:	4f 92       	push	r4
 ce0:	5f 92       	push	r5
 ce2:	6f 92       	push	r6
 ce4:	7f 92       	push	r7
 ce6:	8f 92       	push	r8
 ce8:	9f 92       	push	r9
 cea:	af 92       	push	r10
 cec:	bf 92       	push	r11
 cee:	cf 92       	push	r12
 cf0:	df 92       	push	r13
 cf2:	ef 92       	push	r14
 cf4:	ff 92       	push	r15
 cf6:	0f 93       	push	r16
 cf8:	1f 93       	push	r17
 cfa:	cf 93       	push	r28
 cfc:	df 93       	push	r29
 cfe:	cd b7       	in	r28, 0x3d	; 61
 d00:	de b7       	in	r29, 0x3e	; 62
 d02:	ca 1b       	sub	r28, r26
 d04:	db 0b       	sbc	r29, r27
 d06:	0f b6       	in	r0, 0x3f	; 63
 d08:	f8 94       	cli
 d0a:	de bf       	out	0x3e, r29	; 62
 d0c:	0f be       	out	0x3f, r0	; 63
 d0e:	cd bf       	out	0x3d, r28	; 61
 d10:	09 94       	ijmp

00000d12 <__epilogue_restores__>:
 d12:	2a 88       	ldd	r2, Y+18	; 0x12
 d14:	39 88       	ldd	r3, Y+17	; 0x11
 d16:	48 88       	ldd	r4, Y+16	; 0x10
 d18:	5f 84       	ldd	r5, Y+15	; 0x0f
 d1a:	6e 84       	ldd	r6, Y+14	; 0x0e
 d1c:	7d 84       	ldd	r7, Y+13	; 0x0d
 d1e:	8c 84       	ldd	r8, Y+12	; 0x0c
 d20:	9b 84       	ldd	r9, Y+11	; 0x0b
 d22:	aa 84       	ldd	r10, Y+10	; 0x0a
 d24:	b9 84       	ldd	r11, Y+9	; 0x09
 d26:	c8 84       	ldd	r12, Y+8	; 0x08
 d28:	df 80       	ldd	r13, Y+7	; 0x07
 d2a:	ee 80       	ldd	r14, Y+6	; 0x06
 d2c:	fd 80       	ldd	r15, Y+5	; 0x05
 d2e:	0c 81       	ldd	r16, Y+4	; 0x04
 d30:	1b 81       	ldd	r17, Y+3	; 0x03
 d32:	aa 81       	ldd	r26, Y+2	; 0x02
 d34:	b9 81       	ldd	r27, Y+1	; 0x01
 d36:	ce 0f       	add	r28, r30
 d38:	d1 1d       	adc	r29, r1
 d3a:	0f b6       	in	r0, 0x3f	; 63
 d3c:	f8 94       	cli
 d3e:	de bf       	out	0x3e, r29	; 62
 d40:	0f be       	out	0x3f, r0	; 63
 d42:	cd bf       	out	0x3d, r28	; 61
 d44:	ed 01       	movw	r28, r26
 d46:	08 95       	ret

00000d48 <_exit>:
 d48:	f8 94       	cli

00000d4a <__stop_program>:
 d4a:	ff cf       	rjmp	.-2      	; 0xd4a <__stop_program>
